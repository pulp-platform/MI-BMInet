
validation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000150c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002dd8  08015254  08015254  00025254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801802c  0801802c  00030a40  2**0
                  CONTENTS
  4 .ARM          00000008  0801802c  0801802c  0002802c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018034  08018034  00030a40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018034  08018034  00028034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018038  08018038  00028038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a40  20000000  0801803c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013838  20000a40  08018a7c  00030a40  2**3
                  ALLOC
 10 ._user_heap_stack 00001000  20014278  08018a7c  00034278  2**0
                  ALLOC
 11 .ARM.attributes 00000034  00000000  00000000  00030a40  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019e81  00000000  00000000  00030a74  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003755  00000000  00000000  0004a8f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001030  00000000  00000000  0004e050  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f28  00000000  00000000  0004f080  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002aa0f  00000000  00000000  0004ffa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f832  00000000  00000000  0007a9b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fa297  00000000  00000000  0008a1e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000977c  00000000  00000000  00184480  2**0
                  CONTENTS, READONLY
 20 .iar.rtmodel  00000381  00000000  00000000  0018dbfc  2**0
                  CONTENTS, READONLY
 21 .iar_vfe_header 00000038  00000000  00000000  0018df80  2**2
                  CONTENTS, READONLY
 22 .debug_frame  0000a6c4  00000000  00000000  0018dfb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000a40 	.word	0x20000a40
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801523c 	.word	0x0801523c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000a44 	.word	0x20000a44
 80001cc:	0801523c 	.word	0x0801523c

080001d0 <ai_inspector_default_config>:
 80001d0:	b470      	push	{r4, r5, r6}
 80001d2:	b084      	sub	sp, #16
 80001d4:	4669      	mov	r1, sp
 80001d6:	2200      	movs	r2, #0
 80001d8:	2300      	movs	r3, #0
 80001da:	2400      	movs	r4, #0
 80001dc:	2500      	movs	r5, #0
 80001de:	e881 003c 	stmia.w	r1, {r2, r3, r4, r5}
 80001e2:	2100      	movs	r1, #0
 80001e4:	f041 0101 	orr.w	r1, r1, #1
 80001e8:	f88d 1000 	strb.w	r1, [sp]
 80001ec:	466a      	mov	r2, sp
 80001ee:	e892 0078 	ldmia.w	r2, {r3, r4, r5, r6}
 80001f2:	e880 0078 	stmia.w	r0, {r3, r4, r5, r6}
 80001f6:	b004      	add	sp, #16
 80001f8:	bc70      	pop	{r4, r5, r6}
 80001fa:	4770      	bx	lr

080001fc <ai_inspector_create>:
 80001fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80001fe:	0004      	movs	r4, r0
 8000200:	b081      	sub	sp, #4
 8000202:	bf08      	it	eq
 8000204:	2000      	moveq	r0, #0
 8000206:	d026      	beq.n	8000256 <ai_inspector_create+0x5a>
 8000208:	4814      	ldr	r0, [pc, #80]	; (800025c <.text_6>)
 800020a:	2200      	movs	r2, #0
 800020c:	2300      	movs	r3, #0
 800020e:	2500      	movs	r5, #0
 8000210:	c02c      	stmia	r0!, {r2, r3, r5}
 8000212:	c02c      	stmia	r0!, {r2, r3, r5}
 8000214:	c02c      	stmia	r0!, {r2, r3, r5}
 8000216:	3824      	subs	r0, #36	; 0x24
 8000218:	2601      	movs	r6, #1
 800021a:	f100 0218 	add.w	r2, r0, #24
 800021e:	f100 0318 	add.w	r3, r0, #24
 8000222:	7286      	strb	r6, [r0, #10]
 8000224:	8406      	strh	r6, [r0, #32]
 8000226:	6182      	str	r2, [r0, #24]
 8000228:	61c3      	str	r3, [r0, #28]
 800022a:	b131      	cbz	r1, 800023a <ai_inspector_create+0x3e>
 800022c:	780a      	ldrb	r2, [r1, #0]
 800022e:	784b      	ldrb	r3, [r1, #1]
 8000230:	788d      	ldrb	r5, [r1, #2]
 8000232:	684e      	ldr	r6, [r1, #4]
 8000234:	688f      	ldr	r7, [r1, #8]
 8000236:	68c9      	ldr	r1, [r1, #12]
 8000238:	e003      	b.n	8000242 <ai_inspector_create+0x46>
 800023a:	2201      	movs	r2, #1
 800023c:	2300      	movs	r3, #0
 800023e:	2600      	movs	r6, #0
 8000240:	2700      	movs	r7, #0
 8000242:	7202      	strb	r2, [r0, #8]
 8000244:	7243      	strb	r3, [r0, #9]
 8000246:	6141      	str	r1, [r0, #20]
 8000248:	7285      	strb	r5, [r0, #10]
 800024a:	60c6      	str	r6, [r0, #12]
 800024c:	6107      	str	r7, [r0, #16]
 800024e:	f000 fa28 	bl	80006a2 <ai_platform_context_release>
 8000252:	6020      	str	r0, [r4, #0]
 8000254:	2001      	movs	r0, #1
 8000256:	b001      	add	sp, #4
 8000258:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800025c <.text_6>:
 800025c:	20000a5c 	.word	0x20000a5c

08000260 <ai_inspector_destroy>:
 8000260:	b570      	push	{r4, r5, r6, lr}
 8000262:	f000 fa00 	bl	8000666 <ai_platform_context_acquire>
 8000266:	0004      	movs	r4, r0
 8000268:	d101      	bne.n	800026e <ai_inspector_destroy+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd70      	pop	{r4, r5, r6, pc}
 800026e:	69a0      	ldr	r0, [r4, #24]
 8000270:	f1a0 053c 	sub.w	r5, r0, #60	; 0x3c
 8000274:	f104 0218 	add.w	r2, r4, #24
 8000278:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 800027a:	4290      	cmp	r0, r2
 800027c:	f1a1 063c 	sub.w	r6, r1, #60	; 0x3c
 8000280:	d015      	beq.n	80002ae <ai_inspector_destroy+0x4e>
 8000282:	6828      	ldr	r0, [r5, #0]
 8000284:	f001 faeb 	bl	800185e <ai_network_inspect_destroy>
 8000288:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 800028a:	6c28      	ldr	r0, [r5, #64]	; 0x40
 800028c:	6048      	str	r0, [r1, #4]
 800028e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000290:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8000292:	6008      	str	r0, [r1, #0]
 8000294:	4628      	mov	r0, r5
 8000296:	f000 fdca 	bl	8000e2e <core_mem_free>
 800029a:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 800029c:	f104 0218 	add.w	r2, r4, #24
 80002a0:	4635      	mov	r5, r6
 80002a2:	f105 013c 	add.w	r1, r5, #60	; 0x3c
 80002a6:	4291      	cmp	r1, r2
 80002a8:	f1a0 063c 	sub.w	r6, r0, #60	; 0x3c
 80002ac:	d1e9      	bne.n	8000282 <ai_inspector_destroy+0x22>
 80002ae:	2001      	movs	r0, #1
 80002b0:	bd70      	pop	{r4, r5, r6, pc}

080002b2 <ai_inspector_bind_network>:
 80002b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80002b6:	460c      	mov	r4, r1
 80002b8:	f000 f9d5 	bl	8000666 <ai_platform_context_acquire>
 80002bc:	0005      	movs	r5, r0
 80002be:	bf18      	it	ne
 80002c0:	2c00      	cmpne	r4, #0
 80002c2:	d033      	beq.n	800032c <ai_inspector_bind_network+0x7a>
 80002c4:	6820      	ldr	r0, [r4, #0]
 80002c6:	b388      	cbz	r0, 800032c <ai_inspector_bind_network+0x7a>
 80002c8:	2044      	movs	r0, #68	; 0x44
 80002ca:	f000 fda3 	bl	8000e14 <core_mem_alloc>
 80002ce:	0006      	movs	r6, r0
 80002d0:	d02c      	beq.n	800032c <ai_inspector_bind_network+0x7a>
 80002d2:	8c28      	ldrh	r0, [r5, #32]
 80002d4:	1c41      	adds	r1, r0, #1
 80002d6:	8429      	strh	r1, [r5, #32]
 80002d8:	8730      	strh	r0, [r6, #56]	; 0x38
 80002da:	f105 0118 	add.w	r1, r5, #24
 80002de:	e8b4 518d 	ldmia.w	r4!, {r0, r2, r3, r7, r8, ip, lr}
 80002e2:	e8a6 518d 	stmia.w	r6!, {r0, r2, r3, r7, r8, ip, lr}
 80002e6:	e8b4 518d 	ldmia.w	r4!, {r0, r2, r3, r7, r8, ip, lr}
 80002ea:	e8a6 518d 	stmia.w	r6!, {r0, r2, r3, r7, r8, ip, lr}
 80002ee:	3e38      	subs	r6, #56	; 0x38
 80002f0:	f106 043c 	add.w	r4, r6, #60	; 0x3c
 80002f4:	6024      	str	r4, [r4, #0]
 80002f6:	6434      	str	r4, [r6, #64]	; 0x40
 80002f8:	69a8      	ldr	r0, [r5, #24]
 80002fa:	6020      	str	r0, [r4, #0]
 80002fc:	6061      	str	r1, [r4, #4]
 80002fe:	6044      	str	r4, [r0, #4]
 8000300:	61ac      	str	r4, [r5, #24]
 8000302:	f105 0108 	add.w	r1, r5, #8
 8000306:	6830      	ldr	r0, [r6, #0]
 8000308:	f001 f9d0 	bl	80016ac <ai_network_inspect_init>
 800030c:	b110      	cbz	r0, 8000314 <ai_inspector_bind_network+0x62>
 800030e:	8f30      	ldrh	r0, [r6, #56]	; 0x38
 8000310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000314:	6821      	ldr	r1, [r4, #0]
 8000316:	6c30      	ldr	r0, [r6, #64]	; 0x40
 8000318:	6048      	str	r0, [r1, #4]
 800031a:	6c30      	ldr	r0, [r6, #64]	; 0x40
 800031c:	6822      	ldr	r2, [r4, #0]
 800031e:	6002      	str	r2, [r0, #0]
 8000320:	4630      	mov	r0, r6
 8000322:	f000 fd84 	bl	8000e2e <core_mem_free>
 8000326:	8c28      	ldrh	r0, [r5, #32]
 8000328:	1e41      	subs	r1, r0, #1
 800032a:	8429      	strh	r1, [r5, #32]
 800032c:	2000      	movs	r0, #0
 800032e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000332 <ai_inspector_unbind_network>:
 8000332:	b530      	push	{r4, r5, lr}
 8000334:	b081      	sub	sp, #4
 8000336:	460d      	mov	r5, r1
 8000338:	f000 f995 	bl	8000666 <ai_platform_context_acquire>
 800033c:	2800      	cmp	r0, #0
 800033e:	d03d      	beq.n	80003bc <ai_inspector_unbind_network+0x8a>
 8000340:	0029      	movs	r1, r5
 8000342:	d03b      	beq.n	80003bc <ai_inspector_unbind_network+0x8a>
 8000344:	f850 1f18 	ldr.w	r1, [r0, #24]!
 8000348:	e000      	b.n	800034c <ai_inspector_unbind_network+0x1a>
 800034a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800034c:	f1a1 043c 	sub.w	r4, r1, #60	; 0x3c
 8000350:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 8000354:	4282      	cmp	r2, r0
 8000356:	d031      	beq.n	80003bc <ai_inspector_unbind_network+0x8a>
 8000358:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 800035a:	42a9      	cmp	r1, r5
 800035c:	d01d      	beq.n	800039a <ai_inspector_unbind_network+0x68>
 800035e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000360:	f1a2 043c 	sub.w	r4, r2, #60	; 0x3c
 8000364:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8000368:	4281      	cmp	r1, r0
 800036a:	d027      	beq.n	80003bc <ai_inspector_unbind_network+0x8a>
 800036c:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 800036e:	42aa      	cmp	r2, r5
 8000370:	d013      	beq.n	800039a <ai_inspector_unbind_network+0x68>
 8000372:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8000374:	f1a1 043c 	sub.w	r4, r1, #60	; 0x3c
 8000378:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 800037c:	4282      	cmp	r2, r0
 800037e:	d01d      	beq.n	80003bc <ai_inspector_unbind_network+0x8a>
 8000380:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 8000382:	42a9      	cmp	r1, r5
 8000384:	d009      	beq.n	800039a <ai_inspector_unbind_network+0x68>
 8000386:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000388:	f1a2 043c 	sub.w	r4, r2, #60	; 0x3c
 800038c:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8000390:	4281      	cmp	r1, r0
 8000392:	d013      	beq.n	80003bc <ai_inspector_unbind_network+0x8a>
 8000394:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8000396:	42aa      	cmp	r2, r5
 8000398:	d1d7      	bne.n	800034a <ai_inspector_unbind_network+0x18>
 800039a:	b17c      	cbz	r4, 80003bc <ai_inspector_unbind_network+0x8a>
 800039c:	6820      	ldr	r0, [r4, #0]
 800039e:	f001 fa5e 	bl	800185e <ai_network_inspect_destroy>
 80003a2:	b160      	cbz	r0, 80003be <ai_inspector_unbind_network+0x8c>
 80003a4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80003a6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80003a8:	6048      	str	r0, [r1, #4]
 80003aa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80003ac:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80003ae:	6008      	str	r0, [r1, #0]
 80003b0:	4620      	mov	r0, r4
 80003b2:	f000 fd3c 	bl	8000e2e <core_mem_free>
 80003b6:	2001      	movs	r0, #1
 80003b8:	b001      	add	sp, #4
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	2000      	movs	r0, #0
 80003be:	b001      	add	sp, #4
 80003c0:	bd30      	pop	{r4, r5, pc}

080003c2 <ai_inspector_get_report>:
 80003c2:	b530      	push	{r4, r5, lr}
 80003c4:	b081      	sub	sp, #4
 80003c6:	460d      	mov	r5, r1
 80003c8:	4614      	mov	r4, r2
 80003ca:	f000 f94c 	bl	8000666 <ai_platform_context_acquire>
 80003ce:	2800      	cmp	r0, #0
 80003d0:	bf18      	it	ne
 80003d2:	2c00      	cmpne	r4, #0
 80003d4:	d02f      	beq.n	8000436 <ai_inspector_get_report+0x74>
 80003d6:	f100 0118 	add.w	r1, r0, #24
 80003da:	6808      	ldr	r0, [r1, #0]
 80003dc:	e000      	b.n	80003e0 <ai_inspector_get_report+0x1e>
 80003de:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80003e0:	383c      	subs	r0, #60	; 0x3c
 80003e2:	f100 023c 	add.w	r2, r0, #60	; 0x3c
 80003e6:	428a      	cmp	r2, r1
 80003e8:	d025      	beq.n	8000436 <ai_inspector_get_report+0x74>
 80003ea:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 80003ec:	42ab      	cmp	r3, r5
 80003ee:	d01a      	beq.n	8000426 <ai_inspector_get_report+0x64>
 80003f0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80003f2:	383c      	subs	r0, #60	; 0x3c
 80003f4:	f100 023c 	add.w	r2, r0, #60	; 0x3c
 80003f8:	428a      	cmp	r2, r1
 80003fa:	d01c      	beq.n	8000436 <ai_inspector_get_report+0x74>
 80003fc:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 80003fe:	42ab      	cmp	r3, r5
 8000400:	d011      	beq.n	8000426 <ai_inspector_get_report+0x64>
 8000402:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8000404:	383c      	subs	r0, #60	; 0x3c
 8000406:	f100 023c 	add.w	r2, r0, #60	; 0x3c
 800040a:	428a      	cmp	r2, r1
 800040c:	d013      	beq.n	8000436 <ai_inspector_get_report+0x74>
 800040e:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8000410:	42ab      	cmp	r3, r5
 8000412:	d008      	beq.n	8000426 <ai_inspector_get_report+0x64>
 8000414:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8000416:	383c      	subs	r0, #60	; 0x3c
 8000418:	f100 023c 	add.w	r2, r0, #60	; 0x3c
 800041c:	428a      	cmp	r2, r1
 800041e:	d00a      	beq.n	8000436 <ai_inspector_get_report+0x74>
 8000420:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8000422:	42ab      	cmp	r3, r5
 8000424:	d1db      	bne.n	80003de <ai_inspector_get_report+0x1c>
 8000426:	b130      	cbz	r0, 8000436 <ai_inspector_get_report+0x74>
 8000428:	6800      	ldr	r0, [r0, #0]
 800042a:	4621      	mov	r1, r4
 800042c:	b001      	add	sp, #4
 800042e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000432:	f001 b9fc 	b.w	800182e <ai_network_inspect_get_report>
 8000436:	2000      	movs	r0, #0
 8000438:	b001      	add	sp, #4
 800043a:	bd30      	pop	{r4, r5, pc}

0800043c <ai_inspector_run>:
 800043c:	b570      	push	{r4, r5, r6, lr}
 800043e:	460e      	mov	r6, r1
 8000440:	4614      	mov	r4, r2
 8000442:	461d      	mov	r5, r3
 8000444:	f000 f90f 	bl	8000666 <ai_platform_context_acquire>
 8000448:	2800      	cmp	r0, #0
 800044a:	bf18      	it	ne
 800044c:	2c00      	cmpne	r4, #0
 800044e:	d02f      	beq.n	80004b0 <ai_inspector_run+0x74>
 8000450:	f100 0118 	add.w	r1, r0, #24
 8000454:	6808      	ldr	r0, [r1, #0]
 8000456:	e000      	b.n	800045a <ai_inspector_run+0x1e>
 8000458:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800045a:	383c      	subs	r0, #60	; 0x3c
 800045c:	f100 023c 	add.w	r2, r0, #60	; 0x3c
 8000460:	428a      	cmp	r2, r1
 8000462:	d025      	beq.n	80004b0 <ai_inspector_run+0x74>
 8000464:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8000466:	42b3      	cmp	r3, r6
 8000468:	d01a      	beq.n	80004a0 <ai_inspector_run+0x64>
 800046a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800046c:	383c      	subs	r0, #60	; 0x3c
 800046e:	f100 023c 	add.w	r2, r0, #60	; 0x3c
 8000472:	428a      	cmp	r2, r1
 8000474:	d01c      	beq.n	80004b0 <ai_inspector_run+0x74>
 8000476:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8000478:	42b3      	cmp	r3, r6
 800047a:	d011      	beq.n	80004a0 <ai_inspector_run+0x64>
 800047c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800047e:	383c      	subs	r0, #60	; 0x3c
 8000480:	f100 023c 	add.w	r2, r0, #60	; 0x3c
 8000484:	428a      	cmp	r2, r1
 8000486:	d013      	beq.n	80004b0 <ai_inspector_run+0x74>
 8000488:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 800048a:	42b3      	cmp	r3, r6
 800048c:	d008      	beq.n	80004a0 <ai_inspector_run+0x64>
 800048e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8000490:	383c      	subs	r0, #60	; 0x3c
 8000492:	f100 023c 	add.w	r2, r0, #60	; 0x3c
 8000496:	428a      	cmp	r2, r1
 8000498:	d00a      	beq.n	80004b0 <ai_inspector_run+0x74>
 800049a:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 800049c:	42b3      	cmp	r3, r6
 800049e:	d1db      	bne.n	8000458 <ai_inspector_run+0x1c>
 80004a0:	b130      	cbz	r0, 80004b0 <ai_inspector_run+0x74>
 80004a2:	6800      	ldr	r0, [r0, #0]
 80004a4:	462a      	mov	r2, r5
 80004a6:	4621      	mov	r1, r4
 80004a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80004ac:	f000 baac 	b.w	8000a08 <ai_platform_network_process>
 80004b0:	2000      	movs	r0, #0
 80004b2:	bd70      	pop	{r4, r5, r6, pc}

080004b4 <_ai_platform_get_io_buffers_info>:
 80004b4:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80004b8:	2500      	movs	r5, #0
 80004ba:	46aa      	mov	sl, r5
 80004bc:	b082      	sub	sp, #8
 80004be:	4607      	mov	r7, r0
 80004c0:	46ab      	mov	fp, r5
 80004c2:	46d0      	mov	r8, sl
 80004c4:	46d1      	mov	r9, sl
 80004c6:	e028      	b.n	800051a <_ai_platform_get_io_buffers_info+0x66>
 80004c8:	2000      	movs	r0, #0
 80004ca:	e01c      	b.n	8000506 <_ai_platform_get_io_buffers_info+0x52>
 80004cc:	f850 400a 	ldr.w	r4, [r0, sl]
 80004d0:	b364      	cbz	r4, 800052c <_ai_platform_get_io_buffers_info+0x78>
 80004d2:	68b8      	ldr	r0, [r7, #8]
 80004d4:	6841      	ldr	r1, [r0, #4]
 80004d6:	6880      	ldr	r0, [r0, #8]
 80004d8:	4440      	add	r0, r8
 80004da:	eb01 0609 	add.w	r6, r1, r9
 80004de:	9000      	str	r0, [sp, #0]
 80004e0:	69a1      	ldr	r1, [r4, #24]
 80004e2:	6808      	ldr	r0, [r1, #0]
 80004e4:	f006 fc9e 	bl	8006e24 <ai_array_to_buffer_fmt>
 80004e8:	6030      	str	r0, [r6, #0]
 80004ea:	2101      	movs	r1, #1
 80004ec:	80b1      	strh	r1, [r6, #4]
 80004ee:	68e0      	ldr	r0, [r4, #12]
 80004f0:	68c1      	ldr	r1, [r0, #12]
 80004f2:	80f1      	strh	r1, [r6, #6]
 80004f4:	6882      	ldr	r2, [r0, #8]
 80004f6:	8132      	strh	r2, [r6, #8]
 80004f8:	6840      	ldr	r0, [r0, #4]
 80004fa:	60f0      	str	r0, [r6, #12]
 80004fc:	69a1      	ldr	r1, [r4, #24]
 80004fe:	688a      	ldr	r2, [r1, #8]
 8000500:	6132      	str	r2, [r6, #16]
 8000502:	9800      	ldr	r0, [sp, #0]
 8000504:	b9e0      	cbnz	r0, 8000540 <_ai_platform_get_io_buffers_info+0x8c>
 8000506:	6170      	str	r0, [r6, #20]
 8000508:	1c6d      	adds	r5, r5, #1
 800050a:	f10b 0b01 	add.w	fp, fp, #1
 800050e:	f109 0918 	add.w	r9, r9, #24
 8000512:	f108 0808 	add.w	r8, r8, #8
 8000516:	f10a 0a04 	add.w	sl, sl, #4
 800051a:	2f00      	cmp	r7, #0
 800051c:	bf14      	ite	ne
 800051e:	8838      	ldrhne	r0, [r7, #0]
 8000520:	2000      	moveq	r0, #0
 8000522:	4583      	cmp	fp, r0
 8000524:	d202      	bcs.n	800052c <_ai_platform_get_io_buffers_info+0x78>
 8000526:	6878      	ldr	r0, [r7, #4]
 8000528:	2800      	cmp	r0, #0
 800052a:	d1cf      	bne.n	80004cc <_ai_platform_get_io_buffers_info+0x18>
 800052c:	b2a8      	uxth	r0, r5
 800052e:	b118      	cbz	r0, 8000538 <_ai_platform_get_io_buffers_info+0x84>
 8000530:	68b9      	ldr	r1, [r7, #8]
 8000532:	9802      	ldr	r0, [sp, #8]
 8000534:	684a      	ldr	r2, [r1, #4]
 8000536:	6002      	str	r2, [r0, #0]
 8000538:	b2a8      	uxth	r0, r5
 800053a:	b003      	add	sp, #12
 800053c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000540:	9900      	ldr	r1, [sp, #0]
 8000542:	2000      	movs	r0, #0
 8000544:	6008      	str	r0, [r1, #0]
 8000546:	9a00      	ldr	r2, [sp, #0]
 8000548:	6820      	ldr	r0, [r4, #0]
 800054a:	6050      	str	r0, [r2, #4]
 800054c:	2800      	cmp	r0, #0
 800054e:	bf1c      	itt	ne
 8000550:	8840      	ldrhne	r0, [r0, #2]
 8000552:	2800      	cmpne	r0, #0
 8000554:	d0b8      	beq.n	80004c8 <_ai_platform_get_io_buffers_info+0x14>
 8000556:	9800      	ldr	r0, [sp, #0]
 8000558:	2101      	movs	r1, #1
 800055a:	6001      	str	r1, [r0, #0]
 800055c:	9800      	ldr	r0, [sp, #0]
 800055e:	e7d2      	b.n	8000506 <_ai_platform_get_io_buffers_info+0x52>

08000560 <_platform_network_state_setup>:
 8000560:	b430      	push	{r4, r5}
 8000562:	68d3      	ldr	r3, [r2, #12]
 8000564:	6955      	ldr	r5, [r2, #20]
 8000566:	68dc      	ldr	r4, [r3, #12]
 8000568:	68eb      	ldr	r3, [r5, #12]
 800056a:	435c      	muls	r4, r3
 800056c:	6084      	str	r4, [r0, #8]
 800056e:	888d      	ldrh	r5, [r1, #4]
 8000570:	436c      	muls	r4, r5
 8000572:	60c4      	str	r4, [r0, #12]
 8000574:	6909      	ldr	r1, [r1, #16]
 8000576:	68c3      	ldr	r3, [r0, #12]
 8000578:	6041      	str	r1, [r0, #4]
 800057a:	4419      	add	r1, r3
 800057c:	6001      	str	r1, [r0, #0]
 800057e:	6992      	ldr	r2, [r2, #24]
 8000580:	6814      	ldr	r4, [r2, #0]
 8000582:	00a1      	lsls	r1, r4, #2
 8000584:	d407      	bmi.n	8000596 <_platform_network_state_setup+0x36>
 8000586:	6894      	ldr	r4, [r2, #8]
 8000588:	68d1      	ldr	r1, [r2, #12]
 800058a:	6843      	ldr	r3, [r0, #4]
 800058c:	1a64      	subs	r4, r4, r1
 800058e:	1919      	adds	r1, r3, r4
 8000590:	6091      	str	r1, [r2, #8]
 8000592:	6840      	ldr	r0, [r0, #4]
 8000594:	60d0      	str	r0, [r2, #12]
 8000596:	bc30      	pop	{r4, r5}
 8000598:	4770      	bx	lr

0800059a <ai_platform_runtime_get_revision>:
 800059a:	f8df 0814 	ldr.w	r0, [pc, #2068]	; 8000db0 <.text_18>
 800059e:	6801      	ldr	r1, [r0, #0]
 80005a0:	0849      	lsrs	r1, r1, #1
 80005a2:	0049      	lsls	r1, r1, #1
 80005a4:	6001      	str	r1, [r0, #0]
 80005a6:	2001      	movs	r0, #1
 80005a8:	f8df 1808 	ldr.w	r1, [pc, #2056]	; 8000db4 <.text_19>
 80005ac:	6088      	str	r0, [r1, #8]
 80005ae:	6888      	ldr	r0, [r1, #8]
 80005b0:	2800      	cmp	r0, #0
 80005b2:	d1fc      	bne.n	80005ae <ai_platform_runtime_get_revision+0x14>
 80005b4:	f8df 2800 	ldr.w	r2, [pc, #2048]	; 8000db8 <.text_20>
 80005b8:	600a      	str	r2, [r1, #0]
 80005ba:	6808      	ldr	r0, [r1, #0]
 80005bc:	f8df 17fc 	ldr.w	r1, [pc, #2044]	; 8000dbc <.text_21>
 80005c0:	4288      	cmp	r0, r1
 80005c2:	d000      	beq.n	80005c6 <ai_platform_runtime_get_revision+0x2c>
 80005c4:	e7fe      	b.n	80005c4 <ai_platform_runtime_get_revision+0x2a>
 80005c6:	a0ad      	add	r0, pc, #692	; (adr r0, 800087c <.text_13>)
 80005c8:	4770      	bx	lr

080005ca <ai_platform_runtime_get_version>:
 80005ca:	f8df 07e4 	ldr.w	r0, [pc, #2020]	; 8000db0 <.text_18>
 80005ce:	6801      	ldr	r1, [r0, #0]
 80005d0:	0849      	lsrs	r1, r1, #1
 80005d2:	0049      	lsls	r1, r1, #1
 80005d4:	6001      	str	r1, [r0, #0]
 80005d6:	2001      	movs	r0, #1
 80005d8:	f8df 17d8 	ldr.w	r1, [pc, #2008]	; 8000db4 <.text_19>
 80005dc:	6088      	str	r0, [r1, #8]
 80005de:	6888      	ldr	r0, [r1, #8]
 80005e0:	2800      	cmp	r0, #0
 80005e2:	d1fc      	bne.n	80005de <ai_platform_runtime_get_version+0x14>
 80005e4:	f8df 27d0 	ldr.w	r2, [pc, #2000]	; 8000db8 <.text_20>
 80005e8:	600a      	str	r2, [r1, #0]
 80005ea:	6808      	ldr	r0, [r1, #0]
 80005ec:	f8df 17cc 	ldr.w	r1, [pc, #1996]	; 8000dbc <.text_21>
 80005f0:	4288      	cmp	r0, r1
 80005f2:	d000      	beq.n	80005f6 <ai_platform_runtime_get_version+0x2c>
 80005f4:	e7fe      	b.n	80005f4 <ai_platform_runtime_get_version+0x2a>
 80005f6:	f20f 72d0 	addw	r2, pc, #2000	; 0x7d0
 80005fa:	6810      	ldr	r0, [r2, #0]
 80005fc:	4770      	bx	lr

080005fe <ai_platform_api_get_version>:
 80005fe:	f8df 07b0 	ldr.w	r0, [pc, #1968]	; 8000db0 <.text_18>
 8000602:	6801      	ldr	r1, [r0, #0]
 8000604:	0849      	lsrs	r1, r1, #1
 8000606:	0049      	lsls	r1, r1, #1
 8000608:	6001      	str	r1, [r0, #0]
 800060a:	2001      	movs	r0, #1
 800060c:	f8df 17a4 	ldr.w	r1, [pc, #1956]	; 8000db4 <.text_19>
 8000610:	6088      	str	r0, [r1, #8]
 8000612:	6888      	ldr	r0, [r1, #8]
 8000614:	2800      	cmp	r0, #0
 8000616:	d1fc      	bne.n	8000612 <ai_platform_api_get_version+0x14>
 8000618:	f8df 279c 	ldr.w	r2, [pc, #1948]	; 8000db8 <.text_20>
 800061c:	600a      	str	r2, [r1, #0]
 800061e:	6808      	ldr	r0, [r1, #0]
 8000620:	f8df 1798 	ldr.w	r1, [pc, #1944]	; 8000dbc <.text_21>
 8000624:	4288      	cmp	r0, r1
 8000626:	d000      	beq.n	800062a <ai_platform_api_get_version+0x2c>
 8000628:	e7fe      	b.n	8000628 <ai_platform_api_get_version+0x2a>
 800062a:	f20f 72a0 	addw	r2, pc, #1952	; 0x7a0
 800062e:	6810      	ldr	r0, [r2, #0]
 8000630:	4770      	bx	lr

08000632 <ai_platform_interface_api_get_version>:
 8000632:	f8df 077c 	ldr.w	r0, [pc, #1916]	; 8000db0 <.text_18>
 8000636:	6801      	ldr	r1, [r0, #0]
 8000638:	0849      	lsrs	r1, r1, #1
 800063a:	0049      	lsls	r1, r1, #1
 800063c:	6001      	str	r1, [r0, #0]
 800063e:	2001      	movs	r0, #1
 8000640:	f8df 1770 	ldr.w	r1, [pc, #1904]	; 8000db4 <.text_19>
 8000644:	6088      	str	r0, [r1, #8]
 8000646:	6888      	ldr	r0, [r1, #8]
 8000648:	2800      	cmp	r0, #0
 800064a:	d1fc      	bne.n	8000646 <ai_platform_interface_api_get_version+0x14>
 800064c:	f8df 2768 	ldr.w	r2, [pc, #1896]	; 8000db8 <.text_20>
 8000650:	600a      	str	r2, [r1, #0]
 8000652:	6808      	ldr	r0, [r1, #0]
 8000654:	f8df 1764 	ldr.w	r1, [pc, #1892]	; 8000dbc <.text_21>
 8000658:	4288      	cmp	r0, r1
 800065a:	d000      	beq.n	800065e <ai_platform_interface_api_get_version+0x2c>
 800065c:	e7fe      	b.n	800065c <ai_platform_interface_api_get_version+0x2a>
 800065e:	f20f 7270 	addw	r2, pc, #1904	; 0x770
 8000662:	6810      	ldr	r0, [r2, #0]
 8000664:	4770      	bx	lr

08000666 <ai_platform_context_acquire>:
 8000666:	b120      	cbz	r0, 8000672 <ai_platform_context_acquire+0xc>
 8000668:	6801      	ldr	r1, [r0, #0]
 800066a:	f8df 2754 	ldr.w	r2, [pc, #1876]	; 8000dc0 <.text_22>
 800066e:	4291      	cmp	r1, r2
 8000670:	d000      	beq.n	8000674 <ai_platform_context_acquire+0xe>
 8000672:	2000      	movs	r0, #0
 8000674:	f8df 1738 	ldr.w	r1, [pc, #1848]	; 8000db0 <.text_18>
 8000678:	680a      	ldr	r2, [r1, #0]
 800067a:	0852      	lsrs	r2, r2, #1
 800067c:	0052      	lsls	r2, r2, #1
 800067e:	600a      	str	r2, [r1, #0]
 8000680:	2101      	movs	r1, #1
 8000682:	f8df 2730 	ldr.w	r2, [pc, #1840]	; 8000db4 <.text_19>
 8000686:	6091      	str	r1, [r2, #8]
 8000688:	6891      	ldr	r1, [r2, #8]
 800068a:	2900      	cmp	r1, #0
 800068c:	d1fc      	bne.n	8000688 <ai_platform_context_acquire+0x22>
 800068e:	f8df 3728 	ldr.w	r3, [pc, #1832]	; 8000db8 <.text_20>
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	6811      	ldr	r1, [r2, #0]
 8000696:	f8df 2724 	ldr.w	r2, [pc, #1828]	; 8000dbc <.text_21>
 800069a:	4291      	cmp	r1, r2
 800069c:	d000      	beq.n	80006a0 <ai_platform_context_acquire+0x3a>
 800069e:	e7fe      	b.n	800069e <ai_platform_context_acquire+0x38>
 80006a0:	4770      	bx	lr

080006a2 <ai_platform_context_release>:
 80006a2:	f8df 171c 	ldr.w	r1, [pc, #1820]	; 8000dc0 <.text_22>
 80006a6:	6001      	str	r1, [r0, #0]
 80006a8:	4770      	bx	lr

080006aa <ai_platform_network_get_error>:
 80006aa:	b120      	cbz	r0, 80006b6 <ai_platform_network_get_error+0xc>
 80006ac:	6801      	ldr	r1, [r0, #0]
 80006ae:	f8df 2710 	ldr.w	r2, [pc, #1808]	; 8000dc0 <.text_22>
 80006b2:	4291      	cmp	r1, r2
 80006b4:	d000      	beq.n	80006b8 <ai_platform_network_get_error+0xe>
 80006b6:	2000      	movs	r0, #0
 80006b8:	f8df 16f4 	ldr.w	r1, [pc, #1780]	; 8000db0 <.text_18>
 80006bc:	680a      	ldr	r2, [r1, #0]
 80006be:	0852      	lsrs	r2, r2, #1
 80006c0:	0052      	lsls	r2, r2, #1
 80006c2:	600a      	str	r2, [r1, #0]
 80006c4:	2101      	movs	r1, #1
 80006c6:	f8df 26ec 	ldr.w	r2, [pc, #1772]	; 8000db4 <.text_19>
 80006ca:	6091      	str	r1, [r2, #8]
 80006cc:	6891      	ldr	r1, [r2, #8]
 80006ce:	2900      	cmp	r1, #0
 80006d0:	d1fc      	bne.n	80006cc <ai_platform_network_get_error+0x22>
 80006d2:	f8df 36e4 	ldr.w	r3, [pc, #1764]	; 8000db8 <.text_20>
 80006d6:	6013      	str	r3, [r2, #0]
 80006d8:	6811      	ldr	r1, [r2, #0]
 80006da:	f8df 26e0 	ldr.w	r2, [pc, #1760]	; 8000dbc <.text_21>
 80006de:	4291      	cmp	r1, r2
 80006e0:	d000      	beq.n	80006e4 <ai_platform_network_get_error+0x3a>
 80006e2:	e7fe      	b.n	80006e2 <ai_platform_network_get_error+0x38>
 80006e4:	2800      	cmp	r0, #0
 80006e6:	bf1c      	itt	ne
 80006e8:	3010      	addne	r0, #16
 80006ea:	f000 bb83 	bne.w	8000df4 <core_get_error>
 80006ee:	f20f 60f4 	addw	r0, pc, #1780	; 0x6f4
 80006f2:	6800      	ldr	r0, [r0, #0]
 80006f4:	4770      	bx	lr

080006f6 <ai_platform_network_set_error>:
 80006f6:	2800      	cmp	r0, #0
 80006f8:	bf1c      	itt	ne
 80006fa:	3010      	addne	r0, #16
 80006fc:	f000 bb7f 	bne.w	8000dfe <core_set_error>
 8000700:	4770      	bx	lr

08000702 <ai_platform_api_get_network_report>:
 8000702:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000706:	ea5f 0900 	movs.w	r9, r0
 800070a:	b081      	sub	sp, #4
 800070c:	460c      	mov	r4, r1
 800070e:	d005      	beq.n	800071c <ai_platform_api_get_network_report+0x1a>
 8000710:	f8d9 0000 	ldr.w	r0, [r9]
 8000714:	f8df 16a8 	ldr.w	r1, [pc, #1704]	; 8000dc0 <.text_22>
 8000718:	4288      	cmp	r0, r1
 800071a:	d001      	beq.n	8000720 <ai_platform_api_get_network_report+0x1e>
 800071c:	f04f 0900 	mov.w	r9, #0
 8000720:	f8df 568c 	ldr.w	r5, [pc, #1676]	; 8000db0 <.text_18>
 8000724:	f8df 668c 	ldr.w	r6, [pc, #1676]	; 8000db4 <.text_19>
 8000728:	6828      	ldr	r0, [r5, #0]
 800072a:	0840      	lsrs	r0, r0, #1
 800072c:	0040      	lsls	r0, r0, #1
 800072e:	6028      	str	r0, [r5, #0]
 8000730:	2101      	movs	r1, #1
 8000732:	60b1      	str	r1, [r6, #8]
 8000734:	68b0      	ldr	r0, [r6, #8]
 8000736:	2800      	cmp	r0, #0
 8000738:	d1fc      	bne.n	8000734 <ai_platform_api_get_network_report+0x32>
 800073a:	f8df 767c 	ldr.w	r7, [pc, #1660]	; 8000db8 <.text_20>
 800073e:	f8df 867c 	ldr.w	r8, [pc, #1660]	; 8000dbc <.text_21>
 8000742:	6037      	str	r7, [r6, #0]
 8000744:	6830      	ldr	r0, [r6, #0]
 8000746:	4540      	cmp	r0, r8
 8000748:	d000      	beq.n	800074c <ai_platform_api_get_network_report+0x4a>
 800074a:	e7fe      	b.n	800074a <ai_platform_api_get_network_report+0x48>
 800074c:	f1b9 0f00 	cmp.w	r9, #0
 8000750:	bf18      	it	ne
 8000752:	2c00      	cmpne	r4, #0
 8000754:	d034      	beq.n	80007c0 <ai_platform_api_get_network_report+0xbe>
 8000756:	2000      	movs	r0, #0
 8000758:	66e0      	str	r0, [r4, #108]	; 0x6c
 800075a:	f8d9 2050 	ldr.w	r2, [r9, #80]	; 0x50
 800075e:	b152      	cbz	r2, 8000776 <ai_platform_api_get_network_report+0x74>
 8000760:	e000      	b.n	8000764 <ai_platform_api_get_network_report+0x62>
 8000762:	4602      	mov	r2, r0
 8000764:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8000766:	1c49      	adds	r1, r1, #1
 8000768:	66e1      	str	r1, [r4, #108]	; 0x6c
 800076a:	68d0      	ldr	r0, [r2, #12]
 800076c:	4282      	cmp	r2, r0
 800076e:	bf18      	it	ne
 8000770:	2800      	cmpne	r0, #0
 8000772:	d1f6      	bne.n	8000762 <ai_platform_api_get_network_report+0x60>
 8000774:	b911      	cbnz	r1, 800077c <ai_platform_api_get_network_report+0x7a>
 8000776:	2218      	movs	r2, #24
 8000778:	2111      	movs	r1, #17
 800077a:	e01d      	b.n	80007b8 <ai_platform_api_get_network_report+0xb6>
 800077c:	f8b9 0048 	ldrh.w	r0, [r9, #72]	; 0x48
 8000780:	b108      	cbz	r0, 8000786 <ai_platform_api_get_network_report+0x84>
 8000782:	f8d9 004c 	ldr.w	r0, [r9, #76]	; 0x4c
 8000786:	f104 0134 	add.w	r1, r4, #52	; 0x34
 800078a:	f7ff fe93 	bl	80004b4 <_ai_platform_get_io_buffers_info>
 800078e:	8620      	strh	r0, [r4, #48]	; 0x30
 8000790:	b910      	cbnz	r0, 8000798 <ai_platform_api_get_network_report+0x96>
 8000792:	2218      	movs	r2, #24
 8000794:	2112      	movs	r1, #18
 8000796:	e00f      	b.n	80007b8 <ai_platform_api_get_network_report+0xb6>
 8000798:	f8b9 0048 	ldrh.w	r0, [r9, #72]	; 0x48
 800079c:	2802      	cmp	r0, #2
 800079e:	bfa6      	itte	ge
 80007a0:	f8d9 004c 	ldrge.w	r0, [r9, #76]	; 0x4c
 80007a4:	300c      	addge	r0, #12
 80007a6:	2000      	movlt	r0, #0
 80007a8:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80007ac:	f7ff fe82 	bl	80004b4 <_ai_platform_get_io_buffers_info>
 80007b0:	8660      	strh	r0, [r4, #50]	; 0x32
 80007b2:	b948      	cbnz	r0, 80007c8 <ai_platform_api_get_network_report+0xc6>
 80007b4:	2218      	movs	r2, #24
 80007b6:	2113      	movs	r1, #19
 80007b8:	f109 0010 	add.w	r0, r9, #16
 80007bc:	f000 fb1f 	bl	8000dfe <core_set_error>
 80007c0:	2000      	movs	r0, #0
 80007c2:	b001      	add	sp, #4
 80007c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80007c8:	f8d9 0004 	ldr.w	r0, [r9, #4]
 80007cc:	6720      	str	r0, [r4, #112]	; 0x70
 80007ce:	f109 0230 	add.w	r2, r9, #48	; 0x30
 80007d2:	e892 5c09 	ldmia.w	r2, {r0, r3, sl, fp, ip, lr}
 80007d6:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 80007da:	f109 0918 	add.w	r9, r9, #24
 80007de:	e881 5c09 	stmia.w	r1, {r0, r3, sl, fp, ip, lr}
 80007e2:	e899 540e 	ldmia.w	r9, {r1, r2, r3, sl, ip, lr}
 80007e6:	f104 0054 	add.w	r0, r4, #84	; 0x54
 80007ea:	e880 540e 	stmia.w	r0, {r1, r2, r3, sl, ip, lr}
 80007ee:	6828      	ldr	r0, [r5, #0]
 80007f0:	0840      	lsrs	r0, r0, #1
 80007f2:	0040      	lsls	r0, r0, #1
 80007f4:	6028      	str	r0, [r5, #0]
 80007f6:	2301      	movs	r3, #1
 80007f8:	60b3      	str	r3, [r6, #8]
 80007fa:	68b0      	ldr	r0, [r6, #8]
 80007fc:	2800      	cmp	r0, #0
 80007fe:	d1fc      	bne.n	80007fa <ai_platform_api_get_network_report+0xf8>
 8000800:	6037      	str	r7, [r6, #0]
 8000802:	6831      	ldr	r1, [r6, #0]
 8000804:	4541      	cmp	r1, r8
 8000806:	d000      	beq.n	800080a <ai_platform_api_get_network_report+0x108>
 8000808:	e7fe      	b.n	8000808 <ai_platform_api_get_network_report+0x106>
 800080a:	a01c      	add	r0, pc, #112	; (adr r0, 800087c <.text_13>)
 800080c:	6120      	str	r0, [r4, #16]
 800080e:	6829      	ldr	r1, [r5, #0]
 8000810:	0849      	lsrs	r1, r1, #1
 8000812:	0049      	lsls	r1, r1, #1
 8000814:	6029      	str	r1, [r5, #0]
 8000816:	60b3      	str	r3, [r6, #8]
 8000818:	68b0      	ldr	r0, [r6, #8]
 800081a:	2800      	cmp	r0, #0
 800081c:	d1fc      	bne.n	8000818 <ai_platform_api_get_network_report+0x116>
 800081e:	6037      	str	r7, [r6, #0]
 8000820:	6831      	ldr	r1, [r6, #0]
 8000822:	4541      	cmp	r1, r8
 8000824:	d000      	beq.n	8000828 <ai_platform_api_get_network_report+0x126>
 8000826:	e7fe      	b.n	8000826 <ai_platform_api_get_network_report+0x124>
 8000828:	f20f 509c 	addw	r0, pc, #1436	; 0x59c
 800082c:	6802      	ldr	r2, [r0, #0]
 800082e:	6162      	str	r2, [r4, #20]
 8000830:	6829      	ldr	r1, [r5, #0]
 8000832:	0849      	lsrs	r1, r1, #1
 8000834:	0049      	lsls	r1, r1, #1
 8000836:	6029      	str	r1, [r5, #0]
 8000838:	60b3      	str	r3, [r6, #8]
 800083a:	68b0      	ldr	r0, [r6, #8]
 800083c:	2800      	cmp	r0, #0
 800083e:	d1fc      	bne.n	800083a <ai_platform_api_get_network_report+0x138>
 8000840:	6037      	str	r7, [r6, #0]
 8000842:	6831      	ldr	r1, [r6, #0]
 8000844:	4541      	cmp	r1, r8
 8000846:	d000      	beq.n	800084a <ai_platform_api_get_network_report+0x148>
 8000848:	e7fe      	b.n	8000848 <ai_platform_api_get_network_report+0x146>
 800084a:	f20f 5080 	addw	r0, pc, #1408	; 0x580
 800084e:	6802      	ldr	r2, [r0, #0]
 8000850:	6262      	str	r2, [r4, #36]	; 0x24
 8000852:	6829      	ldr	r1, [r5, #0]
 8000854:	0849      	lsrs	r1, r1, #1
 8000856:	0049      	lsls	r1, r1, #1
 8000858:	6029      	str	r1, [r5, #0]
 800085a:	60b3      	str	r3, [r6, #8]
 800085c:	68b0      	ldr	r0, [r6, #8]
 800085e:	2800      	cmp	r0, #0
 8000860:	d1fc      	bne.n	800085c <ai_platform_api_get_network_report+0x15a>
 8000862:	6037      	str	r7, [r6, #0]
 8000864:	6831      	ldr	r1, [r6, #0]
 8000866:	4541      	cmp	r1, r8
 8000868:	d000      	beq.n	800086c <ai_platform_api_get_network_report+0x16a>
 800086a:	e7fe      	b.n	800086a <ai_platform_api_get_network_report+0x168>
 800086c:	f20f 5060 	addw	r0, pc, #1376	; 0x560
 8000870:	6802      	ldr	r2, [r0, #0]
 8000872:	62a2      	str	r2, [r4, #40]	; 0x28
 8000874:	2001      	movs	r0, #1
 8000876:	b001      	add	sp, #4
 8000878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800087c <.text_13>:
 800087c:	00000000 	.word	0x00000000

08000880 <ai_platform_network_create>:
 8000880:	b570      	push	{r4, r5, r6, lr}
 8000882:	9d04      	ldr	r5, [sp, #16]
 8000884:	4604      	mov	r4, r0
 8000886:	9805      	ldr	r0, [sp, #20]
 8000888:	b2db      	uxtb	r3, r3
 800088a:	042d      	lsls	r5, r5, #16
 800088c:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
 8000890:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
 8000894:	f20f 5050 	addw	r0, pc, #1360	; 0x550
 8000898:	6806      	ldr	r6, [r0, #0]
 800089a:	f8df 0514 	ldr.w	r0, [pc, #1300]	; 8000db0 <.text_18>
 800089e:	6801      	ldr	r1, [r0, #0]
 80008a0:	0849      	lsrs	r1, r1, #1
 80008a2:	0049      	lsls	r1, r1, #1
 80008a4:	6001      	str	r1, [r0, #0]
 80008a6:	2001      	movs	r0, #1
 80008a8:	f8df 1508 	ldr.w	r1, [pc, #1288]	; 8000db4 <.text_19>
 80008ac:	6088      	str	r0, [r1, #8]
 80008ae:	6888      	ldr	r0, [r1, #8]
 80008b0:	2800      	cmp	r0, #0
 80008b2:	d1fc      	bne.n	80008ae <ai_platform_network_create+0x2e>
 80008b4:	f8df 3500 	ldr.w	r3, [pc, #1280]	; 8000db8 <.text_20>
 80008b8:	600b      	str	r3, [r1, #0]
 80008ba:	6808      	ldr	r0, [r1, #0]
 80008bc:	f8df 14fc 	ldr.w	r1, [pc, #1276]	; 8000dbc <.text_21>
 80008c0:	4288      	cmp	r0, r1
 80008c2:	d000      	beq.n	80008c6 <ai_platform_network_create+0x46>
 80008c4:	e7fe      	b.n	80008c4 <ai_platform_network_create+0x44>
 80008c6:	b91c      	cbnz	r4, 80008d0 <ai_platform_network_create+0x50>
 80008c8:	f20f 5020 	addw	r0, pc, #1312	; 0x520
 80008cc:	6800      	ldr	r0, [r0, #0]
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f8df 14ec 	ldr.w	r1, [pc, #1260]	; 8000dc0 <.text_22>
 80008d4:	6011      	str	r1, [r2, #0]
 80008d6:	6022      	str	r2, [r4, #0]
 80008d8:	f000 fa8a 	bl	8000df0 <core_init>
 80008dc:	b910      	cbnz	r0, 80008e4 <ai_platform_network_create+0x64>
 80008de:	f20f 40f4 	addw	r0, pc, #1268	; 0x4f4
 80008e2:	e00d      	b.n	8000900 <ai_platform_network_create+0x80>
 80008e4:	f8df 14dc 	ldr.w	r1, [pc, #1244]	; 8000dc4 <.text_23>
 80008e8:	428d      	cmp	r5, r1
 80008ea:	bf28      	it	cs
 80008ec:	f20f 40e8 	addwcs	r0, pc, #1256	; 0x4e8
 80008f0:	d206      	bcs.n	8000900 <ai_platform_network_create+0x80>
 80008f2:	f20f 40e8 	addw	r0, pc, #1256	; 0x4e8
 80008f6:	f001 f9dd 	bl	8001cb4 <ai_check_custom_types>
 80008fa:	b920      	cbnz	r0, 8000906 <ai_platform_network_create+0x86>
 80008fc:	f20f 40e0 	addw	r0, pc, #1248	; 0x4e0
 8000900:	6806      	ldr	r6, [r0, #0]
 8000902:	2100      	movs	r1, #0
 8000904:	6021      	str	r1, [r4, #0]
 8000906:	4630      	mov	r0, r6
 8000908:	bd70      	pop	{r4, r5, r6, pc}

0800090a <ai_platform_network_destroy>:
 800090a:	b130      	cbz	r0, 800091a <ai_platform_network_destroy+0x10>
 800090c:	6801      	ldr	r1, [r0, #0]
 800090e:	f8df 24b0 	ldr.w	r2, [pc, #1200]	; 8000dc0 <.text_22>
 8000912:	4291      	cmp	r1, r2
 8000914:	bf08      	it	eq
 8000916:	4602      	moveq	r2, r0
 8000918:	d000      	beq.n	800091c <ai_platform_network_destroy+0x12>
 800091a:	2200      	movs	r2, #0
 800091c:	f8df 1490 	ldr.w	r1, [pc, #1168]	; 8000db0 <.text_18>
 8000920:	680b      	ldr	r3, [r1, #0]
 8000922:	085b      	lsrs	r3, r3, #1
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	600b      	str	r3, [r1, #0]
 8000928:	2101      	movs	r1, #1
 800092a:	f8df 3488 	ldr.w	r3, [pc, #1160]	; 8000db4 <.text_19>
 800092e:	6099      	str	r1, [r3, #8]
 8000930:	6899      	ldr	r1, [r3, #8]
 8000932:	2900      	cmp	r1, #0
 8000934:	d1fc      	bne.n	8000930 <ai_platform_network_destroy+0x26>
 8000936:	f8df c480 	ldr.w	ip, [pc, #1152]	; 8000db8 <.text_20>
 800093a:	f8c3 c000 	str.w	ip, [r3]
 800093e:	6819      	ldr	r1, [r3, #0]
 8000940:	f8df 3478 	ldr.w	r3, [pc, #1144]	; 8000dbc <.text_21>
 8000944:	4299      	cmp	r1, r3
 8000946:	d000      	beq.n	800094a <ai_platform_network_destroy+0x40>
 8000948:	e7fe      	b.n	8000948 <ai_platform_network_destroy+0x3e>
 800094a:	b102      	cbz	r2, 800094e <ai_platform_network_destroy+0x44>
 800094c:	2000      	movs	r0, #0
 800094e:	4770      	bx	lr

08000950 <ai_platform_network_init>:
 8000950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000954:	b081      	sub	sp, #4
 8000956:	460a      	mov	r2, r1
 8000958:	b120      	cbz	r0, 8000964 <ai_platform_network_init+0x14>
 800095a:	6801      	ldr	r1, [r0, #0]
 800095c:	f8df 3460 	ldr.w	r3, [pc, #1120]	; 8000dc0 <.text_22>
 8000960:	4299      	cmp	r1, r3
 8000962:	d000      	beq.n	8000966 <ai_platform_network_init+0x16>
 8000964:	2000      	movs	r0, #0
 8000966:	f8df 1448 	ldr.w	r1, [pc, #1096]	; 8000db0 <.text_18>
 800096a:	680b      	ldr	r3, [r1, #0]
 800096c:	085b      	lsrs	r3, r3, #1
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	600b      	str	r3, [r1, #0]
 8000972:	2101      	movs	r1, #1
 8000974:	f8df 343c 	ldr.w	r3, [pc, #1084]	; 8000db4 <.text_19>
 8000978:	6099      	str	r1, [r3, #8]
 800097a:	6899      	ldr	r1, [r3, #8]
 800097c:	2900      	cmp	r1, #0
 800097e:	d1fc      	bne.n	800097a <ai_platform_network_init+0x2a>
 8000980:	f8df 4434 	ldr.w	r4, [pc, #1076]	; 8000db8 <.text_20>
 8000984:	601c      	str	r4, [r3, #0]
 8000986:	6819      	ldr	r1, [r3, #0]
 8000988:	f8df 3430 	ldr.w	r3, [pc, #1072]	; 8000dbc <.text_21>
 800098c:	4299      	cmp	r1, r3
 800098e:	d000      	beq.n	8000992 <ai_platform_network_init+0x42>
 8000990:	e7fe      	b.n	8000990 <ai_platform_network_init+0x40>
 8000992:	2800      	cmp	r0, #0
 8000994:	d035      	beq.n	8000a02 <ai_platform_network_init+0xb2>
 8000996:	b90a      	cbnz	r2, 800099c <ai_platform_network_init+0x4c>
 8000998:	2211      	movs	r2, #17
 800099a:	e012      	b.n	80009c2 <ai_platform_network_init+0x72>
 800099c:	6913      	ldr	r3, [r2, #16]
 800099e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80009a0:	b939      	cbnz	r1, 80009b2 <ai_platform_network_init+0x62>
 80009a2:	8c11      	ldrh	r1, [r2, #32]
 80009a4:	8bd5      	ldrh	r5, [r2, #30]
 80009a6:	6a54      	ldr	r4, [r2, #36]	; 0x24
 80009a8:	4369      	muls	r1, r5
 80009aa:	4361      	muls	r1, r4
 80009ac:	bf18      	it	ne
 80009ae:	2213      	movne	r2, #19
 80009b0:	d107      	bne.n	80009c2 <ai_platform_network_init+0x72>
 80009b2:	b973      	cbnz	r3, 80009d2 <ai_platform_network_init+0x82>
 80009b4:	8911      	ldrh	r1, [r2, #8]
 80009b6:	88d4      	ldrh	r4, [r2, #6]
 80009b8:	68d3      	ldr	r3, [r2, #12]
 80009ba:	4361      	muls	r1, r4
 80009bc:	4359      	muls	r1, r3
 80009be:	d008      	beq.n	80009d2 <ai_platform_network_init+0x82>
 80009c0:	2212      	movs	r2, #18
 80009c2:	2110      	movs	r1, #16
 80009c4:	3010      	adds	r0, #16
 80009c6:	f000 fa1a 	bl	8000dfe <core_set_error>
 80009ca:	2000      	movs	r0, #0
 80009cc:	b001      	add	sp, #4
 80009ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009d2:	e8b2 10f8 	ldmia.w	r2!, {r3, r4, r5, r6, r7, ip}
 80009d6:	f100 0118 	add.w	r1, r0, #24
 80009da:	f100 0e30 	add.w	lr, r0, #48	; 0x30
 80009de:	e881 10f8 	stmia.w	r1, {r3, r4, r5, r6, r7, ip}
 80009e2:	e892 0f0a 	ldmia.w	r2, {r1, r3, r8, r9, sl, fp}
 80009e6:	e88e 0f0a 	stmia.w	lr, {r1, r3, r8, r9, sl, fp}
 80009ea:	2103      	movs	r1, #3
 80009ec:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80009ee:	60c1      	str	r1, [r0, #12]
 80009f0:	b13a      	cbz	r2, 8000a02 <ai_platform_network_init+0xb2>
 80009f2:	e000      	b.n	80009f6 <ai_platform_network_init+0xa6>
 80009f4:	460a      	mov	r2, r1
 80009f6:	68d1      	ldr	r1, [r2, #12]
 80009f8:	6090      	str	r0, [r2, #8]
 80009fa:	428a      	cmp	r2, r1
 80009fc:	bf18      	it	ne
 80009fe:	2900      	cmpne	r1, #0
 8000a00:	d1f8      	bne.n	80009f4 <ai_platform_network_init+0xa4>
 8000a02:	b001      	add	sp, #4
 8000a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000a08 <ai_platform_network_process>:
 8000a08:	e92d 4ff4 	stmdb	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a0c:	b082      	sub	sp, #8
 8000a0e:	460a      	mov	r2, r1
 8000a10:	b120      	cbz	r0, 8000a1c <ai_platform_network_process+0x14>
 8000a12:	6801      	ldr	r1, [r0, #0]
 8000a14:	f8df 33a8 	ldr.w	r3, [pc, #936]	; 8000dc0 <.text_22>
 8000a18:	4299      	cmp	r1, r3
 8000a1a:	d000      	beq.n	8000a1e <ai_platform_network_process+0x16>
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	f8df 1390 	ldr.w	r1, [pc, #912]	; 8000db0 <.text_18>
 8000a22:	680b      	ldr	r3, [r1, #0]
 8000a24:	085b      	lsrs	r3, r3, #1
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	600b      	str	r3, [r1, #0]
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	f8df 3384 	ldr.w	r3, [pc, #900]	; 8000db4 <.text_19>
 8000a30:	6099      	str	r1, [r3, #8]
 8000a32:	6899      	ldr	r1, [r3, #8]
 8000a34:	2900      	cmp	r1, #0
 8000a36:	d1fc      	bne.n	8000a32 <ai_platform_network_process+0x2a>
 8000a38:	f8df 437c 	ldr.w	r4, [pc, #892]	; 8000db8 <.text_20>
 8000a3c:	601c      	str	r4, [r3, #0]
 8000a3e:	6819      	ldr	r1, [r3, #0]
 8000a40:	f8df 3378 	ldr.w	r3, [pc, #888]	; 8000dbc <.text_21>
 8000a44:	4299      	cmp	r1, r3
 8000a46:	d000      	beq.n	8000a4a <ai_platform_network_process+0x42>
 8000a48:	e7fe      	b.n	8000a48 <ai_platform_network_process+0x40>
 8000a4a:	2800      	cmp	r0, #0
 8000a4c:	f000 8113 	beq.w	8000c76 <ai_platform_network_process+0x26e>
 8000a50:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
 8000a54:	b101      	cbz	r1, 8000a58 <ai_platform_network_process+0x50>
 8000a56:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8000a58:	2300      	movs	r3, #0
 8000a5a:	82c3      	strh	r3, [r0, #22]
 8000a5c:	2400      	movs	r4, #0
 8000a5e:	7b03      	ldrb	r3, [r0, #12]
 8000a60:	8284      	strh	r4, [r0, #20]
 8000a62:	f003 0303 	and.w	r3, r3, #3
 8000a66:	2b03      	cmp	r3, #3
 8000a68:	d002      	beq.n	8000a70 <ai_platform_network_process+0x68>
 8000a6a:	2230      	movs	r2, #48	; 0x30
 8000a6c:	2111      	movs	r1, #17
 8000a6e:	e0ff      	b.n	8000c70 <ai_platform_network_process+0x268>
 8000a70:	2a00      	cmp	r2, #0
 8000a72:	bf1e      	ittt	ne
 8000a74:	2900      	cmpne	r1, #0
 8000a76:	880b      	ldrhne	r3, [r1, #0]
 8000a78:	2b00      	cmpne	r3, #0
 8000a7a:	f000 80f7 	beq.w	8000c6c <ai_platform_network_process+0x264>
 8000a7e:	f8b2 b004 	ldrh.w	fp, [r2, #4]
 8000a82:	9100      	str	r1, [sp, #0]
 8000a84:	46a0      	mov	r8, r4
 8000a86:	46a1      	mov	r9, r4
 8000a88:	2600      	movs	r6, #0
 8000a8a:	1d17      	adds	r7, r2, #4
 8000a8c:	4682      	mov	sl, r0
 8000a8e:	e014      	b.n	8000aba <ai_platform_network_process+0xb2>
 8000a90:	68f8      	ldr	r0, [r7, #12]
 8000a92:	2800      	cmp	r0, #0
 8000a94:	f000 80e9 	beq.w	8000c6a <ai_platform_network_process+0x262>
 8000a98:	8838      	ldrh	r0, [r7, #0]
 8000a9a:	2800      	cmp	r0, #0
 8000a9c:	d052      	beq.n	8000b44 <ai_platform_network_process+0x13c>
 8000a9e:	4558      	cmp	r0, fp
 8000aa0:	bf28      	it	cs
 8000aa2:	4683      	movcs	fp, r0
 8000aa4:	4622      	mov	r2, r4
 8000aa6:	1f39      	subs	r1, r7, #4
 8000aa8:	4628      	mov	r0, r5
 8000aaa:	f7ff fd59 	bl	8000560 <_platform_network_state_setup>
 8000aae:	f108 0801 	add.w	r8, r8, #1
 8000ab2:	3718      	adds	r7, #24
 8000ab4:	3610      	adds	r6, #16
 8000ab6:	f109 0904 	add.w	r9, r9, #4
 8000aba:	9800      	ldr	r0, [sp, #0]
 8000abc:	8801      	ldrh	r1, [r0, #0]
 8000abe:	4588      	cmp	r8, r1
 8000ac0:	d24a      	bcs.n	8000b58 <ai_platform_network_process+0x150>
 8000ac2:	6840      	ldr	r0, [r0, #4]
 8000ac4:	2800      	cmp	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f850 4009 	ldrne.w	r4, [r0, r9]
 8000acc:	2c00      	cmpne	r4, #0
 8000ace:	d043      	beq.n	8000b58 <ai_platform_network_process+0x150>
 8000ad0:	9800      	ldr	r0, [sp, #0]
 8000ad2:	6881      	ldr	r1, [r0, #8]
 8000ad4:	680a      	ldr	r2, [r1, #0]
 8000ad6:	1995      	adds	r5, r2, r6
 8000ad8:	f000 80c7 	beq.w	8000c6a <ai_platform_network_process+0x262>
 8000adc:	69a0      	ldr	r0, [r4, #24]
 8000ade:	6841      	ldr	r1, [r0, #4]
 8000ae0:	887b      	ldrh	r3, [r7, #2]
 8000ae2:	88ba      	ldrh	r2, [r7, #4]
 8000ae4:	68b8      	ldr	r0, [r7, #8]
 8000ae6:	fb03 fc02 	mul.w	ip, r3, r2
 8000aea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000aee:	4561      	cmp	r1, ip
 8000af0:	d32d      	bcc.n	8000b4e <ai_platform_network_process+0x146>
 8000af2:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8000af6:	f8dc e00c 	ldr.w	lr, [ip, #12]
 8000afa:	459e      	cmp	lr, r3
 8000afc:	bf01      	itttt	eq
 8000afe:	f8dc 3008 	ldreq.w	r3, [ip, #8]
 8000b02:	4293      	cmpeq	r3, r2
 8000b04:	f8dc 2004 	ldreq.w	r2, [ip, #4]
 8000b08:	4282      	cmpeq	r2, r0
 8000b0a:	d120      	bne.n	8000b4e <ai_platform_network_process+0x146>
 8000b0c:	69a0      	ldr	r0, [r4, #24]
 8000b0e:	6800      	ldr	r0, [r0, #0]
 8000b10:	f006 fa60 	bl	8006fd4 <ai_array_get_byte_size>
 8000b14:	68e1      	ldr	r1, [r4, #12]
 8000b16:	68ca      	ldr	r2, [r1, #12]
 8000b18:	6961      	ldr	r1, [r4, #20]
 8000b1a:	68cb      	ldr	r3, [r1, #12]
 8000b1c:	435a      	muls	r2, r3
 8000b1e:	4290      	cmp	r0, r2
 8000b20:	d315      	bcc.n	8000b4e <ai_platform_network_process+0x146>
 8000b22:	69a0      	ldr	r0, [r4, #24]
 8000b24:	6800      	ldr	r0, [r0, #0]
 8000b26:	f006 f97d 	bl	8006e24 <ai_array_to_buffer_fmt>
 8000b2a:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8000b2e:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8000b32:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 8000b36:	4288      	cmp	r0, r1
 8000b38:	d0aa      	beq.n	8000a90 <ai_platform_network_process+0x88>
 8000b3a:	2219      	movs	r2, #25
 8000b3c:	2112      	movs	r1, #18
 8000b3e:	f10a 0010 	add.w	r0, sl, #16
 8000b42:	e096      	b.n	8000c72 <ai_platform_network_process+0x26a>
 8000b44:	2221      	movs	r2, #33	; 0x21
 8000b46:	2112      	movs	r1, #18
 8000b48:	f10a 0010 	add.w	r0, sl, #16
 8000b4c:	e091      	b.n	8000c72 <ai_platform_network_process+0x26a>
 8000b4e:	2218      	movs	r2, #24
 8000b50:	2112      	movs	r1, #18
 8000b52:	f10a 0010 	add.w	r0, sl, #16
 8000b56:	e08c      	b.n	8000c72 <ai_platform_network_process+0x26a>
 8000b58:	9902      	ldr	r1, [sp, #8]
 8000b5a:	2900      	cmp	r1, #0
 8000b5c:	4655      	mov	r5, sl
 8000b5e:	d075      	beq.n	8000c4c <ai_platform_network_process+0x244>
 8000b60:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
 8000b64:	2802      	cmp	r0, #2
 8000b66:	db7b      	blt.n	8000c60 <ai_platform_network_process+0x258>
 8000b68:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8000b6a:	300c      	adds	r0, #12
 8000b6c:	bf1c      	itt	ne
 8000b6e:	8802      	ldrhne	r2, [r0, #0]
 8000b70:	2a00      	cmpne	r2, #0
 8000b72:	d075      	beq.n	8000c60 <ai_platform_network_process+0x258>
 8000b74:	f04f 0800 	mov.w	r8, #0
 8000b78:	46c1      	mov	r9, r8
 8000b7a:	2600      	movs	r6, #0
 8000b7c:	1d0f      	adds	r7, r1, #4
 8000b7e:	9000      	str	r0, [sp, #0]
 8000b80:	e013      	b.n	8000baa <ai_platform_network_process+0x1a2>
 8000b82:	68f8      	ldr	r0, [r7, #12]
 8000b84:	2800      	cmp	r0, #0
 8000b86:	d059      	beq.n	8000c3c <ai_platform_network_process+0x234>
 8000b88:	8838      	ldrh	r0, [r7, #0]
 8000b8a:	2800      	cmp	r0, #0
 8000b8c:	d051      	beq.n	8000c32 <ai_platform_network_process+0x22a>
 8000b8e:	4558      	cmp	r0, fp
 8000b90:	bf28      	it	cs
 8000b92:	4683      	movcs	fp, r0
 8000b94:	4622      	mov	r2, r4
 8000b96:	1f39      	subs	r1, r7, #4
 8000b98:	4628      	mov	r0, r5
 8000b9a:	f7ff fce1 	bl	8000560 <_platform_network_state_setup>
 8000b9e:	f108 0801 	add.w	r8, r8, #1
 8000ba2:	3718      	adds	r7, #24
 8000ba4:	3610      	adds	r6, #16
 8000ba6:	f109 0904 	add.w	r9, r9, #4
 8000baa:	9800      	ldr	r0, [sp, #0]
 8000bac:	8801      	ldrh	r1, [r0, #0]
 8000bae:	4588      	cmp	r8, r1
 8000bb0:	d249      	bcs.n	8000c46 <ai_platform_network_process+0x23e>
 8000bb2:	6840      	ldr	r0, [r0, #4]
 8000bb4:	2800      	cmp	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f850 4009 	ldrne.w	r4, [r0, r9]
 8000bbc:	2c00      	cmpne	r4, #0
 8000bbe:	d042      	beq.n	8000c46 <ai_platform_network_process+0x23e>
 8000bc0:	9800      	ldr	r0, [sp, #0]
 8000bc2:	6881      	ldr	r1, [r0, #8]
 8000bc4:	680a      	ldr	r2, [r1, #0]
 8000bc6:	1995      	adds	r5, r2, r6
 8000bc8:	d038      	beq.n	8000c3c <ai_platform_network_process+0x234>
 8000bca:	69a0      	ldr	r0, [r4, #24]
 8000bcc:	6841      	ldr	r1, [r0, #4]
 8000bce:	887b      	ldrh	r3, [r7, #2]
 8000bd0:	88ba      	ldrh	r2, [r7, #4]
 8000bd2:	68b8      	ldr	r0, [r7, #8]
 8000bd4:	fb03 fc02 	mul.w	ip, r3, r2
 8000bd8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bdc:	4561      	cmp	r1, ip
 8000bde:	d33e      	bcc.n	8000c5e <ai_platform_network_process+0x256>
 8000be0:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8000be4:	f8dc e00c 	ldr.w	lr, [ip, #12]
 8000be8:	459e      	cmp	lr, r3
 8000bea:	bf01      	itttt	eq
 8000bec:	f8dc 3008 	ldreq.w	r3, [ip, #8]
 8000bf0:	4293      	cmpeq	r3, r2
 8000bf2:	f8dc 2004 	ldreq.w	r2, [ip, #4]
 8000bf6:	4282      	cmpeq	r2, r0
 8000bf8:	d131      	bne.n	8000c5e <ai_platform_network_process+0x256>
 8000bfa:	69a0      	ldr	r0, [r4, #24]
 8000bfc:	6800      	ldr	r0, [r0, #0]
 8000bfe:	f006 f9e9 	bl	8006fd4 <ai_array_get_byte_size>
 8000c02:	68e1      	ldr	r1, [r4, #12]
 8000c04:	68ca      	ldr	r2, [r1, #12]
 8000c06:	6961      	ldr	r1, [r4, #20]
 8000c08:	68cb      	ldr	r3, [r1, #12]
 8000c0a:	435a      	muls	r2, r3
 8000c0c:	4290      	cmp	r0, r2
 8000c0e:	d326      	bcc.n	8000c5e <ai_platform_network_process+0x256>
 8000c10:	69a0      	ldr	r0, [r4, #24]
 8000c12:	6800      	ldr	r0, [r0, #0]
 8000c14:	f006 f906 	bl	8006e24 <ai_array_to_buffer_fmt>
 8000c18:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8000c1c:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8000c20:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 8000c24:	4288      	cmp	r0, r1
 8000c26:	d0ac      	beq.n	8000b82 <ai_platform_network_process+0x17a>
 8000c28:	2219      	movs	r2, #25
 8000c2a:	2113      	movs	r1, #19
 8000c2c:	f10a 0010 	add.w	r0, sl, #16
 8000c30:	e01f      	b.n	8000c72 <ai_platform_network_process+0x26a>
 8000c32:	2221      	movs	r2, #33	; 0x21
 8000c34:	2113      	movs	r1, #19
 8000c36:	f10a 0010 	add.w	r0, sl, #16
 8000c3a:	e01a      	b.n	8000c72 <ai_platform_network_process+0x26a>
 8000c3c:	2217      	movs	r2, #23
 8000c3e:	2113      	movs	r1, #19
 8000c40:	f10a 0010 	add.w	r0, sl, #16
 8000c44:	e015      	b.n	8000c72 <ai_platform_network_process+0x26a>
 8000c46:	4655      	mov	r5, sl
 8000c48:	f8a5 b014 	strh.w	fp, [r5, #20]
 8000c4c:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
 8000c50:	2800      	cmp	r0, #0
 8000c52:	bf14      	ite	ne
 8000c54:	f8d5 a04c 	ldrne.w	sl, [r5, #76]	; 0x4c
 8000c58:	f04f 0a00 	moveq.w	sl, #0
 8000c5c:	e00f      	b.n	8000c7e <ai_platform_network_process+0x276>
 8000c5e:	4655      	mov	r5, sl
 8000c60:	2218      	movs	r2, #24
 8000c62:	2113      	movs	r1, #19
 8000c64:	f105 0010 	add.w	r0, r5, #16
 8000c68:	e003      	b.n	8000c72 <ai_platform_network_process+0x26a>
 8000c6a:	4650      	mov	r0, sl
 8000c6c:	2217      	movs	r2, #23
 8000c6e:	2112      	movs	r1, #18
 8000c70:	3010      	adds	r0, #16
 8000c72:	f000 f8c4 	bl	8000dfe <core_set_error>
 8000c76:	2000      	movs	r0, #0
 8000c78:	b003      	add	sp, #12
 8000c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c7e:	2802      	cmp	r0, #2
 8000c80:	bfa6      	itte	ge
 8000c82:	6ce8      	ldrge	r0, [r5, #76]	; 0x4c
 8000c84:	f100 0b0c 	addge.w	fp, r0, #12
 8000c88:	f04f 0b00 	movlt.w	fp, #0
 8000c8c:	8ae8      	ldrh	r0, [r5, #22]
 8000c8e:	8aa9      	ldrh	r1, [r5, #20]
 8000c90:	ebb0 0f01 	cmp.w	r0, r1
 8000c94:	f080 8087 	bcs.w	8000da6 <ai_platform_network_process+0x39e>
 8000c98:	f04f 0800 	mov.w	r8, #0
 8000c9c:	4654      	mov	r4, sl
 8000c9e:	46c1      	mov	r9, r8
 8000ca0:	46c2      	mov	sl, r8
 8000ca2:	e018      	b.n	8000cd6 <ai_platform_network_process+0x2ce>
 8000ca4:	6882      	ldr	r2, [r0, #8]
 8000ca6:	68c3      	ldr	r3, [r0, #12]
 8000ca8:	6871      	ldr	r1, [r6, #4]
 8000caa:	1ad2      	subs	r2, r2, r3
 8000cac:	4411      	add	r1, r2
 8000cae:	6081      	str	r1, [r0, #8]
 8000cb0:	6872      	ldr	r2, [r6, #4]
 8000cb2:	60c2      	str	r2, [r0, #12]
 8000cb4:	6870      	ldr	r0, [r6, #4]
 8000cb6:	68b1      	ldr	r1, [r6, #8]
 8000cb8:	4408      	add	r0, r1
 8000cba:	6070      	str	r0, [r6, #4]
 8000cbc:	6831      	ldr	r1, [r6, #0]
 8000cbe:	4288      	cmp	r0, r1
 8000cc0:	d302      	bcc.n	8000cc8 <ai_platform_network_process+0x2c0>
 8000cc2:	68f0      	ldr	r0, [r6, #12]
 8000cc4:	4240      	negs	r0, r0
 8000cc6:	4408      	add	r0, r1
 8000cc8:	6070      	str	r0, [r6, #4]
 8000cca:	f10a 0a01 	add.w	sl, sl, #1
 8000cce:	f109 0910 	add.w	r9, r9, #16
 8000cd2:	f108 0804 	add.w	r8, r8, #4
 8000cd6:	2c00      	cmp	r4, #0
 8000cd8:	bf14      	ite	ne
 8000cda:	8820      	ldrhne	r0, [r4, #0]
 8000cdc:	2000      	moveq	r0, #0
 8000cde:	4582      	cmp	sl, r0
 8000ce0:	d212      	bcs.n	8000d08 <ai_platform_network_process+0x300>
 8000ce2:	6860      	ldr	r0, [r4, #4]
 8000ce4:	b180      	cbz	r0, 8000d08 <ai_platform_network_process+0x300>
 8000ce6:	f850 0008 	ldr.w	r0, [r0, r8]
 8000cea:	b168      	cbz	r0, 8000d08 <ai_platform_network_process+0x300>
 8000cec:	68a1      	ldr	r1, [r4, #8]
 8000cee:	6980      	ldr	r0, [r0, #24]
 8000cf0:	680a      	ldr	r2, [r1, #0]
 8000cf2:	6801      	ldr	r1, [r0, #0]
 8000cf4:	eb02 0609 	add.w	r6, r2, r9
 8000cf8:	008a      	lsls	r2, r1, #2
 8000cfa:	d5d3      	bpl.n	8000ca4 <ai_platform_network_process+0x29c>
 8000cfc:	68b2      	ldr	r2, [r6, #8]
 8000cfe:	6871      	ldr	r1, [r6, #4]
 8000d00:	6880      	ldr	r0, [r0, #8]
 8000d02:	f010 f850 	bl	8010da6 <__aeabi_memcpy>
 8000d06:	e7d5      	b.n	8000cb4 <ai_platform_network_process+0x2ac>
 8000d08:	46a2      	mov	sl, r4
 8000d0a:	4628      	mov	r0, r5
 8000d0c:	f001 f87c 	bl	8001e08 <ai_layers_forward_all>
 8000d10:	f04f 0800 	mov.w	r8, #0
 8000d14:	465c      	mov	r4, fp
 8000d16:	46c1      	mov	r9, r8
 8000d18:	46c3      	mov	fp, r8
 8000d1a:	e017      	b.n	8000d4c <ai_platform_network_process+0x344>
 8000d1c:	6871      	ldr	r1, [r6, #4]
 8000d1e:	68b2      	ldr	r2, [r6, #8]
 8000d20:	4411      	add	r1, r2
 8000d22:	6071      	str	r1, [r6, #4]
 8000d24:	6832      	ldr	r2, [r6, #0]
 8000d26:	4291      	cmp	r1, r2
 8000d28:	d302      	bcc.n	8000d30 <ai_platform_network_process+0x328>
 8000d2a:	68f1      	ldr	r1, [r6, #12]
 8000d2c:	4249      	negs	r1, r1
 8000d2e:	4411      	add	r1, r2
 8000d30:	6071      	str	r1, [r6, #4]
 8000d32:	6882      	ldr	r2, [r0, #8]
 8000d34:	68c3      	ldr	r3, [r0, #12]
 8000d36:	1ad2      	subs	r2, r2, r3
 8000d38:	4411      	add	r1, r2
 8000d3a:	6081      	str	r1, [r0, #8]
 8000d3c:	6872      	ldr	r2, [r6, #4]
 8000d3e:	60c2      	str	r2, [r0, #12]
 8000d40:	f10b 0b01 	add.w	fp, fp, #1
 8000d44:	f109 0910 	add.w	r9, r9, #16
 8000d48:	f108 0804 	add.w	r8, r8, #4
 8000d4c:	2c00      	cmp	r4, #0
 8000d4e:	bf14      	ite	ne
 8000d50:	8820      	ldrhne	r0, [r4, #0]
 8000d52:	2000      	moveq	r0, #0
 8000d54:	4583      	cmp	fp, r0
 8000d56:	d21d      	bcs.n	8000d94 <ai_platform_network_process+0x38c>
 8000d58:	6860      	ldr	r0, [r4, #4]
 8000d5a:	b1d8      	cbz	r0, 8000d94 <ai_platform_network_process+0x38c>
 8000d5c:	f850 0008 	ldr.w	r0, [r0, r8]
 8000d60:	b1c0      	cbz	r0, 8000d94 <ai_platform_network_process+0x38c>
 8000d62:	68a1      	ldr	r1, [r4, #8]
 8000d64:	6980      	ldr	r0, [r0, #24]
 8000d66:	680a      	ldr	r2, [r1, #0]
 8000d68:	6801      	ldr	r1, [r0, #0]
 8000d6a:	eb02 0609 	add.w	r6, r2, r9
 8000d6e:	008a      	lsls	r2, r1, #2
 8000d70:	d5d4      	bpl.n	8000d1c <ai_platform_network_process+0x314>
 8000d72:	6881      	ldr	r1, [r0, #8]
 8000d74:	68b2      	ldr	r2, [r6, #8]
 8000d76:	6870      	ldr	r0, [r6, #4]
 8000d78:	f010 f815 	bl	8010da6 <__aeabi_memcpy>
 8000d7c:	6870      	ldr	r0, [r6, #4]
 8000d7e:	68b1      	ldr	r1, [r6, #8]
 8000d80:	4408      	add	r0, r1
 8000d82:	6070      	str	r0, [r6, #4]
 8000d84:	6831      	ldr	r1, [r6, #0]
 8000d86:	4288      	cmp	r0, r1
 8000d88:	d302      	bcc.n	8000d90 <ai_platform_network_process+0x388>
 8000d8a:	68f0      	ldr	r0, [r6, #12]
 8000d8c:	4240      	negs	r0, r0
 8000d8e:	4408      	add	r0, r1
 8000d90:	6070      	str	r0, [r6, #4]
 8000d92:	e7d5      	b.n	8000d40 <ai_platform_network_process+0x338>
 8000d94:	8ae8      	ldrh	r0, [r5, #22]
 8000d96:	8aa9      	ldrh	r1, [r5, #20]
 8000d98:	1c40      	adds	r0, r0, #1
 8000d9a:	82e8      	strh	r0, [r5, #22]
 8000d9c:	46a3      	mov	fp, r4
 8000d9e:	b280      	uxth	r0, r0
 8000da0:	4288      	cmp	r0, r1
 8000da2:	f4ff af79 	bcc.w	8000c98 <ai_platform_network_process+0x290>
 8000da6:	8ae8      	ldrh	r0, [r5, #22]
 8000da8:	b003      	add	sp, #12
 8000daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000db0 <.text_18>:
 8000db0:	e0002000 	.word	0xe0002000

08000db4 <.text_19>:
 8000db4:	40023000 	.word	0x40023000

08000db8 <.text_20>:
 8000db8:	f407a5c2 	.word	0xf407a5c2

08000dbc <.text_21>:
 8000dbc:	b5e8b5cd 	.word	0xb5e8b5cd

08000dc0 <.text_22>:
 8000dc0:	a1c00100 	.word	0xa1c00100

08000dc4 <.text_23>:
 8000dc4:	01030001 	.word	0x01030001

08000dc8 <.text_24>:
 8000dc8:	00000104 	.word	0x00000104

08000dcc <.text_25>:
 8000dcc:	00000101 	.word	0x00000101

08000dd0 <.text_26>:
 8000dd0:	00000301 	.word	0x00000301

08000dd4 <.text_27>:
 8000dd4:	00001030 	.word	0x00001030

08000dd8 <.text_28>:
 8000dd8:	00001001 	.word	0x00001001

08000ddc <_platform_network_sanity_check{5}::signatures>:
 8000ddc:	84048403                                ....

08000de0 <.text_30>:
 8000de0:	00001002 	.word	0x00001002

08000de4 <.text_31>:
 8000de4:	00001010 	.word	0x00001010

08000de8 <.text_32>:
 8000de8:	00000000 	.word	0x00000000

08000dec <.text_33>:
 8000dec:	00001010 	.word	0x00001010

08000df0 <core_init>:
 8000df0:	2001      	movs	r0, #1
 8000df2:	4770      	bx	lr

08000df4 <core_get_error>:
 8000df4:	4601      	mov	r1, r0
 8000df6:	2200      	movs	r2, #0
 8000df8:	6808      	ldr	r0, [r1, #0]
 8000dfa:	600a      	str	r2, [r1, #0]
 8000dfc:	4770      	bx	lr

08000dfe <core_set_error>:
 8000dfe:	7803      	ldrb	r3, [r0, #0]
 8000e00:	ea5f 6c03 	movs.w	ip, r3, lsl #24
 8000e04:	d104      	bne.n	8000e10 <core_set_error+0x12>
 8000e06:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8000e0a:	6001      	str	r1, [r0, #0]
 8000e0c:	2001      	movs	r0, #1
 8000e0e:	4770      	bx	lr
 8000e10:	2000      	movs	r0, #0
 8000e12:	4770      	bx	lr

08000e14 <core_mem_alloc>:
 8000e14:	2800      	cmp	r0, #0
 8000e16:	d100      	bne.n	8000e1a <core_mem_alloc+0x6>
 8000e18:	4770      	bx	lr
 8000e1a:	b500      	push	{lr}
 8000e1c:	b081      	sub	sp, #4
 8000e1e:	1d00      	adds	r0, r0, #4
 8000e20:	f00f ffee 	bl	8010e00 <malloc>
 8000e24:	b108      	cbz	r0, 8000e2a <core_mem_alloc+0x16>
 8000e26:	6000      	str	r0, [r0, #0]
 8000e28:	1d00      	adds	r0, r0, #4
 8000e2a:	b001      	add	sp, #4
 8000e2c:	bd00      	pop	{pc}

08000e2e <core_mem_free>:
 8000e2e:	2800      	cmp	r0, #0
 8000e30:	d100      	bne.n	8000e34 <core_mem_free+0x6>
 8000e32:	4770      	bx	lr
 8000e34:	b500      	push	{lr}
 8000e36:	b081      	sub	sp, #4
 8000e38:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8000e3c:	1f01      	subs	r1, r0, #4
 8000e3e:	428a      	cmp	r2, r1
 8000e40:	d106      	bne.n	8000e50 <core_mem_free+0x22>
 8000e42:	b129      	cbz	r1, 8000e50 <core_mem_free+0x22>
 8000e44:	2000      	movs	r0, #0
 8000e46:	6008      	str	r0, [r1, #0]
 8000e48:	4608      	mov	r0, r1
 8000e4a:	f00f ffe1 	bl	8010e10 <free>
 8000e4e:	2000      	movs	r0, #0
 8000e50:	b001      	add	sp, #4
 8000e52:	bd00      	pop	{pc}

08000e54 <core_mem_realloc>:
 8000e54:	b500      	push	{lr}
 8000e56:	b081      	sub	sp, #4
 8000e58:	b920      	cbnz	r0, 8000e64 <core_mem_realloc+0x10>
 8000e5a:	b1c1      	cbz	r1, 8000e8e <core_mem_realloc+0x3a>
 8000e5c:	1d08      	adds	r0, r1, #4
 8000e5e:	f00f ffcf 	bl	8010e00 <malloc>
 8000e62:	e00e      	b.n	8000e82 <core_mem_realloc+0x2e>
 8000e64:	b919      	cbnz	r1, 8000e6e <core_mem_realloc+0x1a>
 8000e66:	b001      	add	sp, #4
 8000e68:	f85d eb04 	ldr.w	lr, [sp], #4
 8000e6c:	e7df      	b.n	8000e2e <core_mem_free>
 8000e6e:	1f02      	subs	r2, r0, #4
 8000e70:	f850 0c04 	ldr.w	r0, [r0, #-4]
 8000e74:	4290      	cmp	r0, r2
 8000e76:	d109      	bne.n	8000e8c <core_mem_realloc+0x38>
 8000e78:	b142      	cbz	r2, 8000e8c <core_mem_realloc+0x38>
 8000e7a:	1d09      	adds	r1, r1, #4
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	f010 f915 	bl	80110ac <realloc>
 8000e82:	b120      	cbz	r0, 8000e8e <core_mem_realloc+0x3a>
 8000e84:	6000      	str	r0, [r0, #0]
 8000e86:	b001      	add	sp, #4
 8000e88:	1d00      	adds	r0, r0, #4
 8000e8a:	bd00      	pop	{pc}
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	b001      	add	sp, #4
 8000e90:	bd00      	pop	{pc}
	...

08000e94 <_core_inspect_tensor_list>:
 8000e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e96:	0004      	movs	r4, r0
 8000e98:	460d      	mov	r5, r1
 8000e9a:	bf14      	ite	ne
 8000e9c:	2d00      	cmpne	r5, #0
 8000e9e:	2000      	moveq	r0, #0
 8000ea0:	b081      	sub	sp, #4
 8000ea2:	d025      	beq.n	8000ef0 <_core_inspect_tensor_list+0x5c>
 8000ea4:	2000      	movs	r0, #0
 8000ea6:	6028      	str	r0, [r5, #0]
 8000ea8:	60a8      	str	r0, [r5, #8]
 8000eaa:	60e8      	str	r0, [r5, #12]
 8000eac:	2600      	movs	r6, #0
 8000eae:	2700      	movs	r7, #0
 8000eb0:	e017      	b.n	8000ee2 <_core_inspect_tensor_list+0x4e>
 8000eb2:	6841      	ldr	r1, [r0, #4]
 8000eb4:	4610      	mov	r0, r2
 8000eb6:	f006 f88d 	bl	8006fd4 <ai_array_get_byte_size>
 8000eba:	e00a      	b.n	8000ed2 <_core_inspect_tensor_list+0x3e>
 8000ebc:	59c0      	ldr	r0, [r0, r7]
 8000ebe:	2800      	cmp	r0, #0
 8000ec0:	d015      	beq.n	8000eee <_core_inspect_tensor_list+0x5a>
 8000ec2:	bf1c      	itt	ne
 8000ec4:	6980      	ldrne	r0, [r0, #24]
 8000ec6:	2800      	cmpne	r0, #0
 8000ec8:	d006      	beq.n	8000ed8 <_core_inspect_tensor_list+0x44>
 8000eca:	6802      	ldr	r2, [r0, #0]
 8000ecc:	0051      	lsls	r1, r2, #1
 8000ece:	d5f0      	bpl.n	8000eb2 <_core_inspect_tensor_list+0x1e>
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	68a9      	ldr	r1, [r5, #8]
 8000ed4:	1840      	adds	r0, r0, r1
 8000ed6:	60a8      	str	r0, [r5, #8]
 8000ed8:	1c76      	adds	r6, r6, #1
 8000eda:	6828      	ldr	r0, [r5, #0]
 8000edc:	1c40      	adds	r0, r0, #1
 8000ede:	6028      	str	r0, [r5, #0]
 8000ee0:	1d3f      	adds	r7, r7, #4
 8000ee2:	8820      	ldrh	r0, [r4, #0]
 8000ee4:	4286      	cmp	r6, r0
 8000ee6:	d202      	bcs.n	8000eee <_core_inspect_tensor_list+0x5a>
 8000ee8:	6860      	ldr	r0, [r4, #4]
 8000eea:	2800      	cmp	r0, #0
 8000eec:	d1e6      	bne.n	8000ebc <_core_inspect_tensor_list+0x28>
 8000eee:	6828      	ldr	r0, [r5, #0]
 8000ef0:	b001      	add	sp, #4
 8000ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ef4 <_core_inspect_forward_validate>:
 8000ef4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ef8:	b090      	sub	sp, #64	; 0x40
 8000efa:	6882      	ldr	r2, [r0, #8]
 8000efc:	6890      	ldr	r0, [r2, #8]
 8000efe:	9000      	str	r0, [sp, #0]
 8000f00:	6886      	ldr	r6, [r0, #8]
 8000f02:	9810      	ldr	r0, [sp, #64]	; 0x40
 8000f04:	09f6      	lsrs	r6, r6, #7
 8000f06:	f006 0601 	and.w	r6, r6, #1
 8000f0a:	f88d 6004 	strb.w	r6, [sp, #4]
 8000f0e:	6943      	ldr	r3, [r0, #20]
 8000f10:	8818      	ldrh	r0, [r3, #0]
 8000f12:	2800      	cmp	r0, #0
 8000f14:	bf19      	ittee	ne
 8000f16:	685c      	ldrne	r4, [r3, #4]
 8000f18:	9408      	strne	r4, [sp, #32]
 8000f1a:	2500      	moveq	r5, #0
 8000f1c:	9508      	streq	r5, [sp, #32]
 8000f1e:	2802      	cmp	r0, #2
 8000f20:	db04      	blt.n	8000f2c <_core_inspect_forward_validate+0x38>
 8000f22:	6859      	ldr	r1, [r3, #4]
 8000f24:	f101 030c 	add.w	r3, r1, #12
 8000f28:	9307      	str	r3, [sp, #28]
 8000f2a:	e001      	b.n	8000f30 <_core_inspect_forward_validate+0x3c>
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	9107      	str	r1, [sp, #28]
 8000f30:	2300      	movs	r3, #0
 8000f32:	8ad0      	ldrh	r0, [r2, #22]
 8000f34:	9006      	str	r0, [sp, #24]
 8000f36:	8a91      	ldrh	r1, [r2, #20]
 8000f38:	9810      	ldr	r0, [sp, #64]	; 0x40
 8000f3a:	910b      	str	r1, [sp, #44]	; 0x2c
 8000f3c:	930d      	str	r3, [sp, #52]	; 0x34
 8000f3e:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8000f40:	4288      	cmp	r0, r1
 8000f42:	f040 80f3 	bne.w	800112c <_core_inspect_forward_validate+0x238>
 8000f46:	9900      	ldr	r1, [sp, #0]
 8000f48:	614b      	str	r3, [r1, #20]
 8000f4a:	9a00      	ldr	r2, [sp, #0]
 8000f4c:	69d0      	ldr	r0, [r2, #28]
 8000f4e:	2800      	cmp	r0, #0
 8000f50:	f040 80ec 	bne.w	800112c <_core_inspect_forward_validate+0x238>
 8000f54:	4698      	mov	r8, r3
 8000f56:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8000f58:	6993      	ldr	r3, [r2, #24]
 8000f5a:	2700      	movs	r7, #0
 8000f5c:	2400      	movs	r4, #0
 8000f5e:	b333      	cbz	r3, 8000fae <_core_inspect_forward_validate+0xba>
 8000f60:	07d9      	lsls	r1, r3, #31
 8000f62:	d504      	bpl.n	8000f6e <_core_inspect_forward_validate+0x7a>
 8000f64:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8000f66:	68cf      	ldr	r7, [r1, #12]
 8000f68:	f8d1 801c 	ldr.w	r8, [r1, #28]
 8000f6c:	2401      	movs	r4, #1
 8000f6e:	0858      	lsrs	r0, r3, #1
 8000f70:	d01d      	beq.n	8000fae <_core_inspect_forward_validate+0xba>
 8000f72:	4611      	mov	r1, r2
 8000f74:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8000f76:	fa1f fc84 	uxth.w	ip, r4
 8000f7a:	ebcc 0ecc 	rsb	lr, ip, ip, lsl #3
 8000f7e:	eb02 0cce 	add.w	ip, r2, lr, lsl #3
 8000f82:	1c64      	adds	r4, r4, #1
 8000f84:	f8dc 900c 	ldr.w	r9, [ip, #12]
 8000f88:	444f      	add	r7, r9
 8000f8a:	fa1f fe84 	uxth.w	lr, r4
 8000f8e:	f8dc c01c 	ldr.w	ip, [ip, #28]
 8000f92:	ebce 09ce 	rsb	r9, lr, lr, lsl #3
 8000f96:	eb02 02c9 	add.w	r2, r2, r9, lsl #3
 8000f9a:	44e0      	add	r8, ip
 8000f9c:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 8000fa0:	69d2      	ldr	r2, [r2, #28]
 8000fa2:	1c64      	adds	r4, r4, #1
 8000fa4:	1e40      	subs	r0, r0, #1
 8000fa6:	4467      	add	r7, ip
 8000fa8:	4490      	add	r8, r2
 8000faa:	d1e3      	bne.n	8000f74 <_core_inspect_forward_validate+0x80>
 8000fac:	9100      	str	r1, [sp, #0]
 8000fae:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8000fb2:	00c0      	lsls	r0, r0, #3
 8000fb4:	9002      	str	r0, [sp, #8]
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	9800      	ldr	r0, [sp, #0]
 8000fba:	f8d0 a034 	ldr.w	sl, [r0, #52]	; 0x34
 8000fbe:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8000fc0:	017f      	lsls	r7, r7, #5
 8000fc2:	fb0a 7a05 	mla	sl, sl, r5, r7
 8000fc6:	f10a 0003 	add.w	r0, sl, #3
 8000fca:	0880      	lsrs	r0, r0, #2
 8000fcc:	eb02 1141 	add.w	r1, r2, r1, lsl #5
 8000fd0:	ea4f 0a80 	mov.w	sl, r0, lsl #2
 8000fd4:	313b      	adds	r1, #59	; 0x3b
 8000fd6:	0030      	movs	r0, r6
 8000fd8:	ea4f 1848 	mov.w	r8, r8, lsl #5
 8000fdc:	ea4f 0991 	mov.w	r9, r1, lsr #2
 8000fe0:	d00a      	beq.n	8000ff8 <_core_inspect_forward_validate+0x104>
 8000fe2:	9800      	ldr	r0, [sp, #0]
 8000fe4:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8000fe6:	fb01 8105 	mla	r1, r1, r5, r8
 8000fea:	1cc9      	adds	r1, r1, #3
 8000fec:	eb0a 0289 	add.w	r2, sl, r9, lsl #2
 8000ff0:	0889      	lsrs	r1, r1, #2
 8000ff2:	eb02 0b81 	add.w	fp, r2, r1, lsl #2
 8000ff6:	e001      	b.n	8000ffc <_core_inspect_forward_validate+0x108>
 8000ff8:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 8000ffc:	9800      	ldr	r0, [sp, #0]
 8000ffe:	6a04      	ldr	r4, [r0, #32]
 8001000:	b154      	cbz	r4, 8001018 <_core_inspect_forward_validate+0x124>
 8001002:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001004:	b112      	cbz	r2, 800100c <_core_inspect_forward_validate+0x118>
 8001006:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8001008:	4621      	mov	r1, r4
 800100a:	4790      	blx	r2
 800100c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800100e:	4559      	cmp	r1, fp
 8001010:	d20a      	bcs.n	8001028 <_core_inspect_forward_validate+0x134>
 8001012:	4620      	mov	r0, r4
 8001014:	f7ff ff0b 	bl	8000e2e <core_mem_free>
 8001018:	4658      	mov	r0, fp
 800101a:	f7ff fefb 	bl	8000e14 <core_mem_alloc>
 800101e:	0004      	movs	r4, r0
 8001020:	f000 8084 	beq.w	800112c <_core_inspect_forward_validate+0x238>
 8001024:	f8c4 b034 	str.w	fp, [r4, #52]	; 0x34
 8001028:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800102c:	61a0      	str	r0, [r4, #24]
 800102e:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8001032:	9802      	ldr	r0, [sp, #8]
 8001034:	4408      	add	r0, r1
 8001036:	61e0      	str	r0, [r4, #28]
 8001038:	9900      	ldr	r1, [sp, #0]
 800103a:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800103c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8001040:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8001044:	6220      	str	r0, [r4, #32]
 8001046:	b13e      	cbz	r6, 8001058 <_core_inspect_forward_validate+0x164>
 8001048:	eb04 0089 	add.w	r0, r4, r9, lsl #2
 800104c:	eb00 010a 	add.w	r1, r0, sl
 8001050:	19c2      	adds	r2, r0, r7
 8001052:	eb01 0308 	add.w	r3, r1, r8
 8001056:	e003      	b.n	8001060 <_core_inspect_forward_validate+0x16c>
 8001058:	2100      	movs	r1, #0
 800105a:	2000      	movs	r0, #0
 800105c:	2300      	movs	r3, #0
 800105e:	2200      	movs	r2, #0
 8001060:	6260      	str	r0, [r4, #36]	; 0x24
 8001062:	6323      	str	r3, [r4, #48]	; 0x30
 8001064:	62e2      	str	r2, [r4, #44]	; 0x2c
 8001066:	62a1      	str	r1, [r4, #40]	; 0x28
 8001068:	9800      	ldr	r0, [sp, #0]
 800106a:	f8df 286c 	ldr.w	r2, [pc, #2156]	; 80018d8 <.text_9>
 800106e:	6204      	str	r4, [r0, #32]
 8001070:	9900      	ldr	r1, [sp, #0]
 8001072:	61cd      	str	r5, [r1, #28]
 8001074:	9800      	ldr	r0, [sp, #0]
 8001076:	6813      	ldr	r3, [r2, #0]
 8001078:	6901      	ldr	r1, [r0, #16]
 800107a:	6023      	str	r3, [r4, #0]
 800107c:	2000      	movs	r0, #0
 800107e:	1c5b      	adds	r3, r3, #1
 8001080:	6013      	str	r3, [r2, #0]
 8001082:	6060      	str	r0, [r4, #4]
 8001084:	9b00      	ldr	r3, [sp, #0]
 8001086:	68da      	ldr	r2, [r3, #12]
 8001088:	60a2      	str	r2, [r4, #8]
 800108a:	9b00      	ldr	r3, [sp, #0]
 800108c:	699a      	ldr	r2, [r3, #24]
 800108e:	60e2      	str	r2, [r4, #12]
 8001090:	6120      	str	r0, [r4, #16]
 8001092:	69a2      	ldr	r2, [r4, #24]
 8001094:	6162      	str	r2, [r4, #20]
 8001096:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8001098:	2a00      	cmp	r2, #0
 800109a:	d047      	beq.n	800112c <_core_inspect_forward_validate+0x238>
 800109c:	900a      	str	r0, [sp, #40]	; 0x28
 800109e:	9203      	str	r2, [sp, #12]
 80010a0:	e000      	b.n	80010a4 <_core_inspect_forward_validate+0x1b0>
 80010a2:	9003      	str	r0, [sp, #12]
 80010a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80010a6:	1c58      	adds	r0, r3, #1
 80010a8:	900a      	str	r0, [sp, #40]	; 0x28
 80010aa:	9800      	ldr	r0, [sp, #0]
 80010ac:	6a01      	ldr	r1, [r0, #32]
 80010ae:	9800      	ldr	r0, [sp, #0]
 80010b0:	9104      	str	r1, [sp, #16]
 80010b2:	69c5      	ldr	r5, [r0, #28]
 80010b4:	9803      	ldr	r0, [sp, #12]
 80010b6:	6942      	ldr	r2, [r0, #20]
 80010b8:	8810      	ldrh	r0, [r2, #0]
 80010ba:	2800      	cmp	r0, #0
 80010bc:	bf14      	ite	ne
 80010be:	6851      	ldrne	r1, [r2, #4]
 80010c0:	2100      	moveq	r1, #0
 80010c2:	2802      	cmp	r0, #2
 80010c4:	db04      	blt.n	80010d0 <_core_inspect_forward_validate+0x1dc>
 80010c6:	6852      	ldr	r2, [r2, #4]
 80010c8:	f102 040c 	add.w	r4, r2, #12
 80010cc:	940c      	str	r4, [sp, #48]	; 0x30
 80010ce:	e001      	b.n	80010d4 <_core_inspect_forward_validate+0x1e0>
 80010d0:	2200      	movs	r2, #0
 80010d2:	920c      	str	r2, [sp, #48]	; 0x30
 80010d4:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 80010d8:	9a04      	ldr	r2, [sp, #16]
 80010da:	9f00      	ldr	r7, [sp, #0]
 80010dc:	6954      	ldr	r4, [r2, #20]
 80010de:	9800      	ldr	r0, [sp, #0]
 80010e0:	6880      	ldr	r0, [r0, #8]
 80010e2:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 80010e6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80010e8:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 80010ec:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 80010f0:	9c03      	ldr	r4, [sp, #12]
 80010f2:	9302      	str	r3, [sp, #8]
 80010f4:	09c0      	lsrs	r0, r0, #7
 80010f6:	8823      	ldrh	r3, [r4, #0]
 80010f8:	8013      	strh	r3, [r2, #0]
 80010fa:	2400      	movs	r4, #0
 80010fc:	9e03      	ldr	r6, [sp, #12]
 80010fe:	8873      	ldrh	r3, [r6, #2]
 8001100:	8053      	strh	r3, [r2, #2]
 8001102:	6094      	str	r4, [r2, #8]
 8001104:	f000 0001 	and.w	r0, r0, #1
 8001108:	9b02      	ldr	r3, [sp, #8]
 800110a:	68dc      	ldr	r4, [r3, #12]
 800110c:	8194      	strh	r4, [r2, #12]
 800110e:	2800      	cmp	r0, #0
 8001110:	9b02      	ldr	r3, [sp, #8]
 8001112:	69dc      	ldr	r4, [r3, #28]
 8001114:	81d4      	strh	r4, [r2, #14]
 8001116:	d147      	bne.n	80011a8 <_core_inspect_forward_validate+0x2b4>
 8001118:	2100      	movs	r1, #0
 800111a:	6150      	str	r0, [r2, #20]
 800111c:	6111      	str	r1, [r2, #16]
 800111e:	9803      	ldr	r0, [sp, #12]
 8001120:	9903      	ldr	r1, [sp, #12]
 8001122:	68c0      	ldr	r0, [r0, #12]
 8001124:	4281      	cmp	r1, r0
 8001126:	bf18      	it	ne
 8001128:	2800      	cmpne	r0, #0
 800112a:	d1ba      	bne.n	80010a2 <_core_inspect_forward_validate+0x1ae>
 800112c:	9800      	ldr	r0, [sp, #0]
 800112e:	6a02      	ldr	r2, [r0, #32]
 8001130:	6941      	ldr	r1, [r0, #20]
 8001132:	6953      	ldr	r3, [r2, #20]
 8001134:	9800      	ldr	r0, [sp, #0]
 8001136:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 800113a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800113e:	9403      	str	r4, [sp, #12]
 8001140:	69d3      	ldr	r3, [r2, #28]
 8001142:	9304      	str	r3, [sp, #16]
 8001144:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8001148:	f8d2 b020 	ldr.w	fp, [r2, #32]
 800114c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800114e:	9806      	ldr	r0, [sp, #24]
 8001150:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8001154:	9102      	str	r1, [sp, #8]
 8001156:	1c40      	adds	r0, r0, #1
 8001158:	9903      	ldr	r1, [sp, #12]
 800115a:	8088      	strh	r0, [r1, #4]
 800115c:	9903      	ldr	r1, [sp, #12]
 800115e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8001160:	80c8      	strh	r0, [r1, #6]
 8001162:	9800      	ldr	r0, [sp, #0]
 8001164:	69c1      	ldr	r1, [r0, #28]
 8001166:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8001168:	4281      	cmp	r1, r0
 800116a:	d104      	bne.n	8001176 <_core_inspect_forward_validate+0x282>
 800116c:	9902      	ldr	r1, [sp, #8]
 800116e:	f101 002c 	add.w	r0, r1, #44	; 0x2c
 8001172:	f006 f912 	bl	800739a <core_timer_reset>
 8001176:	9800      	ldr	r0, [sp, #0]
 8001178:	6841      	ldr	r1, [r0, #4]
 800117a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800117c:	6882      	ldr	r2, [r0, #8]
 800117e:	6091      	str	r1, [r2, #8]
 8001180:	9802      	ldr	r0, [sp, #8]
 8001182:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8001184:	6841      	ldr	r1, [r0, #4]
 8001186:	f041 0101 	orr.w	r1, r1, #1
 800118a:	6111      	str	r1, [r2, #16]
 800118c:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8001190:	2800      	cmp	r0, #0
 8001192:	f000 8104 	beq.w	800139e <_core_inspect_forward_validate+0x4aa>
 8001196:	f04f 0900 	mov.w	r9, #0
 800119a:	9c08      	ldr	r4, [sp, #32]
 800119c:	9e06      	ldr	r6, [sp, #24]
 800119e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80011a0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80011a4:	46ca      	mov	sl, r9
 80011a6:	e0e9      	b.n	800137c <_core_inspect_forward_validate+0x488>
 80011a8:	9804      	ldr	r0, [sp, #16]
 80011aa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80011ac:	9802      	ldr	r0, [sp, #8]
 80011ae:	6904      	ldr	r4, [r0, #16]
 80011b0:	eb03 1044 	add.w	r0, r3, r4, lsl #5
 80011b4:	6110      	str	r0, [r2, #16]
 80011b6:	2700      	movs	r7, #0
 80011b8:	9b04      	ldr	r3, [sp, #16]
 80011ba:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80011bc:	9b02      	ldr	r3, [sp, #8]
 80011be:	6a1e      	ldr	r6, [r3, #32]
 80011c0:	eb04 1446 	add.w	r4, r4, r6, lsl #5
 80011c4:	6154      	str	r4, [r2, #20]
 80011c6:	1d00      	adds	r0, r0, #4
 80011c8:	9b04      	ldr	r3, [sp, #16]
 80011ca:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80011cc:	9b02      	ldr	r3, [sp, #8]
 80011ce:	699e      	ldr	r6, [r3, #24]
 80011d0:	8993      	ldrh	r3, [r2, #12]
 80011d2:	9109      	str	r1, [sp, #36]	; 0x24
 80011d4:	436e      	muls	r6, r5
 80011d6:	4426      	add	r6, r4
 80011d8:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 80011dc:	46b8      	mov	r8, r7
 80011de:	eb00 09c4 	add.w	r9, r0, r4, lsl #3
 80011e2:	46ba      	mov	sl, r7
 80011e4:	9205      	str	r2, [sp, #20]
 80011e6:	e021      	b.n	800122c <_core_inspect_forward_validate+0x338>
 80011e8:	2000      	movs	r0, #0
 80011ea:	f849 0c04 	str.w	r0, [r9, #-4]
 80011ee:	6820      	ldr	r0, [r4, #0]
 80011f0:	f8c9 0000 	str.w	r0, [r9]
 80011f4:	2800      	cmp	r0, #0
 80011f6:	bf1c      	itt	ne
 80011f8:	8840      	ldrhne	r0, [r0, #2]
 80011fa:	2800      	cmpne	r0, #0
 80011fc:	bf07      	ittee	eq
 80011fe:	2100      	moveq	r1, #0
 8001200:	f849 1c04 	streq.w	r1, [r9, #-4]
 8001204:	2201      	movne	r2, #1
 8001206:	f849 2c04 	strne.w	r2, [r9, #-4]
 800120a:	bf00      	nop
 800120c:	f8cb 1014 	str.w	r1, [fp, #20]
 8001210:	1c7f      	adds	r7, r7, #1
 8001212:	69a0      	ldr	r0, [r4, #24]
 8001214:	6841      	ldr	r1, [r0, #4]
 8001216:	6800      	ldr	r0, [r0, #0]
 8001218:	f005 fedc 	bl	8006fd4 <ai_array_get_byte_size>
 800121c:	4368      	muls	r0, r5
 800121e:	4406      	add	r6, r0
 8001220:	f10a 0a18 	add.w	sl, sl, #24
 8001224:	f109 0908 	add.w	r9, r9, #8
 8001228:	f108 0804 	add.w	r8, r8, #4
 800122c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800122e:	b100      	cbz	r0, 8001232 <_core_inspect_forward_validate+0x33e>
 8001230:	8800      	ldrh	r0, [r0, #0]
 8001232:	4287      	cmp	r7, r0
 8001234:	d221      	bcs.n	800127a <_core_inspect_forward_validate+0x386>
 8001236:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001238:	6840      	ldr	r0, [r0, #4]
 800123a:	b1f0      	cbz	r0, 800127a <_core_inspect_forward_validate+0x386>
 800123c:	f850 4008 	ldr.w	r4, [r0, r8]
 8001240:	b1dc      	cbz	r4, 800127a <_core_inspect_forward_validate+0x386>
 8001242:	9805      	ldr	r0, [sp, #20]
 8001244:	6901      	ldr	r1, [r0, #16]
 8001246:	69a0      	ldr	r0, [r4, #24]
 8001248:	6800      	ldr	r0, [r0, #0]
 800124a:	eb01 0b0a 	add.w	fp, r1, sl
 800124e:	f005 fde9 	bl	8006e24 <ai_array_to_buffer_fmt>
 8001252:	f8cb 0000 	str.w	r0, [fp]
 8001256:	f8ab 5004 	strh.w	r5, [fp, #4]
 800125a:	68e0      	ldr	r0, [r4, #12]
 800125c:	68c1      	ldr	r1, [r0, #12]
 800125e:	f8ab 1006 	strh.w	r1, [fp, #6]
 8001262:	f1b9 0104 	subs.w	r1, r9, #4
 8001266:	6882      	ldr	r2, [r0, #8]
 8001268:	f8ab 2008 	strh.w	r2, [fp, #8]
 800126c:	6840      	ldr	r0, [r0, #4]
 800126e:	f8cb 000c 	str.w	r0, [fp, #12]
 8001272:	f8cb 6010 	str.w	r6, [fp, #16]
 8001276:	d1b7      	bne.n	80011e8 <_core_inspect_forward_validate+0x2f4>
 8001278:	e7c8      	b.n	800120c <_core_inspect_forward_validate+0x318>
 800127a:	9804      	ldr	r0, [sp, #16]
 800127c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800127e:	9802      	ldr	r0, [sp, #8]
 8001280:	9905      	ldr	r1, [sp, #20]
 8001282:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001284:	6948      	ldr	r0, [r1, #20]
 8001286:	436b      	muls	r3, r5
 8001288:	18d6      	adds	r6, r2, r3
 800128a:	89cb      	ldrh	r3, [r1, #14]
 800128c:	1d02      	adds	r2, r0, #4
 800128e:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8001292:	eb02 09c4 	add.w	r9, r2, r4, lsl #3
 8001296:	2700      	movs	r7, #0
 8001298:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800129a:	9502      	str	r5, [sp, #8]
 800129c:	46b8      	mov	r8, r7
 800129e:	46ba      	mov	sl, r7
 80012a0:	9105      	str	r1, [sp, #20]
 80012a2:	e024      	b.n	80012ee <_core_inspect_forward_validate+0x3fa>
 80012a4:	2000      	movs	r0, #0
 80012a6:	f849 0c04 	str.w	r0, [r9, #-4]
 80012aa:	2100      	movs	r1, #0
 80012ac:	e00e      	b.n	80012cc <_core_inspect_forward_validate+0x3d8>
 80012ae:	2000      	movs	r0, #0
 80012b0:	f849 0c04 	str.w	r0, [r9, #-4]
 80012b4:	6828      	ldr	r0, [r5, #0]
 80012b6:	f8c9 0000 	str.w	r0, [r9]
 80012ba:	2800      	cmp	r0, #0
 80012bc:	bf1c      	itt	ne
 80012be:	8840      	ldrhne	r0, [r0, #2]
 80012c0:	2800      	cmpne	r0, #0
 80012c2:	d0ef      	beq.n	80012a4 <_core_inspect_forward_validate+0x3b0>
 80012c4:	f05f 0201 	movs.w	r2, #1
 80012c8:	f849 2c04 	str.w	r2, [r9, #-4]
 80012cc:	f8cb 1014 	str.w	r1, [fp, #20]
 80012d0:	1c7f      	adds	r7, r7, #1
 80012d2:	69a8      	ldr	r0, [r5, #24]
 80012d4:	6841      	ldr	r1, [r0, #4]
 80012d6:	9d02      	ldr	r5, [sp, #8]
 80012d8:	6800      	ldr	r0, [r0, #0]
 80012da:	f005 fe7b 	bl	8006fd4 <ai_array_get_byte_size>
 80012de:	4345      	muls	r5, r0
 80012e0:	442e      	add	r6, r5
 80012e2:	f10a 0a18 	add.w	sl, sl, #24
 80012e6:	f109 0908 	add.w	r9, r9, #8
 80012ea:	f108 0804 	add.w	r8, r8, #4
 80012ee:	2c00      	cmp	r4, #0
 80012f0:	bf14      	ite	ne
 80012f2:	8820      	ldrhne	r0, [r4, #0]
 80012f4:	2000      	moveq	r0, #0
 80012f6:	4287      	cmp	r7, r0
 80012f8:	f4bf af11 	bcs.w	800111e <_core_inspect_forward_validate+0x22a>
 80012fc:	6860      	ldr	r0, [r4, #4]
 80012fe:	2800      	cmp	r0, #0
 8001300:	bf1c      	itt	ne
 8001302:	f850 5008 	ldrne.w	r5, [r0, r8]
 8001306:	2d00      	cmpne	r5, #0
 8001308:	f43f af09 	beq.w	800111e <_core_inspect_forward_validate+0x22a>
 800130c:	9805      	ldr	r0, [sp, #20]
 800130e:	6941      	ldr	r1, [r0, #20]
 8001310:	69a8      	ldr	r0, [r5, #24]
 8001312:	6800      	ldr	r0, [r0, #0]
 8001314:	eb01 0b0a 	add.w	fp, r1, sl
 8001318:	f005 fd84 	bl	8006e24 <ai_array_to_buffer_fmt>
 800131c:	f8cb 0000 	str.w	r0, [fp]
 8001320:	9802      	ldr	r0, [sp, #8]
 8001322:	f8ab 0004 	strh.w	r0, [fp, #4]
 8001326:	68e8      	ldr	r0, [r5, #12]
 8001328:	68c1      	ldr	r1, [r0, #12]
 800132a:	f8ab 1006 	strh.w	r1, [fp, #6]
 800132e:	f1b9 0104 	subs.w	r1, r9, #4
 8001332:	6882      	ldr	r2, [r0, #8]
 8001334:	f8ab 2008 	strh.w	r2, [fp, #8]
 8001338:	6840      	ldr	r0, [r0, #4]
 800133a:	f8cb 000c 	str.w	r0, [fp, #12]
 800133e:	f8cb 6010 	str.w	r6, [fp, #16]
 8001342:	d1b4      	bne.n	80012ae <_core_inspect_forward_validate+0x3ba>
 8001344:	e7c2      	b.n	80012cc <_core_inspect_forward_validate+0x3d8>
 8001346:	69a9      	ldr	r1, [r5, #24]
 8001348:	6808      	ldr	r0, [r1, #0]
 800134a:	0042      	lsls	r2, r0, #1
 800134c:	d412      	bmi.n	8001374 <_core_inspect_forward_validate+0x480>
 800134e:	6849      	ldr	r1, [r1, #4]
 8001350:	f005 fe40 	bl	8006fd4 <ai_array_get_byte_size>
 8001354:	69ab      	ldr	r3, [r5, #24]
 8001356:	6899      	ldr	r1, [r3, #8]
 8001358:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800135c:	f103 0510 	add.w	r5, r3, #16
 8001360:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 8001364:	00db      	lsls	r3, r3, #3
 8001366:	4602      	mov	r2, r0
 8001368:	58eb      	ldr	r3, [r5, r3]
 800136a:	4370      	muls	r0, r6
 800136c:	4418      	add	r0, r3
 800136e:	f00f fd1a 	bl	8010da6 <__aeabi_memcpy>
 8001372:	1c7f      	adds	r7, r7, #1
 8001374:	f109 0901 	add.w	r9, r9, #1
 8001378:	f10a 0a04 	add.w	sl, sl, #4
 800137c:	2c00      	cmp	r4, #0
 800137e:	bf14      	ite	ne
 8001380:	8820      	ldrhne	r0, [r4, #0]
 8001382:	2000      	moveq	r0, #0
 8001384:	4581      	cmp	r9, r0
 8001386:	d206      	bcs.n	8001396 <_core_inspect_forward_validate+0x4a2>
 8001388:	6860      	ldr	r0, [r4, #4]
 800138a:	2800      	cmp	r0, #0
 800138c:	bf1c      	itt	ne
 800138e:	f850 500a 	ldrne.w	r5, [r0, sl]
 8001392:	2d00      	cmpne	r5, #0
 8001394:	d1d7      	bne.n	8001346 <_core_inspect_forward_validate+0x452>
 8001396:	9408      	str	r4, [sp, #32]
 8001398:	9606      	str	r6, [sp, #24]
 800139a:	f8cd 800c 	str.w	r8, [sp, #12]
 800139e:	9a00      	ldr	r2, [sp, #0]
 80013a0:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 80013a2:	2800      	cmp	r0, #0
 80013a4:	d06a      	beq.n	800147c <_core_inspect_forward_validate+0x588>
 80013a6:	9803      	ldr	r0, [sp, #12]
 80013a8:	e890 00fc 	ldmia.w	r0, {r2, r3, r4, r5, r6, r7}
 80013ac:	a909      	add	r1, sp, #36	; 0x24
 80013ae:	e881 00fc 	stmia.w	r1, {r2, r3, r4, r5, r6, r7}
 80013b2:	9904      	ldr	r1, [sp, #16]
 80013b4:	9c08      	ldr	r4, [sp, #32]
 80013b6:	910d      	str	r1, [sp, #52]	; 0x34
 80013b8:	2200      	movs	r2, #0
 80013ba:	920e      	str	r2, [sp, #56]	; 0x38
 80013bc:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 80013c0:	2600      	movs	r6, #0
 80013c2:	2700      	movs	r7, #0
 80013c4:	4690      	mov	r8, r2
 80013c6:	e00b      	b.n	80013e0 <_core_inspect_forward_validate+0x4ec>
 80013c8:	2000      	movs	r0, #0
 80013ca:	e003      	b.n	80013d4 <_core_inspect_forward_validate+0x4e0>
 80013cc:	000a      	movs	r2, r1
 80013ce:	f84b 1036 	str.w	r1, [fp, r6, lsl #3]
 80013d2:	d0f9      	beq.n	80013c8 <_core_inspect_forward_validate+0x4d4>
 80013d4:	f8c9 0014 	str.w	r0, [r9, #20]
 80013d8:	1c76      	adds	r6, r6, #1
 80013da:	1c7f      	adds	r7, r7, #1
 80013dc:	f108 0804 	add.w	r8, r8, #4
 80013e0:	2c00      	cmp	r4, #0
 80013e2:	bf14      	ite	ne
 80013e4:	8820      	ldrhne	r0, [r4, #0]
 80013e6:	2000      	moveq	r0, #0
 80013e8:	4287      	cmp	r7, r0
 80013ea:	d235      	bcs.n	8001458 <_core_inspect_forward_validate+0x564>
 80013ec:	6860      	ldr	r0, [r4, #4]
 80013ee:	b398      	cbz	r0, 8001458 <_core_inspect_forward_validate+0x564>
 80013f0:	f850 5008 	ldr.w	r5, [r0, r8]
 80013f4:	b385      	cbz	r5, 8001458 <_core_inspect_forward_validate+0x564>
 80013f6:	69a9      	ldr	r1, [r5, #24]
 80013f8:	6808      	ldr	r0, [r1, #0]
 80013fa:	0042      	lsls	r2, r0, #1
 80013fc:	d4ed      	bmi.n	80013da <_core_inspect_forward_validate+0x4e6>
 80013fe:	f8d1 a008 	ldr.w	sl, [r1, #8]
 8001402:	990d      	ldr	r1, [sp, #52]	; 0x34
 8001404:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8001408:	eb01 09c2 	add.w	r9, r1, r2, lsl #3
 800140c:	f005 fd0a 	bl	8006e24 <ai_array_to_buffer_fmt>
 8001410:	f8c9 0000 	str.w	r0, [r9]
 8001414:	2001      	movs	r0, #1
 8001416:	f8a9 0004 	strh.w	r0, [r9, #4]
 800141a:	68e8      	ldr	r0, [r5, #12]
 800141c:	68c1      	ldr	r1, [r0, #12]
 800141e:	f8a9 1006 	strh.w	r1, [r9, #6]
 8001422:	6882      	ldr	r2, [r0, #8]
 8001424:	f8a9 2008 	strh.w	r2, [r9, #8]
 8001428:	6840      	ldr	r0, [r0, #4]
 800142a:	f8c9 000c 	str.w	r0, [r9, #12]
 800142e:	f8c9 a010 	str.w	sl, [r9, #16]
 8001432:	eb1b 00c6 	adds.w	r0, fp, r6, lsl #3
 8001436:	d0cd      	beq.n	80013d4 <_core_inspect_forward_validate+0x4e0>
 8001438:	2100      	movs	r1, #0
 800143a:	f84b 1036 	str.w	r1, [fp, r6, lsl #3]
 800143e:	f10b 0204 	add.w	r2, fp, #4
 8001442:	6829      	ldr	r1, [r5, #0]
 8001444:	f842 1036 	str.w	r1, [r2, r6, lsl #3]
 8001448:	2900      	cmp	r1, #0
 800144a:	d0bf      	beq.n	80013cc <_core_inspect_forward_validate+0x4d8>
 800144c:	8849      	ldrh	r1, [r1, #2]
 800144e:	1e49      	subs	r1, r1, #1
 8001450:	4189      	sbcs	r1, r1
 8001452:	43c9      	mvns	r1, r1
 8001454:	0fc9      	lsrs	r1, r1, #31
 8001456:	e7b9      	b.n	80013cc <_core_inspect_forward_validate+0x4d8>
 8001458:	9802      	ldr	r0, [sp, #8]
 800145a:	9b00      	ldr	r3, [sp, #0]
 800145c:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 8001460:	9800      	ldr	r0, [sp, #0]
 8001462:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8001466:	eddf 0a90 	vldr	s1, [pc, #576]	; 80016a8 <.text_5>
 800146a:	ee60 0a20 	vmul.f32	s1, s0, s1
 800146e:	edcd 0a0b 	vstr	s1, [sp, #44]	; 0x2c
 8001472:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8001474:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001476:	2200      	movs	r2, #0
 8001478:	a909      	add	r1, sp, #36	; 0x24
 800147a:	47a0      	blx	r4
 800147c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800147e:	f9b0 0000 	ldrsh.w	r0, [r0]
 8001482:	f000 fcb3 	bl	8001dec <ai_layer_type_is_valid>
 8001486:	2800      	cmp	r0, #0
 8001488:	9802      	ldr	r0, [sp, #8]
 800148a:	d006      	beq.n	800149a <_core_inspect_forward_validate+0x5a6>
 800148c:	302c      	adds	r0, #44	; 0x2c
 800148e:	f005 ff8a 	bl	80073a6 <core_timer_start>
 8001492:	9810      	ldr	r0, [sp, #64]	; 0x40
 8001494:	6902      	ldr	r2, [r0, #16]
 8001496:	4790      	blx	r2
 8001498:	e002      	b.n	80014a0 <_core_inspect_forward_validate+0x5ac>
 800149a:	302c      	adds	r0, #44	; 0x2c
 800149c:	f005 ff83 	bl	80073a6 <core_timer_start>
 80014a0:	9802      	ldr	r0, [sp, #8]
 80014a2:	302c      	adds	r0, #44	; 0x2c
 80014a4:	f005 ff89 	bl	80073ba <core_timer_stop>
 80014a8:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80014ac:	b390      	cbz	r0, 8001514 <_core_inspect_forward_validate+0x620>
 80014ae:	2700      	movs	r7, #0
 80014b0:	9c07      	ldr	r4, [sp, #28]
 80014b2:	9e06      	ldr	r6, [sp, #24]
 80014b4:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80014b8:	46b9      	mov	r9, r7
 80014ba:	46ba      	mov	sl, r7
 80014bc:	e01a      	b.n	80014f4 <_core_inspect_forward_validate+0x600>
 80014be:	69a9      	ldr	r1, [r5, #24]
 80014c0:	6808      	ldr	r0, [r1, #0]
 80014c2:	0042      	lsls	r2, r0, #1
 80014c4:	d412      	bmi.n	80014ec <_core_inspect_forward_validate+0x5f8>
 80014c6:	6849      	ldr	r1, [r1, #4]
 80014c8:	f005 fd84 	bl	8006fd4 <ai_array_get_byte_size>
 80014cc:	69ab      	ldr	r3, [r5, #24]
 80014ce:	6899      	ldr	r1, [r3, #8]
 80014d0:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80014d4:	f103 0510 	add.w	r5, r3, #16
 80014d8:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	4602      	mov	r2, r0
 80014e0:	58eb      	ldr	r3, [r5, r3]
 80014e2:	4370      	muls	r0, r6
 80014e4:	4418      	add	r0, r3
 80014e6:	f00f fc5e 	bl	8010da6 <__aeabi_memcpy>
 80014ea:	1c7f      	adds	r7, r7, #1
 80014ec:	f109 0901 	add.w	r9, r9, #1
 80014f0:	f10a 0a04 	add.w	sl, sl, #4
 80014f4:	2c00      	cmp	r4, #0
 80014f6:	bf14      	ite	ne
 80014f8:	8820      	ldrhne	r0, [r4, #0]
 80014fa:	2000      	moveq	r0, #0
 80014fc:	4581      	cmp	r9, r0
 80014fe:	d206      	bcs.n	800150e <_core_inspect_forward_validate+0x61a>
 8001500:	6860      	ldr	r0, [r4, #4]
 8001502:	2800      	cmp	r0, #0
 8001504:	bf1c      	itt	ne
 8001506:	f850 500a 	ldrne.w	r5, [r0, sl]
 800150a:	2d00      	cmpne	r5, #0
 800150c:	d1d7      	bne.n	80014be <_core_inspect_forward_validate+0x5ca>
 800150e:	9407      	str	r4, [sp, #28]
 8001510:	f8cd 800c 	str.w	r8, [sp, #12]
 8001514:	9900      	ldr	r1, [sp, #0]
 8001516:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 8001518:	2800      	cmp	r0, #0
 800151a:	d06b      	beq.n	80015f4 <_core_inspect_forward_validate+0x700>
 800151c:	9a03      	ldr	r2, [sp, #12]
 800151e:	e892 10f8 	ldmia.w	r2, {r3, r4, r5, r6, r7, ip}
 8001522:	a908      	add	r1, sp, #32
 8001524:	e881 10f8 	stmia.w	r1, {r3, r4, r5, r6, r7, ip}
 8001528:	2100      	movs	r1, #0
 800152a:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 800152e:	910c      	str	r1, [sp, #48]	; 0x30
 8001530:	2600      	movs	r6, #0
 8001532:	9804      	ldr	r0, [sp, #16]
 8001534:	9c07      	ldr	r4, [sp, #28]
 8001536:	900d      	str	r0, [sp, #52]	; 0x34
 8001538:	2700      	movs	r7, #0
 800153a:	4688      	mov	r8, r1
 800153c:	e00c      	b.n	8001558 <_core_inspect_forward_validate+0x664>
 800153e:	2000      	movs	r0, #0
 8001540:	e004      	b.n	800154c <_core_inspect_forward_validate+0x658>
 8001542:	000a      	movs	r2, r1
 8001544:	f84b 1036 	str.w	r1, [fp, r6, lsl #3]
 8001548:	f43f aff9 	beq.w	800153e <_core_inspect_forward_validate+0x64a>
 800154c:	f8c9 0014 	str.w	r0, [r9, #20]
 8001550:	1c76      	adds	r6, r6, #1
 8001552:	1c7f      	adds	r7, r7, #1
 8001554:	f108 0804 	add.w	r8, r8, #4
 8001558:	2c00      	cmp	r4, #0
 800155a:	bf14      	ite	ne
 800155c:	8820      	ldrhne	r0, [r4, #0]
 800155e:	2000      	moveq	r0, #0
 8001560:	4287      	cmp	r7, r0
 8001562:	d235      	bcs.n	80015d0 <_core_inspect_forward_validate+0x6dc>
 8001564:	6860      	ldr	r0, [r4, #4]
 8001566:	b398      	cbz	r0, 80015d0 <_core_inspect_forward_validate+0x6dc>
 8001568:	f850 5008 	ldr.w	r5, [r0, r8]
 800156c:	b385      	cbz	r5, 80015d0 <_core_inspect_forward_validate+0x6dc>
 800156e:	69a9      	ldr	r1, [r5, #24]
 8001570:	6808      	ldr	r0, [r1, #0]
 8001572:	0042      	lsls	r2, r0, #1
 8001574:	d4ed      	bmi.n	8001552 <_core_inspect_forward_validate+0x65e>
 8001576:	f8d1 a008 	ldr.w	sl, [r1, #8]
 800157a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800157c:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8001580:	eb01 09c2 	add.w	r9, r1, r2, lsl #3
 8001584:	f005 fc4e 	bl	8006e24 <ai_array_to_buffer_fmt>
 8001588:	f8c9 0000 	str.w	r0, [r9]
 800158c:	2001      	movs	r0, #1
 800158e:	f8a9 0004 	strh.w	r0, [r9, #4]
 8001592:	68e8      	ldr	r0, [r5, #12]
 8001594:	68c1      	ldr	r1, [r0, #12]
 8001596:	f8a9 1006 	strh.w	r1, [r9, #6]
 800159a:	6882      	ldr	r2, [r0, #8]
 800159c:	f8a9 2008 	strh.w	r2, [r9, #8]
 80015a0:	6840      	ldr	r0, [r0, #4]
 80015a2:	f8c9 000c 	str.w	r0, [r9, #12]
 80015a6:	f8c9 a010 	str.w	sl, [r9, #16]
 80015aa:	eb1b 00c6 	adds.w	r0, fp, r6, lsl #3
 80015ae:	d0cd      	beq.n	800154c <_core_inspect_forward_validate+0x658>
 80015b0:	2100      	movs	r1, #0
 80015b2:	f84b 1036 	str.w	r1, [fp, r6, lsl #3]
 80015b6:	f10b 0204 	add.w	r2, fp, #4
 80015ba:	6829      	ldr	r1, [r5, #0]
 80015bc:	f842 1036 	str.w	r1, [r2, r6, lsl #3]
 80015c0:	2900      	cmp	r1, #0
 80015c2:	d0be      	beq.n	8001542 <_core_inspect_forward_validate+0x64e>
 80015c4:	8849      	ldrh	r1, [r1, #2]
 80015c6:	1e49      	subs	r1, r1, #1
 80015c8:	4189      	sbcs	r1, r1
 80015ca:	43c9      	mvns	r1, r1
 80015cc:	0fc9      	lsrs	r1, r1, #31
 80015ce:	e7b8      	b.n	8001542 <_core_inspect_forward_validate+0x64e>
 80015d0:	9802      	ldr	r0, [sp, #8]
 80015d2:	9b00      	ldr	r3, [sp, #0]
 80015d4:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 80015d8:	9800      	ldr	r0, [sp, #0]
 80015da:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80015de:	eddf 0a32 	vldr	s1, [pc, #200]	; 80016a8 <.text_5>
 80015e2:	ee60 0a20 	vmul.f32	s1, s0, s1
 80015e6:	edcd 0a0a 	vstr	s1, [sp, #40]	; 0x28
 80015ea:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80015ec:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80015ee:	2201      	movs	r2, #1
 80015f0:	a908      	add	r1, sp, #32
 80015f2:	47a0      	blx	r4
 80015f4:	9910      	ldr	r1, [sp, #64]	; 0x40
 80015f6:	688a      	ldr	r2, [r1, #8]
 80015f8:	9800      	ldr	r0, [sp, #0]
 80015fa:	6090      	str	r0, [r2, #8]
 80015fc:	9802      	ldr	r0, [sp, #8]
 80015fe:	6881      	ldr	r1, [r0, #8]
 8001600:	9810      	ldr	r0, [sp, #64]	; 0x40
 8001602:	f041 0101 	orr.w	r1, r1, #1
 8001606:	6101      	str	r1, [r0, #16]
 8001608:	9910      	ldr	r1, [sp, #64]	; 0x40
 800160a:	68c8      	ldr	r0, [r1, #12]
 800160c:	4281      	cmp	r1, r0
 800160e:	bf18      	it	ne
 8001610:	2800      	cmpne	r0, #0
 8001612:	d141      	bne.n	8001698 <_core_inspect_forward_validate+0x7a4>
 8001614:	9800      	ldr	r0, [sp, #0]
 8001616:	68c2      	ldr	r2, [r0, #12]
 8001618:	1c52      	adds	r2, r2, #1
 800161a:	60c2      	str	r2, [r0, #12]
 800161c:	9900      	ldr	r1, [sp, #0]
 800161e:	69c8      	ldr	r0, [r1, #28]
 8001620:	1e40      	subs	r0, r0, #1
 8001622:	61c8      	str	r0, [r1, #28]
 8001624:	d138      	bne.n	8001698 <_core_inspect_forward_validate+0x7a4>
 8001626:	9800      	ldr	r0, [sp, #0]
 8001628:	6a03      	ldr	r3, [r0, #32]
 800162a:	6899      	ldr	r1, [r3, #8]
 800162c:	6880      	ldr	r0, [r0, #8]
 800162e:	1a52      	subs	r2, r2, r1
 8001630:	609a      	str	r2, [r3, #8]
 8001632:	09c0      	lsrs	r0, r0, #7
 8001634:	2200      	movs	r2, #0
 8001636:	611a      	str	r2, [r3, #16]
 8001638:	f000 0001 	and.w	r0, r0, #1
 800163c:	9900      	ldr	r1, [sp, #0]
 800163e:	698a      	ldr	r2, [r1, #24]
 8001640:	2400      	movs	r4, #0
 8001642:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80016a8 <.text_5>
 8001646:	b33a      	cbz	r2, 8001698 <_core_inspect_forward_validate+0x7a4>
 8001648:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 800164a:	3534      	adds	r5, #52	; 0x34
 800164c:	ebc4 06c4 	rsb	r6, r4, r4, lsl #3
 8001650:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
 8001654:	695d      	ldr	r5, [r3, #20]
 8001656:	edd6 0a00 	vldr	s1, [r6]
 800165a:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 800165e:	00f6      	lsls	r6, r6, #3
 8001660:	f105 0708 	add.w	r7, r5, #8
 8001664:	eef8 0a60 	vcvt.f32.u32	s1, s1
 8001668:	4437      	add	r7, r6
 800166a:	ee60 0a80 	vmul.f32	s1, s1, s0
 800166e:	edc7 0a00 	vstr	s1, [r7]
 8001672:	ed93 1a04 	vldr	s2, [r3, #16]
 8001676:	ee71 0a20 	vadd.f32	s1, s2, s1
 800167a:	edc3 0a04 	vstr	s1, [r3, #16]
 800167e:	b930      	cbnz	r0, 800168e <_core_inspect_forward_validate+0x79a>
 8001680:	f105 0c14 	add.w	ip, r5, #20
 8001684:	2700      	movs	r7, #0
 8001686:	f84c 7006 	str.w	r7, [ip, r6]
 800168a:	3510      	adds	r5, #16
 800168c:	51af      	str	r7, [r5, r6]
 800168e:	1c64      	adds	r4, r4, #1
 8001690:	b2a4      	uxth	r4, r4
 8001692:	4294      	cmp	r4, r2
 8001694:	d3d8      	bcc.n	8001648 <_core_inspect_forward_validate+0x754>
 8001696:	9100      	str	r1, [sp, #0]
 8001698:	9800      	ldr	r0, [sp, #0]
 800169a:	6941      	ldr	r1, [r0, #20]
 800169c:	1c49      	adds	r1, r1, #1
 800169e:	6141      	str	r1, [r0, #20]
 80016a0:	b011      	add	sp, #68	; 0x44
 80016a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080016a8 <.text_5>:
 80016a8:	3a83126f 	.word	0x3a83126f

080016ac <ai_network_inspect_init>:
 80016ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016b0:	b083      	sub	sp, #12
 80016b2:	460c      	mov	r4, r1
 80016b4:	f7fe ffd7 	bl	8000666 <ai_platform_context_acquire>
 80016b8:	2600      	movs	r6, #0
 80016ba:	9000      	str	r0, [sp, #0]
 80016bc:	2800      	cmp	r0, #0
 80016be:	bf1c      	itt	ne
 80016c0:	6d01      	ldrne	r1, [r0, #80]	; 0x50
 80016c2:	2900      	cmpne	r1, #0
 80016c4:	d010      	beq.n	80016e8 <ai_network_inspect_init+0x3c>
 80016c6:	e000      	b.n	80016ca <ai_network_inspect_init+0x1e>
 80016c8:	4601      	mov	r1, r0
 80016ca:	68c8      	ldr	r0, [r1, #12]
 80016cc:	1c76      	adds	r6, r6, #1
 80016ce:	4281      	cmp	r1, r0
 80016d0:	bf18      	it	ne
 80016d2:	2800      	cmpne	r0, #0
 80016d4:	d1f8      	bne.n	80016c8 <ai_network_inspect_init+0x1c>
 80016d6:	b13e      	cbz	r6, 80016e8 <ai_network_inspect_init+0x3c>
 80016d8:	ebc6 00c6 	rsb	r0, r6, r6, lsl #3
 80016dc:	00c0      	lsls	r0, r0, #3
 80016de:	3040      	adds	r0, #64	; 0x40
 80016e0:	f7ff fb98 	bl	8000e14 <core_mem_alloc>
 80016e4:	0005      	movs	r5, r0
 80016e6:	d103      	bne.n	80016f0 <ai_network_inspect_init+0x44>
 80016e8:	2000      	movs	r0, #0
 80016ea:	b003      	add	sp, #12
 80016ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80016f0:	497a      	ldr	r1, [pc, #488]	; (80018dc <.text_10>)
 80016f2:	6001      	str	r1, [r0, #0]
 80016f4:	2c00      	cmp	r4, #0
 80016f6:	bf14      	ite	ne
 80016f8:	6861      	ldrne	r1, [r4, #4]
 80016fa:	2100      	moveq	r1, #0
 80016fc:	6281      	str	r1, [r0, #40]	; 0x28
 80016fe:	2c00      	cmp	r4, #0
 8001700:	bf14      	ite	ne
 8001702:	68a1      	ldrne	r1, [r4, #8]
 8001704:	2100      	moveq	r1, #0
 8001706:	62c1      	str	r1, [r0, #44]	; 0x2c
 8001708:	2c00      	cmp	r4, #0
 800170a:	bf14      	ite	ne
 800170c:	68e1      	ldrne	r1, [r4, #12]
 800170e:	2100      	moveq	r1, #0
 8001710:	6301      	str	r1, [r0, #48]	; 0x30
 8001712:	2c00      	cmp	r4, #0
 8001714:	bf14      	ite	ne
 8001716:	7821      	ldrbne	r1, [r4, #0]
 8001718:	2101      	moveq	r1, #1
 800171a:	6081      	str	r1, [r0, #8]
 800171c:	9900      	ldr	r1, [sp, #0]
 800171e:	688a      	ldr	r2, [r1, #8]
 8001720:	6042      	str	r2, [r0, #4]
 8001722:	2100      	movs	r1, #0
 8001724:	60c1      	str	r1, [r0, #12]
 8001726:	9a00      	ldr	r2, [sp, #0]
 8001728:	6141      	str	r1, [r0, #20]
 800172a:	6102      	str	r2, [r0, #16]
 800172c:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8001730:	2200      	movs	r2, #0
 8001732:	6241      	str	r1, [r0, #36]	; 0x24
 8001734:	6186      	str	r6, [r0, #24]
 8001736:	61c2      	str	r2, [r0, #28]
 8001738:	6202      	str	r2, [r0, #32]
 800173a:	2600      	movs	r6, #0
 800173c:	9900      	ldr	r1, [sp, #0]
 800173e:	6088      	str	r0, [r1, #8]
 8001740:	4692      	mov	sl, r2
 8001742:	4967      	ldr	r1, [pc, #412]	; (80018e0 <.text_11>)
 8001744:	f041 0101 	orr.w	r1, r1, #1
 8001748:	9102      	str	r1, [sp, #8]
 800174a:	4691      	mov	r9, r2
 800174c:	9902      	ldr	r1, [sp, #8]
 800174e:	9101      	str	r1, [sp, #4]
 8001750:	636a      	str	r2, [r5, #52]	; 0x34
 8001752:	63aa      	str	r2, [r5, #56]	; 0x38
 8001754:	4690      	mov	r8, r2
 8001756:	9800      	ldr	r0, [sp, #0]
 8001758:	6d00      	ldr	r0, [r0, #80]	; 0x50
 800175a:	2800      	cmp	r0, #0
 800175c:	d055      	beq.n	800180a <ai_network_inspect_init+0x15e>
 800175e:	4607      	mov	r7, r0
 8001760:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8001762:	ebca 01ca 	rsb	r1, sl, sl, lsl #3
 8001766:	eb10 04c1 	adds.w	r4, r0, r1, lsl #3
 800176a:	9801      	ldr	r0, [sp, #4]
 800176c:	60a0      	str	r0, [r4, #8]
 800176e:	f10a 0a01 	add.w	sl, sl, #1
 8001772:	bf08      	it	eq
 8001774:	f04f 0b00 	moveq.w	fp, #0
 8001778:	d022      	beq.n	80017c0 <ai_network_inspect_init+0x114>
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	6020      	str	r0, [r4, #0]
 800177e:	6939      	ldr	r1, [r7, #16]
 8001780:	f041 0101 	orr.w	r1, r1, #1
 8001784:	6061      	str	r1, [r4, #4]
 8001786:	9802      	ldr	r0, [sp, #8]
 8001788:	f040 0001 	orr.w	r0, r0, #1
 800178c:	6138      	str	r0, [r7, #16]
 800178e:	6979      	ldr	r1, [r7, #20]
 8001790:	8808      	ldrh	r0, [r1, #0]
 8001792:	b108      	cbz	r0, 8001798 <ai_network_inspect_init+0xec>
 8001794:	f8d1 0004 	ldr.w	r0, [r1, #4]
 8001798:	f104 010c 	add.w	r1, r4, #12
 800179c:	f7ff fb7a 	bl	8000e94 <_core_inspect_tensor_list>
 80017a0:	4683      	mov	fp, r0
 80017a2:	6978      	ldr	r0, [r7, #20]
 80017a4:	8801      	ldrh	r1, [r0, #0]
 80017a6:	2902      	cmp	r1, #2
 80017a8:	bfa6      	itte	ge
 80017aa:	6840      	ldrge	r0, [r0, #4]
 80017ac:	300c      	addge	r0, #12
 80017ae:	2000      	movlt	r0, #0
 80017b0:	f104 011c 	add.w	r1, r4, #28
 80017b4:	f7ff fb6e 	bl	8000e94 <_core_inspect_tensor_list>
 80017b8:	4583      	cmp	fp, r0
 80017ba:	bf38      	it	cc
 80017bc:	4683      	movcc	fp, r0
 80017be:	bf00      	nop
 80017c0:	f8c4 9010 	str.w	r9, [r4, #16]
 80017c4:	f8c4 8020 	str.w	r8, [r4, #32]
 80017c8:	45b3      	cmp	fp, r6
 80017ca:	68e0      	ldr	r0, [r4, #12]
 80017cc:	69e1      	ldr	r1, [r4, #28]
 80017ce:	4481      	add	r9, r0
 80017d0:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80017d2:	61a0      	str	r0, [r4, #24]
 80017d4:	4488      	add	r8, r1
 80017d6:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 80017d8:	62a1      	str	r1, [r4, #40]	; 0x28
 80017da:	bf28      	it	cs
 80017dc:	465e      	movcs	r6, fp
 80017de:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80017e0:	6961      	ldr	r1, [r4, #20]
 80017e2:	1808      	adds	r0, r1, r0
 80017e4:	6368      	str	r0, [r5, #52]	; 0x34
 80017e6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80017e8:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 80017ea:	1808      	adds	r0, r1, r0
 80017ec:	63a8      	str	r0, [r5, #56]	; 0x38
 80017ee:	f9b7 0000 	ldrsh.w	r0, [r7]
 80017f2:	f000 fa73 	bl	8001cdc <ai_layer_type_name>
 80017f6:	4601      	mov	r1, r0
 80017f8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80017fc:	f005 fdb8 	bl	8007370 <core_timer_init>
 8001800:	68f8      	ldr	r0, [r7, #12]
 8001802:	4287      	cmp	r7, r0
 8001804:	bf18      	it	ne
 8001806:	2800      	cmpne	r0, #0
 8001808:	d1a9      	bne.n	800175e <ai_network_inspect_init+0xb2>
 800180a:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800180c:	63ee      	str	r6, [r5, #60]	; 0x3c
 800180e:	1cc0      	adds	r0, r0, #3
 8001810:	0880      	lsrs	r0, r0, #2
 8001812:	0080      	lsls	r0, r0, #2
 8001814:	6368      	str	r0, [r5, #52]	; 0x34
 8001816:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8001818:	1cc0      	adds	r0, r0, #3
 800181a:	0880      	lsrs	r0, r0, #2
 800181c:	0080      	lsls	r0, r0, #2
 800181e:	63a8      	str	r0, [r5, #56]	; 0x38
 8001820:	9800      	ldr	r0, [sp, #0]
 8001822:	b003      	add	sp, #12
 8001824:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001828:	1d01      	adds	r1, r0, #4
 800182a:	f000 b90b 	b.w	8001a44 <core_utils_generate_network_signature>

0800182e <ai_network_inspect_get_report>:
 800182e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001830:	b081      	sub	sp, #4
 8001832:	460c      	mov	r4, r1
 8001834:	f7fe ff17 	bl	8000666 <ai_platform_context_acquire>
 8001838:	2800      	cmp	r0, #0
 800183a:	bf18      	it	ne
 800183c:	2c00      	cmpne	r4, #0
 800183e:	d002      	beq.n	8001846 <ai_network_inspect_get_report+0x18>
 8001840:	6881      	ldr	r1, [r0, #8]
 8001842:	6a09      	ldr	r1, [r1, #32]
 8001844:	b911      	cbnz	r1, 800184c <ai_network_inspect_get_report+0x1e>
 8001846:	2000      	movs	r0, #0
 8001848:	b001      	add	sp, #4
 800184a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800184c:	e891 10ec 	ldmia.w	r1, {r2, r3, r5, r6, r7, ip}
 8001850:	e884 10ec 	stmia.w	r4, {r2, r3, r5, r6, r7, ip}
 8001854:	6840      	ldr	r0, [r0, #4]
 8001856:	6060      	str	r0, [r4, #4]
 8001858:	b001      	add	sp, #4
 800185a:	2001      	movs	r0, #1
 800185c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800185e <ai_network_inspect_destroy>:
 800185e:	b530      	push	{r4, r5, lr}
 8001860:	b081      	sub	sp, #4
 8001862:	f7fe ff00 	bl	8000666 <ai_platform_context_acquire>
 8001866:	4601      	mov	r1, r0
 8001868:	2300      	movs	r3, #0
 800186a:	2900      	cmp	r1, #0
 800186c:	bf1c      	itt	ne
 800186e:	688c      	ldrne	r4, [r1, #8]
 8001870:	2c00      	cmpne	r4, #0
 8001872:	d003      	beq.n	800187c <ai_network_inspect_destroy+0x1e>
 8001874:	6820      	ldr	r0, [r4, #0]
 8001876:	4a19      	ldr	r2, [pc, #100]	; (80018dc <.text_10>)
 8001878:	4290      	cmp	r0, r2
 800187a:	d002      	beq.n	8001882 <ai_network_inspect_destroy+0x24>
 800187c:	2000      	movs	r0, #0
 800187e:	b001      	add	sp, #4
 8001880:	bd30      	pop	{r4, r5, pc}
 8001882:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8001884:	b19a      	cbz	r2, 80018ae <ai_network_inspect_destroy+0x50>
 8001886:	e000      	b.n	800188a <ai_network_inspect_destroy+0x2c>
 8001888:	4602      	mov	r2, r0
 800188a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800188c:	ebc3 05c3 	rsb	r5, r3, r3, lsl #3
 8001890:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
 8001894:	1c5b      	adds	r3, r3, #1
 8001896:	b128      	cbz	r0, 80018a4 <ai_network_inspect_destroy+0x46>
 8001898:	6805      	ldr	r5, [r0, #0]
 800189a:	6055      	str	r5, [r2, #4]
 800189c:	6840      	ldr	r0, [r0, #4]
 800189e:	f040 0001 	orr.w	r0, r0, #1
 80018a2:	6110      	str	r0, [r2, #16]
 80018a4:	68d0      	ldr	r0, [r2, #12]
 80018a6:	4282      	cmp	r2, r0
 80018a8:	bf18      	it	ne
 80018aa:	2800      	cmpne	r0, #0
 80018ac:	d1ec      	bne.n	8001888 <ai_network_inspect_destroy+0x2a>
 80018ae:	6860      	ldr	r0, [r4, #4]
 80018b0:	6088      	str	r0, [r1, #8]
 80018b2:	6a21      	ldr	r1, [r4, #32]
 80018b4:	b929      	cbnz	r1, 80018c2 <ai_network_inspect_destroy+0x64>
 80018b6:	4620      	mov	r0, r4
 80018b8:	f7ff fab9 	bl	8000e2e <core_mem_free>
 80018bc:	2001      	movs	r0, #1
 80018be:	b001      	add	sp, #4
 80018c0:	bd30      	pop	{r4, r5, pc}
 80018c2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80018c4:	b10a      	cbz	r2, 80018ca <ai_network_inspect_destroy+0x6c>
 80018c6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80018c8:	4790      	blx	r2
 80018ca:	6a20      	ldr	r0, [r4, #32]
 80018cc:	f7ff faaf 	bl	8000e2e <core_mem_free>
 80018d0:	2000      	movs	r0, #0
 80018d2:	6220      	str	r0, [r4, #32]
 80018d4:	e7ef      	b.n	80018b6 <ai_network_inspect_destroy+0x58>
	...

080018d8 <.text_9>:
 80018d8:	20000000 	.word	0x20000000

080018dc <.text_10>:
 80018dc:	a1c00101 	.word	0xa1c00101

080018e0 <.text_11>:
 80018e0:	08000ef5 	.word	0x08000ef5

080018e4 <serialize_signature_buffer_>:
 80018e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018e6:	b081      	sub	sp, #4
 80018e8:	460c      	mov	r4, r1
 80018ea:	2100      	movs	r1, #0
 80018ec:	9100      	str	r1, [sp, #0]
 80018ee:	b10c      	cbz	r4, 80018f4 <serialize_signature_buffer_+0x10>
 80018f0:	6801      	ldr	r1, [r0, #0]
 80018f2:	6021      	str	r1, [r4, #0]
 80018f4:	1d27      	adds	r7, r4, #4
 80018f6:	6d06      	ldr	r6, [r0, #80]	; 0x50
 80018f8:	2e00      	cmp	r6, #0
 80018fa:	d046      	beq.n	800198a <serialize_signature_buffer_+0xa6>
 80018fc:	e000      	b.n	8001900 <serialize_signature_buffer_+0x1c>
 80018fe:	4606      	mov	r6, r0
 8001900:	6970      	ldr	r0, [r6, #20]
 8001902:	8801      	ldrh	r1, [r0, #0]
 8001904:	2902      	cmp	r1, #2
 8001906:	bfa6      	itte	ge
 8001908:	6840      	ldrge	r0, [r0, #4]
 800190a:	3010      	addge	r0, #16
 800190c:	2004      	movlt	r0, #4
 800190e:	6800      	ldr	r0, [r0, #0]
 8001910:	2800      	cmp	r0, #0
 8001912:	bf14      	ite	ne
 8001914:	6805      	ldrne	r5, [r0, #0]
 8001916:	2500      	moveq	r5, #0
 8001918:	9800      	ldr	r0, [sp, #0]
 800191a:	1c40      	adds	r0, r0, #1
 800191c:	9000      	str	r0, [sp, #0]
 800191e:	b90c      	cbnz	r4, 8001924 <serialize_signature_buffer_+0x40>
 8001920:	1cb8      	adds	r0, r7, #2
 8001922:	e009      	b.n	8001938 <serialize_signature_buffer_+0x54>
 8001924:	7830      	ldrb	r0, [r6, #0]
 8001926:	7038      	strb	r0, [r7, #0]
 8001928:	1cb1      	adds	r1, r6, #2
 800192a:	7870      	ldrb	r0, [r6, #1]
 800192c:	7078      	strb	r0, [r7, #1]
 800192e:	1cb8      	adds	r0, r7, #2
 8001930:	780a      	ldrb	r2, [r1, #0]
 8001932:	7002      	strb	r2, [r0, #0]
 8001934:	784a      	ldrb	r2, [r1, #1]
 8001936:	7042      	strb	r2, [r0, #1]
 8001938:	1c87      	adds	r7, r0, #2
 800193a:	b30d      	cbz	r5, 8001980 <serialize_signature_buffer_+0x9c>
 800193c:	b18c      	cbz	r4, 8001962 <serialize_signature_buffer_+0x7e>
 800193e:	69a8      	ldr	r0, [r5, #24]
 8001940:	6801      	ldr	r1, [r0, #0]
 8001942:	6039      	str	r1, [r7, #0]
 8001944:	f105 0008 	add.w	r0, r5, #8
 8001948:	68e9      	ldr	r1, [r5, #12]
 800194a:	6803      	ldr	r3, [r0, #0]
 800194c:	1d3a      	adds	r2, r7, #4
 800194e:	6013      	str	r3, [r2, #0]
 8001950:	6843      	ldr	r3, [r0, #4]
 8001952:	6053      	str	r3, [r2, #4]
 8001954:	f107 000c 	add.w	r0, r7, #12
 8001958:	68aa      	ldr	r2, [r5, #8]
 800195a:	0a12      	lsrs	r2, r2, #8
 800195c:	0092      	lsls	r2, r2, #2
 800195e:	f00f fa22 	bl	8010da6 <__aeabi_memcpy>
 8001962:	68a8      	ldr	r0, [r5, #8]
 8001964:	f107 030c 	add.w	r3, r7, #12
 8001968:	0a00      	lsrs	r0, r0, #8
 800196a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800196e:	b12c      	cbz	r4, 800197c <serialize_signature_buffer_+0x98>
 8001970:	f105 0110 	add.w	r1, r5, #16
 8001974:	680a      	ldr	r2, [r1, #0]
 8001976:	6002      	str	r2, [r0, #0]
 8001978:	684a      	ldr	r2, [r1, #4]
 800197a:	6042      	str	r2, [r0, #4]
 800197c:	f100 0708 	add.w	r7, r0, #8
 8001980:	68f0      	ldr	r0, [r6, #12]
 8001982:	4286      	cmp	r6, r0
 8001984:	bf18      	it	ne
 8001986:	2800      	cmpne	r0, #0
 8001988:	d1b9      	bne.n	80018fe <serialize_signature_buffer_+0x1a>
 800198a:	b10c      	cbz	r4, 8001990 <serialize_signature_buffer_+0xac>
 800198c:	9900      	ldr	r1, [sp, #0]
 800198e:	6039      	str	r1, [r7, #0]
 8001990:	1d39      	adds	r1, r7, #4
 8001992:	1b08      	subs	r0, r1, r4
 8001994:	b001      	add	sp, #4
 8001996:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001998 <core_utils_compute_crc32>:
 8001998:	b470      	push	{r4, r5, r6}
 800199a:	0849      	lsrs	r1, r1, #1
 800199c:	2400      	movs	r4, #0
 800199e:	2300      	movs	r3, #0
 80019a0:	f5b1 7fb4 	cmp.w	r1, #360	; 0x168
 80019a4:	4602      	mov	r2, r0
 80019a6:	d32a      	bcc.n	80019fe <core_utils_compute_crc32+0x66>
 80019a8:	f05f 002d 	movs.w	r0, #45	; 0x2d
 80019ac:	f832 5b02 	ldrh.w	r5, [r2], #2
 80019b0:	1964      	adds	r4, r4, r5
 80019b2:	f832 5b02 	ldrh.w	r5, [r2], #2
 80019b6:	18e3      	adds	r3, r4, r3
 80019b8:	1964      	adds	r4, r4, r5
 80019ba:	f832 5b02 	ldrh.w	r5, [r2], #2
 80019be:	18e3      	adds	r3, r4, r3
 80019c0:	1964      	adds	r4, r4, r5
 80019c2:	f832 5b02 	ldrh.w	r5, [r2], #2
 80019c6:	f832 6b02 	ldrh.w	r6, [r2], #2
 80019ca:	18e3      	adds	r3, r4, r3
 80019cc:	1964      	adds	r4, r4, r5
 80019ce:	18e3      	adds	r3, r4, r3
 80019d0:	19a4      	adds	r4, r4, r6
 80019d2:	f832 6b02 	ldrh.w	r6, [r2], #2
 80019d6:	18e3      	adds	r3, r4, r3
 80019d8:	19a4      	adds	r4, r4, r6
 80019da:	f832 6b02 	ldrh.w	r6, [r2], #2
 80019de:	18e3      	adds	r3, r4, r3
 80019e0:	19a4      	adds	r4, r4, r6
 80019e2:	f832 6b02 	ldrh.w	r6, [r2], #2
 80019e6:	18e3      	adds	r3, r4, r3
 80019e8:	19a4      	adds	r4, r4, r6
 80019ea:	18e3      	adds	r3, r4, r3
 80019ec:	1e40      	subs	r0, r0, #1
 80019ee:	d1dd      	bne.n	80019ac <core_utils_compute_crc32+0x14>
 80019f0:	f5a1 71b4 	sub.w	r1, r1, #360	; 0x168
 80019f4:	f5b1 7fb4 	cmp.w	r1, #360	; 0x168
 80019f8:	b2a4      	uxth	r4, r4
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	d2d4      	bcs.n	80019a8 <core_utils_compute_crc32+0x10>
 80019fe:	b1e9      	cbz	r1, 8001a3c <core_utils_compute_crc32+0xa4>
 8001a00:	f011 0003 	ands.w	r0, r1, #3
 8001a04:	f000 8006 	beq.w	8001a14 <core_utils_compute_crc32+0x7c>
 8001a08:	f832 5b02 	ldrh.w	r5, [r2], #2
 8001a0c:	1964      	adds	r4, r4, r5
 8001a0e:	18e3      	adds	r3, r4, r3
 8001a10:	1e40      	subs	r0, r0, #1
 8001a12:	d1f9      	bne.n	8001a08 <core_utils_compute_crc32+0x70>
 8001a14:	0889      	lsrs	r1, r1, #2
 8001a16:	d011      	beq.n	8001a3c <core_utils_compute_crc32+0xa4>
 8001a18:	f832 0b02 	ldrh.w	r0, [r2], #2
 8001a1c:	f832 5b02 	ldrh.w	r5, [r2], #2
 8001a20:	1820      	adds	r0, r4, r0
 8001a22:	18c3      	adds	r3, r0, r3
 8001a24:	1940      	adds	r0, r0, r5
 8001a26:	f832 4b02 	ldrh.w	r4, [r2], #2
 8001a2a:	f832 5b02 	ldrh.w	r5, [r2], #2
 8001a2e:	18c3      	adds	r3, r0, r3
 8001a30:	1900      	adds	r0, r0, r4
 8001a32:	18c3      	adds	r3, r0, r3
 8001a34:	1944      	adds	r4, r0, r5
 8001a36:	18e3      	adds	r3, r4, r3
 8001a38:	1e49      	subs	r1, r1, #1
 8001a3a:	d1ed      	bne.n	8001a18 <core_utils_compute_crc32+0x80>
 8001a3c:	eac4 4003 	pkhbt	r0, r4, r3, lsl #16
 8001a40:	bc70      	pop	{r4, r5, r6}
 8001a42:	4770      	bx	lr

08001a44 <core_utils_generate_network_signature>:
 8001a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a46:	0006      	movs	r6, r0
 8001a48:	460d      	mov	r5, r1
 8001a4a:	bf18      	it	ne
 8001a4c:	2d00      	cmpne	r5, #0
 8001a4e:	b081      	sub	sp, #4
 8001a50:	d00a      	beq.n	8001a68 <core_utils_generate_network_signature+0x24>
 8001a52:	2100      	movs	r1, #0
 8001a54:	f7ff ff46 	bl	80018e4 <serialize_signature_buffer_>
 8001a58:	4607      	mov	r7, r0
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	6028      	str	r0, [r5, #0]
 8001a5e:	4638      	mov	r0, r7
 8001a60:	f7ff f9d8 	bl	8000e14 <core_mem_alloc>
 8001a64:	0004      	movs	r4, r0
 8001a66:	d102      	bne.n	8001a6e <core_utils_generate_network_signature+0x2a>
 8001a68:	2000      	movs	r0, #0
 8001a6a:	b001      	add	sp, #4
 8001a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a6e:	4621      	mov	r1, r4
 8001a70:	4630      	mov	r0, r6
 8001a72:	f7ff ff37 	bl	80018e4 <serialize_signature_buffer_>
 8001a76:	4639      	mov	r1, r7
 8001a78:	4620      	mov	r0, r4
 8001a7a:	f7ff ff8d 	bl	8001998 <core_utils_compute_crc32>
 8001a7e:	6028      	str	r0, [r5, #0]
 8001a80:	4620      	mov	r0, r4
 8001a82:	f7ff f9d4 	bl	8000e2e <core_mem_free>
 8001a86:	2001      	movs	r0, #1
 8001a88:	b001      	add	sp, #4
 8001a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a8c <core_get_broadcasted_shape>:
 8001a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a90:	4603      	mov	r3, r0
 8001a92:	6808      	ldr	r0, [r1, #0]
 8001a94:	681c      	ldr	r4, [r3, #0]
 8001a96:	0a00      	lsrs	r0, r0, #8
 8001a98:	f360 241f 	bfi	r4, r0, #8, #24
 8001a9c:	601c      	str	r4, [r3, #0]
 8001a9e:	0004      	movs	r4, r0
 8001aa0:	d048      	beq.n	8001b34 <core_get_broadcasted_shape+0xa8>
 8001aa2:	684e      	ldr	r6, [r1, #4]
 8001aa4:	6852      	ldr	r2, [r2, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	eb06 0184 	add.w	r1, r6, r4, lsl #2
 8001aac:	1f0f      	subs	r7, r1, #4
 8001aae:	eb02 0584 	add.w	r5, r2, r4, lsl #2
 8001ab2:	eb03 0184 	add.w	r1, r3, r4, lsl #2
 8001ab6:	1f2d      	subs	r5, r5, #4
 8001ab8:	f1a1 0c04 	sub.w	ip, r1, #4
 8001abc:	f010 0103 	ands.w	r1, r0, #3
 8001ac0:	f000 800f 	beq.w	8001ae2 <core_get_broadcasted_shape+0x56>
 8001ac4:	f8d7 e000 	ldr.w	lr, [r7]
 8001ac8:	f8d5 8000 	ldr.w	r8, [r5]
 8001acc:	1e64      	subs	r4, r4, #1
 8001ace:	45f0      	cmp	r8, lr
 8001ad0:	bf28      	it	cs
 8001ad2:	46c6      	movcs	lr, r8
 8001ad4:	1e49      	subs	r1, r1, #1
 8001ad6:	1f3f      	subs	r7, r7, #4
 8001ad8:	1f2d      	subs	r5, r5, #4
 8001ada:	2900      	cmp	r1, #0
 8001adc:	f84c e904 	str.w	lr, [ip], #-4
 8001ae0:	d1f0      	bne.n	8001ac4 <core_get_broadcasted_shape+0x38>
 8001ae2:	0880      	lsrs	r0, r0, #2
 8001ae4:	d026      	beq.n	8001b34 <core_get_broadcasted_shape+0xa8>
 8001ae6:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8001aea:	eb06 0284 	add.w	r2, r6, r4, lsl #2
 8001aee:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8001af2:	3910      	subs	r1, #16
 8001af4:	3a10      	subs	r2, #16
 8001af6:	3b10      	subs	r3, #16
 8001af8:	68d4      	ldr	r4, [r2, #12]
 8001afa:	68cd      	ldr	r5, [r1, #12]
 8001afc:	42ac      	cmp	r4, r5
 8001afe:	bf38      	it	cc
 8001b00:	462c      	movcc	r4, r5
 8001b02:	60dc      	str	r4, [r3, #12]
 8001b04:	688d      	ldr	r5, [r1, #8]
 8001b06:	6894      	ldr	r4, [r2, #8]
 8001b08:	42ac      	cmp	r4, r5
 8001b0a:	bf38      	it	cc
 8001b0c:	462c      	movcc	r4, r5
 8001b0e:	609c      	str	r4, [r3, #8]
 8001b10:	684d      	ldr	r5, [r1, #4]
 8001b12:	6854      	ldr	r4, [r2, #4]
 8001b14:	42ac      	cmp	r4, r5
 8001b16:	bf38      	it	cc
 8001b18:	462c      	movcc	r4, r5
 8001b1a:	605c      	str	r4, [r3, #4]
 8001b1c:	680d      	ldr	r5, [r1, #0]
 8001b1e:	6814      	ldr	r4, [r2, #0]
 8001b20:	42a5      	cmp	r5, r4
 8001b22:	bf28      	it	cs
 8001b24:	462c      	movcs	r4, r5
 8001b26:	1e40      	subs	r0, r0, #1
 8001b28:	3a10      	subs	r2, #16
 8001b2a:	3910      	subs	r1, #16
 8001b2c:	2800      	cmp	r0, #0
 8001b2e:	f843 4910 	str.w	r4, [r3], #-16
 8001b32:	d1e1      	bne.n	8001af8 <core_get_broadcasted_shape+0x6c>
 8001b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001b38 <core_compute_offsets>:
 8001b38:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 8001b3c:	680b      	ldr	r3, [r1, #0]
 8001b3e:	6804      	ldr	r4, [r0, #0]
 8001b40:	0a1b      	lsrs	r3, r3, #8
 8001b42:	f363 241f 	bfi	r4, r3, #8, #24
 8001b46:	6004      	str	r4, [r0, #0]
 8001b48:	684f      	ldr	r7, [r1, #4]
 8001b4a:	6855      	ldr	r5, [r2, #4]
 8001b4c:	6839      	ldr	r1, [r7, #0]
 8001b4e:	682a      	ldr	r2, [r5, #0]
 8001b50:	6840      	ldr	r0, [r0, #4]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	686c      	ldr	r4, [r5, #4]
 8001b56:	f8d7 8008 	ldr.w	r8, [r7, #8]
 8001b5a:	68ae      	ldr	r6, [r5, #8]
 8001b5c:	68ff      	ldr	r7, [r7, #12]
 8001b5e:	68ed      	ldr	r5, [r5, #12]
 8001b60:	4291      	cmp	r1, r2
 8001b62:	bf14      	ite	ne
 8001b64:	2201      	movne	r2, #1
 8001b66:	2200      	moveq	r2, #0
 8001b68:	42a3      	cmp	r3, r4
 8001b6a:	bf14      	ite	ne
 8001b6c:	2401      	movne	r4, #1
 8001b6e:	2400      	moveq	r4, #0
 8001b70:	45b0      	cmp	r8, r6
 8001b72:	bf14      	ite	ne
 8001b74:	2601      	movne	r6, #1
 8001b76:	2600      	moveq	r6, #0
 8001b78:	42af      	cmp	r7, r5
 8001b7a:	f082 0501 	eor.w	r5, r2, #1
 8001b7e:	6005      	str	r5, [r0, #0]
 8001b80:	bf14      	ite	ne
 8001b82:	2701      	movne	r7, #1
 8001b84:	2700      	moveq	r7, #0
 8001b86:	f084 0501 	eor.w	r5, r4, #1
 8001b8a:	4015      	ands	r5, r2
 8001b8c:	434b      	muls	r3, r1
 8001b8e:	4361      	muls	r1, r4
 8001b90:	1a6d      	subs	r5, r5, r1
 8001b92:	6045      	str	r5, [r0, #4]
 8001b94:	fb08 f803 	mul.w	r8, r8, r3
 8001b98:	f086 0501 	eor.w	r5, r6, #1
 8001b9c:	4025      	ands	r5, r4
 8001b9e:	4373      	muls	r3, r6
 8001ba0:	4015      	ands	r5, r2
 8001ba2:	1aed      	subs	r5, r5, r3
 8001ba4:	1949      	adds	r1, r1, r5
 8001ba6:	6081      	str	r1, [r0, #8]
 8001ba8:	f087 0101 	eor.w	r1, r7, #1
 8001bac:	400e      	ands	r6, r1
 8001bae:	4034      	ands	r4, r6
 8001bb0:	4022      	ands	r2, r4
 8001bb2:	fb08 2217 	mls	r2, r8, r7, r2
 8001bb6:	189a      	adds	r2, r3, r2
 8001bb8:	60c2      	str	r2, [r0, #12]
 8001bba:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8001bbe:	4770      	bx	lr

08001bc0 <core_tensor_clone>:
 8001bc0:	b430      	push	{r4, r5}
 8001bc2:	680a      	ldr	r2, [r1, #0]
 8001bc4:	6002      	str	r2, [r0, #0]
 8001bc6:	684b      	ldr	r3, [r1, #4]
 8001bc8:	6043      	str	r3, [r0, #4]
 8001bca:	698a      	ldr	r2, [r1, #24]
 8001bcc:	6883      	ldr	r3, [r0, #8]
 8001bce:	6182      	str	r2, [r0, #24]
 8001bd0:	688a      	ldr	r2, [r1, #8]
 8001bd2:	0a12      	lsrs	r2, r2, #8
 8001bd4:	f362 231f 	bfi	r3, r2, #8, #24
 8001bd8:	6083      	str	r3, [r0, #8]
 8001bda:	2300      	movs	r3, #0
 8001bdc:	6882      	ldr	r2, [r0, #8]
 8001bde:	0a12      	lsrs	r2, r2, #8
 8001be0:	d025      	beq.n	8001c2e <core_tensor_clone+0x6e>
 8001be2:	68cc      	ldr	r4, [r1, #12]
 8001be4:	68c2      	ldr	r2, [r0, #12]
 8001be6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8001bea:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 8001bee:	1c5b      	adds	r3, r3, #1
 8001bf0:	6885      	ldr	r5, [r0, #8]
 8001bf2:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 8001bf6:	d21a      	bcs.n	8001c2e <core_tensor_clone+0x6e>
 8001bf8:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8001bfc:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 8001c00:	1c5b      	adds	r3, r3, #1
 8001c02:	6885      	ldr	r5, [r0, #8]
 8001c04:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 8001c08:	d211      	bcs.n	8001c2e <core_tensor_clone+0x6e>
 8001c0a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8001c0e:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 8001c12:	1c5b      	adds	r3, r3, #1
 8001c14:	6885      	ldr	r5, [r0, #8]
 8001c16:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 8001c1a:	d208      	bcs.n	8001c2e <core_tensor_clone+0x6e>
 8001c1c:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8001c20:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 8001c24:	1c5b      	adds	r3, r3, #1
 8001c26:	6882      	ldr	r2, [r0, #8]
 8001c28:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 8001c2c:	d3d9      	bcc.n	8001be2 <core_tensor_clone+0x22>
 8001c2e:	690a      	ldr	r2, [r1, #16]
 8001c30:	6903      	ldr	r3, [r0, #16]
 8001c32:	0a12      	lsrs	r2, r2, #8
 8001c34:	f362 231f 	bfi	r3, r2, #8, #24
 8001c38:	6103      	str	r3, [r0, #16]
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	6902      	ldr	r2, [r0, #16]
 8001c3e:	0a12      	lsrs	r2, r2, #8
 8001c40:	d025      	beq.n	8001c8e <core_tensor_clone+0xce>
 8001c42:	694c      	ldr	r4, [r1, #20]
 8001c44:	6942      	ldr	r2, [r0, #20]
 8001c46:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8001c4a:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 8001c4e:	1c5b      	adds	r3, r3, #1
 8001c50:	6905      	ldr	r5, [r0, #16]
 8001c52:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 8001c56:	d21a      	bcs.n	8001c8e <core_tensor_clone+0xce>
 8001c58:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8001c5c:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 8001c60:	1c5b      	adds	r3, r3, #1
 8001c62:	6905      	ldr	r5, [r0, #16]
 8001c64:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 8001c68:	d211      	bcs.n	8001c8e <core_tensor_clone+0xce>
 8001c6a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8001c6e:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 8001c72:	1c5b      	adds	r3, r3, #1
 8001c74:	6905      	ldr	r5, [r0, #16]
 8001c76:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 8001c7a:	d208      	bcs.n	8001c8e <core_tensor_clone+0xce>
 8001c7c:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8001c80:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 8001c84:	1c5b      	adds	r3, r3, #1
 8001c86:	6902      	ldr	r2, [r0, #16]
 8001c88:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 8001c8c:	d3d9      	bcc.n	8001c42 <core_tensor_clone+0x82>
 8001c8e:	bc30      	pop	{r4, r5}
 8001c90:	4770      	bx	lr

08001c92 <core_array_clone>:
 8001c92:	b430      	push	{r4, r5}
 8001c94:	e891 003c 	ldmia.w	r1, {r2, r3, r4, r5}
 8001c98:	e880 003c 	stmia.w	r0, {r2, r3, r4, r5}
 8001c9c:	bc30      	pop	{r4, r5}
 8001c9e:	4770      	bx	lr

08001ca0 <ai_layers_forward_layer>:
 8001ca0:	b510      	push	{r4, lr}
 8001ca2:	4604      	mov	r4, r0
 8001ca4:	6921      	ldr	r1, [r4, #16]
 8001ca6:	4788      	blx	r1
 8001ca8:	68e0      	ldr	r0, [r4, #12]
 8001caa:	42a0      	cmp	r0, r4
 8001cac:	bf08      	it	eq
 8001cae:	2000      	moveq	r0, #0
 8001cb0:	bd10      	pop	{r4, pc}
	...

08001cb4 <ai_check_custom_types>:
 8001cb4:	b500      	push	{lr}
 8001cb6:	b081      	sub	sp, #4
 8001cb8:	b160      	cbz	r0, 8001cd4 <ai_check_custom_types+0x20>
 8001cba:	7801      	ldrb	r1, [r0, #0]
 8001cbc:	2903      	cmp	r1, #3
 8001cbe:	d109      	bne.n	8001cd4 <ai_check_custom_types+0x20>
 8001cc0:	f05f 0204 	movs.w	r2, #4
 8001cc4:	a18d      	add	r1, pc, #564	; (adr r1, 8001efc <ai_check_custom_types::ref_signatures>)
 8001cc6:	f00f f8ab 	bl	8010e20 <memcmp>
 8001cca:	1e40      	subs	r0, r0, #1
 8001ccc:	4180      	sbcs	r0, r0
 8001cce:	0fc0      	lsrs	r0, r0, #31
 8001cd0:	b001      	add	sp, #4
 8001cd2:	bd00      	pop	{pc}
 8001cd4:	2000      	movs	r0, #0
 8001cd6:	b001      	add	sp, #4
 8001cd8:	bd00      	pop	{pc}
	...

08001cdc <ai_layer_type_name>:
 8001cdc:	f242 7211 	movw	r2, #10001	; 0x2711
 8001ce0:	1a81      	subs	r1, r0, r2
 8001ce2:	2901      	cmp	r1, #1
 8001ce4:	bf81      	itttt	hi
 8001ce6:	1ec9      	subhi	r1, r1, #3
 8001ce8:	290d      	cmphi	r1, #13
 8001cea:	390f      	subhi	r1, #15
 8001cec:	2909      	cmphi	r1, #9
 8001cee:	f200 806b 	bhi.w	8001dc8 <ai_layer_type_name+0xec>
 8001cf2:	1a80      	subs	r0, r0, r2
 8001cf4:	d033      	beq.n	8001d5e <ai_layer_type_name+0x82>
 8001cf6:	1e40      	subs	r0, r0, #1
 8001cf8:	d033      	beq.n	8001d62 <ai_layer_type_name+0x86>
 8001cfa:	1e80      	subs	r0, r0, #2
 8001cfc:	d033      	beq.n	8001d66 <ai_layer_type_name+0x8a>
 8001cfe:	1e40      	subs	r0, r0, #1
 8001d00:	d034      	beq.n	8001d6c <ai_layer_type_name+0x90>
 8001d02:	1e40      	subs	r0, r0, #1
 8001d04:	d034      	beq.n	8001d70 <ai_layer_type_name+0x94>
 8001d06:	1e40      	subs	r0, r0, #1
 8001d08:	d034      	beq.n	8001d74 <ai_layer_type_name+0x98>
 8001d0a:	1e40      	subs	r0, r0, #1
 8001d0c:	d034      	beq.n	8001d78 <ai_layer_type_name+0x9c>
 8001d0e:	1e40      	subs	r0, r0, #1
 8001d10:	d034      	beq.n	8001d7c <ai_layer_type_name+0xa0>
 8001d12:	1e40      	subs	r0, r0, #1
 8001d14:	d034      	beq.n	8001d80 <ai_layer_type_name+0xa4>
 8001d16:	1e40      	subs	r0, r0, #1
 8001d18:	d034      	beq.n	8001d84 <ai_layer_type_name+0xa8>
 8001d1a:	1e40      	subs	r0, r0, #1
 8001d1c:	d034      	beq.n	8001d88 <ai_layer_type_name+0xac>
 8001d1e:	1e40      	subs	r0, r0, #1
 8001d20:	d034      	beq.n	8001d8c <ai_layer_type_name+0xb0>
 8001d22:	1e40      	subs	r0, r0, #1
 8001d24:	d034      	beq.n	8001d90 <ai_layer_type_name+0xb4>
 8001d26:	1e40      	subs	r0, r0, #1
 8001d28:	d034      	beq.n	8001d94 <ai_layer_type_name+0xb8>
 8001d2a:	1e40      	subs	r0, r0, #1
 8001d2c:	d034      	beq.n	8001d98 <ai_layer_type_name+0xbc>
 8001d2e:	1e40      	subs	r0, r0, #1
 8001d30:	d034      	beq.n	8001d9c <ai_layer_type_name+0xc0>
 8001d32:	1e80      	subs	r0, r0, #2
 8001d34:	d034      	beq.n	8001da0 <ai_layer_type_name+0xc4>
 8001d36:	1e40      	subs	r0, r0, #1
 8001d38:	d034      	beq.n	8001da4 <ai_layer_type_name+0xc8>
 8001d3a:	1e40      	subs	r0, r0, #1
 8001d3c:	d034      	beq.n	8001da8 <ai_layer_type_name+0xcc>
 8001d3e:	1e40      	subs	r0, r0, #1
 8001d40:	d034      	beq.n	8001dac <ai_layer_type_name+0xd0>
 8001d42:	1e40      	subs	r0, r0, #1
 8001d44:	d034      	beq.n	8001db0 <ai_layer_type_name+0xd4>
 8001d46:	1e40      	subs	r0, r0, #1
 8001d48:	d034      	beq.n	8001db4 <ai_layer_type_name+0xd8>
 8001d4a:	1e40      	subs	r0, r0, #1
 8001d4c:	d034      	beq.n	8001db8 <ai_layer_type_name+0xdc>
 8001d4e:	1e40      	subs	r0, r0, #1
 8001d50:	d034      	beq.n	8001dbc <ai_layer_type_name+0xe0>
 8001d52:	1e40      	subs	r0, r0, #1
 8001d54:	d034      	beq.n	8001dc0 <ai_layer_type_name+0xe4>
 8001d56:	1e40      	subs	r0, r0, #1
 8001d58:	d034      	beq.n	8001dc4 <ai_layer_type_name+0xe8>
 8001d5a:	a01c      	add	r0, pc, #112	; (adr r0, 8001dcc <.text_5>)
 8001d5c:	4770      	bx	lr
 8001d5e:	a01c      	add	r0, pc, #112	; (adr r0, 8001dd0 <.text_6>)
 8001d60:	4770      	bx	lr
 8001d62:	a01c      	add	r0, pc, #112	; (adr r0, 8001dd4 <.text_7>)
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	a031      	add	r0, pc, #196	; (adr r0, 8001e30 <.text_15>)
 8001d6a:	4770      	bx	lr
 8001d6c:	a032      	add	r0, pc, #200	; (adr r0, 8001e38 <.text_16>)
 8001d6e:	4770      	bx	lr
 8001d70:	a019      	add	r0, pc, #100	; (adr r0, 8001dd8 <.text_8>)
 8001d72:	4770      	bx	lr
 8001d74:	a019      	add	r0, pc, #100	; (adr r0, 8001ddc <.text_9>)
 8001d76:	4770      	bx	lr
 8001d78:	a031      	add	r0, pc, #196	; (adr r0, 8001e40 <.text_17>)
 8001d7a:	4770      	bx	lr
 8001d7c:	a018      	add	r0, pc, #96	; (adr r0, 8001de0 <.text_10>)
 8001d7e:	4770      	bx	lr
 8001d80:	a031      	add	r0, pc, #196	; (adr r0, 8001e48 <.text_18>)
 8001d82:	4770      	bx	lr
 8001d84:	a032      	add	r0, pc, #200	; (adr r0, 8001e50 <.text_19>)
 8001d86:	4770      	bx	lr
 8001d88:	a036      	add	r0, pc, #216	; (adr r0, 8001e64 <.text_20>)
 8001d8a:	4770      	bx	lr
 8001d8c:	a038      	add	r0, pc, #224	; (adr r0, 8001e70 <.text_21>)
 8001d8e:	4770      	bx	lr
 8001d90:	a014      	add	r0, pc, #80	; (adr r0, 8001de4 <.text_11>)
 8001d92:	4770      	bx	lr
 8001d94:	a038      	add	r0, pc, #224	; (adr r0, 8001e78 <.text_22>)
 8001d96:	4770      	bx	lr
 8001d98:	a039      	add	r0, pc, #228	; (adr r0, 8001e80 <.text_23>)
 8001d9a:	4770      	bx	lr
 8001d9c:	a03b      	add	r0, pc, #236	; (adr r0, 8001e8c <.text_24>)
 8001d9e:	4770      	bx	lr
 8001da0:	a03f      	add	r0, pc, #252	; (adr r0, 8001ea0 <.text_25>)
 8001da2:	4770      	bx	lr
 8001da4:	a040      	add	r0, pc, #256	; (adr r0, 8001ea8 <.text_26>)
 8001da6:	4770      	bx	lr
 8001da8:	a041      	add	r0, pc, #260	; (adr r0, 8001eb0 <.text_27>)
 8001daa:	4770      	bx	lr
 8001dac:	a043      	add	r0, pc, #268	; (adr r0, 8001ebc <.text_28>)
 8001dae:	4770      	bx	lr
 8001db0:	a044      	add	r0, pc, #272	; (adr r0, 8001ec4 <.text_29>)
 8001db2:	4770      	bx	lr
 8001db4:	a045      	add	r0, pc, #276	; (adr r0, 8001ecc <.text_30>)
 8001db6:	4770      	bx	lr
 8001db8:	a00b      	add	r0, pc, #44	; (adr r0, 8001de8 <.text_12>)
 8001dba:	4770      	bx	lr
 8001dbc:	a049      	add	r0, pc, #292	; (adr r0, 8001ee4 <.text_31>)
 8001dbe:	4770      	bx	lr
 8001dc0:	a04a      	add	r0, pc, #296	; (adr r0, 8001eec <.text_32>)
 8001dc2:	4770      	bx	lr
 8001dc4:	a04b      	add	r0, pc, #300	; (adr r0, 8001ef4 <.text_33>)
 8001dc6:	4770      	bx	lr
 8001dc8:	a000      	add	r0, pc, #0	; (adr r0, 8001dcc <.text_5>)
 8001dca:	4770      	bx	lr

08001dcc <.text_5>:
 8001dcc:	00000000 	.word	0x00000000

08001dd0 <.text_6>:
 8001dd0:	00444441 	.word	0x00444441

08001dd4 <.text_7>:
 8001dd4:	00004e42 	.word	0x00004e42

08001dd8 <.text_8>:
 8001dd8:	00555247 	.word	0x00555247

08001ddc <.text_9>:
 8001ddc:	004e524c 	.word	0x004e524c

08001de0 <.text_10>:
 8001de0:	00004c4e 	.word	0x00004c4e

08001de4 <.text_11>:
 8001de4:	00004d53 	.word	0x00004d53

08001de8 <.text_12>:
 8001de8:	00444150 	.word	0x00444150

08001dec <ai_layer_type_is_valid>:
 8001dec:	f242 7111 	movw	r1, #10001	; 0x2711
 8001df0:	1a40      	subs	r0, r0, r1
 8001df2:	2801      	cmp	r0, #1
 8001df4:	bf81      	itttt	hi
 8001df6:	1ec0      	subhi	r0, r0, #3
 8001df8:	280d      	cmphi	r0, #13
 8001dfa:	380f      	subhi	r0, #15
 8001dfc:	2809      	cmphi	r0, #9
 8001dfe:	d801      	bhi.n	8001e04 <ai_layer_type_is_valid+0x18>
 8001e00:	2001      	movs	r0, #1
 8001e02:	4770      	bx	lr
 8001e04:	2000      	movs	r0, #0
 8001e06:	4770      	bx	lr

08001e08 <ai_layers_forward_all>:
 8001e08:	b530      	push	{r4, r5, lr}
 8001e0a:	4604      	mov	r4, r0
 8001e0c:	b081      	sub	sp, #4
 8001e0e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001e10:	b158      	cbz	r0, 8001e2a <ai_layers_forward_all+0x22>
 8001e12:	6560      	str	r0, [r4, #84]	; 0x54
 8001e14:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8001e16:	6929      	ldr	r1, [r5, #16]
 8001e18:	4628      	mov	r0, r5
 8001e1a:	4788      	blx	r1
 8001e1c:	68e8      	ldr	r0, [r5, #12]
 8001e1e:	42a8      	cmp	r0, r5
 8001e20:	bf08      	it	eq
 8001e22:	2000      	moveq	r0, #0
 8001e24:	2800      	cmp	r0, #0
 8001e26:	6560      	str	r0, [r4, #84]	; 0x54
 8001e28:	d1f4      	bne.n	8001e14 <ai_layers_forward_all+0xc>
 8001e2a:	b001      	add	sp, #4
 8001e2c:	bd30      	pop	{r4, r5, pc}
	...

08001e30 <.text_15>:
 8001e30:	564e4f43 	.word	0x564e4f43
 8001e34:	00004432 	.word	0x00004432

08001e38 <.text_16>:
 8001e38:	534e4544 	.word	0x534e4544
 8001e3c:	0045      	.short	0x0045
	...

08001e40 <.text_17>:
 8001e40:	4d54534c 	.word	0x4d54534c
 8001e44:	00          	.byte	0x00
 8001e45:	00          	.byte	0x00
	...

08001e48 <.text_18>:
 8001e48:	4d524f4e 	.word	0x4d524f4e
 8001e4c:	00          	.byte	0x00
 8001e4d:	00          	.byte	0x00
	...

08001e50 <.text_19>:
 8001e50:	4954504f 	.word	0x4954504f
 8001e54:	455a494d 	.word	0x455a494d
 8001e58:	4f435f44 	.word	0x4f435f44
 8001e5c:	4432564e 	.word	0x4432564e
 8001e60:	00          	.byte	0x00
 8001e61:	00          	.byte	0x00
	...

08001e64 <.text_20>:
 8001e64:	4e415254 	.word	0x4e415254
 8001e68:	534f5053 	.word	0x534f5053
 8001e6c:	0045      	.short	0x0045
	...

08001e70 <.text_21>:
 8001e70:	4c4f4f50 	.word	0x4c4f4f50
 8001e74:	00          	.byte	0x00
 8001e75:	00          	.byte	0x00
	...

08001e78 <.text_22>:
 8001e78:	494c5053 	.word	0x494c5053
 8001e7c:	0054      	.short	0x0054
	...

08001e80 <.text_23>:
 8001e80:	454d4954 	.word	0x454d4954
 8001e84:	4c45445f 	.word	0x4c45445f
 8001e88:	00005941 	.word	0x00005941

08001e8c <.text_24>:
 8001e8c:	454d4954 	.word	0x454d4954
 8001e90:	5349445f 	.word	0x5349445f
 8001e94:	42495254 	.word	0x42495254
 8001e98:	44455455 	.word	0x44455455
 8001e9c:	00          	.byte	0x00
 8001e9d:	00          	.byte	0x00
	...

08001ea0 <.text_25>:
 8001ea0:	434e4f43 	.word	0x434e4f43
 8001ea4:	00005441 	.word	0x00005441

08001ea8 <.text_26>:
 8001ea8:	4d4d4547 	.word	0x4d4d4547
 8001eac:	00          	.byte	0x00
 8001ead:	00          	.byte	0x00
	...

08001eb0 <.text_27>:
 8001eb0:	41535055 	.word	0x41535055
 8001eb4:	454c504d 	.word	0x454c504d
 8001eb8:	00          	.byte	0x00
 8001eb9:	00          	.byte	0x00
	...

08001ebc <.text_28>:
 8001ebc:	57544c45 	.word	0x57544c45
 8001ec0:	00455349 	.word	0x00455349

08001ec4 <.text_29>:
 8001ec4:	454e4547 	.word	0x454e4547
 8001ec8:	00434952 	.word	0x00434952

08001ecc <.text_30>:
 8001ecc:	54534e49 	.word	0x54534e49
 8001ed0:	45434e41 	.word	0x45434e41
 8001ed4:	4d524f4e 	.word	0x4d524f4e
 8001ed8:	5a494c41 	.word	0x5a494c41
 8001edc:	4f495441 	.word	0x4f495441
 8001ee0:	004e      	.short	0x004e
	...

08001ee4 <.text_31>:
 8001ee4:	43494c53 	.word	0x43494c53
 8001ee8:	0045      	.short	0x0045
	...

08001eec <.text_32>:
 8001eec:	454c4954 	.word	0x454c4954
 8001ef0:	00          	.byte	0x00
 8001ef1:	00          	.byte	0x00
	...

08001ef4 <.text_33>:
 8001ef4:	55444552 	.word	0x55444552
 8001ef8:	00004543 	.word	0x00004543

08001efc <ai_check_custom_types::ref_signatures>:
 8001efc:	84048403                                ....

08001f00 <ai_conv2d_stripe_f32>:
 8001f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f04:	b098      	sub	sp, #96	; 0x60
 8001f06:	9825      	ldr	r0, [sp, #148]	; 0x94
 8001f08:	2800      	cmp	r0, #0
 8001f0a:	f000 82cb 	beq.w	80024a4 <ai_conv2d_stripe_f32+0x5a4>
 8001f0e:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 8001f12:	f8dd a0b4 	ldr.w	sl, [sp, #180]	; 0xb4
 8001f16:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8001f18:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8001f1a:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
 8001f1c:	9004      	str	r0, [sp, #16]
 8001f1e:	fb07 6a0a 	mla	sl, r7, sl, r6
 8001f22:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8001f24:	f9bd 60c0 	ldrsh.w	r6, [sp, #192]	; 0xc0
 8001f28:	f8cd a014 	str.w	sl, [sp, #20]
 8001f2c:	1904      	adds	r4, r0, r4
 8001f2e:	1e64      	subs	r4, r4, #1
 8001f30:	9826      	ldr	r0, [sp, #152]	; 0x98
 8001f32:	9100      	str	r1, [sp, #0]
 8001f34:	fb94 f6f6 	sdiv	r6, r4, r6
 8001f38:	f9bd 40bc 	ldrsh.w	r4, [sp, #188]	; 0xbc
 8001f3c:	9217      	str	r2, [sp, #92]	; 0x5c
 8001f3e:	4346      	muls	r6, r0
 8001f40:	9616      	str	r6, [sp, #88]	; 0x58
 8001f42:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001f46:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 8001f48:	9822      	ldr	r0, [sp, #136]	; 0x88
 8001f4a:	9306      	str	r3, [sp, #24]
 8001f4c:	4344      	muls	r4, r0
 8001f4e:	9415      	str	r4, [sp, #84]	; 0x54
 8001f50:	437e      	muls	r6, r7
 8001f52:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 8001f56:	437c      	muls	r4, r7
 8001f58:	9414      	str	r4, [sp, #80]	; 0x50
 8001f5a:	4346      	muls	r6, r0
 8001f5c:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 8001f60:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8001f62:	960b      	str	r6, [sp, #44]	; 0x2c
 8001f64:	1a24      	subs	r4, r4, r0
 8001f66:	9413      	str	r4, [sp, #76]	; 0x4c
 8001f68:	4604      	mov	r4, r0
 8001f6a:	9826      	ldr	r0, [sp, #152]	; 0x98
 8001f6c:	9e26      	ldr	r6, [sp, #152]	; 0x98
 8001f6e:	4344      	muls	r4, r0
 8001f70:	9412      	str	r4, [sp, #72]	; 0x48
 8001f72:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8001f74:	4344      	muls	r4, r0
 8001f76:	9411      	str	r4, [sp, #68]	; 0x44
 8001f78:	f9bd 00c0 	ldrsh.w	r0, [sp, #192]	; 0xc0
 8001f7c:	f9bd 40bc 	ldrsh.w	r4, [sp, #188]	; 0xbc
 8001f80:	fb14 f000 	smulbb	r0, r4, r0
 8001f84:	900a      	str	r0, [sp, #40]	; 0x28
 8001f86:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8001f88:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8001f8a:	fbb4 f0f0 	udiv	r0, r4, r0
 8001f8e:	9010      	str	r0, [sp, #64]	; 0x40
 8001f90:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8001f92:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8001f94:	fbb4 f0f0 	udiv	r0, r4, r0
 8001f98:	900f      	str	r0, [sp, #60]	; 0x3c
 8001f9a:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8001f9c:	9822      	ldr	r0, [sp, #136]	; 0x88
 8001f9e:	fbb4 f0f0 	udiv	r0, r4, r0
 8001fa2:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8001fa4:	900e      	str	r0, [sp, #56]	; 0x38
 8001fa6:	4374      	muls	r4, r6
 8001fa8:	940d      	str	r4, [sp, #52]	; 0x34
 8001faa:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8001fac:	1b2d      	subs	r5, r5, r4
 8001fae:	950c      	str	r5, [sp, #48]	; 0x30
 8001fb0:	9f2c      	ldr	r7, [sp, #176]	; 0xb0
 8001fb2:	9924      	ldr	r1, [sp, #144]	; 0x90
 8001fb4:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8001fb6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8001fb8:	427f      	negs	r7, r7
 8001fba:	bfd8      	it	le
 8001fbc:	2700      	movle	r7, #0
 8001fbe:	1a09      	subs	r1, r1, r0
 8001fc0:	4291      	cmp	r1, r2
 8001fc2:	bf3d      	ittte	cc
 8001fc4:	9824      	ldrcc	r0, [sp, #144]	; 0x90
 8001fc6:	9e2c      	ldrcc	r6, [sp, #176]	; 0xb0
 8001fc8:	1b86      	subcc	r6, r0, r6
 8001fca:	4616      	movcs	r6, r2
 8001fcc:	9a05      	ldr	r2, [sp, #20]
 8001fce:	9922      	ldr	r1, [sp, #136]	; 0x88
 8001fd0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8001fd2:	18ba      	adds	r2, r7, r2
 8001fd4:	434a      	muls	r2, r1
 8001fd6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001fda:	9821      	ldr	r0, [sp, #132]	; 0x84
 8001fdc:	b900      	cbnz	r0, 8001fe0 <ai_conv2d_stripe_f32+0xe0>
 8001fde:	9800      	ldr	r0, [sp, #0]
 8001fe0:	9001      	str	r0, [sp, #4]
 8001fe2:	1bf6      	subs	r6, r6, r7
 8001fe4:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8001fe6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001fe8:	2801      	cmp	r0, #1
 8001fea:	bf04      	itt	eq
 8001fec:	980a      	ldreq	r0, [sp, #40]	; 0x28
 8001fee:	2801      	cmpeq	r0, #1
 8001ff0:	f040 80a9 	bne.w	8002146 <ai_conv2d_stripe_f32+0x246>
 8001ff4:	9c24      	ldr	r4, [sp, #144]	; 0x90
 8001ff6:	9826      	ldr	r0, [sp, #152]	; 0x98
 8001ff8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001ffa:	1ba4      	subs	r4, r4, r6
 8001ffc:	434c      	muls	r4, r1
 8001ffe:	1b80      	subs	r0, r0, r6
 8002000:	4341      	muls	r1, r0
 8002002:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8002004:	1b40      	subs	r0, r0, r5
 8002006:	fb00 fc03 	mul.w	ip, r0, r3
 800200a:	9811      	ldr	r0, [sp, #68]	; 0x44
 800200c:	9b06      	ldr	r3, [sp, #24]
 800200e:	4407      	add	r7, r0
 8002010:	9822      	ldr	r0, [sp, #136]	; 0x88
 8002012:	4347      	muls	r7, r0
 8002014:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8002018:	4370      	muls	r0, r6
 800201a:	9e01      	ldr	r6, [sp, #4]
 800201c:	9b00      	ldr	r3, [sp, #0]
 800201e:	429e      	cmp	r6, r3
 8002020:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002022:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8002026:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8002028:	bf0c      	ite	eq
 800202a:	eddf 0aaf 	vldreq	s1, [pc, #700]	; 80022e8 <ai_conv2d_stripe_f32+0x3e8>
 800202e:	eef0 0a40 	vmovne.f32	s1, s0
 8002032:	2a00      	cmp	r2, #0
 8002034:	f000 8222 	beq.w	800247c <ai_conv2d_stripe_f32+0x57c>
 8002038:	46b0      	mov	r8, r6
 800203a:	462e      	mov	r6, r5
 800203c:	4613      	mov	r3, r2
 800203e:	f8cd c008 	str.w	ip, [sp, #8]
 8002042:	461d      	mov	r5, r3
 8002044:	f8dd e000 	ldr.w	lr, [sp]
 8002048:	9b00      	ldr	r3, [sp, #0]
 800204a:	463a      	mov	r2, r7
 800204c:	4682      	mov	sl, r0
 800204e:	f8cd 9004 	str.w	r9, [sp, #4]
 8002052:	46c4      	mov	ip, r8
 8002054:	f02a 0703 	bic.w	r7, sl, #3
 8002058:	ed9c 1a00 	vldr	s2, [ip]
 800205c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8002060:	2e00      	cmp	r6, #0
 8002062:	ee21 1a20 	vmul.f32	s2, s2, s1
 8002066:	dd61      	ble.n	800212c <ai_conv2d_stripe_f32+0x22c>
 8002068:	4630      	mov	r0, r6
 800206a:	2f00      	cmp	r7, #0
 800206c:	f04f 0900 	mov.w	r9, #0
 8002070:	f340 801f 	ble.w	80020b2 <ai_conv2d_stripe_f32+0x1b2>
 8002074:	edd2 4a00 	vldr	s9, [r2]
 8002078:	ed98 5a00 	vldr	s10, [r8]
 800207c:	edd2 3a01 	vldr	s7, [r2, #4]
 8002080:	ed98 4a01 	vldr	s8, [r8, #4]
 8002084:	edd2 2a02 	vldr	s5, [r2, #8]
 8002088:	ed98 3a02 	vldr	s6, [r8, #8]
 800208c:	edd2 1a03 	vldr	s3, [r2, #12]
 8002090:	ed98 2a03 	vldr	s4, [r8, #12]
 8002094:	ee04 1a85 	vmla.f32	s2, s9, s10
 8002098:	ee03 1a84 	vmla.f32	s2, s7, s8
 800209c:	3210      	adds	r2, #16
 800209e:	f109 0904 	add.w	r9, r9, #4
 80020a2:	ee02 1a83 	vmla.f32	s2, s5, s6
 80020a6:	45b9      	cmp	r9, r7
 80020a8:	ee01 1a82 	vmla.f32	s2, s3, s4
 80020ac:	f108 0810 	add.w	r8, r8, #16
 80020b0:	dbe0      	blt.n	8002074 <ai_conv2d_stripe_f32+0x174>
 80020b2:	45d1      	cmp	r9, sl
 80020b4:	f280 8034 	bge.w	8002120 <ai_conv2d_stripe_f32+0x220>
 80020b8:	f109 0901 	add.w	r9, r9, #1
 80020bc:	edd2 2a00 	vldr	s5, [r2]
 80020c0:	edd8 1a00 	vldr	s3, [r8]
 80020c4:	1d12      	adds	r2, r2, #4
 80020c6:	45d1      	cmp	r9, sl
 80020c8:	ee02 1aa1 	vmla.f32	s2, s5, s3
 80020cc:	f108 0804 	add.w	r8, r8, #4
 80020d0:	da26      	bge.n	8002120 <ai_conv2d_stripe_f32+0x220>
 80020d2:	f109 0901 	add.w	r9, r9, #1
 80020d6:	ed92 3a00 	vldr	s6, [r2]
 80020da:	ed98 2a00 	vldr	s4, [r8]
 80020de:	1d12      	adds	r2, r2, #4
 80020e0:	45d1      	cmp	r9, sl
 80020e2:	ee03 1a02 	vmla.f32	s2, s6, s4
 80020e6:	f108 0804 	add.w	r8, r8, #4
 80020ea:	da19      	bge.n	8002120 <ai_conv2d_stripe_f32+0x220>
 80020ec:	f109 0901 	add.w	r9, r9, #1
 80020f0:	edd2 2a00 	vldr	s5, [r2]
 80020f4:	edd8 1a00 	vldr	s3, [r8]
 80020f8:	1d12      	adds	r2, r2, #4
 80020fa:	45d1      	cmp	r9, sl
 80020fc:	ee02 1aa1 	vmla.f32	s2, s5, s3
 8002100:	f108 0804 	add.w	r8, r8, #4
 8002104:	da0c      	bge.n	8002120 <ai_conv2d_stripe_f32+0x220>
 8002106:	f109 0901 	add.w	r9, r9, #1
 800210a:	ed92 2a00 	vldr	s4, [r2]
 800210e:	ed98 3a00 	vldr	s6, [r8]
 8002112:	1d12      	adds	r2, r2, #4
 8002114:	45d1      	cmp	r9, sl
 8002116:	ee02 1a03 	vmla.f32	s2, s4, s6
 800211a:	f108 0804 	add.w	r8, r8, #4
 800211e:	dbcb      	blt.n	80020b8 <ai_conv2d_stripe_f32+0x1b8>
 8002120:	1e40      	subs	r0, r0, #1
 8002122:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 8002126:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800212a:	d19e      	bne.n	800206a <ai_conv2d_stripe_f32+0x16a>
 800212c:	9802      	ldr	r0, [sp, #8]
 800212e:	ed8e 1a00 	vstr	s2, [lr]
 8002132:	1e6d      	subs	r5, r5, #1
 8002134:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8002138:	f10e 0e04 	add.w	lr, lr, #4
 800213c:	f10c 0c04 	add.w	ip, ip, #4
 8002140:	d18a      	bne.n	8002058 <ai_conv2d_stripe_f32+0x158>
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	e19a      	b.n	800247c <ai_conv2d_stripe_f32+0x57c>
 8002146:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8002148:	4288      	cmp	r0, r1
 800214a:	bf04      	itt	eq
 800214c:	980a      	ldreq	r0, [sp, #40]	; 0x28
 800214e:	2801      	cmpeq	r0, #1
 8002150:	f040 80cc 	bne.w	80022ec <ai_conv2d_stripe_f32+0x3ec>
 8002154:	980e      	ldr	r0, [sp, #56]	; 0x38
 8002156:	9b06      	ldr	r3, [sp, #24]
 8002158:	9c00      	ldr	r4, [sp, #0]
 800215a:	9002      	str	r0, [sp, #8]
 800215c:	9824      	ldr	r0, [sp, #144]	; 0x90
 800215e:	1b81      	subs	r1, r0, r6
 8002160:	9822      	ldr	r0, [sp, #136]	; 0x88
 8002162:	fb01 fa00 	mul.w	sl, r1, r0
 8002166:	9826      	ldr	r0, [sp, #152]	; 0x98
 8002168:	9926      	ldr	r1, [sp, #152]	; 0x98
 800216a:	eba0 0c06 	sub.w	ip, r0, r6
 800216e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8002170:	1b40      	subs	r0, r0, r5
 8002172:	4341      	muls	r1, r0
 8002174:	9812      	ldr	r0, [sp, #72]	; 0x48
 8002176:	183f      	adds	r7, r7, r0
 8002178:	eb03 0087 	add.w	r0, r3, r7, lsl #2
 800217c:	9b01      	ldr	r3, [sp, #4]
 800217e:	42a3      	cmp	r3, r4
 8002180:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002182:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8002186:	bf0c      	ite	eq
 8002188:	eddf 0a57 	vldreq	s1, [pc, #348]	; 80022e8 <ai_conv2d_stripe_f32+0x3e8>
 800218c:	eef0 0a40 	vmovne.f32	s1, s0
 8002190:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002192:	2400      	movs	r4, #0
 8002194:	eb0e 0283 	add.w	r2, lr, r3, lsl #2
 8002198:	4596      	cmp	lr, r2
 800219a:	9203      	str	r2, [sp, #12]
 800219c:	f080 816e 	bcs.w	800247c <ai_conv2d_stripe_f32+0x57c>
 80021a0:	9b00      	ldr	r3, [sp, #0]
 80021a2:	9a02      	ldr	r2, [sp, #8]
 80021a4:	2a00      	cmp	r2, #0
 80021a6:	f000 8097 	beq.w	80022d8 <ai_conv2d_stripe_f32+0x3d8>
 80021aa:	9a01      	ldr	r2, [sp, #4]
 80021ac:	9500      	str	r5, [sp, #0]
 80021ae:	eb02 0784 	add.w	r7, r2, r4, lsl #2
 80021b2:	eb03 0284 	add.w	r2, r3, r4, lsl #2
 80021b6:	f8dd b008 	ldr.w	fp, [sp, #8]
 80021ba:	9108      	str	r1, [sp, #32]
 80021bc:	f8cd e01c 	str.w	lr, [sp, #28]
 80021c0:	4615      	mov	r5, r2
 80021c2:	9a00      	ldr	r2, [sp, #0]
 80021c4:	ed97 1a00 	vldr	s2, [r7]
 80021c8:	9907      	ldr	r1, [sp, #28]
 80021ca:	2a00      	cmp	r2, #0
 80021cc:	ee21 1a20 	vmul.f32	s2, s2, s1
 80021d0:	f340 8072 	ble.w	80022b8 <ai_conv2d_stripe_f32+0x3b8>
 80021d4:	f026 0e03 	bic.w	lr, r6, #3
 80021d8:	f1be 0f00 	cmp.w	lr, #0
 80021dc:	f04f 0900 	mov.w	r9, #0
 80021e0:	f340 8029 	ble.w	8002236 <ai_conv2d_stripe_f32+0x336>
 80021e4:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
 80021e8:	edd0 1a00 	vldr	s3, [r0]
 80021ec:	ed91 2a00 	vldr	s4, [r1]
 80021f0:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 80021f4:	ee01 1a82 	vmla.f32	s2, s3, s4
 80021f8:	edd0 1a01 	vldr	s3, [r0, #4]
 80021fc:	ed91 2a00 	vldr	s4, [r1]
 8002200:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 8002204:	ee01 1a82 	vmla.f32	s2, s3, s4
 8002208:	edd0 1a02 	vldr	s3, [r0, #8]
 800220c:	ed91 2a00 	vldr	s4, [r1]
 8002210:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 8002214:	ee01 1a82 	vmla.f32	s2, s3, s4
 8002218:	f109 0904 	add.w	r9, r9, #4
 800221c:	edd0 1a03 	vldr	s3, [r0, #12]
 8002220:	ed91 2a00 	vldr	s4, [r1]
 8002224:	3010      	adds	r0, #16
 8002226:	45f1      	cmp	r9, lr
 8002228:	ee01 1a82 	vmla.f32	s2, s3, s4
 800222c:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 8002230:	dbda      	blt.n	80021e8 <ai_conv2d_stripe_f32+0x2e8>
 8002232:	f8cd 8088 	str.w	r8, [sp, #136]	; 0x88
 8002236:	45b1      	cmp	r9, r6
 8002238:	f280 8038 	bge.w	80022ac <ai_conv2d_stripe_f32+0x3ac>
 800223c:	f8dd e088 	ldr.w	lr, [sp, #136]	; 0x88
 8002240:	f109 0901 	add.w	r9, r9, #1
 8002244:	edd0 1a00 	vldr	s3, [r0]
 8002248:	ed91 2a00 	vldr	s4, [r1]
 800224c:	1d00      	adds	r0, r0, #4
 800224e:	45b1      	cmp	r9, r6
 8002250:	ee01 1a82 	vmla.f32	s2, s3, s4
 8002254:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 8002258:	da26      	bge.n	80022a8 <ai_conv2d_stripe_f32+0x3a8>
 800225a:	f109 0901 	add.w	r9, r9, #1
 800225e:	ed90 2a00 	vldr	s4, [r0]
 8002262:	edd1 1a00 	vldr	s3, [r1]
 8002266:	1d00      	adds	r0, r0, #4
 8002268:	45b1      	cmp	r9, r6
 800226a:	ee02 1a21 	vmla.f32	s2, s4, s3
 800226e:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 8002272:	da19      	bge.n	80022a8 <ai_conv2d_stripe_f32+0x3a8>
 8002274:	f109 0901 	add.w	r9, r9, #1
 8002278:	edd0 1a00 	vldr	s3, [r0]
 800227c:	ed91 2a00 	vldr	s4, [r1]
 8002280:	1d00      	adds	r0, r0, #4
 8002282:	45b1      	cmp	r9, r6
 8002284:	ee01 1a82 	vmla.f32	s2, s3, s4
 8002288:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 800228c:	da0c      	bge.n	80022a8 <ai_conv2d_stripe_f32+0x3a8>
 800228e:	f109 0901 	add.w	r9, r9, #1
 8002292:	ed90 2a00 	vldr	s4, [r0]
 8002296:	edd1 1a00 	vldr	s3, [r1]
 800229a:	1d00      	adds	r0, r0, #4
 800229c:	45b1      	cmp	r9, r6
 800229e:	ee02 1a21 	vmla.f32	s2, s4, s3
 80022a2:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 80022a6:	dbcb      	blt.n	8002240 <ai_conv2d_stripe_f32+0x340>
 80022a8:	f8cd e088 	str.w	lr, [sp, #136]	; 0x88
 80022ac:	1e52      	subs	r2, r2, #1
 80022ae:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80022b2:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 80022b6:	d18d      	bne.n	80021d4 <ai_conv2d_stripe_f32+0x2d4>
 80022b8:	9908      	ldr	r1, [sp, #32]
 80022ba:	ed85 1a00 	vstr	s2, [r5]
 80022be:	1c64      	adds	r4, r4, #1
 80022c0:	1d2d      	adds	r5, r5, #4
 80022c2:	1d3f      	adds	r7, r7, #4
 80022c4:	f1bb 0b01 	subs.w	fp, fp, #1
 80022c8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80022cc:	f47f af79 	bne.w	80021c2 <ai_conv2d_stripe_f32+0x2c2>
 80022d0:	9d00      	ldr	r5, [sp, #0]
 80022d2:	9908      	ldr	r1, [sp, #32]
 80022d4:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80022d8:	9a03      	ldr	r2, [sp, #12]
 80022da:	f10e 0e04 	add.w	lr, lr, #4
 80022de:	4596      	cmp	lr, r2
 80022e0:	f4bf af2f 	bcs.w	8002142 <ai_conv2d_stripe_f32+0x242>
 80022e4:	e75d      	b.n	80021a2 <ai_conv2d_stripe_f32+0x2a2>
 80022e6:	bf00      	nop
 80022e8:	00000000 	.word	0x00000000
 80022ec:	f9bd 10bc 	ldrsh.w	r1, [sp, #188]	; 0xbc
 80022f0:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 80022f4:	4608      	mov	r0, r1
 80022f6:	1bcb      	subs	r3, r1, r7
 80022f8:	fb97 f4f0 	sdiv	r4, r7, r0
 80022fc:	fb00 3004 	mla	r0, r0, r4, r3
 8002300:	fb90 faf1 	sdiv	sl, r0, r1
 8002304:	fb01 0a1a 	mls	sl, r1, sl, r0
 8002308:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 800230c:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800230e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8002310:	fb90 f0f3 	sdiv	r0, r0, r3
 8002314:	fb03 4000 	mla	r0, r3, r0, r4
 8002318:	1876      	adds	r6, r6, r1
 800231a:	fb90 fbf3 	sdiv	fp, r0, r3
 800231e:	1e76      	subs	r6, r6, #1
 8002320:	187f      	adds	r7, r7, r1
 8002322:	fb03 0b1b 	mls	fp, r3, fp, r0
 8002326:	eba6 060a 	sub.w	r6, r6, sl
 800232a:	eba5 050b 	sub.w	r5, r5, fp
 800232e:	1e7f      	subs	r7, r7, #1
 8002330:	fb96 f0f1 	sdiv	r0, r6, r1
 8002334:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8002336:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8002338:	195d      	adds	r5, r3, r5
 800233a:	1e6d      	subs	r5, r5, #1
 800233c:	fb00 9911 	mls	r9, r0, r1, r9
 8002340:	fb97 f1f1 	sdiv	r1, r7, r1
 8002344:	fb95 fcf3 	sdiv	ip, r5, r3
 8002348:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800234a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800234c:	9509      	str	r5, [sp, #36]	; 0x24
 800234e:	eba6 060c 	sub.w	r6, r6, ip
 8002352:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8002354:	1a2d      	subs	r5, r5, r0
 8002356:	fb05 f803 	mul.w	r8, r5, r3
 800235a:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800235c:	435d      	muls	r5, r3
 800235e:	fb06 fe05 	mul.w	lr, r6, r5
 8002362:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8002364:	9e06      	ldr	r6, [sp, #24]
 8002366:	194d      	adds	r5, r1, r5
 8002368:	fb04 f909 	mul.w	r9, r4, r9
 800236c:	435d      	muls	r5, r3
 800236e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8002370:	eb06 0185 	add.w	r1, r6, r5, lsl #2
 8002374:	9d01      	ldr	r5, [sp, #4]
 8002376:	9e00      	ldr	r6, [sp, #0]
 8002378:	1ae4      	subs	r4, r4, r3
 800237a:	42b5      	cmp	r5, r6
 800237c:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800237e:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8002380:	445d      	add	r5, fp
 8002382:	fb06 aa05 	mla	sl, r6, r5, sl
 8002386:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8002388:	fb0a f505 	mul.w	r5, sl, r5
 800238c:	bf0c      	ite	eq
 800238e:	eddf 0a9e 	vldreq	s1, [pc, #632]	; 8002608 <.text_5>
 8002392:	eef0 0a40 	vmovne.f32	s1, s0
 8002396:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 800239a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800239c:	2500      	movs	r5, #0
 800239e:	2a00      	cmp	r2, #0
 80023a0:	d06c      	beq.n	800247c <ai_conv2d_stripe_f32+0x57c>
 80023a2:	9202      	str	r2, [sp, #8]
 80023a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80023a6:	2a00      	cmp	r2, #0
 80023a8:	d062      	beq.n	8002470 <ai_conv2d_stripe_f32+0x570>
 80023aa:	9a01      	ldr	r2, [sp, #4]
 80023ac:	eb02 0685 	add.w	r6, r2, r5, lsl #2
 80023b0:	9a00      	ldr	r2, [sp, #0]
 80023b2:	f8cd c00c 	str.w	ip, [sp, #12]
 80023b6:	eb02 0a85 	add.w	sl, r2, r5, lsl #2
 80023ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80023bc:	f8cd e020 	str.w	lr, [sp, #32]
 80023c0:	f8cd 701c 	str.w	r7, [sp, #28]
 80023c4:	f8dd e00c 	ldr.w	lr, [sp, #12]
 80023c8:	ed96 1a00 	vldr	s2, [r6]
 80023cc:	9f07      	ldr	r7, [sp, #28]
 80023ce:	f1be 0f00 	cmp.w	lr, #0
 80023d2:	ee21 1a20 	vmul.f32	s2, s2, s1
 80023d6:	dd3b      	ble.n	8002450 <ai_conv2d_stripe_f32+0x550>
 80023d8:	2800      	cmp	r0, #0
 80023da:	dd32      	ble.n	8002442 <ai_conv2d_stripe_f32+0x542>
 80023dc:	ea4f 0c00 	mov.w	ip, r0
 80023e0:	eb07 0b83 	add.w	fp, r7, r3, lsl #2
 80023e4:	455f      	cmp	r7, fp
 80023e6:	d227      	bcs.n	8002438 <ai_conv2d_stripe_f32+0x538>
 80023e8:	edd1 2a00 	vldr	s5, [r1]
 80023ec:	edd7 1a00 	vldr	s3, [r7]
 80023f0:	1d09      	adds	r1, r1, #4
 80023f2:	1d3f      	adds	r7, r7, #4
 80023f4:	455f      	cmp	r7, fp
 80023f6:	ee02 1aa1 	vmla.f32	s2, s5, s3
 80023fa:	d21d      	bcs.n	8002438 <ai_conv2d_stripe_f32+0x538>
 80023fc:	ed91 3a00 	vldr	s6, [r1]
 8002400:	ed97 2a00 	vldr	s4, [r7]
 8002404:	1d09      	adds	r1, r1, #4
 8002406:	1d3f      	adds	r7, r7, #4
 8002408:	455f      	cmp	r7, fp
 800240a:	ee03 1a02 	vmla.f32	s2, s6, s4
 800240e:	d213      	bcs.n	8002438 <ai_conv2d_stripe_f32+0x538>
 8002410:	edd1 2a00 	vldr	s5, [r1]
 8002414:	edd7 1a00 	vldr	s3, [r7]
 8002418:	1d09      	adds	r1, r1, #4
 800241a:	1d3f      	adds	r7, r7, #4
 800241c:	455f      	cmp	r7, fp
 800241e:	ee02 1aa1 	vmla.f32	s2, s5, s3
 8002422:	d209      	bcs.n	8002438 <ai_conv2d_stripe_f32+0x538>
 8002424:	ed91 2a00 	vldr	s4, [r1]
 8002428:	ed97 3a00 	vldr	s6, [r7]
 800242c:	1d09      	adds	r1, r1, #4
 800242e:	1d3f      	adds	r7, r7, #4
 8002430:	455f      	cmp	r7, fp
 8002432:	ee02 1a03 	vmla.f32	s2, s4, s6
 8002436:	d3d7      	bcc.n	80023e8 <ai_conv2d_stripe_f32+0x4e8>
 8002438:	f1bc 0c01 	subs.w	ip, ip, #1
 800243c:	eb07 0784 	add.w	r7, r7, r4, lsl #2
 8002440:	d1ce      	bne.n	80023e0 <ai_conv2d_stripe_f32+0x4e0>
 8002442:	f1be 0e01 	subs.w	lr, lr, #1
 8002446:	eb07 0789 	add.w	r7, r7, r9, lsl #2
 800244a:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 800244e:	d1c3      	bne.n	80023d8 <ai_conv2d_stripe_f32+0x4d8>
 8002450:	9f08      	ldr	r7, [sp, #32]
 8002452:	1c6d      	adds	r5, r5, #1
 8002454:	1d36      	adds	r6, r6, #4
 8002456:	ed8a 1a00 	vstr	s2, [sl]
 800245a:	1e52      	subs	r2, r2, #1
 800245c:	eb01 0187 	add.w	r1, r1, r7, lsl #2
 8002460:	f10a 0a04 	add.w	sl, sl, #4
 8002464:	d1ae      	bne.n	80023c4 <ai_conv2d_stripe_f32+0x4c4>
 8002466:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800246a:	f8dd e020 	ldr.w	lr, [sp, #32]
 800246e:	9f07      	ldr	r7, [sp, #28]
 8002470:	9a02      	ldr	r2, [sp, #8]
 8002472:	1e52      	subs	r2, r2, #1
 8002474:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8002478:	9202      	str	r2, [sp, #8]
 800247a:	d193      	bne.n	80023a4 <ai_conv2d_stripe_f32+0x4a4>
 800247c:	9800      	ldr	r0, [sp, #0]
 800247e:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8002480:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8002484:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8002486:	f8bd 10a0 	ldrh.w	r1, [sp, #160]	; 0xa0
 800248a:	9200      	str	r2, [sp, #0]
 800248c:	1841      	adds	r1, r0, r1
 800248e:	912c      	str	r1, [sp, #176]	; 0xb0
 8002490:	9805      	ldr	r0, [sp, #20]
 8002492:	f8bd 10a0 	ldrh.w	r1, [sp, #160]	; 0xa0
 8002496:	1841      	adds	r1, r0, r1
 8002498:	9804      	ldr	r0, [sp, #16]
 800249a:	9105      	str	r1, [sp, #20]
 800249c:	1e40      	subs	r0, r0, #1
 800249e:	9004      	str	r0, [sp, #16]
 80024a0:	f47f ad86 	bne.w	8001fb0 <ai_conv2d_stripe_f32+0xb0>
 80024a4:	b018      	add	sp, #96	; 0x60
 80024a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080024aa <func_dummy>:
 80024aa:	4770      	bx	lr

080024ac <ai_dict8_dot_array_f32>:
 80024ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024b0:	b081      	sub	sp, #4
 80024b2:	4682      	mov	sl, r0
 80024b4:	ed2d 8b02 	vpush	{d8}
 80024b8:	4615      	mov	r5, r2
 80024ba:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80024bc:	08e0      	lsrs	r0, r4, #3
 80024be:	460f      	mov	r7, r1
 80024c0:	461a      	mov	r2, r3
 80024c2:	ed9f 0a51 	vldr	s0, [pc, #324]	; 8002608 <.text_5>
 80024c6:	d052      	beq.n	800256e <ai_dict8_dot_array_f32+0xc2>
 80024c8:	4629      	mov	r1, r5
 80024ca:	783b      	ldrb	r3, [r7, #0]
 80024cc:	787d      	ldrb	r5, [r7, #1]
 80024ce:	78be      	ldrb	r6, [r7, #2]
 80024d0:	f897 b003 	ldrb.w	fp, [r7, #3]
 80024d4:	ed92 8a00 	vldr	s16, [r2]
 80024d8:	ed92 7a01 	vldr	s14, [r2, #4]
 80024dc:	f817 cf04 	ldrb.w	ip, [r7, #4]!
 80024e0:	ed92 6a02 	vldr	s12, [r2, #8]
 80024e4:	ed92 5a03 	vldr	s10, [r2, #12]
 80024e8:	f897 e001 	ldrb.w	lr, [r7, #1]
 80024ec:	f897 8002 	ldrb.w	r8, [r7, #2]
 80024f0:	f897 9003 	ldrb.w	r9, [r7, #3]
 80024f4:	ed92 4a04 	vldr	s8, [r2, #16]
 80024f8:	ed92 3a05 	vldr	s6, [r2, #20]
 80024fc:	ed92 2a06 	vldr	s4, [r2, #24]
 8002500:	ed92 1a07 	vldr	s2, [r2, #28]
 8002504:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8002508:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 800250c:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8002510:	edd3 7a00 	vldr	s15, [r3]
 8002514:	edd5 6a00 	vldr	s13, [r5]
 8002518:	eb01 0b8b 	add.w	fp, r1, fp, lsl #2
 800251c:	ee07 0a88 	vmla.f32	s0, s15, s16
 8002520:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
 8002524:	edd6 5a00 	vldr	s11, [r6]
 8002528:	eddb 4a00 	vldr	s9, [fp]
 800252c:	eddc 3a00 	vldr	s7, [ip]
 8002530:	ee06 0a87 	vmla.f32	s0, s13, s14
 8002534:	eb01 0e8e 	add.w	lr, r1, lr, lsl #2
 8002538:	ee05 0a86 	vmla.f32	s0, s11, s12
 800253c:	eb01 0888 	add.w	r8, r1, r8, lsl #2
 8002540:	ee04 0a85 	vmla.f32	s0, s9, s10
 8002544:	eb01 0989 	add.w	r9, r1, r9, lsl #2
 8002548:	edde 2a00 	vldr	s5, [lr]
 800254c:	edd8 1a00 	vldr	s3, [r8]
 8002550:	edd9 0a00 	vldr	s1, [r9]
 8002554:	ee03 0a84 	vmla.f32	s0, s7, s8
 8002558:	1d3f      	adds	r7, r7, #4
 800255a:	ee02 0a83 	vmla.f32	s0, s5, s6
 800255e:	3220      	adds	r2, #32
 8002560:	ee01 0a82 	vmla.f32	s0, s3, s4
 8002564:	1e40      	subs	r0, r0, #1
 8002566:	ee00 0a81 	vmla.f32	s0, s1, s2
 800256a:	d1ae      	bne.n	80024ca <ai_dict8_dot_array_f32+0x1e>
 800256c:	460d      	mov	r5, r1
 800256e:	f014 0007 	ands.w	r0, r4, #7
 8002572:	d03e      	beq.n	80025f2 <ai_dict8_dot_array_f32+0x146>
 8002574:	f010 0103 	ands.w	r1, r0, #3
 8002578:	f000 800d 	beq.w	8002596 <ai_dict8_dot_array_f32+0xea>
 800257c:	f817 3b01 	ldrb.w	r3, [r7], #1
 8002580:	ed92 1a00 	vldr	s2, [r2]
 8002584:	eb05 0683 	add.w	r6, r5, r3, lsl #2
 8002588:	1d12      	adds	r2, r2, #4
 800258a:	edd6 0a00 	vldr	s1, [r6]
 800258e:	1e49      	subs	r1, r1, #1
 8002590:	ee00 0a81 	vmla.f32	s0, s1, s2
 8002594:	d1f2      	bne.n	800257c <ai_dict8_dot_array_f32+0xd0>
 8002596:	0880      	lsrs	r0, r0, #2
 8002598:	f000 802b 	beq.w	80025f2 <ai_dict8_dot_array_f32+0x146>
 800259c:	f817 3b01 	ldrb.w	r3, [r7], #1
 80025a0:	f817 1b01 	ldrb.w	r1, [r7], #1
 80025a4:	ed92 1a00 	vldr	s2, [r2]
 80025a8:	edd2 0a01 	vldr	s1, [r2, #4]
 80025ac:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80025b0:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 80025b4:	ed93 2a00 	vldr	s4, [r3]
 80025b8:	edd1 1a00 	vldr	s3, [r1]
 80025bc:	f817 1b01 	ldrb.w	r1, [r7], #1
 80025c0:	f817 3b01 	ldrb.w	r3, [r7], #1
 80025c4:	ee02 0a01 	vmla.f32	s0, s4, s2
 80025c8:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 80025cc:	ee01 0aa0 	vmla.f32	s0, s3, s1
 80025d0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80025d4:	edd2 0a02 	vldr	s1, [r2, #8]
 80025d8:	ed91 2a00 	vldr	s4, [r1]
 80025dc:	ed92 1a03 	vldr	s2, [r2, #12]
 80025e0:	edd3 1a00 	vldr	s3, [r3]
 80025e4:	3210      	adds	r2, #16
 80025e6:	ee02 0a20 	vmla.f32	s0, s4, s1
 80025ea:	1e40      	subs	r0, r0, #1
 80025ec:	ee01 0a81 	vmla.f32	s0, s3, s2
 80025f0:	d1d4      	bne.n	800259c <ai_dict8_dot_array_f32+0xf0>
 80025f2:	edda 0a00 	vldr	s1, [sl]
 80025f6:	ee30 0a80 	vadd.f32	s0, s1, s0
 80025fa:	ed8a 0a00 	vstr	s0, [sl]
 80025fe:	ecbd 8b02 	vpop	{d8}
 8002602:	b001      	add	sp, #4
 8002604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002608 <.text_5>:
 8002608:	00000000 	.word	0x00000000

0800260c <ai_dict4_dot_array_f32>:
 800260c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002610:	ed2d 8b02 	vpush	{d8}
 8002614:	4680      	mov	r8, r0
 8002616:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 800261a:	ea4f 005c 	mov.w	r0, ip, lsr #1
 800261e:	461e      	mov	r6, r3
 8002620:	0040      	lsls	r0, r0, #1
 8002622:	ea5f 03dc 	movs.w	r3, ip, lsr #3
 8002626:	460c      	mov	r4, r1
 8002628:	4615      	mov	r5, r2
 800262a:	eb06 0e80 	add.w	lr, r6, r0, lsl #2
 800262e:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8002770 <.text_7>
 8002632:	d053      	beq.n	80026dc <ai_dict4_dot_array_f32+0xd0>
 8002634:	ed96 8a00 	vldr	s16, [r6]
 8002638:	ed96 7a01 	vldr	s14, [r6, #4]
 800263c:	ed96 6a02 	vldr	s12, [r6, #8]
 8002640:	ed96 5a03 	vldr	s10, [r6, #12]
 8002644:	7820      	ldrb	r0, [r4, #0]
 8002646:	7861      	ldrb	r1, [r4, #1]
 8002648:	78a2      	ldrb	r2, [r4, #2]
 800264a:	78e7      	ldrb	r7, [r4, #3]
 800264c:	ed96 4a04 	vldr	s8, [r6, #16]
 8002650:	ed96 3a05 	vldr	s6, [r6, #20]
 8002654:	ed96 2a06 	vldr	s4, [r6, #24]
 8002658:	ed96 1a07 	vldr	s2, [r6, #28]
 800265c:	f007 090f 	and.w	r9, r7, #15
 8002660:	093f      	lsrs	r7, r7, #4
 8002662:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 8002666:	eb05 0a89 	add.w	sl, r5, r9, lsl #2
 800266a:	edd7 1a00 	vldr	s3, [r7]
 800266e:	edda 0a00 	vldr	s1, [sl]
 8002672:	f002 070f 	and.w	r7, r2, #15
 8002676:	0912      	lsrs	r2, r2, #4
 8002678:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800267c:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 8002680:	edd2 3a00 	vldr	s7, [r2]
 8002684:	edd7 2a00 	vldr	s5, [r7]
 8002688:	f001 020f 	and.w	r2, r1, #15
 800268c:	0909      	lsrs	r1, r1, #4
 800268e:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8002692:	eb05 0782 	add.w	r7, r5, r2, lsl #2
 8002696:	edd1 5a00 	vldr	s11, [r1]
 800269a:	edd7 4a00 	vldr	s9, [r7]
 800269e:	f000 010f 	and.w	r1, r0, #15
 80026a2:	0900      	lsrs	r0, r0, #4
 80026a4:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 80026a8:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 80026ac:	edd0 7a00 	vldr	s15, [r0]
 80026b0:	edd2 6a00 	vldr	s13, [r2]
 80026b4:	ee07 0a88 	vmla.f32	s0, s15, s16
 80026b8:	ee06 0a87 	vmla.f32	s0, s13, s14
 80026bc:	ee05 0a86 	vmla.f32	s0, s11, s12
 80026c0:	ee04 0a85 	vmla.f32	s0, s9, s10
 80026c4:	ee03 0a84 	vmla.f32	s0, s7, s8
 80026c8:	1d24      	adds	r4, r4, #4
 80026ca:	ee02 0a83 	vmla.f32	s0, s5, s6
 80026ce:	3620      	adds	r6, #32
 80026d0:	ee01 0a82 	vmla.f32	s0, s3, s4
 80026d4:	1e5b      	subs	r3, r3, #1
 80026d6:	ee00 0a81 	vmla.f32	s0, s1, s2
 80026da:	d1ab      	bne.n	8002634 <ai_dict4_dot_array_f32+0x28>
 80026dc:	4576      	cmp	r6, lr
 80026de:	d22f      	bcs.n	8002740 <ai_dict4_dot_array_f32+0x134>
 80026e0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80026e4:	edd6 1a00 	vldr	s3, [r6]
 80026e8:	edd6 0a01 	vldr	s1, [r6, #4]
 80026ec:	f000 010f 	and.w	r1, r0, #15
 80026f0:	0900      	lsrs	r0, r0, #4
 80026f2:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 80026f6:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 80026fa:	ed90 2a00 	vldr	s4, [r0]
 80026fe:	ed92 1a00 	vldr	s2, [r2]
 8002702:	3608      	adds	r6, #8
 8002704:	ee02 0a21 	vmla.f32	s0, s4, s3
 8002708:	4576      	cmp	r6, lr
 800270a:	ee01 0a20 	vmla.f32	s0, s2, s1
 800270e:	d217      	bcs.n	8002740 <ai_dict4_dot_array_f32+0x134>
 8002710:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002714:	ed96 1a00 	vldr	s2, [r6]
 8002718:	ed96 2a01 	vldr	s4, [r6, #4]
 800271c:	f000 010f 	and.w	r1, r0, #15
 8002720:	0900      	lsrs	r0, r0, #4
 8002722:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8002726:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 800272a:	edd0 1a00 	vldr	s3, [r0]
 800272e:	edd2 0a00 	vldr	s1, [r2]
 8002732:	3608      	adds	r6, #8
 8002734:	ee01 0a81 	vmla.f32	s0, s3, s2
 8002738:	4576      	cmp	r6, lr
 800273a:	ee00 0a82 	vmla.f32	s0, s1, s4
 800273e:	d3cf      	bcc.n	80026e0 <ai_dict4_dot_array_f32+0xd4>
 8002740:	ea5f 70cc 	movs.w	r0, ip, lsl #31
 8002744:	d509      	bpl.n	800275a <ai_dict4_dot_array_f32+0x14e>
 8002746:	7821      	ldrb	r1, [r4, #0]
 8002748:	ed96 1a00 	vldr	s2, [r6]
 800274c:	0909      	lsrs	r1, r1, #4
 800274e:	eb05 0081 	add.w	r0, r5, r1, lsl #2
 8002752:	edd0 0a00 	vldr	s1, [r0]
 8002756:	ee00 0a81 	vmla.f32	s0, s1, s2
 800275a:	edd8 1a00 	vldr	s3, [r8]
 800275e:	ee31 0a80 	vadd.f32	s0, s3, s0
 8002762:	ed88 0a00 	vstr	s0, [r8]
 8002766:	ecbd 8b02 	vpop	{d8}
 800276a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08002770 <.text_7>:
 8002770:	00000000 	.word	0x00000000

08002774 <ai_dict_decompress_f32>:
 8002774:	b4f0      	push	{r4, r5, r6, r7}
 8002776:	4604      	mov	r4, r0
 8002778:	9805      	ldr	r0, [sp, #20]
 800277a:	9e04      	ldr	r6, [sp, #16]
 800277c:	2b04      	cmp	r3, #4
 800277e:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8002782:	d003      	beq.n	800278c <ai_dict_decompress_f32+0x18>
 8002784:	2b08      	cmp	r3, #8
 8002786:	d03e      	beq.n	8002806 <ai_dict_decompress_f32+0x92>
 8002788:	bcf0      	pop	{r4, r5, r6, r7}
 800278a:	4770      	bx	lr
 800278c:	42ac      	cmp	r4, r5
 800278e:	d259      	bcs.n	8002844 <ai_dict_decompress_f32+0xd0>
 8002790:	0870      	lsrs	r0, r6, #1
 8002792:	d02e      	beq.n	80027f2 <ai_dict_decompress_f32+0x7e>
 8002794:	07c3      	lsls	r3, r0, #31
 8002796:	d50c      	bpl.n	80027b2 <ai_dict_decompress_f32+0x3e>
 8002798:	780f      	ldrb	r7, [r1, #0]
 800279a:	093f      	lsrs	r7, r7, #4
 800279c:	f852 3027 	ldr.w	r3, [r2, r7, lsl #2]
 80027a0:	6023      	str	r3, [r4, #0]
 80027a2:	f811 7b01 	ldrb.w	r7, [r1], #1
 80027a6:	f007 070f 	and.w	r7, r7, #15
 80027aa:	f852 3027 	ldr.w	r3, [r2, r7, lsl #2]
 80027ae:	6063      	str	r3, [r4, #4]
 80027b0:	3408      	adds	r4, #8
 80027b2:	0840      	lsrs	r0, r0, #1
 80027b4:	d01d      	beq.n	80027f2 <ai_dict_decompress_f32+0x7e>
 80027b6:	780b      	ldrb	r3, [r1, #0]
 80027b8:	091b      	lsrs	r3, r3, #4
 80027ba:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 80027be:	6027      	str	r7, [r4, #0]
 80027c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80027c4:	f003 030f 	and.w	r3, r3, #15
 80027c8:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 80027cc:	6067      	str	r7, [r4, #4]
 80027ce:	f104 0308 	add.w	r3, r4, #8
 80027d2:	780c      	ldrb	r4, [r1, #0]
 80027d4:	0924      	lsrs	r4, r4, #4
 80027d6:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
 80027da:	601f      	str	r7, [r3, #0]
 80027dc:	1e40      	subs	r0, r0, #1
 80027de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80027e2:	f004 040f 	and.w	r4, r4, #15
 80027e6:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
 80027ea:	605f      	str	r7, [r3, #4]
 80027ec:	f103 0408 	add.w	r4, r3, #8
 80027f0:	d1e1      	bne.n	80027b6 <ai_dict_decompress_f32+0x42>
 80027f2:	07f0      	lsls	r0, r6, #31
 80027f4:	d5ca      	bpl.n	800278c <ai_dict_decompress_f32+0x18>
 80027f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80027fa:	091b      	lsrs	r3, r3, #4
 80027fc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002800:	f844 0b04 	str.w	r0, [r4], #4
 8002804:	e7c2      	b.n	800278c <ai_dict_decompress_f32+0x18>
 8002806:	42ac      	cmp	r4, r5
 8002808:	d21c      	bcs.n	8002844 <ai_dict_decompress_f32+0xd0>
 800280a:	7808      	ldrb	r0, [r1, #0]
 800280c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8002810:	6020      	str	r0, [r4, #0]
 8002812:	1d20      	adds	r0, r4, #4
 8002814:	42a8      	cmp	r0, r5
 8002816:	bf3f      	itttt	cc
 8002818:	784c      	ldrbcc	r4, [r1, #1]
 800281a:	f852 3024 	ldrcc.w	r3, [r2, r4, lsl #2]
 800281e:	f840 3b04 	strcc.w	r3, [r0], #4
 8002822:	42a8      	cmpcc	r0, r5
 8002824:	d20e      	bcs.n	8002844 <ai_dict_decompress_f32+0xd0>
 8002826:	788b      	ldrb	r3, [r1, #2]
 8002828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800282c:	f840 3b04 	str.w	r3, [r0], #4
 8002830:	42a8      	cmp	r0, r5
 8002832:	d207      	bcs.n	8002844 <ai_dict_decompress_f32+0xd0>
 8002834:	78cc      	ldrb	r4, [r1, #3]
 8002836:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 800283a:	1d09      	adds	r1, r1, #4
 800283c:	1d04      	adds	r4, r0, #4
 800283e:	42ac      	cmp	r4, r5
 8002840:	6003      	str	r3, [r0, #0]
 8002842:	d3e2      	bcc.n	800280a <ai_dict_decompress_f32+0x96>
 8002844:	bcf0      	pop	{r4, r5, r6, r7}
 8002846:	4770      	bx	lr

08002848 <forward_conv2d>:
 8002848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800284c:	4605      	mov	r5, r0
 800284e:	b0a9      	sub	sp, #164	; 0xa4
 8002850:	696b      	ldr	r3, [r5, #20]
 8002852:	8819      	ldrh	r1, [r3, #0]
 8002854:	2900      	cmp	r1, #0
 8002856:	bf1a      	itte	ne
 8002858:	6858      	ldrne	r0, [r3, #4]
 800285a:	1d00      	addne	r0, r0, #4
 800285c:	2004      	moveq	r0, #4
 800285e:	6800      	ldr	r0, [r0, #0]
 8002860:	2800      	cmp	r0, #0
 8002862:	bf14      	ite	ne
 8002864:	6802      	ldrne	r2, [r0, #0]
 8002866:	2200      	moveq	r2, #0
 8002868:	2901      	cmp	r1, #1
 800286a:	bfc6      	itte	gt
 800286c:	6858      	ldrgt	r0, [r3, #4]
 800286e:	3010      	addgt	r0, #16
 8002870:	2004      	movle	r0, #4
 8002872:	6800      	ldr	r0, [r0, #0]
 8002874:	2800      	cmp	r0, #0
 8002876:	bf14      	ite	ne
 8002878:	f8d0 a000 	ldrne.w	sl, [r0]
 800287c:	f04f 0a00 	moveq.w	sl, #0
 8002880:	2902      	cmp	r1, #2
 8002882:	bfc6      	itte	gt
 8002884:	6858      	ldrgt	r0, [r3, #4]
 8002886:	f100 041c 	addgt.w	r4, r0, #28
 800288a:	2404      	movle	r4, #4
 800288c:	6820      	ldr	r0, [r4, #0]
 800288e:	2800      	cmp	r0, #0
 8002890:	bf14      	ite	ne
 8002892:	6806      	ldrne	r6, [r0, #0]
 8002894:	2600      	moveq	r6, #0
 8002896:	2902      	cmp	r1, #2
 8002898:	dd0a      	ble.n	80028b0 <forward_conv2d+0x68>
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f113 0118 	adds.w	r1, r3, #24
 80028a0:	d006      	beq.n	80028b0 <forward_conv2d+0x68>
 80028a2:	8b19      	ldrh	r1, [r3, #24]
 80028a4:	2901      	cmp	r1, #1
 80028a6:	dd03      	ble.n	80028b0 <forward_conv2d+0x68>
 80028a8:	69d9      	ldr	r1, [r3, #28]
 80028aa:	b109      	cbz	r1, 80028b0 <forward_conv2d+0x68>
 80028ac:	6849      	ldr	r1, [r1, #4]
 80028ae:	e000      	b.n	80028b2 <forward_conv2d+0x6a>
 80028b0:	2100      	movs	r1, #0
 80028b2:	b100      	cbz	r0, 80028b6 <forward_conv2d+0x6e>
 80028b4:	6880      	ldr	r0, [r0, #8]
 80028b6:	68d7      	ldr	r7, [r2, #12]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	931b      	str	r3, [sp, #108]	; 0x6c
 80028bc:	f8da 300c 	ldr.w	r3, [sl, #12]
 80028c0:	685c      	ldr	r4, [r3, #4]
 80028c2:	9404      	str	r4, [sp, #16]
 80028c4:	68dc      	ldr	r4, [r3, #12]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	9314      	str	r3, [sp, #80]	; 0x50
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	931a      	str	r3, [sp, #104]	; 0x68
 80028ce:	68bf      	ldr	r7, [r7, #8]
 80028d0:	9720      	str	r7, [sp, #128]	; 0x80
 80028d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80028d4:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80028d8:	8d2f      	ldrh	r7, [r5, #40]	; 0x28
 80028da:	971f      	str	r7, [sp, #124]	; 0x7c
 80028dc:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80028de:	681f      	ldr	r7, [r3, #0]
 80028e0:	f8b3 8004 	ldrh.w	r8, [r3, #4]
 80028e4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80028e6:	9319      	str	r3, [sp, #100]	; 0x64
 80028e8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80028ea:	9318      	str	r3, [sp, #96]	; 0x60
 80028ec:	68f3      	ldr	r3, [r6, #12]
 80028ee:	f8d3 e008 	ldr.w	lr, [r3, #8]
 80028f2:	f8cd e04c 	str.w	lr, [sp, #76]	; 0x4c
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	9312      	str	r3, [sp, #72]	; 0x48
 80028fa:	69ab      	ldr	r3, [r5, #24]
 80028fc:	931e      	str	r3, [sp, #120]	; 0x78
 80028fe:	6992      	ldr	r2, [r2, #24]
 8002900:	6893      	ldr	r3, [r2, #8]
 8002902:	931d      	str	r3, [sp, #116]	; 0x74
 8002904:	69b2      	ldr	r2, [r6, #24]
 8002906:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800290a:	b119      	cbz	r1, 8002914 <forward_conv2d+0xcc>
 800290c:	698a      	ldr	r2, [r1, #24]
 800290e:	6893      	ldr	r3, [r2, #8]
 8002910:	9317      	str	r3, [sp, #92]	; 0x5c
 8002912:	e001      	b.n	8002918 <forward_conv2d+0xd0>
 8002914:	2200      	movs	r2, #0
 8002916:	9217      	str	r2, [sp, #92]	; 0x5c
 8002918:	f8da 1018 	ldr.w	r1, [sl, #24]
 800291c:	688a      	ldr	r2, [r1, #8]
 800291e:	9203      	str	r2, [sp, #12]
 8002920:	69e9      	ldr	r1, [r5, #28]
 8002922:	b118      	cbz	r0, 800292c <forward_conv2d+0xe4>
 8002924:	6981      	ldr	r1, [r0, #24]
 8002926:	688a      	ldr	r2, [r1, #8]
 8002928:	9215      	str	r2, [sp, #84]	; 0x54
 800292a:	e005      	b.n	8002938 <forward_conv2d+0xf0>
 800292c:	b111      	cbz	r1, 8002934 <forward_conv2d+0xec>
 800292e:	688a      	ldr	r2, [r1, #8]
 8002930:	9215      	str	r2, [sp, #84]	; 0x54
 8002932:	e001      	b.n	8002938 <forward_conv2d+0xf0>
 8002934:	2300      	movs	r3, #0
 8002936:	9315      	str	r3, [sp, #84]	; 0x54
 8002938:	9915      	ldr	r1, [sp, #84]	; 0x54
 800293a:	9102      	str	r1, [sp, #8]
 800293c:	b920      	cbnz	r0, 8002948 <forward_conv2d+0x100>
 800293e:	2100      	movs	r1, #0
 8002940:	2201      	movs	r2, #1
 8002942:	9124      	str	r1, [sp, #144]	; 0x90
 8002944:	9223      	str	r2, [sp, #140]	; 0x8c
 8002946:	e008      	b.n	800295a <forward_conv2d+0x112>
 8002948:	6941      	ldr	r1, [r0, #20]
 800294a:	688a      	ldr	r2, [r1, #8]
 800294c:	9224      	str	r2, [sp, #144]	; 0x90
 800294e:	6980      	ldr	r0, [r0, #24]
 8002950:	6841      	ldr	r1, [r0, #4]
 8002952:	6800      	ldr	r0, [r0, #0]
 8002954:	f004 fb3e 	bl	8006fd4 <ai_array_get_byte_size>
 8002958:	9023      	str	r0, [sp, #140]	; 0x8c
 800295a:	aa18      	add	r2, sp, #96	; 0x60
 800295c:	6a28      	ldr	r0, [r5, #32]
 800295e:	2800      	cmp	r0, #0
 8002960:	bf12      	itee	ne
 8002962:	9022      	strne	r0, [sp, #136]	; 0x88
 8002964:	f8df 1d28 	ldreq.w	r1, [pc, #3368]	; 8003690 <.text_15>
 8002968:	9122      	streq	r1, [sp, #136]	; 0x88
 800296a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800296c:	8813      	ldrh	r3, [r2, #0]
 800296e:	1e48      	subs	r0, r1, #1
 8002970:	1e5b      	subs	r3, r3, #1
 8002972:	aa19      	add	r2, sp, #100	; 0x64
 8002974:	fb03 1100 	mla	r1, r3, r0, r1
 8002978:	9116      	str	r1, [sp, #88]	; 0x58
 800297a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800297c:	8813      	ldrh	r3, [r2, #0]
 800297e:	1e41      	subs	r1, r0, #1
 8002980:	1e5b      	subs	r3, r3, #1
 8002982:	fb03 0001 	mla	r0, r3, r1, r0
 8002986:	901c      	str	r0, [sp, #112]	; 0x70
 8002988:	2200      	movs	r2, #0
 800298a:	69b6      	ldr	r6, [r6, #24]
 800298c:	6831      	ldr	r1, [r6, #0]
 800298e:	11cb      	asrs	r3, r1, #7
 8002990:	ea4f 5c61 	mov.w	ip, r1, asr #21
 8002994:	1449      	asrs	r1, r1, #17
 8002996:	f001 010f 	and.w	r1, r1, #15
 800299a:	2000      	movs	r0, #0
 800299c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029a0:	f00c 0c03 	and.w	ip, ip, #3
 80029a4:	2904      	cmp	r1, #4
 80029a6:	4683      	mov	fp, r0
 80029a8:	fa23 f30c 	lsr.w	r3, r3, ip
 80029ac:	bf14      	ite	ne
 80029ae:	2908      	cmpne	r1, #8
 80029b0:	68f2      	ldreq	r2, [r6, #12]
 80029b2:	b1da      	cbz	r2, 80029ec <forward_conv2d+0x1a4>
 80029b4:	6969      	ldr	r1, [r5, #20]
 80029b6:	880d      	ldrh	r5, [r1, #0]
 80029b8:	2d04      	cmp	r5, #4
 80029ba:	bfa6      	itte	ge
 80029bc:	6849      	ldrge	r1, [r1, #4]
 80029be:	3128      	addge	r1, #40	; 0x28
 80029c0:	2104      	movlt	r1, #4
 80029c2:	6809      	ldr	r1, [r1, #0]
 80029c4:	2900      	cmp	r1, #0
 80029c6:	bf1f      	itttt	ne
 80029c8:	6808      	ldrne	r0, [r1, #0]
 80029ca:	2800      	cmpne	r0, #0
 80029cc:	6981      	ldrne	r1, [r0, #24]
 80029ce:	f8d1 b008 	ldrne.w	fp, [r1, #8]
 80029d2:	6980      	ldr	r0, [r0, #24]
 80029d4:	6841      	ldr	r1, [r0, #4]
 80029d6:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80029d8:	9101      	str	r1, [sp, #4]
 80029da:	9000      	str	r0, [sp, #0]
 80029dc:	4658      	mov	r0, fp
 80029de:	68b1      	ldr	r1, [r6, #8]
 80029e0:	f7ff fec8 	bl	8002774 <ai_dict_decompress_f32>
 80029e4:	f1bb 0f00 	cmp.w	fp, #0
 80029e8:	bf18      	it	ne
 80029ea:	46d9      	movne	r9, fp
 80029ec:	b2bf      	uxth	r7, r7
 80029ee:	427f      	negs	r7, r7
 80029f0:	2c00      	cmp	r4, #0
 80029f2:	d073      	beq.n	8002adc <forward_conv2d+0x294>
 80029f4:	4622      	mov	r2, r4
 80029f6:	f1c8 0800 	rsb	r8, r8, #0
 80029fa:	9c04      	ldr	r4, [sp, #16]
 80029fc:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8002a00:	9e02      	ldr	r6, [sp, #8]
 8002a02:	f8cd 8098 	str.w	r8, [sp, #152]	; 0x98
 8002a06:	f8cd 909c 	str.w	r9, [sp, #156]	; 0x9c
 8002a0a:	9711      	str	r7, [sp, #68]	; 0x44
 8002a0c:	9221      	str	r2, [sp, #132]	; 0x84
 8002a0e:	9826      	ldr	r0, [sp, #152]	; 0x98
 8002a10:	991a      	ldr	r1, [sp, #104]	; 0x68
 8002a12:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8002a14:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8002a16:	9025      	str	r0, [sp, #148]	; 0x94
 8002a18:	9811      	ldr	r0, [sp, #68]	; 0x44
 8002a1a:	4240      	negs	r0, r0
 8002a1c:	bfd8      	it	le
 8002a1e:	2000      	movle	r0, #0
 8002a20:	1a89      	subs	r1, r1, r2
 8002a22:	4299      	cmp	r1, r3
 8002a24:	bf3d      	ittte	cc
 8002a26:	9a1a      	ldrcc	r2, [sp, #104]	; 0x68
 8002a28:	9911      	ldrcc	r1, [sp, #68]	; 0x44
 8002a2a:	1a51      	subcc	r1, r2, r1
 8002a2c:	4619      	movcs	r1, r3
 8002a2e:	910a      	str	r1, [sp, #40]	; 0x28
 8002a30:	9009      	str	r0, [sp, #36]	; 0x24
 8002a32:	9402      	str	r4, [sp, #8]
 8002a34:	981e      	ldr	r0, [sp, #120]	; 0x78
 8002a36:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 8002a3a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8002a3c:	9008      	str	r0, [sp, #32]
 8002a3e:	9107      	str	r1, [sp, #28]
 8002a40:	b212      	sxth	r2, r2
 8002a42:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8002a44:	9912      	ldr	r1, [sp, #72]	; 0x48
 8002a46:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002a48:	920f      	str	r2, [sp, #60]	; 0x3c
 8002a4a:	9006      	str	r0, [sp, #24]
 8002a4c:	9105      	str	r1, [sp, #20]
 8002a4e:	b21b      	sxth	r3, r3
 8002a50:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8002a52:	9814      	ldr	r0, [sp, #80]	; 0x50
 8002a54:	9920      	ldr	r1, [sp, #128]	; 0x80
 8002a56:	930e      	str	r3, [sp, #56]	; 0x38
 8002a58:	920d      	str	r2, [sp, #52]	; 0x34
 8002a5a:	9004      	str	r0, [sp, #16]
 8002a5c:	9103      	str	r1, [sp, #12]
 8002a5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002a60:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8002a62:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8002a64:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8002a66:	930c      	str	r3, [sp, #48]	; 0x30
 8002a68:	920b      	str	r2, [sp, #44]	; 0x2c
 8002a6a:	9001      	str	r0, [sp, #4]
 8002a6c:	9100      	str	r1, [sp, #0]
 8002a6e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8002a70:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8002a72:	4659      	mov	r1, fp
 8002a74:	2000      	movs	r0, #0
 8002a76:	f7ff fa43 	bl	8001f00 <ai_conv2d_stripe_f32>
 8002a7a:	9814      	ldr	r0, [sp, #80]	; 0x50
 8002a7c:	b310      	cbz	r0, 8002ac4 <forward_conv2d+0x27c>
 8002a7e:	f8cd a000 	str.w	sl, [sp]
 8002a82:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8002a84:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8002a86:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
 8002a8a:	f8dd 9088 	ldr.w	r9, [sp, #136]	; 0x88
 8002a8e:	4682      	mov	sl, r0
 8002a90:	9800      	ldr	r0, [sp, #0]
 8002a92:	6981      	ldr	r1, [r0, #24]
 8002a94:	f8c1 b008 	str.w	fp, [r1, #8]
 8002a98:	462b      	mov	r3, r5
 8002a9a:	4622      	mov	r2, r4
 8002a9c:	4608      	mov	r0, r1
 8002a9e:	47c8      	blx	r9
 8002aa0:	443d      	add	r5, r7
 8002aa2:	1ba8      	subs	r0, r5, r6
 8002aa4:	4540      	cmp	r0, r8
 8002aa6:	bfa8      	it	ge
 8002aa8:	4635      	movge	r5, r6
 8002aaa:	f1ba 0a01 	subs.w	sl, sl, #1
 8002aae:	eb0b 0b84 	add.w	fp, fp, r4, lsl #2
 8002ab2:	d1ed      	bne.n	8002a90 <forward_conv2d+0x248>
 8002ab4:	f8dd a000 	ldr.w	sl, [sp]
 8002ab8:	9515      	str	r5, [sp, #84]	; 0x54
 8002aba:	9724      	str	r7, [sp, #144]	; 0x90
 8002abc:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
 8002ac0:	f8cd 9088 	str.w	r9, [sp, #136]	; 0x88
 8002ac4:	f8da 0018 	ldr.w	r0, [sl, #24]
 8002ac8:	68c1      	ldr	r1, [r0, #12]
 8002aca:	6081      	str	r1, [r0, #8]
 8002acc:	9811      	ldr	r0, [sp, #68]	; 0x44
 8002ace:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8002ad0:	1808      	adds	r0, r1, r0
 8002ad2:	9011      	str	r0, [sp, #68]	; 0x44
 8002ad4:	9821      	ldr	r0, [sp, #132]	; 0x84
 8002ad6:	1e40      	subs	r0, r0, #1
 8002ad8:	9021      	str	r0, [sp, #132]	; 0x84
 8002ada:	d198      	bne.n	8002a0e <forward_conv2d+0x1c6>
 8002adc:	b029      	add	sp, #164	; 0xa4
 8002ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08002ae4 <forward_conv2d_nl_pool>:
 8002ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ae8:	4604      	mov	r4, r0
 8002aea:	b0b9      	sub	sp, #228	; 0xe4
 8002aec:	6963      	ldr	r3, [r4, #20]
 8002aee:	8819      	ldrh	r1, [r3, #0]
 8002af0:	2900      	cmp	r1, #0
 8002af2:	bf1a      	itte	ne
 8002af4:	6858      	ldrne	r0, [r3, #4]
 8002af6:	1d00      	addne	r0, r0, #4
 8002af8:	2004      	moveq	r0, #4
 8002afa:	6800      	ldr	r0, [r0, #0]
 8002afc:	2800      	cmp	r0, #0
 8002afe:	bf14      	ite	ne
 8002b00:	6802      	ldrne	r2, [r0, #0]
 8002b02:	2200      	moveq	r2, #0
 8002b04:	2901      	cmp	r1, #1
 8002b06:	bfc6      	itte	gt
 8002b08:	6858      	ldrgt	r0, [r3, #4]
 8002b0a:	3010      	addgt	r0, #16
 8002b0c:	2004      	movle	r0, #4
 8002b0e:	6800      	ldr	r0, [r0, #0]
 8002b10:	2800      	cmp	r0, #0
 8002b12:	bf14      	ite	ne
 8002b14:	f8d0 9000 	ldrne.w	r9, [r0]
 8002b18:	f04f 0900 	moveq.w	r9, #0
 8002b1c:	2902      	cmp	r1, #2
 8002b1e:	bfc6      	itte	gt
 8002b20:	6858      	ldrgt	r0, [r3, #4]
 8002b22:	f100 071c 	addgt.w	r7, r0, #28
 8002b26:	2704      	movle	r7, #4
 8002b28:	6838      	ldr	r0, [r7, #0]
 8002b2a:	2800      	cmp	r0, #0
 8002b2c:	bf14      	ite	ne
 8002b2e:	6806      	ldrne	r6, [r0, #0]
 8002b30:	2600      	moveq	r6, #0
 8002b32:	2902      	cmp	r1, #2
 8002b34:	dd0a      	ble.n	8002b4c <forward_conv2d_nl_pool+0x68>
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f113 0118 	adds.w	r1, r3, #24
 8002b3c:	d006      	beq.n	8002b4c <forward_conv2d_nl_pool+0x68>
 8002b3e:	8b19      	ldrh	r1, [r3, #24]
 8002b40:	2901      	cmp	r1, #1
 8002b42:	dd03      	ble.n	8002b4c <forward_conv2d_nl_pool+0x68>
 8002b44:	69d9      	ldr	r1, [r3, #28]
 8002b46:	b109      	cbz	r1, 8002b4c <forward_conv2d_nl_pool+0x68>
 8002b48:	6849      	ldr	r1, [r1, #4]
 8002b4a:	e000      	b.n	8002b4e <forward_conv2d_nl_pool+0x6a>
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	b100      	cbz	r0, 8002b52 <forward_conv2d_nl_pool+0x6e>
 8002b50:	6880      	ldr	r0, [r0, #8]
 8002b52:	68d7      	ldr	r7, [r2, #12]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	9323      	str	r3, [sp, #140]	; 0x8c
 8002b58:	f8d9 500c 	ldr.w	r5, [r9, #12]
 8002b5c:	686b      	ldr	r3, [r5, #4]
 8002b5e:	9310      	str	r3, [sp, #64]	; 0x40
 8002b60:	68eb      	ldr	r3, [r5, #12]
 8002b62:	9322      	str	r3, [sp, #136]	; 0x88
 8002b64:	68ab      	ldr	r3, [r5, #8]
 8002b66:	9321      	str	r3, [sp, #132]	; 0x84
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	931b      	str	r3, [sp, #108]	; 0x6c
 8002b6c:	68bf      	ldr	r7, [r7, #8]
 8002b6e:	972d      	str	r7, [sp, #180]	; 0xb4
 8002b70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b72:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8002b76:	8d27      	ldrh	r7, [r4, #40]	; 0x28
 8002b78:	9720      	str	r7, [sp, #128]	; 0x80
 8002b7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002b7c:	881f      	ldrh	r7, [r3, #0]
 8002b7e:	f8b3 8004 	ldrh.w	r8, [r3, #4]
 8002b82:	689d      	ldr	r5, [r3, #8]
 8002b84:	69a3      	ldr	r3, [r4, #24]
 8002b86:	932c      	str	r3, [sp, #176]	; 0xb0
 8002b88:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002b8a:	931f      	str	r3, [sp, #124]	; 0x7c
 8002b8c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002b8e:	931e      	str	r3, [sp, #120]	; 0x78
 8002b90:	68f3      	ldr	r3, [r6, #12]
 8002b92:	f8d3 e004 	ldr.w	lr, [r3, #4]
 8002b96:	f8cd e068 	str.w	lr, [sp, #104]	; 0x68
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	9319      	str	r3, [sp, #100]	; 0x64
 8002b9e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002ba0:	932b      	str	r3, [sp, #172]	; 0xac
 8002ba2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002ba4:	932a      	str	r3, [sp, #168]	; 0xa8
 8002ba6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002ba8:	9311      	str	r3, [sp, #68]	; 0x44
 8002baa:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002bac:	f8d3 a000 	ldr.w	sl, [r3]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	9329      	str	r3, [sp, #164]	; 0xa4
 8002bb4:	6992      	ldr	r2, [r2, #24]
 8002bb6:	6893      	ldr	r3, [r2, #8]
 8002bb8:	9328      	str	r3, [sp, #160]	; 0xa0
 8002bba:	69b2      	ldr	r2, [r6, #24]
 8002bbc:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8002bc0:	b119      	cbz	r1, 8002bca <forward_conv2d_nl_pool+0xe6>
 8002bc2:	698a      	ldr	r2, [r1, #24]
 8002bc4:	6893      	ldr	r3, [r2, #8]
 8002bc6:	931d      	str	r3, [sp, #116]	; 0x74
 8002bc8:	e001      	b.n	8002bce <forward_conv2d_nl_pool+0xea>
 8002bca:	2200      	movs	r2, #0
 8002bcc:	921d      	str	r2, [sp, #116]	; 0x74
 8002bce:	69e1      	ldr	r1, [r4, #28]
 8002bd0:	b118      	cbz	r0, 8002bda <forward_conv2d_nl_pool+0xf6>
 8002bd2:	6981      	ldr	r1, [r0, #24]
 8002bd4:	688a      	ldr	r2, [r1, #8]
 8002bd6:	921c      	str	r2, [sp, #112]	; 0x70
 8002bd8:	e005      	b.n	8002be6 <forward_conv2d_nl_pool+0x102>
 8002bda:	b111      	cbz	r1, 8002be2 <forward_conv2d_nl_pool+0xfe>
 8002bdc:	688a      	ldr	r2, [r1, #8]
 8002bde:	921c      	str	r2, [sp, #112]	; 0x70
 8002be0:	e001      	b.n	8002be6 <forward_conv2d_nl_pool+0x102>
 8002be2:	2300      	movs	r3, #0
 8002be4:	931c      	str	r3, [sp, #112]	; 0x70
 8002be6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8002be8:	9102      	str	r1, [sp, #8]
 8002bea:	b920      	cbnz	r0, 8002bf6 <forward_conv2d_nl_pool+0x112>
 8002bec:	2100      	movs	r1, #0
 8002bee:	2201      	movs	r2, #1
 8002bf0:	9116      	str	r1, [sp, #88]	; 0x58
 8002bf2:	9215      	str	r2, [sp, #84]	; 0x54
 8002bf4:	e008      	b.n	8002c08 <forward_conv2d_nl_pool+0x124>
 8002bf6:	6941      	ldr	r1, [r0, #20]
 8002bf8:	688a      	ldr	r2, [r1, #8]
 8002bfa:	9216      	str	r2, [sp, #88]	; 0x58
 8002bfc:	6980      	ldr	r0, [r0, #24]
 8002bfe:	6841      	ldr	r1, [r0, #4]
 8002c00:	6800      	ldr	r0, [r0, #0]
 8002c02:	f004 f9e7 	bl	8006fd4 <ai_array_get_byte_size>
 8002c06:	9015      	str	r0, [sp, #84]	; 0x54
 8002c08:	aa1e      	add	r2, sp, #120	; 0x78
 8002c0a:	6a20      	ldr	r0, [r4, #32]
 8002c0c:	2800      	cmp	r0, #0
 8002c0e:	bf12      	itee	ne
 8002c10:	9030      	strne	r0, [sp, #192]	; 0xc0
 8002c12:	f8df 1a7c 	ldreq.w	r1, [pc, #2684]	; 8003690 <.text_15>
 8002c16:	9130      	streq	r1, [sp, #192]	; 0xc0
 8002c18:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002c1a:	9819      	ldr	r0, [sp, #100]	; 0x64
 8002c1c:	8813      	ldrh	r3, [r2, #0]
 8002c1e:	9127      	str	r1, [sp, #156]	; 0x9c
 8002c20:	1e5b      	subs	r3, r3, #1
 8002c22:	1e41      	subs	r1, r0, #1
 8002c24:	aa1f      	add	r2, sp, #124	; 0x7c
 8002c26:	fb03 0001 	mla	r0, r3, r1, r0
 8002c2a:	9018      	str	r0, [sp, #96]	; 0x60
 8002c2c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8002c2e:	8813      	ldrh	r3, [r2, #0]
 8002c30:	1e48      	subs	r0, r1, #1
 8002c32:	1e5b      	subs	r3, r3, #1
 8002c34:	fb03 1100 	mla	r1, r3, r0, r1
 8002c38:	9126      	str	r1, [sp, #152]	; 0x98
 8002c3a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002c3c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8002c3e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8002c40:	9112      	str	r1, [sp, #72]	; 0x48
 8002c42:	1a12      	subs	r2, r2, r0
 8002c44:	18ba      	adds	r2, r7, r2
 8002c46:	9920      	ldr	r1, [sp, #128]	; 0x80
 8002c48:	fa12 f085 	uxtah	r0, r2, r5
 8002c4c:	fbb0 f1f1 	udiv	r1, r0, r1
 8002c50:	1c49      	adds	r1, r1, #1
 8002c52:	9114      	str	r1, [sp, #80]	; 0x50
 8002c54:	2000      	movs	r0, #0
 8002c56:	69b6      	ldr	r6, [r6, #24]
 8002c58:	6831      	ldr	r1, [r6, #0]
 8002c5a:	2500      	movs	r5, #0
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	11cb      	asrs	r3, r1, #7
 8002c60:	ea4f 5c61 	mov.w	ip, r1, asr #21
 8002c64:	1449      	asrs	r1, r1, #17
 8002c66:	f001 010f 	and.w	r1, r1, #15
 8002c6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c6e:	f00c 0c03 	and.w	ip, ip, #3
 8002c72:	2904      	cmp	r1, #4
 8002c74:	fa23 f30c 	lsr.w	r3, r3, ip
 8002c78:	bf14      	ite	ne
 8002c7a:	2908      	cmpne	r1, #8
 8002c7c:	68f2      	ldreq	r2, [r6, #12]
 8002c7e:	b1da      	cbz	r2, 8002cb8 <forward_conv2d_nl_pool+0x1d4>
 8002c80:	6961      	ldr	r1, [r4, #20]
 8002c82:	f8b1 c000 	ldrh.w	ip, [r1]
 8002c86:	f1bc 0f04 	cmp.w	ip, #4
 8002c8a:	bfa6      	itte	ge
 8002c8c:	6849      	ldrge	r1, [r1, #4]
 8002c8e:	3128      	addge	r1, #40	; 0x28
 8002c90:	2104      	movlt	r1, #4
 8002c92:	6809      	ldr	r1, [r1, #0]
 8002c94:	2900      	cmp	r1, #0
 8002c96:	bf1f      	itttt	ne
 8002c98:	6848      	ldrne	r0, [r1, #4]
 8002c9a:	2800      	cmpne	r0, #0
 8002c9c:	6981      	ldrne	r1, [r0, #24]
 8002c9e:	688d      	ldrne	r5, [r1, #8]
 8002ca0:	6980      	ldr	r0, [r0, #24]
 8002ca2:	6841      	ldr	r1, [r0, #4]
 8002ca4:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8002ca6:	9101      	str	r1, [sp, #4]
 8002ca8:	9000      	str	r0, [sp, #0]
 8002caa:	4628      	mov	r0, r5
 8002cac:	68b1      	ldr	r1, [r6, #8]
 8002cae:	f7ff fd61 	bl	8002774 <ai_dict_decompress_f32>
 8002cb2:	b10d      	cbz	r5, 8002cb8 <forward_conv2d_nl_pool+0x1d4>
 8002cb4:	4628      	mov	r0, r5
 8002cb6:	e000      	b.n	8002cba <forward_conv2d_nl_pool+0x1d6>
 8002cb8:	4658      	mov	r0, fp
 8002cba:	6963      	ldr	r3, [r4, #20]
 8002cbc:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 8002cc0:	881c      	ldrh	r4, [r3, #0]
 8002cc2:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8002cc6:	2600      	movs	r6, #0
 8002cc8:	2c04      	cmp	r4, #4
 8002cca:	bfa6      	itte	ge
 8002ccc:	685b      	ldrge	r3, [r3, #4]
 8002cce:	3328      	addge	r3, #40	; 0x28
 8002cd0:	2304      	movlt	r3, #4
 8002cd2:	f10d 0e44 	add.w	lr, sp, #68	; 0x44
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	bf14      	ite	ne
 8002cdc:	681d      	ldrne	r5, [r3, #0]
 8002cde:	2500      	moveq	r5, #0
 8002ce0:	427f      	negs	r7, r7
 8002ce2:	69ac      	ldr	r4, [r5, #24]
 8002ce4:	68eb      	ldr	r3, [r5, #12]
 8002ce6:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8002cee:	435c      	muls	r4, r3
 8002cf0:	fb0c f404 	mul.w	r4, ip, r4
 8002cf4:	9437      	str	r4, [sp, #220]	; 0xdc
 8002cf6:	fa0f f28a 	sxth.w	r2, sl
 8002cfa:	f9be 4000 	ldrsh.w	r4, [lr]
 8002cfe:	f8dd c084 	ldr.w	ip, [sp, #132]	; 0x84
 8002d02:	9436      	str	r4, [sp, #216]	; 0xd8
 8002d04:	f10d 0e48 	add.w	lr, sp, #72	; 0x48
 8002d08:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8002d0a:	fb0c f404 	mul.w	r4, ip, r4
 8002d0e:	9435      	str	r4, [sp, #212]	; 0xd4
 8002d10:	f1c8 0800 	rsb	r8, r8, #0
 8002d14:	f9be 4000 	ldrsh.w	r4, [lr]
 8002d18:	9434      	str	r4, [sp, #208]	; 0xd0
 8002d1a:	4691      	mov	r9, r2
 8002d1c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8002d1e:	f8cd 80c8 	str.w	r8, [sp, #200]	; 0xc8
 8002d22:	435c      	muls	r4, r3
 8002d24:	9433      	str	r4, [sp, #204]	; 0xcc
 8002d26:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8002d28:	2c00      	cmp	r4, #0
 8002d2a:	f000 812e 	beq.w	8002f8a <forward_conv2d_nl_pool+0x4a6>
 8002d2e:	f8dd a008 	ldr.w	sl, [sp, #8]
 8002d32:	9038      	str	r0, [sp, #224]	; 0xe0
 8002d34:	9125      	str	r1, [sp, #148]	; 0x94
 8002d36:	4614      	mov	r4, r2
 8002d38:	962f      	str	r6, [sp, #188]	; 0xbc
 8002d3a:	962e      	str	r6, [sp, #184]	; 0xb8
 8002d3c:	9324      	str	r3, [sp, #144]	; 0x90
 8002d3e:	9717      	str	r7, [sp, #92]	; 0x5c
 8002d40:	9814      	ldr	r0, [sp, #80]	; 0x50
 8002d42:	2800      	cmp	r0, #0
 8002d44:	dd6a      	ble.n	8002e1c <forward_conv2d_nl_pool+0x338>
 8002d46:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8002d48:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8002d4a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8002d4c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8002d4e:	9031      	str	r0, [sp, #196]	; 0xc4
 8002d50:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8002d52:	4240      	negs	r0, r0
 8002d54:	bfd8      	it	le
 8002d56:	2000      	movle	r0, #0
 8002d58:	1a89      	subs	r1, r1, r2
 8002d5a:	4299      	cmp	r1, r3
 8002d5c:	bf3d      	ittte	cc
 8002d5e:	9a1b      	ldrcc	r2, [sp, #108]	; 0x6c
 8002d60:	9917      	ldrcc	r1, [sp, #92]	; 0x5c
 8002d62:	1a51      	subcc	r1, r2, r1
 8002d64:	4619      	movcs	r1, r3
 8002d66:	9009      	str	r0, [sp, #36]	; 0x24
 8002d68:	910a      	str	r1, [sp, #40]	; 0x28
 8002d6a:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8002d6c:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 8002d70:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8002d72:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002d74:	9008      	str	r0, [sp, #32]
 8002d76:	9107      	str	r1, [sp, #28]
 8002d78:	b212      	sxth	r2, r2
 8002d7a:	9819      	ldr	r0, [sp, #100]	; 0x64
 8002d7c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8002d7e:	9006      	str	r0, [sp, #24]
 8002d80:	920f      	str	r2, [sp, #60]	; 0x3c
 8002d82:	9105      	str	r1, [sp, #20]
 8002d84:	b21b      	sxth	r3, r3
 8002d86:	9824      	ldr	r0, [sp, #144]	; 0x90
 8002d88:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8002d8a:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8002d8c:	9004      	str	r0, [sp, #16]
 8002d8e:	930e      	str	r3, [sp, #56]	; 0x38
 8002d90:	920d      	str	r2, [sp, #52]	; 0x34
 8002d92:	9103      	str	r1, [sp, #12]
 8002d94:	9810      	ldr	r0, [sp, #64]	; 0x40
 8002d96:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8002d98:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8002d9a:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8002d9c:	9002      	str	r0, [sp, #8]
 8002d9e:	930c      	str	r3, [sp, #48]	; 0x30
 8002da0:	920b      	str	r2, [sp, #44]	; 0x2c
 8002da2:	9101      	str	r1, [sp, #4]
 8002da4:	4659      	mov	r1, fp
 8002da6:	981d      	ldr	r0, [sp, #116]	; 0x74
 8002da8:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8002daa:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8002dac:	9000      	str	r0, [sp, #0]
 8002dae:	2000      	movs	r0, #0
 8002db0:	f7ff f8a6 	bl	8001f00 <ai_conv2d_stripe_f32>
 8002db4:	9824      	ldr	r0, [sp, #144]	; 0x90
 8002db6:	b350      	cbz	r0, 8002e0e <forward_conv2d_nl_pool+0x32a>
 8002db8:	f8cd a008 	str.w	sl, [sp, #8]
 8002dbc:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8002dbe:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8002dc0:	f8dd 80c0 	ldr.w	r8, [sp, #192]	; 0xc0
 8002dc4:	4682      	mov	sl, r0
 8002dc6:	69a9      	ldr	r1, [r5, #24]
 8002dc8:	463b      	mov	r3, r7
 8002dca:	f8c1 b008 	str.w	fp, [r1, #8]
 8002dce:	4632      	mov	r2, r6
 8002dd0:	4608      	mov	r0, r1
 8002dd2:	47c0      	blx	r8
 8002dd4:	9816      	ldr	r0, [sp, #88]	; 0x58
 8002dd6:	9902      	ldr	r1, [sp, #8]
 8002dd8:	4407      	add	r7, r0
 8002dda:	9815      	ldr	r0, [sp, #84]	; 0x54
 8002ddc:	1a79      	subs	r1, r7, r1
 8002dde:	4281      	cmp	r1, r0
 8002de0:	69a8      	ldr	r0, [r5, #24]
 8002de2:	6841      	ldr	r1, [r0, #4]
 8002de4:	68c0      	ldr	r0, [r0, #12]
 8002de6:	bfa8      	it	ge
 8002de8:	9f02      	ldrge	r7, [sp, #8]
 8002dea:	eb0b 0b86 	add.w	fp, fp, r6, lsl #2
 8002dee:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8002df2:	4593      	cmp	fp, r2
 8002df4:	d302      	bcc.n	8002dfc <forward_conv2d_nl_pool+0x318>
 8002df6:	0089      	lsls	r1, r1, #2
 8002df8:	4249      	negs	r1, r1
 8002dfa:	448b      	add	fp, r1
 8002dfc:	f1ba 0a01 	subs.w	sl, sl, #1
 8002e00:	d1e1      	bne.n	8002dc6 <forward_conv2d_nl_pool+0x2e2>
 8002e02:	f8dd a008 	ldr.w	sl, [sp, #8]
 8002e06:	9610      	str	r6, [sp, #64]	; 0x40
 8002e08:	971c      	str	r7, [sp, #112]	; 0x70
 8002e0a:	f8cd 80c0 	str.w	r8, [sp, #192]	; 0xc0
 8002e0e:	69a8      	ldr	r0, [r5, #24]
 8002e10:	68c1      	ldr	r1, [r0, #12]
 8002e12:	6081      	str	r1, [r0, #8]
 8002e14:	f109 0001 	add.w	r0, r9, #1
 8002e18:	fa0f f980 	sxth.w	r9, r0
 8002e1c:	9814      	ldr	r0, [sp, #80]	; 0x50
 8002e1e:	1e40      	subs	r0, r0, #1
 8002e20:	9014      	str	r0, [sp, #80]	; 0x50
 8002e22:	d56b      	bpl.n	8002efc <forward_conv2d_nl_pool+0x418>
 8002e24:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8002e26:	fb00 f009 	mul.w	r0, r0, r9
 8002e2a:	0080      	lsls	r0, r0, #2
 8002e2c:	4240      	negs	r0, r0
 8002e2e:	eb0b 0200 	add.w	r2, fp, r0
 8002e32:	69a8      	ldr	r0, [r5, #24]
 8002e34:	68c3      	ldr	r3, [r0, #12]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	bf3c      	itt	cc
 8002e3a:	6847      	ldrcc	r7, [r0, #4]
 8002e3c:	eb02 0287 	addcc.w	r2, r2, r7, lsl #2
 8002e40:	4293      	cmp	r3, r2
 8002e42:	4659      	mov	r1, fp
 8002e44:	d236      	bcs.n	8002eb4 <forward_conv2d_nl_pool+0x3d0>
 8002e46:	9e34      	ldr	r6, [sp, #208]	; 0xd0
 8002e48:	45b1      	cmp	r9, r6
 8002e4a:	d033      	beq.n	8002eb4 <forward_conv2d_nl_pool+0x3d0>
 8002e4c:	6846      	ldr	r6, [r0, #4]
 8002e4e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8002e52:	429a      	cmp	r2, r3
 8002e54:	f080 802e 	bcs.w	8002eb4 <forward_conv2d_nl_pool+0x3d0>
 8002e58:	ed92 0a00 	vldr	s0, [r2]
 8002e5c:	ed8b 0a00 	vstr	s0, [fp]
 8002e60:	68c3      	ldr	r3, [r0, #12]
 8002e62:	6846      	ldr	r6, [r0, #4]
 8002e64:	1d12      	adds	r2, r2, #4
 8002e66:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 8002e6a:	42ba      	cmp	r2, r7
 8002e6c:	d222      	bcs.n	8002eb4 <forward_conv2d_nl_pool+0x3d0>
 8002e6e:	edd2 0a00 	vldr	s1, [r2]
 8002e72:	edcb 0a01 	vstr	s1, [fp, #4]
 8002e76:	68c3      	ldr	r3, [r0, #12]
 8002e78:	6846      	ldr	r6, [r0, #4]
 8002e7a:	1d12      	adds	r2, r2, #4
 8002e7c:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 8002e80:	42ba      	cmp	r2, r7
 8002e82:	d217      	bcs.n	8002eb4 <forward_conv2d_nl_pool+0x3d0>
 8002e84:	ed92 0a00 	vldr	s0, [r2]
 8002e88:	ed8b 0a02 	vstr	s0, [fp, #8]
 8002e8c:	68c3      	ldr	r3, [r0, #12]
 8002e8e:	6846      	ldr	r6, [r0, #4]
 8002e90:	1d12      	adds	r2, r2, #4
 8002e92:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 8002e96:	42ba      	cmp	r2, r7
 8002e98:	d20c      	bcs.n	8002eb4 <forward_conv2d_nl_pool+0x3d0>
 8002e9a:	edd2 0a00 	vldr	s1, [r2]
 8002e9e:	edcb 0a03 	vstr	s1, [fp, #12]
 8002ea2:	68c3      	ldr	r3, [r0, #12]
 8002ea4:	6846      	ldr	r6, [r0, #4]
 8002ea6:	1d12      	adds	r2, r2, #4
 8002ea8:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 8002eac:	42ba      	cmp	r2, r7
 8002eae:	f10b 0b10 	add.w	fp, fp, #16
 8002eb2:	d3d1      	bcc.n	8002e58 <forward_conv2d_nl_pool+0x374>
 8002eb4:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8002eb6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002eb8:	189a      	adds	r2, r3, r2
 8002eba:	eba2 0209 	sub.w	r2, r2, r9
 8002ebe:	922f      	str	r2, [sp, #188]	; 0xbc
 8002ec0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8002ec2:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8002ec4:	444a      	add	r2, r9
 8002ec6:	fa0f f982 	sxth.w	r9, r2
 8002eca:	eb01 0b83 	add.w	fp, r1, r3, lsl #2
 8002ece:	68c1      	ldr	r1, [r0, #12]
 8002ed0:	6842      	ldr	r2, [r0, #4]
 8002ed2:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8002ed6:	459b      	cmp	fp, r3
 8002ed8:	460b      	mov	r3, r1
 8002eda:	d30f      	bcc.n	8002efc <forward_conv2d_nl_pool+0x418>
 8002edc:	6841      	ldr	r1, [r0, #4]
 8002ede:	008a      	lsls	r2, r1, #2
 8002ee0:	4252      	negs	r2, r2
 8002ee2:	4493      	add	fp, r2
 8002ee4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8002ee8:	458b      	cmp	fp, r1
 8002eea:	bf24      	itt	cs
 8002eec:	4493      	addcs	fp, r2
 8002eee:	458b      	cmpcs	fp, r1
 8002ef0:	bf21      	itttt	cs
 8002ef2:	4493      	addcs	fp, r2
 8002ef4:	458b      	cmpcs	fp, r1
 8002ef6:	4493      	addcs	fp, r2
 8002ef8:	458b      	cmpcs	fp, r1
 8002efa:	d2ef      	bcs.n	8002edc <forward_conv2d_nl_pool+0x3f8>
 8002efc:	9812      	ldr	r0, [sp, #72]	; 0x48
 8002efe:	4581      	cmp	r9, r0
 8002f00:	d339      	bcc.n	8002f76 <forward_conv2d_nl_pool+0x492>
 8002f02:	9911      	ldr	r1, [sp, #68]	; 0x44
 8002f04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002f06:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002f08:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8002f0a:	eba9 0001 	sub.w	r0, r9, r1
 8002f0e:	fa0f f980 	sxth.w	r9, r0
 8002f12:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8002f14:	1c40      	adds	r0, r0, #1
 8002f16:	902e      	str	r0, [sp, #184]	; 0xb8
 8002f18:	2101      	movs	r1, #1
 8002f1a:	9825      	ldr	r0, [sp, #148]	; 0x94
 8002f1c:	9008      	str	r0, [sp, #32]
 8002f1e:	9107      	str	r1, [sp, #28]
 8002f20:	b292      	uxth	r2, r2
 8002f22:	9811      	ldr	r0, [sp, #68]	; 0x44
 8002f24:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8002f26:	9206      	str	r2, [sp, #24]
 8002f28:	b280      	uxth	r0, r0
 8002f2a:	9005      	str	r0, [sp, #20]
 8002f2c:	b289      	uxth	r1, r1
 8002f2e:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8002f30:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002f32:	9104      	str	r1, [sp, #16]
 8002f34:	b280      	uxth	r0, r0
 8002f36:	b2a1      	uxth	r1, r4
 8002f38:	9002      	str	r0, [sp, #8]
 8002f3a:	9103      	str	r1, [sp, #12]
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	982b      	ldr	r0, [sp, #172]	; 0xac
 8002f40:	9912      	ldr	r1, [sp, #72]	; 0x48
 8002f42:	b280      	uxth	r0, r0
 8002f44:	b289      	uxth	r1, r1
 8002f46:	9000      	str	r0, [sp, #0]
 8002f48:	9101      	str	r1, [sp, #4]
 8002f4a:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8002f4c:	9924      	ldr	r1, [sp, #144]	; 0x90
 8002f4e:	1a12      	subs	r2, r2, r0
 8002f50:	69a8      	ldr	r0, [r5, #24]
 8002f52:	b292      	uxth	r2, r2
 8002f54:	b289      	uxth	r1, r1
 8002f56:	47b0      	blx	r6
 8002f58:	9825      	ldr	r0, [sp, #148]	; 0x94
 8002f5a:	6881      	ldr	r1, [r0, #8]
 8002f5c:	9835      	ldr	r0, [sp, #212]	; 0xd4
 8002f5e:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8002f62:	9925      	ldr	r1, [sp, #148]	; 0x94
 8002f64:	608a      	str	r2, [r1, #8]
 8002f66:	9836      	ldr	r0, [sp, #216]	; 0xd8
 8002f68:	1a20      	subs	r0, r4, r0
 8002f6a:	2800      	cmp	r0, #0
 8002f6c:	bfc3      	ittte	gt
 8002f6e:	9811      	ldrgt	r0, [sp, #68]	; 0x44
 8002f70:	1a24      	subgt	r4, r4, r0
 8002f72:	b224      	sxthgt	r4, r4
 8002f74:	2400      	movle	r4, #0
 8002f76:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8002f78:	9920      	ldr	r1, [sp, #128]	; 0x80
 8002f7a:	1808      	adds	r0, r1, r0
 8002f7c:	9017      	str	r0, [sp, #92]	; 0x5c
 8002f7e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8002f80:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8002f82:	4288      	cmp	r0, r1
 8002f84:	f4ff aedc 	bcc.w	8002d40 <forward_conv2d_nl_pool+0x25c>
 8002f88:	9925      	ldr	r1, [sp, #148]	; 0x94
 8002f8a:	69a8      	ldr	r0, [r5, #24]
 8002f8c:	68c2      	ldr	r2, [r0, #12]
 8002f8e:	6082      	str	r2, [r0, #8]
 8002f90:	68c8      	ldr	r0, [r1, #12]
 8002f92:	6088      	str	r0, [r1, #8]
 8002f94:	b039      	add	sp, #228	; 0xe4
 8002f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08002f9c <forward_dense>:
 8002f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fa0:	b081      	sub	sp, #4
 8002fa2:	ed2d 8b02 	vpush	{d8}
 8002fa6:	b088      	sub	sp, #32
 8002fa8:	6944      	ldr	r4, [r0, #20]
 8002faa:	8820      	ldrh	r0, [r4, #0]
 8002fac:	2800      	cmp	r0, #0
 8002fae:	bf1a      	itte	ne
 8002fb0:	6861      	ldrne	r1, [r4, #4]
 8002fb2:	1d09      	addne	r1, r1, #4
 8002fb4:	2104      	moveq	r1, #4
 8002fb6:	6809      	ldr	r1, [r1, #0]
 8002fb8:	2900      	cmp	r1, #0
 8002fba:	bf14      	ite	ne
 8002fbc:	680a      	ldrne	r2, [r1, #0]
 8002fbe:	2200      	moveq	r2, #0
 8002fc0:	2802      	cmp	r0, #2
 8002fc2:	bfa6      	itte	ge
 8002fc4:	6861      	ldrge	r1, [r4, #4]
 8002fc6:	3110      	addge	r1, #16
 8002fc8:	2104      	movlt	r1, #4
 8002fca:	6809      	ldr	r1, [r1, #0]
 8002fcc:	2900      	cmp	r1, #0
 8002fce:	bf14      	ite	ne
 8002fd0:	680f      	ldrne	r7, [r1, #0]
 8002fd2:	2700      	moveq	r7, #0
 8002fd4:	2802      	cmp	r0, #2
 8002fd6:	bfc6      	itte	gt
 8002fd8:	6861      	ldrgt	r1, [r4, #4]
 8002fda:	311c      	addgt	r1, #28
 8002fdc:	2104      	movle	r1, #4
 8002fde:	6809      	ldr	r1, [r1, #0]
 8002fe0:	2900      	cmp	r1, #0
 8002fe2:	bf14      	ite	ne
 8002fe4:	680b      	ldrne	r3, [r1, #0]
 8002fe6:	2300      	moveq	r3, #0
 8002fe8:	2802      	cmp	r0, #2
 8002fea:	dd0b      	ble.n	8003004 <forward_dense+0x68>
 8002fec:	6861      	ldr	r1, [r4, #4]
 8002fee:	f111 0018 	adds.w	r0, r1, #24
 8002ff2:	d007      	beq.n	8003004 <forward_dense+0x68>
 8002ff4:	8b08      	ldrh	r0, [r1, #24]
 8002ff6:	2802      	cmp	r0, #2
 8002ff8:	db04      	blt.n	8003004 <forward_dense+0x68>
 8002ffa:	69c8      	ldr	r0, [r1, #28]
 8002ffc:	b110      	cbz	r0, 8003004 <forward_dense+0x68>
 8002ffe:	f8d0 a004 	ldr.w	sl, [r0, #4]
 8003002:	e001      	b.n	8003008 <forward_dense+0x6c>
 8003004:	f04f 0a00 	mov.w	sl, #0
 8003008:	68d0      	ldr	r0, [r2, #12]
 800300a:	6844      	ldr	r4, [r0, #4]
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	6845      	ldr	r5, [r0, #4]
 8003010:	6881      	ldr	r1, [r0, #8]
 8003012:	68c0      	ldr	r0, [r0, #12]
 8003014:	699e      	ldr	r6, [r3, #24]
 8003016:	69bf      	ldr	r7, [r7, #24]
 8003018:	f8d6 e000 	ldr.w	lr, [r6]
 800301c:	6992      	ldr	r2, [r2, #24]
 800301e:	68bf      	ldr	r7, [r7, #8]
 8003020:	4341      	muls	r1, r0
 8003022:	2000      	movs	r0, #0
 8003024:	ea4f 19ee 	mov.w	r9, lr, asr #7
 8003028:	ea4f 586e 	mov.w	r8, lr, asr #21
 800302c:	ea4f 4e6e 	mov.w	lr, lr, asr #17
 8003030:	f00e 0e0f 	and.w	lr, lr, #15
 8003034:	f1be 0f04 	cmp.w	lr, #4
 8003038:	bf14      	ite	ne
 800303a:	f1be 0f08 	cmpne.w	lr, #8
 800303e:	68f0      	ldreq	r0, [r6, #12]
 8003040:	f009 097f 	and.w	r9, r9, #127	; 0x7f
 8003044:	f008 0803 	and.w	r8, r8, #3
 8003048:	695e      	ldr	r6, [r3, #20]
 800304a:	6876      	ldr	r6, [r6, #4]
 800304c:	fa29 f908 	lsr.w	r9, r9, r8
 8003050:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8003054:	2900      	cmp	r1, #0
 8003056:	eb07 0285 	add.w	r2, r7, r5, lsl #2
 800305a:	f000 80ea 	beq.w	8003232 <forward_dense+0x296>
 800305e:	9307      	str	r3, [sp, #28]
 8003060:	f8cd a014 	str.w	sl, [sp, #20]
 8003064:	9506      	str	r5, [sp, #24]
 8003066:	9201      	str	r2, [sp, #4]
 8003068:	9104      	str	r1, [sp, #16]
 800306a:	9907      	ldr	r1, [sp, #28]
 800306c:	698a      	ldr	r2, [r1, #24]
 800306e:	9905      	ldr	r1, [sp, #20]
 8003070:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8003074:	9b01      	ldr	r3, [sp, #4]
 8003076:	2900      	cmp	r1, #0
 8003078:	bf1a      	itte	ne
 800307a:	698a      	ldrne	r2, [r1, #24]
 800307c:	6892      	ldrne	r2, [r2, #8]
 800307e:	2200      	moveq	r2, #0
 8003080:	2800      	cmp	r0, #0
 8003082:	f040 80ab 	bne.w	80031dc <forward_dense+0x240>
 8003086:	429f      	cmp	r7, r3
 8003088:	f080 80c7 	bcs.w	800321a <forward_dense+0x27e>
 800308c:	9003      	str	r0, [sp, #12]
 800308e:	2a00      	cmp	r2, #0
 8003090:	bf0e      	itee	eq
 8003092:	ed9f 0a6b 	vldreq	s0, [pc, #428]	; 8003240 <.text_12>
 8003096:	ed92 0a00 	vldrne	s0, [r2]
 800309a:	1d12      	addne	r2, r2, #4
 800309c:	2c04      	cmp	r4, #4
 800309e:	4620      	mov	r0, r4
 80030a0:	46c6      	mov	lr, r8
 80030a2:	46dc      	mov	ip, fp
 80030a4:	eddf 0a66 	vldr	s1, [pc, #408]	; 8003240 <.text_12>
 80030a8:	d35d      	bcc.n	8003166 <forward_dense+0x1ca>
 80030aa:	08a1      	lsrs	r1, r4, #2
 80030ac:	07cd      	lsls	r5, r1, #31
 80030ae:	d51c      	bpl.n	80030ea <forward_dense+0x14e>
 80030b0:	ed9c 4a00 	vldr	s8, [ip]
 80030b4:	edde 4a00 	vldr	s9, [lr]
 80030b8:	ed9c 3a01 	vldr	s6, [ip, #4]
 80030bc:	edde 3a01 	vldr	s7, [lr, #4]
 80030c0:	ed9c 2a02 	vldr	s4, [ip, #8]
 80030c4:	edde 2a02 	vldr	s5, [lr, #8]
 80030c8:	ed9c 1a03 	vldr	s2, [ip, #12]
 80030cc:	edde 1a03 	vldr	s3, [lr, #12]
 80030d0:	ee44 0a24 	vmla.f32	s1, s8, s9
 80030d4:	ee43 0a23 	vmla.f32	s1, s6, s7
 80030d8:	ee42 0a22 	vmla.f32	s1, s4, s5
 80030dc:	ee41 0a21 	vmla.f32	s1, s2, s3
 80030e0:	f10e 0e10 	add.w	lr, lr, #16
 80030e4:	f10c 0c10 	add.w	ip, ip, #16
 80030e8:	1f00      	subs	r0, r0, #4
 80030ea:	0849      	lsrs	r1, r1, #1
 80030ec:	f000 803b 	beq.w	8003166 <forward_dense+0x1ca>
 80030f0:	edde 4a00 	vldr	s9, [lr]
 80030f4:	edde 3a01 	vldr	s7, [lr, #4]
 80030f8:	edde 2a02 	vldr	s5, [lr, #8]
 80030fc:	edde 1a03 	vldr	s3, [lr, #12]
 8003100:	ed9c 1a03 	vldr	s2, [ip, #12]
 8003104:	ed9c 2a02 	vldr	s4, [ip, #8]
 8003108:	ed9c 3a01 	vldr	s6, [ip, #4]
 800310c:	ed9c 4a00 	vldr	s8, [ip]
 8003110:	ee44 0a24 	vmla.f32	s1, s8, s9
 8003114:	ee43 0a23 	vmla.f32	s1, s6, s7
 8003118:	ee42 0a22 	vmla.f32	s1, s4, s5
 800311c:	ee41 0a21 	vmla.f32	s1, s2, s3
 8003120:	f10e 0510 	add.w	r5, lr, #16
 8003124:	f10c 0c10 	add.w	ip, ip, #16
 8003128:	edd5 8a00 	vldr	s17, [r5]
 800312c:	ed9c 8a00 	vldr	s16, [ip]
 8003130:	ed9c 7a01 	vldr	s14, [ip, #4]
 8003134:	edd5 7a01 	vldr	s15, [r5, #4]
 8003138:	ed9c 6a02 	vldr	s12, [ip, #8]
 800313c:	edd5 6a02 	vldr	s13, [r5, #8]
 8003140:	ed9c 5a03 	vldr	s10, [ip, #12]
 8003144:	edd5 5a03 	vldr	s11, [r5, #12]
 8003148:	ee48 0a28 	vmla.f32	s1, s16, s17
 800314c:	ee47 0a27 	vmla.f32	s1, s14, s15
 8003150:	3808      	subs	r0, #8
 8003152:	ee46 0a26 	vmla.f32	s1, s12, s13
 8003156:	1e49      	subs	r1, r1, #1
 8003158:	ee45 0a25 	vmla.f32	s1, s10, s11
 800315c:	f105 0e10 	add.w	lr, r5, #16
 8003160:	f10c 0c10 	add.w	ip, ip, #16
 8003164:	d1c4      	bne.n	80030f0 <forward_dense+0x154>
 8003166:	b378      	cbz	r0, 80031c8 <forward_dense+0x22c>
 8003168:	f010 0103 	ands.w	r1, r0, #3
 800316c:	f000 800c 	beq.w	8003188 <forward_dense+0x1ec>
 8003170:	ed9c 1a00 	vldr	s2, [ip]
 8003174:	edde 1a00 	vldr	s3, [lr]
 8003178:	1e49      	subs	r1, r1, #1
 800317a:	ee41 0a21 	vmla.f32	s1, s2, s3
 800317e:	f10e 0e04 	add.w	lr, lr, #4
 8003182:	f10c 0c04 	add.w	ip, ip, #4
 8003186:	d1f3      	bne.n	8003170 <forward_dense+0x1d4>
 8003188:	0880      	lsrs	r0, r0, #2
 800318a:	d01d      	beq.n	80031c8 <forward_dense+0x22c>
 800318c:	ed9c 2a00 	vldr	s4, [ip]
 8003190:	ed9e 1a00 	vldr	s2, [lr]
 8003194:	eddc 1a01 	vldr	s3, [ip, #4]
 8003198:	edde 2a01 	vldr	s5, [lr, #4]
 800319c:	ee42 0a01 	vmla.f32	s1, s4, s2
 80031a0:	ee41 0aa2 	vmla.f32	s1, s3, s5
 80031a4:	ed9c 2a02 	vldr	s4, [ip, #8]
 80031a8:	ed9e 1a02 	vldr	s2, [lr, #8]
 80031ac:	eddc 1a03 	vldr	s3, [ip, #12]
 80031b0:	edde 2a03 	vldr	s5, [lr, #12]
 80031b4:	ee42 0a01 	vmla.f32	s1, s4, s2
 80031b8:	1e40      	subs	r0, r0, #1
 80031ba:	ee41 0aa2 	vmla.f32	s1, s3, s5
 80031be:	f10e 0e10 	add.w	lr, lr, #16
 80031c2:	f10c 0c10 	add.w	ip, ip, #16
 80031c6:	d1e1      	bne.n	800318c <forward_dense+0x1f0>
 80031c8:	ee30 0a20 	vadd.f32	s0, s0, s1
 80031cc:	ed87 0a00 	vstr	s0, [r7]
 80031d0:	1d3f      	adds	r7, r7, #4
 80031d2:	429f      	cmp	r7, r3
 80031d4:	44b3      	add	fp, r6
 80031d6:	f4ff af5a 	bcc.w	800308e <forward_dense+0xf2>
 80031da:	e01d      	b.n	8003218 <forward_dense+0x27c>
 80031dc:	429f      	cmp	r7, r3
 80031de:	d21c      	bcs.n	800321a <forward_dense+0x27e>
 80031e0:	469a      	mov	sl, r3
 80031e2:	9003      	str	r0, [sp, #12]
 80031e4:	4615      	mov	r5, r2
 80031e6:	2d00      	cmp	r5, #0
 80031e8:	bf14      	ite	ne
 80031ea:	f855 0b04 	ldrne.w	r0, [r5], #4
 80031ee:	2000      	moveq	r0, #0
 80031f0:	9002      	str	r0, [sp, #8]
 80031f2:	f1b9 0f04 	cmp.w	r9, #4
 80031f6:	9a03      	ldr	r2, [sp, #12]
 80031f8:	9400      	str	r4, [sp, #0]
 80031fa:	4643      	mov	r3, r8
 80031fc:	4659      	mov	r1, fp
 80031fe:	a802      	add	r0, sp, #8
 8003200:	d102      	bne.n	8003208 <forward_dense+0x26c>
 8003202:	f7ff fa03 	bl	800260c <ai_dict4_dot_array_f32>
 8003206:	e001      	b.n	800320c <forward_dense+0x270>
 8003208:	f7ff f950 	bl	80024ac <ai_dict8_dot_array_f32>
 800320c:	9802      	ldr	r0, [sp, #8]
 800320e:	f847 0b04 	str.w	r0, [r7], #4
 8003212:	4557      	cmp	r7, sl
 8003214:	44b3      	add	fp, r6
 8003216:	d3e6      	bcc.n	80031e6 <forward_dense+0x24a>
 8003218:	9803      	ldr	r0, [sp, #12]
 800321a:	9901      	ldr	r1, [sp, #4]
 800321c:	9a06      	ldr	r2, [sp, #24]
 800321e:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003222:	9904      	ldr	r1, [sp, #16]
 8003224:	9301      	str	r3, [sp, #4]
 8003226:	1e49      	subs	r1, r1, #1
 8003228:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 800322c:	9104      	str	r1, [sp, #16]
 800322e:	f47f af1c 	bne.w	800306a <forward_dense+0xce>
 8003232:	b008      	add	sp, #32
 8003234:	ecbd 8b02 	vpop	{d8}
 8003238:	b001      	add	sp, #4
 800323a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08003240 <.text_12>:
 8003240:	00000000 	.word	0x00000000

08003244 <forward_gemm>:
 8003244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003248:	4604      	mov	r4, r0
 800324a:	b091      	sub	sp, #68	; 0x44
 800324c:	6961      	ldr	r1, [r4, #20]
 800324e:	8808      	ldrh	r0, [r1, #0]
 8003250:	2800      	cmp	r0, #0
 8003252:	bf1a      	itte	ne
 8003254:	6848      	ldrne	r0, [r1, #4]
 8003256:	1d02      	addne	r2, r0, #4
 8003258:	2204      	moveq	r2, #4
 800325a:	460b      	mov	r3, r1
 800325c:	6810      	ldr	r0, [r2, #0]
 800325e:	8819      	ldrh	r1, [r3, #0]
 8003260:	2800      	cmp	r0, #0
 8003262:	bf14      	ite	ne
 8003264:	6805      	ldrne	r5, [r0, #0]
 8003266:	2500      	moveq	r5, #0
 8003268:	2900      	cmp	r1, #0
 800326a:	bf1d      	ittte	ne
 800326c:	6858      	ldrne	r0, [r3, #4]
 800326e:	2800      	cmpne	r0, #0
 8003270:	f8b0 c000 	ldrhne.w	ip, [r0]
 8003274:	f04f 0c00 	moveq.w	ip, #0
 8003278:	2902      	cmp	r1, #2
 800327a:	bfa6      	itte	ge
 800327c:	6858      	ldrge	r0, [r3, #4]
 800327e:	3010      	addge	r0, #16
 8003280:	2004      	movlt	r0, #4
 8003282:	6800      	ldr	r0, [r0, #0]
 8003284:	2800      	cmp	r0, #0
 8003286:	bf14      	ite	ne
 8003288:	6801      	ldrne	r1, [r0, #0]
 800328a:	2100      	moveq	r1, #0
 800328c:	2600      	movs	r6, #0
 800328e:	f1bc 0f03 	cmp.w	ip, #3
 8003292:	46b2      	mov	sl, r6
 8003294:	d107      	bne.n	80032a6 <forward_gemm+0x62>
 8003296:	6810      	ldr	r0, [r2, #0]
 8003298:	2800      	cmp	r0, #0
 800329a:	d026      	beq.n	80032ea <forward_gemm+0xa6>
 800329c:	6846      	ldr	r6, [r0, #4]
 800329e:	d024      	beq.n	80032ea <forward_gemm+0xa6>
 80032a0:	f8d0 a008 	ldr.w	sl, [r0, #8]
 80032a4:	e021      	b.n	80032ea <forward_gemm+0xa6>
 80032a6:	f1bc 0f02 	cmp.w	ip, #2
 80032aa:	d10d      	bne.n	80032c8 <forward_gemm+0x84>
 80032ac:	6810      	ldr	r0, [r2, #0]
 80032ae:	b100      	cbz	r0, 80032b2 <forward_gemm+0x6e>
 80032b0:	6846      	ldr	r6, [r0, #4]
 80032b2:	881a      	ldrh	r2, [r3, #0]
 80032b4:	2a02      	cmp	r2, #2
 80032b6:	bfc6      	itte	gt
 80032b8:	6858      	ldrgt	r0, [r3, #4]
 80032ba:	301c      	addgt	r0, #28
 80032bc:	2004      	movle	r0, #4
 80032be:	6800      	ldr	r0, [r0, #0]
 80032c0:	b198      	cbz	r0, 80032ea <forward_gemm+0xa6>
 80032c2:	f8d0 a000 	ldr.w	sl, [r0]
 80032c6:	e010      	b.n	80032ea <forward_gemm+0xa6>
 80032c8:	f1bc 0f01 	cmp.w	ip, #1
 80032cc:	d10d      	bne.n	80032ea <forward_gemm+0xa6>
 80032ce:	881a      	ldrh	r2, [r3, #0]
 80032d0:	2a02      	cmp	r2, #2
 80032d2:	bfc6      	itte	gt
 80032d4:	6858      	ldrgt	r0, [r3, #4]
 80032d6:	f100 021c 	addgt.w	r2, r0, #28
 80032da:	2204      	movle	r2, #4
 80032dc:	6810      	ldr	r0, [r2, #0]
 80032de:	2800      	cmp	r0, #0
 80032e0:	d003      	beq.n	80032ea <forward_gemm+0xa6>
 80032e2:	6806      	ldr	r6, [r0, #0]
 80032e4:	bf18      	it	ne
 80032e6:	f8d0 a004 	ldrne.w	sl, [r0, #4]
 80032ea:	68c8      	ldr	r0, [r1, #12]
 80032ec:	6989      	ldr	r1, [r1, #24]
 80032ee:	688b      	ldr	r3, [r1, #8]
 80032f0:	6842      	ldr	r2, [r0, #4]
 80032f2:	68c1      	ldr	r1, [r0, #12]
 80032f4:	b292      	uxth	r2, r2
 80032f6:	b289      	uxth	r1, r1
 80032f8:	a806      	add	r0, sp, #24
 80032fa:	f004 f831 	bl	8007360 <arm_mat_init_f32>
 80032fe:	69a9      	ldr	r1, [r5, #24]
 8003300:	68e8      	ldr	r0, [r5, #12]
 8003302:	688b      	ldr	r3, [r1, #8]
 8003304:	6842      	ldr	r2, [r0, #4]
 8003306:	68c1      	ldr	r1, [r0, #12]
 8003308:	b292      	uxth	r2, r2
 800330a:	b289      	uxth	r1, r1
 800330c:	a804      	add	r0, sp, #16
 800330e:	f004 f827 	bl	8007360 <arm_mat_init_f32>
 8003312:	69b1      	ldr	r1, [r6, #24]
 8003314:	68f0      	ldr	r0, [r6, #12]
 8003316:	688b      	ldr	r3, [r1, #8]
 8003318:	6842      	ldr	r2, [r0, #4]
 800331a:	68c1      	ldr	r1, [r0, #12]
 800331c:	b292      	uxth	r2, r2
 800331e:	b289      	uxth	r1, r1
 8003320:	a802      	add	r0, sp, #8
 8003322:	f004 f81d 	bl	8007360 <arm_mat_init_f32>
 8003326:	f8da 1018 	ldr.w	r1, [sl, #24]
 800332a:	f8da 000c 	ldr.w	r0, [sl, #12]
 800332e:	688b      	ldr	r3, [r1, #8]
 8003330:	6842      	ldr	r2, [r0, #4]
 8003332:	68c1      	ldr	r1, [r0, #12]
 8003334:	b292      	uxth	r2, r2
 8003336:	b289      	uxth	r1, r1
 8003338:	4668      	mov	r0, sp
 800333a:	f004 f811 	bl	8007360 <arm_mat_init_f32>
 800333e:	f994 5021 	ldrsb.w	r5, [r4, #33]	; 0x21
 8003342:	f994 0020 	ldrsb.w	r0, [r4, #32]
 8003346:	9905      	ldr	r1, [sp, #20]
 8003348:	9a03      	ldr	r2, [sp, #12]
 800334a:	ed94 0a07 	vldr	s0, [r4, #28]
 800334e:	edd4 0a06 	vldr	s1, [r4, #24]
 8003352:	910b      	str	r1, [sp, #44]	; 0x2c
 8003354:	920e      	str	r2, [sp, #56]	; 0x38
 8003356:	920d      	str	r2, [sp, #52]	; 0x34
 8003358:	2300      	movs	r3, #0
 800335a:	f8bd e010 	ldrh.w	lr, [sp, #16]
 800335e:	f8bd 8012 	ldrh.w	r8, [sp, #18]
 8003362:	9901      	ldr	r1, [sp, #4]
 8003364:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8003368:	f8bd c000 	ldrh.w	ip, [sp]
 800336c:	9c07      	ldr	r4, [sp, #28]
 800336e:	f8bd a008 	ldrh.w	sl, [sp, #8]
 8003372:	f8bd 6018 	ldrh.w	r6, [sp, #24]
 8003376:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 800337a:	9108      	str	r1, [sp, #32]
 800337c:	0002      	movs	r2, r0
 800337e:	bf0c      	ite	eq
 8003380:	4672      	moveq	r2, lr
 8003382:	4642      	movne	r2, r8
 8003384:	2f01      	cmp	r7, #1
 8003386:	bf0c      	ite	eq
 8003388:	4699      	moveq	r9, r3
 800338a:	f04f 0904 	movne.w	r9, #4
 800338e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8003392:	f1bc 0f01 	cmp.w	ip, #1
 8003396:	d104      	bne.n	80033a2 <forward_gemm+0x15e>
 8003398:	2f01      	cmp	r7, #1
 800339a:	d004      	beq.n	80033a6 <forward_gemm+0x162>
 800339c:	f1cb 0700 	rsb	r7, fp, #0
 80033a0:	e002      	b.n	80033a8 <forward_gemm+0x164>
 80033a2:	2f01      	cmp	r7, #1
 80033a4:	d000      	beq.n	80033a8 <forward_gemm+0x164>
 80033a6:	2700      	movs	r7, #0
 80033a8:	2800      	cmp	r0, #0
 80033aa:	bf0c      	ite	eq
 80033ac:	46f4      	moveq	ip, lr
 80033ae:	46c4      	movne	ip, r8
 80033b0:	b23f      	sxth	r7, r7
 80033b2:	45b4      	cmp	ip, r6
 80033b4:	970c      	str	r7, [sp, #48]	; 0x30
 80033b6:	f040 808b 	bne.w	80034d0 <forward_gemm+0x28c>
 80033ba:	2d00      	cmp	r5, #0
 80033bc:	bf0c      	ite	eq
 80033be:	9109      	streq	r1, [sp, #36]	; 0x24
 80033c0:	f8cd a024 	strne.w	sl, [sp, #36]	; 0x24
 80033c4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80033c6:	455f      	cmp	r7, fp
 80033c8:	f040 8082 	bne.w	80034d0 <forward_gemm+0x28c>
 80033cc:	2800      	cmp	r0, #0
 80033ce:	bf0c      	ite	eq
 80033d0:	46c4      	moveq	ip, r8
 80033d2:	46f4      	movne	ip, lr
 80033d4:	2d00      	cmp	r5, #0
 80033d6:	bf0c      	ite	eq
 80033d8:	4657      	moveq	r7, sl
 80033da:	460f      	movne	r7, r1
 80033dc:	45bc      	cmp	ip, r7
 80033de:	d177      	bne.n	80034d0 <forward_gemm+0x28c>
 80033e0:	9e08      	ldr	r6, [sp, #32]
 80033e2:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 80033e6:	9410      	str	r4, [sp, #64]	; 0x40
 80033e8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80033ec:	f8ad 2020 	strh.w	r2, [sp, #32]
 80033f0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80033f2:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80033f6:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 80033fa:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 80033fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003400:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003402:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8003406:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 800340a:	ea4f 0488 	mov.w	r4, r8, lsl #2
 800340e:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 8003412:	2800      	cmp	r0, #0
 8003414:	bf0c      	ite	eq
 8003416:	f8dd 803c 	ldreq.w	r8, [sp, #60]	; 0x3c
 800341a:	f8bd 8028 	ldrhne.w	r8, [sp, #40]	; 0x28
 800341e:	fa1f fb88 	uxth.w	fp, r8
 8003422:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 8003426:	f1bb 0f00 	cmp.w	fp, #0
 800342a:	ed9f 1a9a 	vldr	s2, [pc, #616]	; 8003694 <.text_16>
 800342e:	d019      	beq.n	8003464 <forward_gemm+0x220>
 8003430:	2800      	cmp	r0, #0
 8003432:	bf0c      	ite	eq
 8003434:	f04f 0b04 	moveq.w	fp, #4
 8003438:	46a3      	movne	fp, r4
 800343a:	2d00      	cmp	r5, #0
 800343c:	f1a8 0801 	sub.w	r8, r8, #1
 8003440:	edde 1a00 	vldr	s3, [lr]
 8003444:	ed93 2a00 	vldr	s4, [r3]
 8003448:	44de      	add	lr, fp
 800344a:	bf0c      	ite	eq
 800344c:	ea4f 0b81 	moveq.w	fp, r1, lsl #2
 8003450:	f04f 0b04 	movne.w	fp, #4
 8003454:	445b      	add	r3, fp
 8003456:	fa1f fb88 	uxth.w	fp, r8
 800345a:	f1bb 0f00 	cmp.w	fp, #0
 800345e:	ee01 1a82 	vmla.f32	s2, s3, s4
 8003462:	d1e5      	bne.n	8003430 <forward_gemm+0x1ec>
 8003464:	ee20 1a81 	vmul.f32	s2, s1, s2
 8003468:	edd6 1a00 	vldr	s3, [r6]
 800346c:	ee00 1a21 	vmla.f32	s2, s0, s3
 8003470:	ed87 1a00 	vstr	s2, [r7]
 8003474:	1d3f      	adds	r7, r7, #4
 8003476:	1e52      	subs	r2, r2, #1
 8003478:	b292      	uxth	r2, r2
 800347a:	002b      	movs	r3, r5
 800347c:	bf0e      	itee	eq
 800347e:	1a8b      	subeq	r3, r1, r2
 8003480:	ebaa 0302 	subne.w	r3, sl, r2
 8003484:	434b      	mulne	r3, r1
 8003486:	2a00      	cmp	r2, #0
 8003488:	444e      	add	r6, r9
 800348a:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800348e:	d1c0      	bne.n	8003412 <forward_gemm+0x1ce>
 8003490:	f8bd 7022 	ldrh.w	r7, [sp, #34]	; 0x22
 8003494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003496:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003498:	f8bd e028 	ldrh.w	lr, [sp, #40]	; 0x28
 800349c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80034a0:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 80034a4:	19df      	adds	r7, r3, r7
 80034a6:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 80034aa:	b100      	cbz	r0, 80034ae <forward_gemm+0x26a>
 80034ac:	2404      	movs	r4, #4
 80034ae:	eb02 0c04 	add.w	ip, r2, r4
 80034b2:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 80034b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80034b8:	1e67      	subs	r7, r4, #1
 80034ba:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 80034be:	f8ad 7020 	strh.w	r7, [sp, #32]
 80034c2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80034c6:	2a00      	cmp	r2, #0
 80034c8:	d192      	bne.n	80033f0 <forward_gemm+0x1ac>
 80034ca:	b011      	add	sp, #68	; 0x44
 80034cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034d0:	fb0b f606 	mul.w	r6, fp, r6
 80034d4:	2e00      	cmp	r6, #0
 80034d6:	ddf8      	ble.n	80034ca <forward_gemm+0x286>
 80034d8:	f016 0003 	ands.w	r0, r6, #3
 80034dc:	d003      	beq.n	80034e6 <forward_gemm+0x2a2>
 80034de:	1e40      	subs	r0, r0, #1
 80034e0:	f844 3b04 	str.w	r3, [r4], #4
 80034e4:	d1fb      	bne.n	80034de <forward_gemm+0x29a>
 80034e6:	08b1      	lsrs	r1, r6, #2
 80034e8:	d0ef      	beq.n	80034ca <forward_gemm+0x286>
 80034ea:	6023      	str	r3, [r4, #0]
 80034ec:	6063      	str	r3, [r4, #4]
 80034ee:	60a3      	str	r3, [r4, #8]
 80034f0:	60e3      	str	r3, [r4, #12]
 80034f2:	3410      	adds	r4, #16
 80034f4:	1e49      	subs	r1, r1, #1
 80034f6:	d1f8      	bne.n	80034ea <forward_gemm+0x2a6>
 80034f8:	b011      	add	sp, #68	; 0x44
 80034fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08003500 <forward_matmul>:
 8003500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003504:	b08b      	sub	sp, #44	; 0x2c
 8003506:	6944      	ldr	r4, [r0, #20]
 8003508:	8822      	ldrh	r2, [r4, #0]
 800350a:	2a00      	cmp	r2, #0
 800350c:	bf1a      	itte	ne
 800350e:	6860      	ldrne	r0, [r4, #4]
 8003510:	1d03      	addne	r3, r0, #4
 8003512:	2304      	moveq	r3, #4
 8003514:	6819      	ldr	r1, [r3, #0]
 8003516:	2900      	cmp	r1, #0
 8003518:	bf14      	ite	ne
 800351a:	6808      	ldrne	r0, [r1, #0]
 800351c:	2000      	moveq	r0, #0
 800351e:	2900      	cmp	r1, #0
 8003520:	bf14      	ite	ne
 8003522:	f8d1 b004 	ldrne.w	fp, [r1, #4]
 8003526:	f04f 0b00 	moveq.w	fp, #0
 800352a:	2a02      	cmp	r2, #2
 800352c:	bfa6      	itte	ge
 800352e:	6861      	ldrge	r1, [r4, #4]
 8003530:	3110      	addge	r1, #16
 8003532:	2104      	movlt	r1, #4
 8003534:	6809      	ldr	r1, [r1, #0]
 8003536:	2900      	cmp	r1, #0
 8003538:	bf14      	ite	ne
 800353a:	680b      	ldrne	r3, [r1, #0]
 800353c:	2300      	moveq	r3, #0
 800353e:	f1bb 0f00 	cmp.w	fp, #0
 8003542:	d108      	bne.n	8003556 <forward_matmul+0x56>
 8003544:	2a02      	cmp	r2, #2
 8003546:	bfc6      	itte	gt
 8003548:	6861      	ldrgt	r1, [r4, #4]
 800354a:	311c      	addgt	r1, #28
 800354c:	2104      	movle	r1, #4
 800354e:	6809      	ldr	r1, [r1, #0]
 8003550:	b109      	cbz	r1, 8003556 <forward_matmul+0x56>
 8003552:	f8d1 b000 	ldr.w	fp, [r1]
 8003556:	68dd      	ldr	r5, [r3, #12]
 8003558:	68c4      	ldr	r4, [r0, #12]
 800355a:	f8db 900c 	ldr.w	r9, [fp, #12]
 800355e:	686e      	ldr	r6, [r5, #4]
 8003560:	f8d4 e000 	ldr.w	lr, [r4]
 8003564:	f8d9 2000 	ldr.w	r2, [r9]
 8003568:	f8d5 a000 	ldr.w	sl, [r5]
 800356c:	68a1      	ldr	r1, [r4, #8]
 800356e:	f8d9 8008 	ldr.w	r8, [r9, #8]
 8003572:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8003576:	68ef      	ldr	r7, [r5, #12]
 8003578:	9706      	str	r7, [sp, #24]
 800357a:	fb01 f50e 	mul.w	r5, r1, lr
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	68e7      	ldr	r7, [r4, #12]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	434f      	muls	r7, r1
 8003586:	fb0e f707 	mul.w	r7, lr, r7
 800358a:	970a      	str	r7, [sp, #40]	; 0x28
 800358c:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8003590:	fb08 f404 	mul.w	r4, r8, r4
 8003594:	4354      	muls	r4, r2
 8003596:	2e00      	cmp	r6, #0
 8003598:	9409      	str	r4, [sp, #36]	; 0x24
 800359a:	fb08 f802 	mul.w	r8, r8, r2
 800359e:	d074      	beq.n	800368a <forward_matmul+0x18a>
 80035a0:	2400      	movs	r4, #0
 80035a2:	46a1      	mov	r9, r4
 80035a4:	9602      	str	r6, [sp, #8]
 80035a6:	9e06      	ldr	r6, [sp, #24]
 80035a8:	2e00      	cmp	r6, #0
 80035aa:	d064      	beq.n	8003676 <forward_matmul+0x176>
 80035ac:	9f06      	ldr	r7, [sp, #24]
 80035ae:	9701      	str	r7, [sp, #4]
 80035b0:	f8cd c00c 	str.w	ip, [sp, #12]
 80035b4:	2600      	movs	r6, #0
 80035b6:	9505      	str	r5, [sp, #20]
 80035b8:	9d03      	ldr	r5, [sp, #12]
 80035ba:	2d00      	cmp	r5, #0
 80035bc:	d051      	beq.n	8003662 <forward_matmul+0x162>
 80035be:	9500      	str	r5, [sp, #0]
 80035c0:	f8cd a010 	str.w	sl, [sp, #16]
 80035c4:	9207      	str	r2, [sp, #28]
 80035c6:	f04f 0a00 	mov.w	sl, #0
 80035ca:	9a04      	ldr	r2, [sp, #16]
 80035cc:	2a00      	cmp	r2, #0
 80035ce:	d03f      	beq.n	8003650 <forward_matmul+0x150>
 80035d0:	f04f 0c00 	mov.w	ip, #0
 80035d4:	9008      	str	r0, [sp, #32]
 80035d6:	9808      	ldr	r0, [sp, #32]
 80035d8:	6985      	ldr	r5, [r0, #24]
 80035da:	68a8      	ldr	r0, [r5, #8]
 80035dc:	f8db 7018 	ldr.w	r7, [fp, #24]
 80035e0:	4420      	add	r0, r4
 80035e2:	4430      	add	r0, r6
 80035e4:	eb00 050c 	add.w	r5, r0, ip
 80035e8:	68b8      	ldr	r0, [r7, #8]
 80035ea:	4448      	add	r0, r9
 80035ec:	4450      	add	r0, sl
 80035ee:	eb00 070c 	add.w	r7, r0, ip
 80035f2:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8003694 <.text_16>
 80035f6:	b319      	cbz	r1, 8003640 <forward_matmul+0x140>
 80035f8:	07c8      	lsls	r0, r1, #31
 80035fa:	d509      	bpl.n	8003610 <forward_matmul+0x110>
 80035fc:	edd5 0a00 	vldr	s1, [r5]
 8003600:	ed97 1a00 	vldr	s2, [r7]
 8003604:	ee00 0a81 	vmla.f32	s0, s1, s2
 8003608:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 800360c:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8003610:	0848      	lsrs	r0, r1, #1
 8003612:	d015      	beq.n	8003640 <forward_matmul+0x140>
 8003614:	edd5 0a00 	vldr	s1, [r5]
 8003618:	ed97 1a00 	vldr	s2, [r7]
 800361c:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 8003620:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8003624:	ee00 0a81 	vmla.f32	s0, s1, s2
 8003628:	edd5 0a00 	vldr	s1, [r5]
 800362c:	ed97 1a00 	vldr	s2, [r7]
 8003630:	1e40      	subs	r0, r0, #1
 8003632:	ee00 0a81 	vmla.f32	s0, s1, s2
 8003636:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 800363a:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 800363e:	d1e9      	bne.n	8003614 <forward_matmul+0x114>
 8003640:	ed83 0a00 	vstr	s0, [r3]
 8003644:	1d1b      	adds	r3, r3, #4
 8003646:	1e52      	subs	r2, r2, #1
 8003648:	f10c 0c04 	add.w	ip, ip, #4
 800364c:	d1c3      	bne.n	80035d6 <forward_matmul+0xd6>
 800364e:	9808      	ldr	r0, [sp, #32]
 8003650:	9d00      	ldr	r5, [sp, #0]
 8003652:	9a07      	ldr	r2, [sp, #28]
 8003654:	1e6d      	subs	r5, r5, #1
 8003656:	eb0a 0a82 	add.w	sl, sl, r2, lsl #2
 800365a:	9500      	str	r5, [sp, #0]
 800365c:	d1b5      	bne.n	80035ca <forward_matmul+0xca>
 800365e:	f8dd a010 	ldr.w	sl, [sp, #16]
 8003662:	9f01      	ldr	r7, [sp, #4]
 8003664:	9d05      	ldr	r5, [sp, #20]
 8003666:	1e7f      	subs	r7, r7, #1
 8003668:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 800366c:	9701      	str	r7, [sp, #4]
 800366e:	d1a3      	bne.n	80035b8 <forward_matmul+0xb8>
 8003670:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8003674:	9d05      	ldr	r5, [sp, #20]
 8003676:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8003678:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800367a:	eb09 0986 	add.w	r9, r9, r6, lsl #2
 800367e:	9e02      	ldr	r6, [sp, #8]
 8003680:	1e76      	subs	r6, r6, #1
 8003682:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 8003686:	9602      	str	r6, [sp, #8]
 8003688:	d18d      	bne.n	80035a6 <forward_matmul+0xa6>
 800368a:	b00b      	add	sp, #44	; 0x2c
 800368c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003690 <.text_15>:
 8003690:	080024ab 	.word	0x080024ab

08003694 <.text_16>:
 8003694:	00000000 	.word	0x00000000

08003698 <ai_shape_get_size>:
 8003698:	b470      	push	{r4, r5, r6}
 800369a:	4601      	mov	r1, r0
 800369c:	f04f 0201 	mov.w	r2, #1
 80036a0:	680b      	ldr	r3, [r1, #0]
 80036a2:	0a1b      	lsrs	r3, r3, #8
 80036a4:	d01e      	beq.n	80036e4 <ai_shape_get_size+0x4c>
 80036a6:	684c      	ldr	r4, [r1, #4]
 80036a8:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 80036ac:	4618      	mov	r0, r3
 80036ae:	1f0d      	subs	r5, r1, #4
 80036b0:	f010 0103 	ands.w	r1, r0, #3
 80036b4:	f000 8006 	beq.w	80036c4 <ai_shape_get_size+0x2c>
 80036b8:	f855 6904 	ldr.w	r6, [r5], #-4
 80036bc:	1e5b      	subs	r3, r3, #1
 80036be:	4372      	muls	r2, r6
 80036c0:	1e49      	subs	r1, r1, #1
 80036c2:	d1f9      	bne.n	80036b8 <ai_shape_get_size+0x20>
 80036c4:	0880      	lsrs	r0, r0, #2
 80036c6:	d00d      	beq.n	80036e4 <ai_shape_get_size+0x4c>
 80036c8:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 80036cc:	3910      	subs	r1, #16
 80036ce:	68cb      	ldr	r3, [r1, #12]
 80036d0:	688c      	ldr	r4, [r1, #8]
 80036d2:	684d      	ldr	r5, [r1, #4]
 80036d4:	f851 6910 	ldr.w	r6, [r1], #-16
 80036d8:	4363      	muls	r3, r4
 80036da:	436b      	muls	r3, r5
 80036dc:	4373      	muls	r3, r6
 80036de:	435a      	muls	r2, r3
 80036e0:	1e40      	subs	r0, r0, #1
 80036e2:	d1f4      	bne.n	80036ce <ai_shape_get_size+0x36>
 80036e4:	bc70      	pop	{r4, r5, r6}
 80036e6:	4610      	mov	r0, r2
 80036e8:	4770      	bx	lr
	...

080036ec <nl_func_acos_array_f32>:
 80036ec:	b570      	push	{r4, r5, r6, lr}
 80036ee:	688c      	ldr	r4, [r1, #8]
 80036f0:	6880      	ldr	r0, [r0, #8]
 80036f2:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80036f6:	1f0d      	subs	r5, r1, #4
 80036f8:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80036fc:	1f0e      	subs	r6, r1, #4
 80036fe:	42a5      	cmp	r5, r4
 8003700:	f0c0 800a 	bcc.w	8003718 <nl_func_acos_array_f32+0x2c>
 8003704:	ed95 0a00 	vldr	s0, [r5]
 8003708:	f00f f90c 	bl	8012924 <acosf>
 800370c:	ed86 0a00 	vstr	s0, [r6]
 8003710:	1f2d      	subs	r5, r5, #4
 8003712:	1f36      	subs	r6, r6, #4
 8003714:	42a5      	cmp	r5, r4
 8003716:	d2f5      	bcs.n	8003704 <nl_func_acos_array_f32+0x18>
 8003718:	bd70      	pop	{r4, r5, r6, pc}
	...

0800371c <forward_acos>:
 800371c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800371e:	b081      	sub	sp, #4
 8003720:	6942      	ldr	r2, [r0, #20]
 8003722:	8811      	ldrh	r1, [r2, #0]
 8003724:	2900      	cmp	r1, #0
 8003726:	bf1a      	itte	ne
 8003728:	6850      	ldrne	r0, [r2, #4]
 800372a:	1d00      	addne	r0, r0, #4
 800372c:	2004      	moveq	r0, #4
 800372e:	f04f 0501 	mov.w	r5, #1
 8003732:	6800      	ldr	r0, [r0, #0]
 8003734:	2800      	cmp	r0, #0
 8003736:	bf14      	ite	ne
 8003738:	6803      	ldrne	r3, [r0, #0]
 800373a:	2300      	moveq	r3, #0
 800373c:	2902      	cmp	r1, #2
 800373e:	bfa6      	itte	ge
 8003740:	6850      	ldrge	r0, [r2, #4]
 8003742:	3010      	addge	r0, #16
 8003744:	2004      	movlt	r0, #4
 8003746:	6800      	ldr	r0, [r0, #0]
 8003748:	2800      	cmp	r0, #0
 800374a:	bf19      	ittee	ne
 800374c:	6800      	ldrne	r0, [r0, #0]
 800374e:	f100 0418 	addne.w	r4, r0, #24
 8003752:	2100      	moveq	r1, #0
 8003754:	f101 0418 	addeq.w	r4, r1, #24
 8003758:	f103 0108 	add.w	r1, r3, #8
 800375c:	680a      	ldr	r2, [r1, #0]
 800375e:	0a12      	lsrs	r2, r2, #8
 8003760:	d01e      	beq.n	80037a0 <forward_acos+0x84>
 8003762:	684e      	ldr	r6, [r1, #4]
 8003764:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003768:	4610      	mov	r0, r2
 800376a:	1f0f      	subs	r7, r1, #4
 800376c:	f010 0103 	ands.w	r1, r0, #3
 8003770:	d006      	beq.n	8003780 <forward_acos+0x64>
 8003772:	1e52      	subs	r2, r2, #1
 8003774:	f857 c904 	ldr.w	ip, [r7], #-4
 8003778:	1e49      	subs	r1, r1, #1
 800377a:	fb0c f505 	mul.w	r5, ip, r5
 800377e:	d1f8      	bne.n	8003772 <forward_acos+0x56>
 8003780:	0880      	lsrs	r0, r0, #2
 8003782:	d00d      	beq.n	80037a0 <forward_acos+0x84>
 8003784:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003788:	3910      	subs	r1, #16
 800378a:	68ca      	ldr	r2, [r1, #12]
 800378c:	688e      	ldr	r6, [r1, #8]
 800378e:	684f      	ldr	r7, [r1, #4]
 8003790:	4372      	muls	r2, r6
 8003792:	f851 6910 	ldr.w	r6, [r1], #-16
 8003796:	437a      	muls	r2, r7
 8003798:	4372      	muls	r2, r6
 800379a:	4355      	muls	r5, r2
 800379c:	1e40      	subs	r0, r0, #1
 800379e:	d1f4      	bne.n	800378a <forward_acos+0x6e>
 80037a0:	6998      	ldr	r0, [r3, #24]
 80037a2:	6886      	ldr	r6, [r0, #8]
 80037a4:	6821      	ldr	r1, [r4, #0]
 80037a6:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80037aa:	1f07      	subs	r7, r0, #4
 80037ac:	6888      	ldr	r0, [r1, #8]
 80037ae:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 80037b2:	1f14      	subs	r4, r2, #4
 80037b4:	42b7      	cmp	r7, r6
 80037b6:	d309      	bcc.n	80037cc <forward_acos+0xb0>
 80037b8:	ed97 0a00 	vldr	s0, [r7]
 80037bc:	f00f f8b2 	bl	8012924 <acosf>
 80037c0:	ed84 0a00 	vstr	s0, [r4]
 80037c4:	1f3f      	subs	r7, r7, #4
 80037c6:	1f24      	subs	r4, r4, #4
 80037c8:	42b7      	cmp	r7, r6
 80037ca:	d2f5      	bcs.n	80037b8 <forward_acos+0x9c>
 80037cc:	b001      	add	sp, #4
 80037ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080037d0 <nl_func_acosh_array_f32>:
 80037d0:	b570      	push	{r4, r5, r6, lr}
 80037d2:	688c      	ldr	r4, [r1, #8]
 80037d4:	6880      	ldr	r0, [r0, #8]
 80037d6:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80037da:	1f0d      	subs	r5, r1, #4
 80037dc:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80037e0:	1f0e      	subs	r6, r1, #4
 80037e2:	42a5      	cmp	r5, r4
 80037e4:	f0c0 800a 	bcc.w	80037fc <nl_func_acosh_array_f32+0x2c>
 80037e8:	ed95 0a00 	vldr	s0, [r5]
 80037ec:	f00f f8f2 	bl	80129d4 <acoshf>
 80037f0:	ed86 0a00 	vstr	s0, [r6]
 80037f4:	1f2d      	subs	r5, r5, #4
 80037f6:	1f36      	subs	r6, r6, #4
 80037f8:	42a5      	cmp	r5, r4
 80037fa:	d2f5      	bcs.n	80037e8 <nl_func_acosh_array_f32+0x18>
 80037fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08003800 <forward_acosh>:
 8003800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003802:	b081      	sub	sp, #4
 8003804:	6942      	ldr	r2, [r0, #20]
 8003806:	8811      	ldrh	r1, [r2, #0]
 8003808:	2900      	cmp	r1, #0
 800380a:	bf1a      	itte	ne
 800380c:	6850      	ldrne	r0, [r2, #4]
 800380e:	1d00      	addne	r0, r0, #4
 8003810:	2004      	moveq	r0, #4
 8003812:	f04f 0501 	mov.w	r5, #1
 8003816:	6800      	ldr	r0, [r0, #0]
 8003818:	2800      	cmp	r0, #0
 800381a:	bf14      	ite	ne
 800381c:	6803      	ldrne	r3, [r0, #0]
 800381e:	2300      	moveq	r3, #0
 8003820:	2902      	cmp	r1, #2
 8003822:	bfa6      	itte	ge
 8003824:	6850      	ldrge	r0, [r2, #4]
 8003826:	3010      	addge	r0, #16
 8003828:	2004      	movlt	r0, #4
 800382a:	6800      	ldr	r0, [r0, #0]
 800382c:	2800      	cmp	r0, #0
 800382e:	bf19      	ittee	ne
 8003830:	6800      	ldrne	r0, [r0, #0]
 8003832:	f100 0418 	addne.w	r4, r0, #24
 8003836:	2100      	moveq	r1, #0
 8003838:	f101 0418 	addeq.w	r4, r1, #24
 800383c:	f103 0108 	add.w	r1, r3, #8
 8003840:	680a      	ldr	r2, [r1, #0]
 8003842:	0a12      	lsrs	r2, r2, #8
 8003844:	d01e      	beq.n	8003884 <forward_acosh+0x84>
 8003846:	684e      	ldr	r6, [r1, #4]
 8003848:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800384c:	4610      	mov	r0, r2
 800384e:	1f0f      	subs	r7, r1, #4
 8003850:	f010 0103 	ands.w	r1, r0, #3
 8003854:	d006      	beq.n	8003864 <forward_acosh+0x64>
 8003856:	1e52      	subs	r2, r2, #1
 8003858:	f857 c904 	ldr.w	ip, [r7], #-4
 800385c:	1e49      	subs	r1, r1, #1
 800385e:	fb0c f505 	mul.w	r5, ip, r5
 8003862:	d1f8      	bne.n	8003856 <forward_acosh+0x56>
 8003864:	0880      	lsrs	r0, r0, #2
 8003866:	d00d      	beq.n	8003884 <forward_acosh+0x84>
 8003868:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800386c:	3910      	subs	r1, #16
 800386e:	68ca      	ldr	r2, [r1, #12]
 8003870:	688e      	ldr	r6, [r1, #8]
 8003872:	684f      	ldr	r7, [r1, #4]
 8003874:	4372      	muls	r2, r6
 8003876:	f851 6910 	ldr.w	r6, [r1], #-16
 800387a:	437a      	muls	r2, r7
 800387c:	4372      	muls	r2, r6
 800387e:	4355      	muls	r5, r2
 8003880:	1e40      	subs	r0, r0, #1
 8003882:	d1f4      	bne.n	800386e <forward_acosh+0x6e>
 8003884:	6998      	ldr	r0, [r3, #24]
 8003886:	6886      	ldr	r6, [r0, #8]
 8003888:	6821      	ldr	r1, [r4, #0]
 800388a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800388e:	1f07      	subs	r7, r0, #4
 8003890:	6888      	ldr	r0, [r1, #8]
 8003892:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003896:	1f14      	subs	r4, r2, #4
 8003898:	42b7      	cmp	r7, r6
 800389a:	d309      	bcc.n	80038b0 <forward_acosh+0xb0>
 800389c:	ed97 0a00 	vldr	s0, [r7]
 80038a0:	f00f f898 	bl	80129d4 <acoshf>
 80038a4:	ed84 0a00 	vstr	s0, [r4]
 80038a8:	1f3f      	subs	r7, r7, #4
 80038aa:	1f24      	subs	r4, r4, #4
 80038ac:	42b7      	cmp	r7, r6
 80038ae:	d2f5      	bcs.n	800389c <forward_acosh+0x9c>
 80038b0:	b001      	add	sp, #4
 80038b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080038b4 <nl_func_asin_array_f32>:
 80038b4:	b570      	push	{r4, r5, r6, lr}
 80038b6:	688c      	ldr	r4, [r1, #8]
 80038b8:	6880      	ldr	r0, [r0, #8]
 80038ba:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80038be:	1f0d      	subs	r5, r1, #4
 80038c0:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80038c4:	1f0e      	subs	r6, r1, #4
 80038c6:	42a5      	cmp	r5, r4
 80038c8:	f0c0 800a 	bcc.w	80038e0 <nl_func_asin_array_f32+0x2c>
 80038cc:	ed95 0a00 	vldr	s0, [r5]
 80038d0:	f00f f8d0 	bl	8012a74 <asinf>
 80038d4:	ed86 0a00 	vstr	s0, [r6]
 80038d8:	1f2d      	subs	r5, r5, #4
 80038da:	1f36      	subs	r6, r6, #4
 80038dc:	42a5      	cmp	r5, r4
 80038de:	d2f5      	bcs.n	80038cc <nl_func_asin_array_f32+0x18>
 80038e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080038e4 <forward_asin>:
 80038e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038e6:	b081      	sub	sp, #4
 80038e8:	6942      	ldr	r2, [r0, #20]
 80038ea:	8811      	ldrh	r1, [r2, #0]
 80038ec:	2900      	cmp	r1, #0
 80038ee:	bf1a      	itte	ne
 80038f0:	6850      	ldrne	r0, [r2, #4]
 80038f2:	1d00      	addne	r0, r0, #4
 80038f4:	2004      	moveq	r0, #4
 80038f6:	f04f 0501 	mov.w	r5, #1
 80038fa:	6800      	ldr	r0, [r0, #0]
 80038fc:	2800      	cmp	r0, #0
 80038fe:	bf14      	ite	ne
 8003900:	6803      	ldrne	r3, [r0, #0]
 8003902:	2300      	moveq	r3, #0
 8003904:	2902      	cmp	r1, #2
 8003906:	bfa6      	itte	ge
 8003908:	6850      	ldrge	r0, [r2, #4]
 800390a:	3010      	addge	r0, #16
 800390c:	2004      	movlt	r0, #4
 800390e:	6800      	ldr	r0, [r0, #0]
 8003910:	2800      	cmp	r0, #0
 8003912:	bf19      	ittee	ne
 8003914:	6800      	ldrne	r0, [r0, #0]
 8003916:	f100 0418 	addne.w	r4, r0, #24
 800391a:	2100      	moveq	r1, #0
 800391c:	f101 0418 	addeq.w	r4, r1, #24
 8003920:	f103 0108 	add.w	r1, r3, #8
 8003924:	680a      	ldr	r2, [r1, #0]
 8003926:	0a12      	lsrs	r2, r2, #8
 8003928:	d01e      	beq.n	8003968 <forward_asin+0x84>
 800392a:	684e      	ldr	r6, [r1, #4]
 800392c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003930:	4610      	mov	r0, r2
 8003932:	1f0f      	subs	r7, r1, #4
 8003934:	f010 0103 	ands.w	r1, r0, #3
 8003938:	d006      	beq.n	8003948 <forward_asin+0x64>
 800393a:	1e52      	subs	r2, r2, #1
 800393c:	f857 c904 	ldr.w	ip, [r7], #-4
 8003940:	1e49      	subs	r1, r1, #1
 8003942:	fb0c f505 	mul.w	r5, ip, r5
 8003946:	d1f8      	bne.n	800393a <forward_asin+0x56>
 8003948:	0880      	lsrs	r0, r0, #2
 800394a:	d00d      	beq.n	8003968 <forward_asin+0x84>
 800394c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003950:	3910      	subs	r1, #16
 8003952:	68ca      	ldr	r2, [r1, #12]
 8003954:	688e      	ldr	r6, [r1, #8]
 8003956:	684f      	ldr	r7, [r1, #4]
 8003958:	4372      	muls	r2, r6
 800395a:	f851 6910 	ldr.w	r6, [r1], #-16
 800395e:	437a      	muls	r2, r7
 8003960:	4372      	muls	r2, r6
 8003962:	4355      	muls	r5, r2
 8003964:	1e40      	subs	r0, r0, #1
 8003966:	d1f4      	bne.n	8003952 <forward_asin+0x6e>
 8003968:	6998      	ldr	r0, [r3, #24]
 800396a:	6886      	ldr	r6, [r0, #8]
 800396c:	6821      	ldr	r1, [r4, #0]
 800396e:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003972:	1f07      	subs	r7, r0, #4
 8003974:	6888      	ldr	r0, [r1, #8]
 8003976:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 800397a:	1f14      	subs	r4, r2, #4
 800397c:	42b7      	cmp	r7, r6
 800397e:	d309      	bcc.n	8003994 <forward_asin+0xb0>
 8003980:	ed97 0a00 	vldr	s0, [r7]
 8003984:	f00f f876 	bl	8012a74 <asinf>
 8003988:	ed84 0a00 	vstr	s0, [r4]
 800398c:	1f3f      	subs	r7, r7, #4
 800398e:	1f24      	subs	r4, r4, #4
 8003990:	42b7      	cmp	r7, r6
 8003992:	d2f5      	bcs.n	8003980 <forward_asin+0x9c>
 8003994:	b001      	add	sp, #4
 8003996:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003998 <nl_func_asinh_array_f32>:
 8003998:	b570      	push	{r4, r5, r6, lr}
 800399a:	688c      	ldr	r4, [r1, #8]
 800399c:	6880      	ldr	r0, [r0, #8]
 800399e:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80039a2:	1f0d      	subs	r5, r1, #4
 80039a4:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80039a8:	1f0e      	subs	r6, r1, #4
 80039aa:	42a5      	cmp	r5, r4
 80039ac:	f0c0 800a 	bcc.w	80039c4 <nl_func_asinh_array_f32+0x2c>
 80039b0:	ed95 0a00 	vldr	s0, [r5]
 80039b4:	f00e f9e6 	bl	8011d84 <asinhf>
 80039b8:	ed86 0a00 	vstr	s0, [r6]
 80039bc:	1f2d      	subs	r5, r5, #4
 80039be:	1f36      	subs	r6, r6, #4
 80039c0:	42a5      	cmp	r5, r4
 80039c2:	d2f5      	bcs.n	80039b0 <nl_func_asinh_array_f32+0x18>
 80039c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080039c8 <forward_asinh>:
 80039c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039ca:	b081      	sub	sp, #4
 80039cc:	6942      	ldr	r2, [r0, #20]
 80039ce:	8811      	ldrh	r1, [r2, #0]
 80039d0:	2900      	cmp	r1, #0
 80039d2:	bf1a      	itte	ne
 80039d4:	6850      	ldrne	r0, [r2, #4]
 80039d6:	1d00      	addne	r0, r0, #4
 80039d8:	2004      	moveq	r0, #4
 80039da:	f04f 0501 	mov.w	r5, #1
 80039de:	6800      	ldr	r0, [r0, #0]
 80039e0:	2800      	cmp	r0, #0
 80039e2:	bf14      	ite	ne
 80039e4:	6803      	ldrne	r3, [r0, #0]
 80039e6:	2300      	moveq	r3, #0
 80039e8:	2902      	cmp	r1, #2
 80039ea:	bfa6      	itte	ge
 80039ec:	6850      	ldrge	r0, [r2, #4]
 80039ee:	3010      	addge	r0, #16
 80039f0:	2004      	movlt	r0, #4
 80039f2:	6800      	ldr	r0, [r0, #0]
 80039f4:	2800      	cmp	r0, #0
 80039f6:	bf19      	ittee	ne
 80039f8:	6800      	ldrne	r0, [r0, #0]
 80039fa:	f100 0418 	addne.w	r4, r0, #24
 80039fe:	2100      	moveq	r1, #0
 8003a00:	f101 0418 	addeq.w	r4, r1, #24
 8003a04:	f103 0108 	add.w	r1, r3, #8
 8003a08:	680a      	ldr	r2, [r1, #0]
 8003a0a:	0a12      	lsrs	r2, r2, #8
 8003a0c:	d01e      	beq.n	8003a4c <forward_asinh+0x84>
 8003a0e:	684e      	ldr	r6, [r1, #4]
 8003a10:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003a14:	4610      	mov	r0, r2
 8003a16:	1f0f      	subs	r7, r1, #4
 8003a18:	f010 0103 	ands.w	r1, r0, #3
 8003a1c:	d006      	beq.n	8003a2c <forward_asinh+0x64>
 8003a1e:	1e52      	subs	r2, r2, #1
 8003a20:	f857 c904 	ldr.w	ip, [r7], #-4
 8003a24:	1e49      	subs	r1, r1, #1
 8003a26:	fb0c f505 	mul.w	r5, ip, r5
 8003a2a:	d1f8      	bne.n	8003a1e <forward_asinh+0x56>
 8003a2c:	0880      	lsrs	r0, r0, #2
 8003a2e:	d00d      	beq.n	8003a4c <forward_asinh+0x84>
 8003a30:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003a34:	3910      	subs	r1, #16
 8003a36:	68ca      	ldr	r2, [r1, #12]
 8003a38:	688e      	ldr	r6, [r1, #8]
 8003a3a:	684f      	ldr	r7, [r1, #4]
 8003a3c:	4372      	muls	r2, r6
 8003a3e:	f851 6910 	ldr.w	r6, [r1], #-16
 8003a42:	437a      	muls	r2, r7
 8003a44:	4372      	muls	r2, r6
 8003a46:	4355      	muls	r5, r2
 8003a48:	1e40      	subs	r0, r0, #1
 8003a4a:	d1f4      	bne.n	8003a36 <forward_asinh+0x6e>
 8003a4c:	6998      	ldr	r0, [r3, #24]
 8003a4e:	6886      	ldr	r6, [r0, #8]
 8003a50:	6821      	ldr	r1, [r4, #0]
 8003a52:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003a56:	1f07      	subs	r7, r0, #4
 8003a58:	6888      	ldr	r0, [r1, #8]
 8003a5a:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003a5e:	1f14      	subs	r4, r2, #4
 8003a60:	42b7      	cmp	r7, r6
 8003a62:	d309      	bcc.n	8003a78 <forward_asinh+0xb0>
 8003a64:	ed97 0a00 	vldr	s0, [r7]
 8003a68:	f00e f98c 	bl	8011d84 <asinhf>
 8003a6c:	ed84 0a00 	vstr	s0, [r4]
 8003a70:	1f3f      	subs	r7, r7, #4
 8003a72:	1f24      	subs	r4, r4, #4
 8003a74:	42b7      	cmp	r7, r6
 8003a76:	d2f5      	bcs.n	8003a64 <forward_asinh+0x9c>
 8003a78:	b001      	add	sp, #4
 8003a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a7c <nl_func_atan_array_f32>:
 8003a7c:	b570      	push	{r4, r5, r6, lr}
 8003a7e:	688c      	ldr	r4, [r1, #8]
 8003a80:	6880      	ldr	r0, [r0, #8]
 8003a82:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003a86:	1f0d      	subs	r5, r1, #4
 8003a88:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003a8c:	1f0e      	subs	r6, r1, #4
 8003a8e:	42a5      	cmp	r5, r4
 8003a90:	f0c0 800a 	bcc.w	8003aa8 <nl_func_atan_array_f32+0x2c>
 8003a94:	ed95 0a00 	vldr	s0, [r5]
 8003a98:	f00e f9dc 	bl	8011e54 <atanf>
 8003a9c:	ed86 0a00 	vstr	s0, [r6]
 8003aa0:	1f2d      	subs	r5, r5, #4
 8003aa2:	1f36      	subs	r6, r6, #4
 8003aa4:	42a5      	cmp	r5, r4
 8003aa6:	d2f5      	bcs.n	8003a94 <nl_func_atan_array_f32+0x18>
 8003aa8:	bd70      	pop	{r4, r5, r6, pc}
	...

08003aac <forward_atan>:
 8003aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aae:	b081      	sub	sp, #4
 8003ab0:	6942      	ldr	r2, [r0, #20]
 8003ab2:	8811      	ldrh	r1, [r2, #0]
 8003ab4:	2900      	cmp	r1, #0
 8003ab6:	bf1a      	itte	ne
 8003ab8:	6850      	ldrne	r0, [r2, #4]
 8003aba:	1d00      	addne	r0, r0, #4
 8003abc:	2004      	moveq	r0, #4
 8003abe:	f04f 0501 	mov.w	r5, #1
 8003ac2:	6800      	ldr	r0, [r0, #0]
 8003ac4:	2800      	cmp	r0, #0
 8003ac6:	bf14      	ite	ne
 8003ac8:	6803      	ldrne	r3, [r0, #0]
 8003aca:	2300      	moveq	r3, #0
 8003acc:	2902      	cmp	r1, #2
 8003ace:	bfa6      	itte	ge
 8003ad0:	6850      	ldrge	r0, [r2, #4]
 8003ad2:	3010      	addge	r0, #16
 8003ad4:	2004      	movlt	r0, #4
 8003ad6:	6800      	ldr	r0, [r0, #0]
 8003ad8:	2800      	cmp	r0, #0
 8003ada:	bf19      	ittee	ne
 8003adc:	6800      	ldrne	r0, [r0, #0]
 8003ade:	f100 0418 	addne.w	r4, r0, #24
 8003ae2:	2100      	moveq	r1, #0
 8003ae4:	f101 0418 	addeq.w	r4, r1, #24
 8003ae8:	f103 0108 	add.w	r1, r3, #8
 8003aec:	680a      	ldr	r2, [r1, #0]
 8003aee:	0a12      	lsrs	r2, r2, #8
 8003af0:	d01e      	beq.n	8003b30 <forward_atan+0x84>
 8003af2:	684e      	ldr	r6, [r1, #4]
 8003af4:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003af8:	4610      	mov	r0, r2
 8003afa:	1f0f      	subs	r7, r1, #4
 8003afc:	f010 0103 	ands.w	r1, r0, #3
 8003b00:	d006      	beq.n	8003b10 <forward_atan+0x64>
 8003b02:	1e52      	subs	r2, r2, #1
 8003b04:	f857 c904 	ldr.w	ip, [r7], #-4
 8003b08:	1e49      	subs	r1, r1, #1
 8003b0a:	fb0c f505 	mul.w	r5, ip, r5
 8003b0e:	d1f8      	bne.n	8003b02 <forward_atan+0x56>
 8003b10:	0880      	lsrs	r0, r0, #2
 8003b12:	d00d      	beq.n	8003b30 <forward_atan+0x84>
 8003b14:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003b18:	3910      	subs	r1, #16
 8003b1a:	68ca      	ldr	r2, [r1, #12]
 8003b1c:	688e      	ldr	r6, [r1, #8]
 8003b1e:	684f      	ldr	r7, [r1, #4]
 8003b20:	4372      	muls	r2, r6
 8003b22:	f851 6910 	ldr.w	r6, [r1], #-16
 8003b26:	437a      	muls	r2, r7
 8003b28:	4372      	muls	r2, r6
 8003b2a:	4355      	muls	r5, r2
 8003b2c:	1e40      	subs	r0, r0, #1
 8003b2e:	d1f4      	bne.n	8003b1a <forward_atan+0x6e>
 8003b30:	6998      	ldr	r0, [r3, #24]
 8003b32:	6886      	ldr	r6, [r0, #8]
 8003b34:	6821      	ldr	r1, [r4, #0]
 8003b36:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003b3a:	1f07      	subs	r7, r0, #4
 8003b3c:	6888      	ldr	r0, [r1, #8]
 8003b3e:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003b42:	1f14      	subs	r4, r2, #4
 8003b44:	42b7      	cmp	r7, r6
 8003b46:	d309      	bcc.n	8003b5c <forward_atan+0xb0>
 8003b48:	ed97 0a00 	vldr	s0, [r7]
 8003b4c:	f00e f982 	bl	8011e54 <atanf>
 8003b50:	ed84 0a00 	vstr	s0, [r4]
 8003b54:	1f3f      	subs	r7, r7, #4
 8003b56:	1f24      	subs	r4, r4, #4
 8003b58:	42b7      	cmp	r7, r6
 8003b5a:	d2f5      	bcs.n	8003b48 <forward_atan+0x9c>
 8003b5c:	b001      	add	sp, #4
 8003b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b60 <nl_func_atanh_array_f32>:
 8003b60:	b570      	push	{r4, r5, r6, lr}
 8003b62:	688c      	ldr	r4, [r1, #8]
 8003b64:	6880      	ldr	r0, [r0, #8]
 8003b66:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003b6a:	1f0d      	subs	r5, r1, #4
 8003b6c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003b70:	1f0e      	subs	r6, r1, #4
 8003b72:	42a5      	cmp	r5, r4
 8003b74:	f0c0 800a 	bcc.w	8003b8c <nl_func_atanh_array_f32+0x2c>
 8003b78:	ed95 0a00 	vldr	s0, [r5]
 8003b7c:	f00e ffd2 	bl	8012b24 <atanhf>
 8003b80:	ed86 0a00 	vstr	s0, [r6]
 8003b84:	1f2d      	subs	r5, r5, #4
 8003b86:	1f36      	subs	r6, r6, #4
 8003b88:	42a5      	cmp	r5, r4
 8003b8a:	d2f5      	bcs.n	8003b78 <nl_func_atanh_array_f32+0x18>
 8003b8c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003b90 <forward_atanh>:
 8003b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b92:	b081      	sub	sp, #4
 8003b94:	6942      	ldr	r2, [r0, #20]
 8003b96:	8811      	ldrh	r1, [r2, #0]
 8003b98:	2900      	cmp	r1, #0
 8003b9a:	bf1a      	itte	ne
 8003b9c:	6850      	ldrne	r0, [r2, #4]
 8003b9e:	1d00      	addne	r0, r0, #4
 8003ba0:	2004      	moveq	r0, #4
 8003ba2:	f04f 0501 	mov.w	r5, #1
 8003ba6:	6800      	ldr	r0, [r0, #0]
 8003ba8:	2800      	cmp	r0, #0
 8003baa:	bf14      	ite	ne
 8003bac:	6803      	ldrne	r3, [r0, #0]
 8003bae:	2300      	moveq	r3, #0
 8003bb0:	2902      	cmp	r1, #2
 8003bb2:	bfa6      	itte	ge
 8003bb4:	6850      	ldrge	r0, [r2, #4]
 8003bb6:	3010      	addge	r0, #16
 8003bb8:	2004      	movlt	r0, #4
 8003bba:	6800      	ldr	r0, [r0, #0]
 8003bbc:	2800      	cmp	r0, #0
 8003bbe:	bf19      	ittee	ne
 8003bc0:	6800      	ldrne	r0, [r0, #0]
 8003bc2:	f100 0418 	addne.w	r4, r0, #24
 8003bc6:	2100      	moveq	r1, #0
 8003bc8:	f101 0418 	addeq.w	r4, r1, #24
 8003bcc:	f103 0108 	add.w	r1, r3, #8
 8003bd0:	680a      	ldr	r2, [r1, #0]
 8003bd2:	0a12      	lsrs	r2, r2, #8
 8003bd4:	d01e      	beq.n	8003c14 <forward_atanh+0x84>
 8003bd6:	684e      	ldr	r6, [r1, #4]
 8003bd8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003bdc:	4610      	mov	r0, r2
 8003bde:	1f0f      	subs	r7, r1, #4
 8003be0:	f010 0103 	ands.w	r1, r0, #3
 8003be4:	d006      	beq.n	8003bf4 <forward_atanh+0x64>
 8003be6:	1e52      	subs	r2, r2, #1
 8003be8:	f857 c904 	ldr.w	ip, [r7], #-4
 8003bec:	1e49      	subs	r1, r1, #1
 8003bee:	fb0c f505 	mul.w	r5, ip, r5
 8003bf2:	d1f8      	bne.n	8003be6 <forward_atanh+0x56>
 8003bf4:	0880      	lsrs	r0, r0, #2
 8003bf6:	d00d      	beq.n	8003c14 <forward_atanh+0x84>
 8003bf8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003bfc:	3910      	subs	r1, #16
 8003bfe:	68ca      	ldr	r2, [r1, #12]
 8003c00:	688e      	ldr	r6, [r1, #8]
 8003c02:	684f      	ldr	r7, [r1, #4]
 8003c04:	4372      	muls	r2, r6
 8003c06:	f851 6910 	ldr.w	r6, [r1], #-16
 8003c0a:	437a      	muls	r2, r7
 8003c0c:	4372      	muls	r2, r6
 8003c0e:	4355      	muls	r5, r2
 8003c10:	1e40      	subs	r0, r0, #1
 8003c12:	d1f4      	bne.n	8003bfe <forward_atanh+0x6e>
 8003c14:	6998      	ldr	r0, [r3, #24]
 8003c16:	6886      	ldr	r6, [r0, #8]
 8003c18:	6821      	ldr	r1, [r4, #0]
 8003c1a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003c1e:	1f07      	subs	r7, r0, #4
 8003c20:	6888      	ldr	r0, [r1, #8]
 8003c22:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003c26:	1f14      	subs	r4, r2, #4
 8003c28:	42b7      	cmp	r7, r6
 8003c2a:	d309      	bcc.n	8003c40 <forward_atanh+0xb0>
 8003c2c:	ed97 0a00 	vldr	s0, [r7]
 8003c30:	f00e ff78 	bl	8012b24 <atanhf>
 8003c34:	ed84 0a00 	vstr	s0, [r4]
 8003c38:	1f3f      	subs	r7, r7, #4
 8003c3a:	1f24      	subs	r4, r4, #4
 8003c3c:	42b7      	cmp	r7, r6
 8003c3e:	d2f5      	bcs.n	8003c2c <forward_atanh+0x9c>
 8003c40:	b001      	add	sp, #4
 8003c42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c44 <nl_func_cos_array_f32>:
 8003c44:	b570      	push	{r4, r5, r6, lr}
 8003c46:	688c      	ldr	r4, [r1, #8]
 8003c48:	6880      	ldr	r0, [r0, #8]
 8003c4a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003c4e:	1f0d      	subs	r5, r1, #4
 8003c50:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003c54:	1f0e      	subs	r6, r1, #4
 8003c56:	42a5      	cmp	r5, r4
 8003c58:	f0c0 800a 	bcc.w	8003c70 <nl_func_cos_array_f32+0x2c>
 8003c5c:	ed95 0a00 	vldr	s0, [r5]
 8003c60:	f00e fa0c 	bl	801207c <cosf>
 8003c64:	ed86 0a00 	vstr	s0, [r6]
 8003c68:	1f2d      	subs	r5, r5, #4
 8003c6a:	1f36      	subs	r6, r6, #4
 8003c6c:	42a5      	cmp	r5, r4
 8003c6e:	d2f5      	bcs.n	8003c5c <nl_func_cos_array_f32+0x18>
 8003c70:	bd70      	pop	{r4, r5, r6, pc}
	...

08003c74 <forward_cos>:
 8003c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c76:	b081      	sub	sp, #4
 8003c78:	6942      	ldr	r2, [r0, #20]
 8003c7a:	8811      	ldrh	r1, [r2, #0]
 8003c7c:	2900      	cmp	r1, #0
 8003c7e:	bf1a      	itte	ne
 8003c80:	6850      	ldrne	r0, [r2, #4]
 8003c82:	1d00      	addne	r0, r0, #4
 8003c84:	2004      	moveq	r0, #4
 8003c86:	f04f 0501 	mov.w	r5, #1
 8003c8a:	6800      	ldr	r0, [r0, #0]
 8003c8c:	2800      	cmp	r0, #0
 8003c8e:	bf14      	ite	ne
 8003c90:	6803      	ldrne	r3, [r0, #0]
 8003c92:	2300      	moveq	r3, #0
 8003c94:	2902      	cmp	r1, #2
 8003c96:	bfa6      	itte	ge
 8003c98:	6850      	ldrge	r0, [r2, #4]
 8003c9a:	3010      	addge	r0, #16
 8003c9c:	2004      	movlt	r0, #4
 8003c9e:	6800      	ldr	r0, [r0, #0]
 8003ca0:	2800      	cmp	r0, #0
 8003ca2:	bf19      	ittee	ne
 8003ca4:	6800      	ldrne	r0, [r0, #0]
 8003ca6:	f100 0418 	addne.w	r4, r0, #24
 8003caa:	2100      	moveq	r1, #0
 8003cac:	f101 0418 	addeq.w	r4, r1, #24
 8003cb0:	f103 0108 	add.w	r1, r3, #8
 8003cb4:	680a      	ldr	r2, [r1, #0]
 8003cb6:	0a12      	lsrs	r2, r2, #8
 8003cb8:	d01e      	beq.n	8003cf8 <forward_cos+0x84>
 8003cba:	684e      	ldr	r6, [r1, #4]
 8003cbc:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003cc0:	4610      	mov	r0, r2
 8003cc2:	1f0f      	subs	r7, r1, #4
 8003cc4:	f010 0103 	ands.w	r1, r0, #3
 8003cc8:	d006      	beq.n	8003cd8 <forward_cos+0x64>
 8003cca:	1e52      	subs	r2, r2, #1
 8003ccc:	f857 c904 	ldr.w	ip, [r7], #-4
 8003cd0:	1e49      	subs	r1, r1, #1
 8003cd2:	fb0c f505 	mul.w	r5, ip, r5
 8003cd6:	d1f8      	bne.n	8003cca <forward_cos+0x56>
 8003cd8:	0880      	lsrs	r0, r0, #2
 8003cda:	d00d      	beq.n	8003cf8 <forward_cos+0x84>
 8003cdc:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003ce0:	3910      	subs	r1, #16
 8003ce2:	68ca      	ldr	r2, [r1, #12]
 8003ce4:	688e      	ldr	r6, [r1, #8]
 8003ce6:	684f      	ldr	r7, [r1, #4]
 8003ce8:	4372      	muls	r2, r6
 8003cea:	f851 6910 	ldr.w	r6, [r1], #-16
 8003cee:	437a      	muls	r2, r7
 8003cf0:	4372      	muls	r2, r6
 8003cf2:	4355      	muls	r5, r2
 8003cf4:	1e40      	subs	r0, r0, #1
 8003cf6:	d1f4      	bne.n	8003ce2 <forward_cos+0x6e>
 8003cf8:	6998      	ldr	r0, [r3, #24]
 8003cfa:	6886      	ldr	r6, [r0, #8]
 8003cfc:	6821      	ldr	r1, [r4, #0]
 8003cfe:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003d02:	1f07      	subs	r7, r0, #4
 8003d04:	6888      	ldr	r0, [r1, #8]
 8003d06:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003d0a:	1f14      	subs	r4, r2, #4
 8003d0c:	42b7      	cmp	r7, r6
 8003d0e:	d309      	bcc.n	8003d24 <forward_cos+0xb0>
 8003d10:	ed97 0a00 	vldr	s0, [r7]
 8003d14:	f00e f9b2 	bl	801207c <cosf>
 8003d18:	ed84 0a00 	vstr	s0, [r4]
 8003d1c:	1f3f      	subs	r7, r7, #4
 8003d1e:	1f24      	subs	r4, r4, #4
 8003d20:	42b7      	cmp	r7, r6
 8003d22:	d2f5      	bcs.n	8003d10 <forward_cos+0x9c>
 8003d24:	b001      	add	sp, #4
 8003d26:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d28 <nl_func_cosh_array_f32>:
 8003d28:	b570      	push	{r4, r5, r6, lr}
 8003d2a:	688c      	ldr	r4, [r1, #8]
 8003d2c:	6880      	ldr	r0, [r0, #8]
 8003d2e:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003d32:	1f0d      	subs	r5, r1, #4
 8003d34:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003d38:	1f0e      	subs	r6, r1, #4
 8003d3a:	42a5      	cmp	r5, r4
 8003d3c:	f0c0 800a 	bcc.w	8003d54 <nl_func_cosh_array_f32+0x2c>
 8003d40:	ed95 0a00 	vldr	s0, [r5]
 8003d44:	f00e ff62 	bl	8012c0c <coshf>
 8003d48:	ed86 0a00 	vstr	s0, [r6]
 8003d4c:	1f2d      	subs	r5, r5, #4
 8003d4e:	1f36      	subs	r6, r6, #4
 8003d50:	42a5      	cmp	r5, r4
 8003d52:	d2f5      	bcs.n	8003d40 <nl_func_cosh_array_f32+0x18>
 8003d54:	bd70      	pop	{r4, r5, r6, pc}
	...

08003d58 <forward_cosh>:
 8003d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d5a:	b081      	sub	sp, #4
 8003d5c:	6942      	ldr	r2, [r0, #20]
 8003d5e:	8811      	ldrh	r1, [r2, #0]
 8003d60:	2900      	cmp	r1, #0
 8003d62:	bf1a      	itte	ne
 8003d64:	6850      	ldrne	r0, [r2, #4]
 8003d66:	1d00      	addne	r0, r0, #4
 8003d68:	2004      	moveq	r0, #4
 8003d6a:	f04f 0501 	mov.w	r5, #1
 8003d6e:	6800      	ldr	r0, [r0, #0]
 8003d70:	2800      	cmp	r0, #0
 8003d72:	bf14      	ite	ne
 8003d74:	6803      	ldrne	r3, [r0, #0]
 8003d76:	2300      	moveq	r3, #0
 8003d78:	2902      	cmp	r1, #2
 8003d7a:	bfa6      	itte	ge
 8003d7c:	6850      	ldrge	r0, [r2, #4]
 8003d7e:	3010      	addge	r0, #16
 8003d80:	2004      	movlt	r0, #4
 8003d82:	6800      	ldr	r0, [r0, #0]
 8003d84:	2800      	cmp	r0, #0
 8003d86:	bf19      	ittee	ne
 8003d88:	6800      	ldrne	r0, [r0, #0]
 8003d8a:	f100 0418 	addne.w	r4, r0, #24
 8003d8e:	2100      	moveq	r1, #0
 8003d90:	f101 0418 	addeq.w	r4, r1, #24
 8003d94:	f103 0108 	add.w	r1, r3, #8
 8003d98:	680a      	ldr	r2, [r1, #0]
 8003d9a:	0a12      	lsrs	r2, r2, #8
 8003d9c:	d01e      	beq.n	8003ddc <forward_cosh+0x84>
 8003d9e:	684e      	ldr	r6, [r1, #4]
 8003da0:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003da4:	4610      	mov	r0, r2
 8003da6:	1f0f      	subs	r7, r1, #4
 8003da8:	f010 0103 	ands.w	r1, r0, #3
 8003dac:	d006      	beq.n	8003dbc <forward_cosh+0x64>
 8003dae:	1e52      	subs	r2, r2, #1
 8003db0:	f857 c904 	ldr.w	ip, [r7], #-4
 8003db4:	1e49      	subs	r1, r1, #1
 8003db6:	fb0c f505 	mul.w	r5, ip, r5
 8003dba:	d1f8      	bne.n	8003dae <forward_cosh+0x56>
 8003dbc:	0880      	lsrs	r0, r0, #2
 8003dbe:	d00d      	beq.n	8003ddc <forward_cosh+0x84>
 8003dc0:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003dc4:	3910      	subs	r1, #16
 8003dc6:	68ca      	ldr	r2, [r1, #12]
 8003dc8:	688e      	ldr	r6, [r1, #8]
 8003dca:	684f      	ldr	r7, [r1, #4]
 8003dcc:	4372      	muls	r2, r6
 8003dce:	f851 6910 	ldr.w	r6, [r1], #-16
 8003dd2:	437a      	muls	r2, r7
 8003dd4:	4372      	muls	r2, r6
 8003dd6:	4355      	muls	r5, r2
 8003dd8:	1e40      	subs	r0, r0, #1
 8003dda:	d1f4      	bne.n	8003dc6 <forward_cosh+0x6e>
 8003ddc:	6998      	ldr	r0, [r3, #24]
 8003dde:	6886      	ldr	r6, [r0, #8]
 8003de0:	6821      	ldr	r1, [r4, #0]
 8003de2:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003de6:	1f07      	subs	r7, r0, #4
 8003de8:	6888      	ldr	r0, [r1, #8]
 8003dea:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003dee:	1f14      	subs	r4, r2, #4
 8003df0:	42b7      	cmp	r7, r6
 8003df2:	d309      	bcc.n	8003e08 <forward_cosh+0xb0>
 8003df4:	ed97 0a00 	vldr	s0, [r7]
 8003df8:	f00e ff08 	bl	8012c0c <coshf>
 8003dfc:	ed84 0a00 	vstr	s0, [r4]
 8003e00:	1f3f      	subs	r7, r7, #4
 8003e02:	1f24      	subs	r4, r4, #4
 8003e04:	42b7      	cmp	r7, r6
 8003e06:	d2f5      	bcs.n	8003df4 <forward_cosh+0x9c>
 8003e08:	b001      	add	sp, #4
 8003e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e0c <nl_func_erf_array_f32>:
 8003e0c:	b570      	push	{r4, r5, r6, lr}
 8003e0e:	688c      	ldr	r4, [r1, #8]
 8003e10:	6880      	ldr	r0, [r0, #8]
 8003e12:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003e16:	1f0d      	subs	r5, r1, #4
 8003e18:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003e1c:	1f0e      	subs	r6, r1, #4
 8003e1e:	42a5      	cmp	r5, r4
 8003e20:	f0c0 800a 	bcc.w	8003e38 <nl_func_erf_array_f32+0x2c>
 8003e24:	ed95 0a00 	vldr	s0, [r5]
 8003e28:	f00e f968 	bl	80120fc <erff>
 8003e2c:	ed86 0a00 	vstr	s0, [r6]
 8003e30:	1f2d      	subs	r5, r5, #4
 8003e32:	1f36      	subs	r6, r6, #4
 8003e34:	42a5      	cmp	r5, r4
 8003e36:	d2f5      	bcs.n	8003e24 <nl_func_erf_array_f32+0x18>
 8003e38:	bd70      	pop	{r4, r5, r6, pc}
	...

08003e3c <forward_erf>:
 8003e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e3e:	b081      	sub	sp, #4
 8003e40:	6942      	ldr	r2, [r0, #20]
 8003e42:	8811      	ldrh	r1, [r2, #0]
 8003e44:	2900      	cmp	r1, #0
 8003e46:	bf1a      	itte	ne
 8003e48:	6850      	ldrne	r0, [r2, #4]
 8003e4a:	1d00      	addne	r0, r0, #4
 8003e4c:	2004      	moveq	r0, #4
 8003e4e:	f04f 0501 	mov.w	r5, #1
 8003e52:	6800      	ldr	r0, [r0, #0]
 8003e54:	2800      	cmp	r0, #0
 8003e56:	bf14      	ite	ne
 8003e58:	6803      	ldrne	r3, [r0, #0]
 8003e5a:	2300      	moveq	r3, #0
 8003e5c:	2902      	cmp	r1, #2
 8003e5e:	bfa6      	itte	ge
 8003e60:	6850      	ldrge	r0, [r2, #4]
 8003e62:	3010      	addge	r0, #16
 8003e64:	2004      	movlt	r0, #4
 8003e66:	6800      	ldr	r0, [r0, #0]
 8003e68:	2800      	cmp	r0, #0
 8003e6a:	bf19      	ittee	ne
 8003e6c:	6800      	ldrne	r0, [r0, #0]
 8003e6e:	f100 0418 	addne.w	r4, r0, #24
 8003e72:	2100      	moveq	r1, #0
 8003e74:	f101 0418 	addeq.w	r4, r1, #24
 8003e78:	f103 0108 	add.w	r1, r3, #8
 8003e7c:	680a      	ldr	r2, [r1, #0]
 8003e7e:	0a12      	lsrs	r2, r2, #8
 8003e80:	d01e      	beq.n	8003ec0 <forward_erf+0x84>
 8003e82:	684e      	ldr	r6, [r1, #4]
 8003e84:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003e88:	4610      	mov	r0, r2
 8003e8a:	1f0f      	subs	r7, r1, #4
 8003e8c:	f010 0103 	ands.w	r1, r0, #3
 8003e90:	d006      	beq.n	8003ea0 <forward_erf+0x64>
 8003e92:	1e52      	subs	r2, r2, #1
 8003e94:	f857 c904 	ldr.w	ip, [r7], #-4
 8003e98:	1e49      	subs	r1, r1, #1
 8003e9a:	fb0c f505 	mul.w	r5, ip, r5
 8003e9e:	d1f8      	bne.n	8003e92 <forward_erf+0x56>
 8003ea0:	0880      	lsrs	r0, r0, #2
 8003ea2:	d00d      	beq.n	8003ec0 <forward_erf+0x84>
 8003ea4:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003ea8:	3910      	subs	r1, #16
 8003eaa:	68ca      	ldr	r2, [r1, #12]
 8003eac:	688e      	ldr	r6, [r1, #8]
 8003eae:	684f      	ldr	r7, [r1, #4]
 8003eb0:	4372      	muls	r2, r6
 8003eb2:	f851 6910 	ldr.w	r6, [r1], #-16
 8003eb6:	437a      	muls	r2, r7
 8003eb8:	4372      	muls	r2, r6
 8003eba:	4355      	muls	r5, r2
 8003ebc:	1e40      	subs	r0, r0, #1
 8003ebe:	d1f4      	bne.n	8003eaa <forward_erf+0x6e>
 8003ec0:	6998      	ldr	r0, [r3, #24]
 8003ec2:	6886      	ldr	r6, [r0, #8]
 8003ec4:	6821      	ldr	r1, [r4, #0]
 8003ec6:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003eca:	1f07      	subs	r7, r0, #4
 8003ecc:	6888      	ldr	r0, [r1, #8]
 8003ece:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003ed2:	1f14      	subs	r4, r2, #4
 8003ed4:	42b7      	cmp	r7, r6
 8003ed6:	d309      	bcc.n	8003eec <forward_erf+0xb0>
 8003ed8:	ed97 0a00 	vldr	s0, [r7]
 8003edc:	f00e f90e 	bl	80120fc <erff>
 8003ee0:	ed84 0a00 	vstr	s0, [r4]
 8003ee4:	1f3f      	subs	r7, r7, #4
 8003ee6:	1f24      	subs	r4, r4, #4
 8003ee8:	42b7      	cmp	r7, r6
 8003eea:	d2f5      	bcs.n	8003ed8 <forward_erf+0x9c>
 8003eec:	b001      	add	sp, #4
 8003eee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ef0 <nl_func_log_array_f32>:
 8003ef0:	b570      	push	{r4, r5, r6, lr}
 8003ef2:	688c      	ldr	r4, [r1, #8]
 8003ef4:	6880      	ldr	r0, [r0, #8]
 8003ef6:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003efa:	1f0d      	subs	r5, r1, #4
 8003efc:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003f00:	1f0e      	subs	r6, r1, #4
 8003f02:	42a5      	cmp	r5, r4
 8003f04:	f0c0 800a 	bcc.w	8003f1c <nl_func_log_array_f32+0x2c>
 8003f08:	ed95 0a00 	vldr	s0, [r5]
 8003f0c:	f00e ffb4 	bl	8012e78 <logf>
 8003f10:	ed86 0a00 	vstr	s0, [r6]
 8003f14:	1f2d      	subs	r5, r5, #4
 8003f16:	1f36      	subs	r6, r6, #4
 8003f18:	42a5      	cmp	r5, r4
 8003f1a:	d2f5      	bcs.n	8003f08 <nl_func_log_array_f32+0x18>
 8003f1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003f20 <forward_log>:
 8003f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f22:	b081      	sub	sp, #4
 8003f24:	6942      	ldr	r2, [r0, #20]
 8003f26:	8811      	ldrh	r1, [r2, #0]
 8003f28:	2900      	cmp	r1, #0
 8003f2a:	bf1a      	itte	ne
 8003f2c:	6850      	ldrne	r0, [r2, #4]
 8003f2e:	1d00      	addne	r0, r0, #4
 8003f30:	2004      	moveq	r0, #4
 8003f32:	f04f 0501 	mov.w	r5, #1
 8003f36:	6800      	ldr	r0, [r0, #0]
 8003f38:	2800      	cmp	r0, #0
 8003f3a:	bf14      	ite	ne
 8003f3c:	6803      	ldrne	r3, [r0, #0]
 8003f3e:	2300      	moveq	r3, #0
 8003f40:	2902      	cmp	r1, #2
 8003f42:	bfa6      	itte	ge
 8003f44:	6850      	ldrge	r0, [r2, #4]
 8003f46:	3010      	addge	r0, #16
 8003f48:	2004      	movlt	r0, #4
 8003f4a:	6800      	ldr	r0, [r0, #0]
 8003f4c:	2800      	cmp	r0, #0
 8003f4e:	bf19      	ittee	ne
 8003f50:	6800      	ldrne	r0, [r0, #0]
 8003f52:	f100 0418 	addne.w	r4, r0, #24
 8003f56:	2100      	moveq	r1, #0
 8003f58:	f101 0418 	addeq.w	r4, r1, #24
 8003f5c:	f103 0108 	add.w	r1, r3, #8
 8003f60:	680a      	ldr	r2, [r1, #0]
 8003f62:	0a12      	lsrs	r2, r2, #8
 8003f64:	d01e      	beq.n	8003fa4 <forward_log+0x84>
 8003f66:	684e      	ldr	r6, [r1, #4]
 8003f68:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003f6c:	4610      	mov	r0, r2
 8003f6e:	1f0f      	subs	r7, r1, #4
 8003f70:	f010 0103 	ands.w	r1, r0, #3
 8003f74:	d006      	beq.n	8003f84 <forward_log+0x64>
 8003f76:	1e52      	subs	r2, r2, #1
 8003f78:	f857 c904 	ldr.w	ip, [r7], #-4
 8003f7c:	1e49      	subs	r1, r1, #1
 8003f7e:	fb0c f505 	mul.w	r5, ip, r5
 8003f82:	d1f8      	bne.n	8003f76 <forward_log+0x56>
 8003f84:	0880      	lsrs	r0, r0, #2
 8003f86:	d00d      	beq.n	8003fa4 <forward_log+0x84>
 8003f88:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003f8c:	3910      	subs	r1, #16
 8003f8e:	68ca      	ldr	r2, [r1, #12]
 8003f90:	688e      	ldr	r6, [r1, #8]
 8003f92:	684f      	ldr	r7, [r1, #4]
 8003f94:	4372      	muls	r2, r6
 8003f96:	f851 6910 	ldr.w	r6, [r1], #-16
 8003f9a:	437a      	muls	r2, r7
 8003f9c:	4372      	muls	r2, r6
 8003f9e:	4355      	muls	r5, r2
 8003fa0:	1e40      	subs	r0, r0, #1
 8003fa2:	d1f4      	bne.n	8003f8e <forward_log+0x6e>
 8003fa4:	6998      	ldr	r0, [r3, #24]
 8003fa6:	6886      	ldr	r6, [r0, #8]
 8003fa8:	6821      	ldr	r1, [r4, #0]
 8003faa:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003fae:	1f07      	subs	r7, r0, #4
 8003fb0:	6888      	ldr	r0, [r1, #8]
 8003fb2:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003fb6:	1f14      	subs	r4, r2, #4
 8003fb8:	42b7      	cmp	r7, r6
 8003fba:	d309      	bcc.n	8003fd0 <forward_log+0xb0>
 8003fbc:	ed97 0a00 	vldr	s0, [r7]
 8003fc0:	f00e ff5a 	bl	8012e78 <logf>
 8003fc4:	ed84 0a00 	vstr	s0, [r4]
 8003fc8:	1f3f      	subs	r7, r7, #4
 8003fca:	1f24      	subs	r4, r4, #4
 8003fcc:	42b7      	cmp	r7, r6
 8003fce:	d2f5      	bcs.n	8003fbc <forward_log+0x9c>
 8003fd0:	b001      	add	sp, #4
 8003fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003fd4 <nl_func_rsqrt_array_f32>:
 8003fd4:	b570      	push	{r4, r5, r6, lr}
 8003fd6:	460c      	mov	r4, r1
 8003fd8:	6880      	ldr	r0, [r0, #8]
 8003fda:	68a1      	ldr	r1, [r4, #8]
 8003fdc:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003fe0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003fe4:	1f1d      	subs	r5, r3, #4
 8003fe6:	1f16      	subs	r6, r2, #4
 8003fe8:	428d      	cmp	r5, r1
 8003fea:	d30e      	bcc.n	800400a <nl_func_rsqrt_array_f32+0x36>
 8003fec:	ed95 0a00 	vldr	s0, [r5]
 8003ff0:	f003 f930 	bl	8007254 <ai_math_sqrt>
 8003ff4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003ff8:	eec0 0a80 	vdiv.f32	s1, s1, s0
 8003ffc:	edc6 0a00 	vstr	s1, [r6]
 8004000:	1f2d      	subs	r5, r5, #4
 8004002:	68a0      	ldr	r0, [r4, #8]
 8004004:	1f36      	subs	r6, r6, #4
 8004006:	4285      	cmp	r5, r0
 8004008:	d2f0      	bcs.n	8003fec <nl_func_rsqrt_array_f32+0x18>
 800400a:	bd70      	pop	{r4, r5, r6, pc}

0800400c <forward_rsqrt>:
 800400c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800400e:	b081      	sub	sp, #4
 8004010:	6942      	ldr	r2, [r0, #20]
 8004012:	8811      	ldrh	r1, [r2, #0]
 8004014:	2900      	cmp	r1, #0
 8004016:	bf1a      	itte	ne
 8004018:	6850      	ldrne	r0, [r2, #4]
 800401a:	1d00      	addne	r0, r0, #4
 800401c:	2004      	moveq	r0, #4
 800401e:	f04f 0501 	mov.w	r5, #1
 8004022:	6800      	ldr	r0, [r0, #0]
 8004024:	2800      	cmp	r0, #0
 8004026:	bf14      	ite	ne
 8004028:	6803      	ldrne	r3, [r0, #0]
 800402a:	2300      	moveq	r3, #0
 800402c:	2902      	cmp	r1, #2
 800402e:	bfa6      	itte	ge
 8004030:	6850      	ldrge	r0, [r2, #4]
 8004032:	3010      	addge	r0, #16
 8004034:	2004      	movlt	r0, #4
 8004036:	6800      	ldr	r0, [r0, #0]
 8004038:	2800      	cmp	r0, #0
 800403a:	bf19      	ittee	ne
 800403c:	6800      	ldrne	r0, [r0, #0]
 800403e:	f100 0418 	addne.w	r4, r0, #24
 8004042:	2100      	moveq	r1, #0
 8004044:	f101 0418 	addeq.w	r4, r1, #24
 8004048:	f103 0108 	add.w	r1, r3, #8
 800404c:	680a      	ldr	r2, [r1, #0]
 800404e:	0a12      	lsrs	r2, r2, #8
 8004050:	d01e      	beq.n	8004090 <forward_rsqrt+0x84>
 8004052:	684e      	ldr	r6, [r1, #4]
 8004054:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004058:	4610      	mov	r0, r2
 800405a:	1f0f      	subs	r7, r1, #4
 800405c:	f010 0103 	ands.w	r1, r0, #3
 8004060:	d006      	beq.n	8004070 <forward_rsqrt+0x64>
 8004062:	1e52      	subs	r2, r2, #1
 8004064:	f857 c904 	ldr.w	ip, [r7], #-4
 8004068:	1e49      	subs	r1, r1, #1
 800406a:	fb0c f505 	mul.w	r5, ip, r5
 800406e:	d1f8      	bne.n	8004062 <forward_rsqrt+0x56>
 8004070:	0880      	lsrs	r0, r0, #2
 8004072:	d00d      	beq.n	8004090 <forward_rsqrt+0x84>
 8004074:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004078:	3910      	subs	r1, #16
 800407a:	68ca      	ldr	r2, [r1, #12]
 800407c:	688e      	ldr	r6, [r1, #8]
 800407e:	684f      	ldr	r7, [r1, #4]
 8004080:	4372      	muls	r2, r6
 8004082:	f851 6910 	ldr.w	r6, [r1], #-16
 8004086:	437a      	muls	r2, r7
 8004088:	4372      	muls	r2, r6
 800408a:	4355      	muls	r5, r2
 800408c:	1e40      	subs	r0, r0, #1
 800408e:	d1f4      	bne.n	800407a <forward_rsqrt+0x6e>
 8004090:	699e      	ldr	r6, [r3, #24]
 8004092:	68b0      	ldr	r0, [r6, #8]
 8004094:	6822      	ldr	r2, [r4, #0]
 8004096:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 800409a:	1f0f      	subs	r7, r1, #4
 800409c:	6891      	ldr	r1, [r2, #8]
 800409e:	eb01 0385 	add.w	r3, r1, r5, lsl #2
 80040a2:	1f1c      	subs	r4, r3, #4
 80040a4:	4287      	cmp	r7, r0
 80040a6:	d30e      	bcc.n	80040c6 <forward_rsqrt+0xba>
 80040a8:	ed97 0a00 	vldr	s0, [r7]
 80040ac:	f003 f8d2 	bl	8007254 <ai_math_sqrt>
 80040b0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80040b4:	eec0 0a80 	vdiv.f32	s1, s1, s0
 80040b8:	edc4 0a00 	vstr	s1, [r4]
 80040bc:	1f3f      	subs	r7, r7, #4
 80040be:	68b0      	ldr	r0, [r6, #8]
 80040c0:	1f24      	subs	r4, r4, #4
 80040c2:	4287      	cmp	r7, r0
 80040c4:	d2f0      	bcs.n	80040a8 <forward_rsqrt+0x9c>
 80040c6:	b001      	add	sp, #4
 80040c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080040cc <nl_func_sin_array_f32>:
 80040cc:	b570      	push	{r4, r5, r6, lr}
 80040ce:	688c      	ldr	r4, [r1, #8]
 80040d0:	6880      	ldr	r0, [r0, #8]
 80040d2:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80040d6:	1f0d      	subs	r5, r1, #4
 80040d8:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80040dc:	1f0e      	subs	r6, r1, #4
 80040de:	42a5      	cmp	r5, r4
 80040e0:	f0c0 800a 	bcc.w	80040f8 <nl_func_sin_array_f32+0x2c>
 80040e4:	ed95 0a00 	vldr	s0, [r5]
 80040e8:	f00e fb60 	bl	80127ac <sinf>
 80040ec:	ed86 0a00 	vstr	s0, [r6]
 80040f0:	1f2d      	subs	r5, r5, #4
 80040f2:	1f36      	subs	r6, r6, #4
 80040f4:	42a5      	cmp	r5, r4
 80040f6:	d2f5      	bcs.n	80040e4 <nl_func_sin_array_f32+0x18>
 80040f8:	bd70      	pop	{r4, r5, r6, pc}
	...

080040fc <forward_sin>:
 80040fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040fe:	b081      	sub	sp, #4
 8004100:	6942      	ldr	r2, [r0, #20]
 8004102:	8811      	ldrh	r1, [r2, #0]
 8004104:	2900      	cmp	r1, #0
 8004106:	bf1a      	itte	ne
 8004108:	6850      	ldrne	r0, [r2, #4]
 800410a:	1d00      	addne	r0, r0, #4
 800410c:	2004      	moveq	r0, #4
 800410e:	f04f 0501 	mov.w	r5, #1
 8004112:	6800      	ldr	r0, [r0, #0]
 8004114:	2800      	cmp	r0, #0
 8004116:	bf14      	ite	ne
 8004118:	6803      	ldrne	r3, [r0, #0]
 800411a:	2300      	moveq	r3, #0
 800411c:	2902      	cmp	r1, #2
 800411e:	bfa6      	itte	ge
 8004120:	6850      	ldrge	r0, [r2, #4]
 8004122:	3010      	addge	r0, #16
 8004124:	2004      	movlt	r0, #4
 8004126:	6800      	ldr	r0, [r0, #0]
 8004128:	2800      	cmp	r0, #0
 800412a:	bf19      	ittee	ne
 800412c:	6800      	ldrne	r0, [r0, #0]
 800412e:	f100 0418 	addne.w	r4, r0, #24
 8004132:	2100      	moveq	r1, #0
 8004134:	f101 0418 	addeq.w	r4, r1, #24
 8004138:	f103 0108 	add.w	r1, r3, #8
 800413c:	680a      	ldr	r2, [r1, #0]
 800413e:	0a12      	lsrs	r2, r2, #8
 8004140:	d01e      	beq.n	8004180 <forward_sin+0x84>
 8004142:	684e      	ldr	r6, [r1, #4]
 8004144:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004148:	4610      	mov	r0, r2
 800414a:	1f0f      	subs	r7, r1, #4
 800414c:	f010 0103 	ands.w	r1, r0, #3
 8004150:	d006      	beq.n	8004160 <forward_sin+0x64>
 8004152:	1e52      	subs	r2, r2, #1
 8004154:	f857 c904 	ldr.w	ip, [r7], #-4
 8004158:	1e49      	subs	r1, r1, #1
 800415a:	fb0c f505 	mul.w	r5, ip, r5
 800415e:	d1f8      	bne.n	8004152 <forward_sin+0x56>
 8004160:	0880      	lsrs	r0, r0, #2
 8004162:	d00d      	beq.n	8004180 <forward_sin+0x84>
 8004164:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004168:	3910      	subs	r1, #16
 800416a:	68ca      	ldr	r2, [r1, #12]
 800416c:	688e      	ldr	r6, [r1, #8]
 800416e:	684f      	ldr	r7, [r1, #4]
 8004170:	4372      	muls	r2, r6
 8004172:	f851 6910 	ldr.w	r6, [r1], #-16
 8004176:	437a      	muls	r2, r7
 8004178:	4372      	muls	r2, r6
 800417a:	4355      	muls	r5, r2
 800417c:	1e40      	subs	r0, r0, #1
 800417e:	d1f4      	bne.n	800416a <forward_sin+0x6e>
 8004180:	6998      	ldr	r0, [r3, #24]
 8004182:	6886      	ldr	r6, [r0, #8]
 8004184:	6821      	ldr	r1, [r4, #0]
 8004186:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800418a:	1f07      	subs	r7, r0, #4
 800418c:	6888      	ldr	r0, [r1, #8]
 800418e:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8004192:	1f14      	subs	r4, r2, #4
 8004194:	42b7      	cmp	r7, r6
 8004196:	d309      	bcc.n	80041ac <forward_sin+0xb0>
 8004198:	ed97 0a00 	vldr	s0, [r7]
 800419c:	f00e fb06 	bl	80127ac <sinf>
 80041a0:	ed84 0a00 	vstr	s0, [r4]
 80041a4:	1f3f      	subs	r7, r7, #4
 80041a6:	1f24      	subs	r4, r4, #4
 80041a8:	42b7      	cmp	r7, r6
 80041aa:	d2f5      	bcs.n	8004198 <forward_sin+0x9c>
 80041ac:	b001      	add	sp, #4
 80041ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080041b0 <nl_func_sinh_array_f32>:
 80041b0:	b570      	push	{r4, r5, r6, lr}
 80041b2:	688c      	ldr	r4, [r1, #8]
 80041b4:	6880      	ldr	r0, [r0, #8]
 80041b6:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80041ba:	1f0d      	subs	r5, r1, #4
 80041bc:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80041c0:	1f0e      	subs	r6, r1, #4
 80041c2:	42a5      	cmp	r5, r4
 80041c4:	f0c0 800a 	bcc.w	80041dc <nl_func_sinh_array_f32+0x2c>
 80041c8:	ed95 0a00 	vldr	s0, [r5]
 80041cc:	f00f f82e 	bl	801322c <sinhf>
 80041d0:	ed86 0a00 	vstr	s0, [r6]
 80041d4:	1f2d      	subs	r5, r5, #4
 80041d6:	1f36      	subs	r6, r6, #4
 80041d8:	42a5      	cmp	r5, r4
 80041da:	d2f5      	bcs.n	80041c8 <nl_func_sinh_array_f32+0x18>
 80041dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080041e0 <forward_sinh>:
 80041e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041e2:	b081      	sub	sp, #4
 80041e4:	6942      	ldr	r2, [r0, #20]
 80041e6:	8811      	ldrh	r1, [r2, #0]
 80041e8:	2900      	cmp	r1, #0
 80041ea:	bf1a      	itte	ne
 80041ec:	6850      	ldrne	r0, [r2, #4]
 80041ee:	1d00      	addne	r0, r0, #4
 80041f0:	2004      	moveq	r0, #4
 80041f2:	f04f 0501 	mov.w	r5, #1
 80041f6:	6800      	ldr	r0, [r0, #0]
 80041f8:	2800      	cmp	r0, #0
 80041fa:	bf14      	ite	ne
 80041fc:	6803      	ldrne	r3, [r0, #0]
 80041fe:	2300      	moveq	r3, #0
 8004200:	2902      	cmp	r1, #2
 8004202:	bfa6      	itte	ge
 8004204:	6850      	ldrge	r0, [r2, #4]
 8004206:	3010      	addge	r0, #16
 8004208:	2004      	movlt	r0, #4
 800420a:	6800      	ldr	r0, [r0, #0]
 800420c:	2800      	cmp	r0, #0
 800420e:	bf19      	ittee	ne
 8004210:	6800      	ldrne	r0, [r0, #0]
 8004212:	f100 0418 	addne.w	r4, r0, #24
 8004216:	2100      	moveq	r1, #0
 8004218:	f101 0418 	addeq.w	r4, r1, #24
 800421c:	f103 0108 	add.w	r1, r3, #8
 8004220:	680a      	ldr	r2, [r1, #0]
 8004222:	0a12      	lsrs	r2, r2, #8
 8004224:	d01e      	beq.n	8004264 <forward_sinh+0x84>
 8004226:	684e      	ldr	r6, [r1, #4]
 8004228:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800422c:	4610      	mov	r0, r2
 800422e:	1f0f      	subs	r7, r1, #4
 8004230:	f010 0103 	ands.w	r1, r0, #3
 8004234:	d006      	beq.n	8004244 <forward_sinh+0x64>
 8004236:	1e52      	subs	r2, r2, #1
 8004238:	f857 c904 	ldr.w	ip, [r7], #-4
 800423c:	1e49      	subs	r1, r1, #1
 800423e:	fb0c f505 	mul.w	r5, ip, r5
 8004242:	d1f8      	bne.n	8004236 <forward_sinh+0x56>
 8004244:	0880      	lsrs	r0, r0, #2
 8004246:	d00d      	beq.n	8004264 <forward_sinh+0x84>
 8004248:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800424c:	3910      	subs	r1, #16
 800424e:	68ca      	ldr	r2, [r1, #12]
 8004250:	688e      	ldr	r6, [r1, #8]
 8004252:	684f      	ldr	r7, [r1, #4]
 8004254:	4372      	muls	r2, r6
 8004256:	f851 6910 	ldr.w	r6, [r1], #-16
 800425a:	437a      	muls	r2, r7
 800425c:	4372      	muls	r2, r6
 800425e:	4355      	muls	r5, r2
 8004260:	1e40      	subs	r0, r0, #1
 8004262:	d1f4      	bne.n	800424e <forward_sinh+0x6e>
 8004264:	6998      	ldr	r0, [r3, #24]
 8004266:	6886      	ldr	r6, [r0, #8]
 8004268:	6821      	ldr	r1, [r4, #0]
 800426a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800426e:	1f07      	subs	r7, r0, #4
 8004270:	6888      	ldr	r0, [r1, #8]
 8004272:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8004276:	1f14      	subs	r4, r2, #4
 8004278:	42b7      	cmp	r7, r6
 800427a:	d309      	bcc.n	8004290 <forward_sinh+0xb0>
 800427c:	ed97 0a00 	vldr	s0, [r7]
 8004280:	f00e ffd4 	bl	801322c <sinhf>
 8004284:	ed84 0a00 	vstr	s0, [r4]
 8004288:	1f3f      	subs	r7, r7, #4
 800428a:	1f24      	subs	r4, r4, #4
 800428c:	42b7      	cmp	r7, r6
 800428e:	d2f5      	bcs.n	800427c <forward_sinh+0x9c>
 8004290:	b001      	add	sp, #4
 8004292:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004294 <nl_func_tan_array_f32>:
 8004294:	b570      	push	{r4, r5, r6, lr}
 8004296:	688c      	ldr	r4, [r1, #8]
 8004298:	6880      	ldr	r0, [r0, #8]
 800429a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800429e:	1f0d      	subs	r5, r1, #4
 80042a0:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80042a4:	1f0e      	subs	r6, r1, #4
 80042a6:	42a5      	cmp	r5, r4
 80042a8:	f0c0 800a 	bcc.w	80042c0 <nl_func_tan_array_f32+0x2c>
 80042ac:	ed95 0a00 	vldr	s0, [r5]
 80042b0:	f00e fabe 	bl	8012830 <tanf>
 80042b4:	ed86 0a00 	vstr	s0, [r6]
 80042b8:	1f2d      	subs	r5, r5, #4
 80042ba:	1f36      	subs	r6, r6, #4
 80042bc:	42a5      	cmp	r5, r4
 80042be:	d2f5      	bcs.n	80042ac <nl_func_tan_array_f32+0x18>
 80042c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080042c4 <forward_tan>:
 80042c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042c6:	b081      	sub	sp, #4
 80042c8:	6942      	ldr	r2, [r0, #20]
 80042ca:	8811      	ldrh	r1, [r2, #0]
 80042cc:	2900      	cmp	r1, #0
 80042ce:	bf1a      	itte	ne
 80042d0:	6850      	ldrne	r0, [r2, #4]
 80042d2:	1d00      	addne	r0, r0, #4
 80042d4:	2004      	moveq	r0, #4
 80042d6:	f04f 0501 	mov.w	r5, #1
 80042da:	6800      	ldr	r0, [r0, #0]
 80042dc:	2800      	cmp	r0, #0
 80042de:	bf14      	ite	ne
 80042e0:	6803      	ldrne	r3, [r0, #0]
 80042e2:	2300      	moveq	r3, #0
 80042e4:	2902      	cmp	r1, #2
 80042e6:	bfa6      	itte	ge
 80042e8:	6850      	ldrge	r0, [r2, #4]
 80042ea:	3010      	addge	r0, #16
 80042ec:	2004      	movlt	r0, #4
 80042ee:	6800      	ldr	r0, [r0, #0]
 80042f0:	2800      	cmp	r0, #0
 80042f2:	bf19      	ittee	ne
 80042f4:	6800      	ldrne	r0, [r0, #0]
 80042f6:	f100 0418 	addne.w	r4, r0, #24
 80042fa:	2100      	moveq	r1, #0
 80042fc:	f101 0418 	addeq.w	r4, r1, #24
 8004300:	f103 0108 	add.w	r1, r3, #8
 8004304:	680a      	ldr	r2, [r1, #0]
 8004306:	0a12      	lsrs	r2, r2, #8
 8004308:	d01e      	beq.n	8004348 <forward_tan+0x84>
 800430a:	684e      	ldr	r6, [r1, #4]
 800430c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004310:	4610      	mov	r0, r2
 8004312:	1f0f      	subs	r7, r1, #4
 8004314:	f010 0103 	ands.w	r1, r0, #3
 8004318:	d006      	beq.n	8004328 <forward_tan+0x64>
 800431a:	1e52      	subs	r2, r2, #1
 800431c:	f857 c904 	ldr.w	ip, [r7], #-4
 8004320:	1e49      	subs	r1, r1, #1
 8004322:	fb0c f505 	mul.w	r5, ip, r5
 8004326:	d1f8      	bne.n	800431a <forward_tan+0x56>
 8004328:	0880      	lsrs	r0, r0, #2
 800432a:	d00d      	beq.n	8004348 <forward_tan+0x84>
 800432c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004330:	3910      	subs	r1, #16
 8004332:	68ca      	ldr	r2, [r1, #12]
 8004334:	688e      	ldr	r6, [r1, #8]
 8004336:	684f      	ldr	r7, [r1, #4]
 8004338:	4372      	muls	r2, r6
 800433a:	f851 6910 	ldr.w	r6, [r1], #-16
 800433e:	437a      	muls	r2, r7
 8004340:	4372      	muls	r2, r6
 8004342:	4355      	muls	r5, r2
 8004344:	1e40      	subs	r0, r0, #1
 8004346:	d1f4      	bne.n	8004332 <forward_tan+0x6e>
 8004348:	6998      	ldr	r0, [r3, #24]
 800434a:	6886      	ldr	r6, [r0, #8]
 800434c:	6821      	ldr	r1, [r4, #0]
 800434e:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8004352:	1f07      	subs	r7, r0, #4
 8004354:	6888      	ldr	r0, [r1, #8]
 8004356:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 800435a:	1f14      	subs	r4, r2, #4
 800435c:	42b7      	cmp	r7, r6
 800435e:	d309      	bcc.n	8004374 <forward_tan+0xb0>
 8004360:	ed97 0a00 	vldr	s0, [r7]
 8004364:	f00e fa64 	bl	8012830 <tanf>
 8004368:	ed84 0a00 	vstr	s0, [r4]
 800436c:	1f3f      	subs	r7, r7, #4
 800436e:	1f24      	subs	r4, r4, #4
 8004370:	42b7      	cmp	r7, r6
 8004372:	d2f5      	bcs.n	8004360 <forward_tan+0x9c>
 8004374:	b001      	add	sp, #4
 8004376:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004378 <nl_func_abs_array_f32>:
 8004378:	6889      	ldr	r1, [r1, #8]
 800437a:	6880      	ldr	r0, [r0, #8]
 800437c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8004380:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004384:	1f1b      	subs	r3, r3, #4
 8004386:	1f10      	subs	r0, r2, #4
 8004388:	428b      	cmp	r3, r1
 800438a:	d307      	bcc.n	800439c <nl_func_abs_array_f32+0x24>
 800438c:	f853 c904 	ldr.w	ip, [r3], #-4
 8004390:	f02c 4200 	bic.w	r2, ip, #2147483648	; 0x80000000
 8004394:	428b      	cmp	r3, r1
 8004396:	f840 2904 	str.w	r2, [r0], #-4
 800439a:	d2f7      	bcs.n	800438c <nl_func_abs_array_f32+0x14>
 800439c:	4770      	bx	lr
	...

080043a0 <forward_abs>:
 80043a0:	b4f0      	push	{r4, r5, r6, r7}
 80043a2:	6942      	ldr	r2, [r0, #20]
 80043a4:	8811      	ldrh	r1, [r2, #0]
 80043a6:	2900      	cmp	r1, #0
 80043a8:	bf1a      	itte	ne
 80043aa:	6850      	ldrne	r0, [r2, #4]
 80043ac:	1d00      	addne	r0, r0, #4
 80043ae:	2004      	moveq	r0, #4
 80043b0:	f04f 0501 	mov.w	r5, #1
 80043b4:	6800      	ldr	r0, [r0, #0]
 80043b6:	2800      	cmp	r0, #0
 80043b8:	bf14      	ite	ne
 80043ba:	6803      	ldrne	r3, [r0, #0]
 80043bc:	2300      	moveq	r3, #0
 80043be:	2902      	cmp	r1, #2
 80043c0:	bfa6      	itte	ge
 80043c2:	6850      	ldrge	r0, [r2, #4]
 80043c4:	3010      	addge	r0, #16
 80043c6:	2004      	movlt	r0, #4
 80043c8:	6800      	ldr	r0, [r0, #0]
 80043ca:	2800      	cmp	r0, #0
 80043cc:	bf19      	ittee	ne
 80043ce:	6800      	ldrne	r0, [r0, #0]
 80043d0:	f100 0418 	addne.w	r4, r0, #24
 80043d4:	2100      	moveq	r1, #0
 80043d6:	f101 0418 	addeq.w	r4, r1, #24
 80043da:	f103 0108 	add.w	r1, r3, #8
 80043de:	680a      	ldr	r2, [r1, #0]
 80043e0:	0a12      	lsrs	r2, r2, #8
 80043e2:	d01e      	beq.n	8004422 <forward_abs+0x82>
 80043e4:	684e      	ldr	r6, [r1, #4]
 80043e6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80043ea:	4610      	mov	r0, r2
 80043ec:	1f0f      	subs	r7, r1, #4
 80043ee:	f010 0103 	ands.w	r1, r0, #3
 80043f2:	d006      	beq.n	8004402 <forward_abs+0x62>
 80043f4:	1e52      	subs	r2, r2, #1
 80043f6:	f857 c904 	ldr.w	ip, [r7], #-4
 80043fa:	1e49      	subs	r1, r1, #1
 80043fc:	fb0c f505 	mul.w	r5, ip, r5
 8004400:	d1f8      	bne.n	80043f4 <forward_abs+0x54>
 8004402:	0880      	lsrs	r0, r0, #2
 8004404:	d00d      	beq.n	8004422 <forward_abs+0x82>
 8004406:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800440a:	3910      	subs	r1, #16
 800440c:	68ca      	ldr	r2, [r1, #12]
 800440e:	688e      	ldr	r6, [r1, #8]
 8004410:	684f      	ldr	r7, [r1, #4]
 8004412:	4372      	muls	r2, r6
 8004414:	f851 6910 	ldr.w	r6, [r1], #-16
 8004418:	437a      	muls	r2, r7
 800441a:	4372      	muls	r2, r6
 800441c:	4355      	muls	r5, r2
 800441e:	1e40      	subs	r0, r0, #1
 8004420:	d1f4      	bne.n	800440c <forward_abs+0x6c>
 8004422:	6998      	ldr	r0, [r3, #24]
 8004424:	6822      	ldr	r2, [r4, #0]
 8004426:	6880      	ldr	r0, [r0, #8]
 8004428:	6893      	ldr	r3, [r2, #8]
 800442a:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 800442e:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8004432:	1f09      	subs	r1, r1, #4
 8004434:	1f22      	subs	r2, r4, #4
 8004436:	4281      	cmp	r1, r0
 8004438:	f0c0 8008 	bcc.w	800444c <forward_abs+0xac>
 800443c:	f851 3904 	ldr.w	r3, [r1], #-4
 8004440:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004444:	4281      	cmp	r1, r0
 8004446:	f842 3904 	str.w	r3, [r2], #-4
 800444a:	d2f7      	bcs.n	800443c <forward_abs+0x9c>
 800444c:	bcf0      	pop	{r4, r5, r6, r7}
 800444e:	4770      	bx	lr

08004450 <nl_func_ceil_array_f32>:
 8004450:	b570      	push	{r4, r5, r6, lr}
 8004452:	688c      	ldr	r4, [r1, #8]
 8004454:	6880      	ldr	r0, [r0, #8]
 8004456:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800445a:	1f0d      	subs	r5, r1, #4
 800445c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8004460:	1f0e      	subs	r6, r1, #4
 8004462:	42a5      	cmp	r5, r4
 8004464:	f0c0 800a 	bcc.w	800447c <nl_func_ceil_array_f32+0x2c>
 8004468:	ed95 0a00 	vldr	s0, [r5]
 800446c:	f00d fdc6 	bl	8011ffc <ceilf>
 8004470:	ed86 0a00 	vstr	s0, [r6]
 8004474:	1f2d      	subs	r5, r5, #4
 8004476:	1f36      	subs	r6, r6, #4
 8004478:	42a5      	cmp	r5, r4
 800447a:	d2f5      	bcs.n	8004468 <nl_func_ceil_array_f32+0x18>
 800447c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004480 <forward_ceil>:
 8004480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004482:	b081      	sub	sp, #4
 8004484:	6942      	ldr	r2, [r0, #20]
 8004486:	8811      	ldrh	r1, [r2, #0]
 8004488:	2900      	cmp	r1, #0
 800448a:	bf1a      	itte	ne
 800448c:	6850      	ldrne	r0, [r2, #4]
 800448e:	1d00      	addne	r0, r0, #4
 8004490:	2004      	moveq	r0, #4
 8004492:	f04f 0501 	mov.w	r5, #1
 8004496:	6800      	ldr	r0, [r0, #0]
 8004498:	2800      	cmp	r0, #0
 800449a:	bf14      	ite	ne
 800449c:	6803      	ldrne	r3, [r0, #0]
 800449e:	2300      	moveq	r3, #0
 80044a0:	2902      	cmp	r1, #2
 80044a2:	bfa6      	itte	ge
 80044a4:	6850      	ldrge	r0, [r2, #4]
 80044a6:	3010      	addge	r0, #16
 80044a8:	2004      	movlt	r0, #4
 80044aa:	6800      	ldr	r0, [r0, #0]
 80044ac:	2800      	cmp	r0, #0
 80044ae:	bf19      	ittee	ne
 80044b0:	6800      	ldrne	r0, [r0, #0]
 80044b2:	f100 0418 	addne.w	r4, r0, #24
 80044b6:	2100      	moveq	r1, #0
 80044b8:	f101 0418 	addeq.w	r4, r1, #24
 80044bc:	f103 0108 	add.w	r1, r3, #8
 80044c0:	680a      	ldr	r2, [r1, #0]
 80044c2:	0a12      	lsrs	r2, r2, #8
 80044c4:	d01e      	beq.n	8004504 <forward_ceil+0x84>
 80044c6:	684e      	ldr	r6, [r1, #4]
 80044c8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80044cc:	4610      	mov	r0, r2
 80044ce:	1f0f      	subs	r7, r1, #4
 80044d0:	f010 0103 	ands.w	r1, r0, #3
 80044d4:	d006      	beq.n	80044e4 <forward_ceil+0x64>
 80044d6:	1e52      	subs	r2, r2, #1
 80044d8:	f857 c904 	ldr.w	ip, [r7], #-4
 80044dc:	1e49      	subs	r1, r1, #1
 80044de:	fb0c f505 	mul.w	r5, ip, r5
 80044e2:	d1f8      	bne.n	80044d6 <forward_ceil+0x56>
 80044e4:	0880      	lsrs	r0, r0, #2
 80044e6:	d00d      	beq.n	8004504 <forward_ceil+0x84>
 80044e8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80044ec:	3910      	subs	r1, #16
 80044ee:	68ca      	ldr	r2, [r1, #12]
 80044f0:	688e      	ldr	r6, [r1, #8]
 80044f2:	684f      	ldr	r7, [r1, #4]
 80044f4:	4372      	muls	r2, r6
 80044f6:	f851 6910 	ldr.w	r6, [r1], #-16
 80044fa:	437a      	muls	r2, r7
 80044fc:	4372      	muls	r2, r6
 80044fe:	4355      	muls	r5, r2
 8004500:	1e40      	subs	r0, r0, #1
 8004502:	d1f4      	bne.n	80044ee <forward_ceil+0x6e>
 8004504:	6998      	ldr	r0, [r3, #24]
 8004506:	6886      	ldr	r6, [r0, #8]
 8004508:	6821      	ldr	r1, [r4, #0]
 800450a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800450e:	1f07      	subs	r7, r0, #4
 8004510:	6888      	ldr	r0, [r1, #8]
 8004512:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8004516:	1f14      	subs	r4, r2, #4
 8004518:	42b7      	cmp	r7, r6
 800451a:	d309      	bcc.n	8004530 <forward_ceil+0xb0>
 800451c:	ed97 0a00 	vldr	s0, [r7]
 8004520:	f00d fd6c 	bl	8011ffc <ceilf>
 8004524:	ed84 0a00 	vstr	s0, [r4]
 8004528:	1f3f      	subs	r7, r7, #4
 800452a:	1f24      	subs	r4, r4, #4
 800452c:	42b7      	cmp	r7, r6
 800452e:	d2f5      	bcs.n	800451c <forward_ceil+0x9c>
 8004530:	b001      	add	sp, #4
 8004532:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004534 <nl_func_floor_array_f32>:
 8004534:	b570      	push	{r4, r5, r6, lr}
 8004536:	688c      	ldr	r4, [r1, #8]
 8004538:	6880      	ldr	r0, [r0, #8]
 800453a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800453e:	1f0d      	subs	r5, r1, #4
 8004540:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8004544:	1f0e      	subs	r6, r1, #4
 8004546:	42a5      	cmp	r5, r4
 8004548:	f0c0 800a 	bcc.w	8004560 <nl_func_floor_array_f32+0x2c>
 800454c:	ed95 0a00 	vldr	s0, [r5]
 8004550:	f00d ffbc 	bl	80124cc <floorf>
 8004554:	ed86 0a00 	vstr	s0, [r6]
 8004558:	1f2d      	subs	r5, r5, #4
 800455a:	1f36      	subs	r6, r6, #4
 800455c:	42a5      	cmp	r5, r4
 800455e:	d2f5      	bcs.n	800454c <nl_func_floor_array_f32+0x18>
 8004560:	bd70      	pop	{r4, r5, r6, pc}
	...

08004564 <forward_floor>:
 8004564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004566:	b081      	sub	sp, #4
 8004568:	6942      	ldr	r2, [r0, #20]
 800456a:	8811      	ldrh	r1, [r2, #0]
 800456c:	2900      	cmp	r1, #0
 800456e:	bf1a      	itte	ne
 8004570:	6850      	ldrne	r0, [r2, #4]
 8004572:	1d00      	addne	r0, r0, #4
 8004574:	2004      	moveq	r0, #4
 8004576:	f04f 0501 	mov.w	r5, #1
 800457a:	6800      	ldr	r0, [r0, #0]
 800457c:	2800      	cmp	r0, #0
 800457e:	bf14      	ite	ne
 8004580:	6803      	ldrne	r3, [r0, #0]
 8004582:	2300      	moveq	r3, #0
 8004584:	2902      	cmp	r1, #2
 8004586:	bfa6      	itte	ge
 8004588:	6850      	ldrge	r0, [r2, #4]
 800458a:	3010      	addge	r0, #16
 800458c:	2004      	movlt	r0, #4
 800458e:	6800      	ldr	r0, [r0, #0]
 8004590:	2800      	cmp	r0, #0
 8004592:	bf19      	ittee	ne
 8004594:	6800      	ldrne	r0, [r0, #0]
 8004596:	f100 0418 	addne.w	r4, r0, #24
 800459a:	2100      	moveq	r1, #0
 800459c:	f101 0418 	addeq.w	r4, r1, #24
 80045a0:	f103 0108 	add.w	r1, r3, #8
 80045a4:	680a      	ldr	r2, [r1, #0]
 80045a6:	0a12      	lsrs	r2, r2, #8
 80045a8:	d01e      	beq.n	80045e8 <forward_floor+0x84>
 80045aa:	684e      	ldr	r6, [r1, #4]
 80045ac:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80045b0:	4610      	mov	r0, r2
 80045b2:	1f0f      	subs	r7, r1, #4
 80045b4:	f010 0103 	ands.w	r1, r0, #3
 80045b8:	d006      	beq.n	80045c8 <forward_floor+0x64>
 80045ba:	1e52      	subs	r2, r2, #1
 80045bc:	f857 c904 	ldr.w	ip, [r7], #-4
 80045c0:	1e49      	subs	r1, r1, #1
 80045c2:	fb0c f505 	mul.w	r5, ip, r5
 80045c6:	d1f8      	bne.n	80045ba <forward_floor+0x56>
 80045c8:	0880      	lsrs	r0, r0, #2
 80045ca:	d00d      	beq.n	80045e8 <forward_floor+0x84>
 80045cc:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80045d0:	3910      	subs	r1, #16
 80045d2:	68ca      	ldr	r2, [r1, #12]
 80045d4:	688e      	ldr	r6, [r1, #8]
 80045d6:	684f      	ldr	r7, [r1, #4]
 80045d8:	4372      	muls	r2, r6
 80045da:	f851 6910 	ldr.w	r6, [r1], #-16
 80045de:	437a      	muls	r2, r7
 80045e0:	4372      	muls	r2, r6
 80045e2:	4355      	muls	r5, r2
 80045e4:	1e40      	subs	r0, r0, #1
 80045e6:	d1f4      	bne.n	80045d2 <forward_floor+0x6e>
 80045e8:	6998      	ldr	r0, [r3, #24]
 80045ea:	6886      	ldr	r6, [r0, #8]
 80045ec:	6821      	ldr	r1, [r4, #0]
 80045ee:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80045f2:	1f07      	subs	r7, r0, #4
 80045f4:	6888      	ldr	r0, [r1, #8]
 80045f6:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 80045fa:	1f14      	subs	r4, r2, #4
 80045fc:	42b7      	cmp	r7, r6
 80045fe:	d309      	bcc.n	8004614 <forward_floor+0xb0>
 8004600:	ed97 0a00 	vldr	s0, [r7]
 8004604:	f00d ff62 	bl	80124cc <floorf>
 8004608:	ed84 0a00 	vstr	s0, [r4]
 800460c:	1f3f      	subs	r7, r7, #4
 800460e:	1f24      	subs	r4, r4, #4
 8004610:	42b7      	cmp	r7, r6
 8004612:	d2f5      	bcs.n	8004600 <forward_floor+0x9c>
 8004614:	b001      	add	sp, #4
 8004616:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004618 <nl_func_round_array_f32>:
 8004618:	b570      	push	{r4, r5, r6, lr}
 800461a:	688c      	ldr	r4, [r1, #8]
 800461c:	6880      	ldr	r0, [r0, #8]
 800461e:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8004622:	1f0d      	subs	r5, r1, #4
 8004624:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8004628:	1f0e      	subs	r6, r1, #4
 800462a:	42a5      	cmp	r5, r4
 800462c:	f0c0 800a 	bcc.w	8004644 <nl_func_round_array_f32+0x2c>
 8004630:	ed95 0a00 	vldr	s0, [r5]
 8004634:	f00e f894 	bl	8012760 <roundf>
 8004638:	ed86 0a00 	vstr	s0, [r6]
 800463c:	1f2d      	subs	r5, r5, #4
 800463e:	1f36      	subs	r6, r6, #4
 8004640:	42a5      	cmp	r5, r4
 8004642:	d2f5      	bcs.n	8004630 <nl_func_round_array_f32+0x18>
 8004644:	bd70      	pop	{r4, r5, r6, pc}
	...

08004648 <forward_round>:
 8004648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800464a:	b081      	sub	sp, #4
 800464c:	6942      	ldr	r2, [r0, #20]
 800464e:	8811      	ldrh	r1, [r2, #0]
 8004650:	2900      	cmp	r1, #0
 8004652:	bf1a      	itte	ne
 8004654:	6850      	ldrne	r0, [r2, #4]
 8004656:	1d00      	addne	r0, r0, #4
 8004658:	2004      	moveq	r0, #4
 800465a:	f04f 0501 	mov.w	r5, #1
 800465e:	6800      	ldr	r0, [r0, #0]
 8004660:	2800      	cmp	r0, #0
 8004662:	bf14      	ite	ne
 8004664:	6803      	ldrne	r3, [r0, #0]
 8004666:	2300      	moveq	r3, #0
 8004668:	2902      	cmp	r1, #2
 800466a:	bfa6      	itte	ge
 800466c:	6850      	ldrge	r0, [r2, #4]
 800466e:	3010      	addge	r0, #16
 8004670:	2004      	movlt	r0, #4
 8004672:	6800      	ldr	r0, [r0, #0]
 8004674:	2800      	cmp	r0, #0
 8004676:	bf19      	ittee	ne
 8004678:	6800      	ldrne	r0, [r0, #0]
 800467a:	f100 0418 	addne.w	r4, r0, #24
 800467e:	2100      	moveq	r1, #0
 8004680:	f101 0418 	addeq.w	r4, r1, #24
 8004684:	f103 0108 	add.w	r1, r3, #8
 8004688:	680a      	ldr	r2, [r1, #0]
 800468a:	0a12      	lsrs	r2, r2, #8
 800468c:	d01e      	beq.n	80046cc <forward_round+0x84>
 800468e:	684e      	ldr	r6, [r1, #4]
 8004690:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004694:	4610      	mov	r0, r2
 8004696:	1f0f      	subs	r7, r1, #4
 8004698:	f010 0103 	ands.w	r1, r0, #3
 800469c:	d006      	beq.n	80046ac <forward_round+0x64>
 800469e:	1e52      	subs	r2, r2, #1
 80046a0:	f857 c904 	ldr.w	ip, [r7], #-4
 80046a4:	1e49      	subs	r1, r1, #1
 80046a6:	fb0c f505 	mul.w	r5, ip, r5
 80046aa:	d1f8      	bne.n	800469e <forward_round+0x56>
 80046ac:	0880      	lsrs	r0, r0, #2
 80046ae:	d00d      	beq.n	80046cc <forward_round+0x84>
 80046b0:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80046b4:	3910      	subs	r1, #16
 80046b6:	68ca      	ldr	r2, [r1, #12]
 80046b8:	688e      	ldr	r6, [r1, #8]
 80046ba:	684f      	ldr	r7, [r1, #4]
 80046bc:	4372      	muls	r2, r6
 80046be:	f851 6910 	ldr.w	r6, [r1], #-16
 80046c2:	437a      	muls	r2, r7
 80046c4:	4372      	muls	r2, r6
 80046c6:	4355      	muls	r5, r2
 80046c8:	1e40      	subs	r0, r0, #1
 80046ca:	d1f4      	bne.n	80046b6 <forward_round+0x6e>
 80046cc:	6998      	ldr	r0, [r3, #24]
 80046ce:	6886      	ldr	r6, [r0, #8]
 80046d0:	6821      	ldr	r1, [r4, #0]
 80046d2:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80046d6:	1f07      	subs	r7, r0, #4
 80046d8:	6888      	ldr	r0, [r1, #8]
 80046da:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 80046de:	1f14      	subs	r4, r2, #4
 80046e0:	42b7      	cmp	r7, r6
 80046e2:	d309      	bcc.n	80046f8 <forward_round+0xb0>
 80046e4:	ed97 0a00 	vldr	s0, [r7]
 80046e8:	f00e f83a 	bl	8012760 <roundf>
 80046ec:	ed84 0a00 	vstr	s0, [r4]
 80046f0:	1f3f      	subs	r7, r7, #4
 80046f2:	1f24      	subs	r4, r4, #4
 80046f4:	42b7      	cmp	r7, r6
 80046f6:	d2f5      	bcs.n	80046e4 <forward_round+0x9c>
 80046f8:	b001      	add	sp, #4
 80046fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080046fc <nl_func_neg_array_f32>:
 80046fc:	6889      	ldr	r1, [r1, #8]
 80046fe:	6880      	ldr	r0, [r0, #8]
 8004700:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8004704:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004708:	1f1b      	subs	r3, r3, #4
 800470a:	1f12      	subs	r2, r2, #4
 800470c:	428b      	cmp	r3, r1
 800470e:	d32b      	bcc.n	8004768 <nl_func_neg_array_f32+0x6c>
 8004710:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8004714:	edd3 0a00 	vldr	s1, [r3]
 8004718:	1f18      	subs	r0, r3, #4
 800471a:	ee60 0a80 	vmul.f32	s1, s1, s0
 800471e:	4288      	cmp	r0, r1
 8004720:	edc2 0a00 	vstr	s1, [r2]
 8004724:	d320      	bcc.n	8004768 <nl_func_neg_array_f32+0x6c>
 8004726:	ed90 1a00 	vldr	s2, [r0]
 800472a:	1f13      	subs	r3, r2, #4
 800472c:	1f00      	subs	r0, r0, #4
 800472e:	ee21 1a00 	vmul.f32	s2, s2, s0
 8004732:	4288      	cmp	r0, r1
 8004734:	ed83 1a00 	vstr	s2, [r3]
 8004738:	d316      	bcc.n	8004768 <nl_func_neg_array_f32+0x6c>
 800473a:	edd0 0a00 	vldr	s1, [r0]
 800473e:	f1a2 0308 	sub.w	r3, r2, #8
 8004742:	1f00      	subs	r0, r0, #4
 8004744:	ee60 0a80 	vmul.f32	s1, s1, s0
 8004748:	4288      	cmp	r0, r1
 800474a:	edc3 0a00 	vstr	s1, [r3]
 800474e:	d30b      	bcc.n	8004768 <nl_func_neg_array_f32+0x6c>
 8004750:	ed90 1a00 	vldr	s2, [r0]
 8004754:	f1a2 030c 	sub.w	r3, r2, #12
 8004758:	ee61 0a00 	vmul.f32	s1, s2, s0
 800475c:	edc3 0a00 	vstr	s1, [r3]
 8004760:	1f03      	subs	r3, r0, #4
 8004762:	3a10      	subs	r2, #16
 8004764:	428b      	cmp	r3, r1
 8004766:	d2d5      	bcs.n	8004714 <nl_func_neg_array_f32+0x18>
 8004768:	4770      	bx	lr
	...

0800476c <forward_neg>:
 800476c:	b4f0      	push	{r4, r5, r6, r7}
 800476e:	6942      	ldr	r2, [r0, #20]
 8004770:	8811      	ldrh	r1, [r2, #0]
 8004772:	2900      	cmp	r1, #0
 8004774:	bf1a      	itte	ne
 8004776:	6850      	ldrne	r0, [r2, #4]
 8004778:	1d00      	addne	r0, r0, #4
 800477a:	2004      	moveq	r0, #4
 800477c:	f04f 0501 	mov.w	r5, #1
 8004780:	6800      	ldr	r0, [r0, #0]
 8004782:	2800      	cmp	r0, #0
 8004784:	bf14      	ite	ne
 8004786:	6803      	ldrne	r3, [r0, #0]
 8004788:	2300      	moveq	r3, #0
 800478a:	2902      	cmp	r1, #2
 800478c:	bfa6      	itte	ge
 800478e:	6850      	ldrge	r0, [r2, #4]
 8004790:	3010      	addge	r0, #16
 8004792:	2004      	movlt	r0, #4
 8004794:	6800      	ldr	r0, [r0, #0]
 8004796:	2800      	cmp	r0, #0
 8004798:	bf19      	ittee	ne
 800479a:	6800      	ldrne	r0, [r0, #0]
 800479c:	f100 0418 	addne.w	r4, r0, #24
 80047a0:	2100      	moveq	r1, #0
 80047a2:	f101 0418 	addeq.w	r4, r1, #24
 80047a6:	f103 0108 	add.w	r1, r3, #8
 80047aa:	680a      	ldr	r2, [r1, #0]
 80047ac:	0a12      	lsrs	r2, r2, #8
 80047ae:	d01e      	beq.n	80047ee <forward_neg+0x82>
 80047b0:	684e      	ldr	r6, [r1, #4]
 80047b2:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80047b6:	4610      	mov	r0, r2
 80047b8:	1f0f      	subs	r7, r1, #4
 80047ba:	f010 0103 	ands.w	r1, r0, #3
 80047be:	d006      	beq.n	80047ce <forward_neg+0x62>
 80047c0:	1e52      	subs	r2, r2, #1
 80047c2:	f857 c904 	ldr.w	ip, [r7], #-4
 80047c6:	1e49      	subs	r1, r1, #1
 80047c8:	fb0c f505 	mul.w	r5, ip, r5
 80047cc:	d1f8      	bne.n	80047c0 <forward_neg+0x54>
 80047ce:	0880      	lsrs	r0, r0, #2
 80047d0:	d00d      	beq.n	80047ee <forward_neg+0x82>
 80047d2:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80047d6:	3910      	subs	r1, #16
 80047d8:	68ca      	ldr	r2, [r1, #12]
 80047da:	688e      	ldr	r6, [r1, #8]
 80047dc:	684f      	ldr	r7, [r1, #4]
 80047de:	4372      	muls	r2, r6
 80047e0:	f851 6910 	ldr.w	r6, [r1], #-16
 80047e4:	437a      	muls	r2, r7
 80047e6:	4372      	muls	r2, r6
 80047e8:	4355      	muls	r5, r2
 80047ea:	1e40      	subs	r0, r0, #1
 80047ec:	d1f4      	bne.n	80047d8 <forward_neg+0x6c>
 80047ee:	6998      	ldr	r0, [r3, #24]
 80047f0:	6822      	ldr	r2, [r4, #0]
 80047f2:	6880      	ldr	r0, [r0, #8]
 80047f4:	6893      	ldr	r3, [r2, #8]
 80047f6:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 80047fa:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 80047fe:	1f09      	subs	r1, r1, #4
 8004800:	1f22      	subs	r2, r4, #4
 8004802:	4281      	cmp	r1, r0
 8004804:	f0c0 802c 	bcc.w	8004860 <forward_neg+0xf4>
 8004808:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800480c:	edd1 0a00 	vldr	s1, [r1]
 8004810:	1f09      	subs	r1, r1, #4
 8004812:	ee60 0a80 	vmul.f32	s1, s1, s0
 8004816:	4281      	cmp	r1, r0
 8004818:	edc2 0a00 	vstr	s1, [r2]
 800481c:	d320      	bcc.n	8004860 <forward_neg+0xf4>
 800481e:	ed91 1a00 	vldr	s2, [r1]
 8004822:	1f13      	subs	r3, r2, #4
 8004824:	1f09      	subs	r1, r1, #4
 8004826:	ee21 1a00 	vmul.f32	s2, s2, s0
 800482a:	4281      	cmp	r1, r0
 800482c:	ed83 1a00 	vstr	s2, [r3]
 8004830:	d316      	bcc.n	8004860 <forward_neg+0xf4>
 8004832:	edd1 0a00 	vldr	s1, [r1]
 8004836:	f1a2 0308 	sub.w	r3, r2, #8
 800483a:	1f09      	subs	r1, r1, #4
 800483c:	ee60 0a80 	vmul.f32	s1, s1, s0
 8004840:	4281      	cmp	r1, r0
 8004842:	edc3 0a00 	vstr	s1, [r3]
 8004846:	d30b      	bcc.n	8004860 <forward_neg+0xf4>
 8004848:	ed91 1a00 	vldr	s2, [r1]
 800484c:	f1a2 030c 	sub.w	r3, r2, #12
 8004850:	1f09      	subs	r1, r1, #4
 8004852:	3a10      	subs	r2, #16
 8004854:	ee61 0a00 	vmul.f32	s1, s2, s0
 8004858:	4281      	cmp	r1, r0
 800485a:	edc3 0a00 	vstr	s1, [r3]
 800485e:	d2d5      	bcs.n	800480c <forward_neg+0xa0>
 8004860:	bcf0      	pop	{r4, r5, r6, r7}
 8004862:	4770      	bx	lr

08004864 <nl_func_reciprocal_array_f32>:
 8004864:	6889      	ldr	r1, [r1, #8]
 8004866:	6880      	ldr	r0, [r0, #8]
 8004868:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 800486c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004870:	1f1b      	subs	r3, r3, #4
 8004872:	1f12      	subs	r2, r2, #4
 8004874:	428b      	cmp	r3, r1
 8004876:	d331      	bcc.n	80048dc <nl_func_reciprocal_array_f32+0x78>
 8004878:	ed93 0a00 	vldr	s0, [r3]
 800487c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8004880:	1f18      	subs	r0, r3, #4
 8004882:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8004886:	4288      	cmp	r0, r1
 8004888:	ed82 0a00 	vstr	s0, [r2]
 800488c:	d326      	bcc.n	80048dc <nl_func_reciprocal_array_f32+0x78>
 800488e:	edd0 0a00 	vldr	s1, [r0]
 8004892:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004896:	1f13      	subs	r3, r2, #4
 8004898:	1f00      	subs	r0, r0, #4
 800489a:	ee80 0a20 	vdiv.f32	s0, s0, s1
 800489e:	4288      	cmp	r0, r1
 80048a0:	ed83 0a00 	vstr	s0, [r3]
 80048a4:	d31a      	bcc.n	80048dc <nl_func_reciprocal_array_f32+0x78>
 80048a6:	ed90 0a00 	vldr	s0, [r0]
 80048aa:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80048ae:	f1a2 0308 	sub.w	r3, r2, #8
 80048b2:	1f00      	subs	r0, r0, #4
 80048b4:	ee80 0a80 	vdiv.f32	s0, s1, s0
 80048b8:	4288      	cmp	r0, r1
 80048ba:	ed83 0a00 	vstr	s0, [r3]
 80048be:	d30d      	bcc.n	80048dc <nl_func_reciprocal_array_f32+0x78>
 80048c0:	edd0 0a00 	vldr	s1, [r0]
 80048c4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80048c8:	f1a2 030c 	sub.w	r3, r2, #12
 80048cc:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80048d0:	ed83 0a00 	vstr	s0, [r3]
 80048d4:	1f03      	subs	r3, r0, #4
 80048d6:	3a10      	subs	r2, #16
 80048d8:	428b      	cmp	r3, r1
 80048da:	d2cd      	bcs.n	8004878 <nl_func_reciprocal_array_f32+0x14>
 80048dc:	4770      	bx	lr
	...

080048e0 <forward_reciprocal>:
 80048e0:	b4f0      	push	{r4, r5, r6, r7}
 80048e2:	6942      	ldr	r2, [r0, #20]
 80048e4:	8811      	ldrh	r1, [r2, #0]
 80048e6:	2900      	cmp	r1, #0
 80048e8:	bf1a      	itte	ne
 80048ea:	6850      	ldrne	r0, [r2, #4]
 80048ec:	1d00      	addne	r0, r0, #4
 80048ee:	2004      	moveq	r0, #4
 80048f0:	f04f 0501 	mov.w	r5, #1
 80048f4:	6800      	ldr	r0, [r0, #0]
 80048f6:	2800      	cmp	r0, #0
 80048f8:	bf14      	ite	ne
 80048fa:	6803      	ldrne	r3, [r0, #0]
 80048fc:	2300      	moveq	r3, #0
 80048fe:	2902      	cmp	r1, #2
 8004900:	bfa6      	itte	ge
 8004902:	6850      	ldrge	r0, [r2, #4]
 8004904:	3010      	addge	r0, #16
 8004906:	2004      	movlt	r0, #4
 8004908:	6800      	ldr	r0, [r0, #0]
 800490a:	2800      	cmp	r0, #0
 800490c:	bf19      	ittee	ne
 800490e:	6800      	ldrne	r0, [r0, #0]
 8004910:	f100 0418 	addne.w	r4, r0, #24
 8004914:	2100      	moveq	r1, #0
 8004916:	f101 0418 	addeq.w	r4, r1, #24
 800491a:	f103 0108 	add.w	r1, r3, #8
 800491e:	680a      	ldr	r2, [r1, #0]
 8004920:	0a12      	lsrs	r2, r2, #8
 8004922:	d01e      	beq.n	8004962 <forward_reciprocal+0x82>
 8004924:	684e      	ldr	r6, [r1, #4]
 8004926:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800492a:	4610      	mov	r0, r2
 800492c:	1f0f      	subs	r7, r1, #4
 800492e:	f010 0103 	ands.w	r1, r0, #3
 8004932:	d006      	beq.n	8004942 <forward_reciprocal+0x62>
 8004934:	1e52      	subs	r2, r2, #1
 8004936:	f857 c904 	ldr.w	ip, [r7], #-4
 800493a:	1e49      	subs	r1, r1, #1
 800493c:	fb0c f505 	mul.w	r5, ip, r5
 8004940:	d1f8      	bne.n	8004934 <forward_reciprocal+0x54>
 8004942:	0880      	lsrs	r0, r0, #2
 8004944:	d00d      	beq.n	8004962 <forward_reciprocal+0x82>
 8004946:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800494a:	3910      	subs	r1, #16
 800494c:	68ca      	ldr	r2, [r1, #12]
 800494e:	688e      	ldr	r6, [r1, #8]
 8004950:	684f      	ldr	r7, [r1, #4]
 8004952:	4372      	muls	r2, r6
 8004954:	f851 6910 	ldr.w	r6, [r1], #-16
 8004958:	437a      	muls	r2, r7
 800495a:	4372      	muls	r2, r6
 800495c:	4355      	muls	r5, r2
 800495e:	1e40      	subs	r0, r0, #1
 8004960:	d1f4      	bne.n	800494c <forward_reciprocal+0x6c>
 8004962:	6998      	ldr	r0, [r3, #24]
 8004964:	6822      	ldr	r2, [r4, #0]
 8004966:	6880      	ldr	r0, [r0, #8]
 8004968:	6893      	ldr	r3, [r2, #8]
 800496a:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 800496e:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8004972:	1f09      	subs	r1, r1, #4
 8004974:	1f22      	subs	r2, r4, #4
 8004976:	4281      	cmp	r1, r0
 8004978:	f0c0 8032 	bcc.w	80049e0 <forward_reciprocal+0x100>
 800497c:	ed91 0a00 	vldr	s0, [r1]
 8004980:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8004984:	1f09      	subs	r1, r1, #4
 8004986:	ee80 0a80 	vdiv.f32	s0, s1, s0
 800498a:	4281      	cmp	r1, r0
 800498c:	ed82 0a00 	vstr	s0, [r2]
 8004990:	d326      	bcc.n	80049e0 <forward_reciprocal+0x100>
 8004992:	edd1 0a00 	vldr	s1, [r1]
 8004996:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800499a:	1f13      	subs	r3, r2, #4
 800499c:	1f09      	subs	r1, r1, #4
 800499e:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80049a2:	4281      	cmp	r1, r0
 80049a4:	ed83 0a00 	vstr	s0, [r3]
 80049a8:	d31a      	bcc.n	80049e0 <forward_reciprocal+0x100>
 80049aa:	ed91 0a00 	vldr	s0, [r1]
 80049ae:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80049b2:	f1a2 0308 	sub.w	r3, r2, #8
 80049b6:	1f09      	subs	r1, r1, #4
 80049b8:	ee80 0a80 	vdiv.f32	s0, s1, s0
 80049bc:	4281      	cmp	r1, r0
 80049be:	ed83 0a00 	vstr	s0, [r3]
 80049c2:	d30d      	bcc.n	80049e0 <forward_reciprocal+0x100>
 80049c4:	edd1 0a00 	vldr	s1, [r1]
 80049c8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80049cc:	f1a2 030c 	sub.w	r3, r2, #12
 80049d0:	1f09      	subs	r1, r1, #4
 80049d2:	3a10      	subs	r2, #16
 80049d4:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80049d8:	4281      	cmp	r1, r0
 80049da:	ed83 0a00 	vstr	s0, [r3]
 80049de:	d2cd      	bcs.n	800497c <forward_reciprocal+0x9c>
 80049e0:	bcf0      	pop	{r4, r5, r6, r7}
 80049e2:	4770      	bx	lr

080049e4 <nl_func_exp_array_f32>:
 80049e4:	b570      	push	{r4, r5, r6, lr}
 80049e6:	688c      	ldr	r4, [r1, #8]
 80049e8:	6880      	ldr	r0, [r0, #8]
 80049ea:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80049ee:	1f0d      	subs	r5, r1, #4
 80049f0:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80049f4:	1f0e      	subs	r6, r1, #4
 80049f6:	42a5      	cmp	r5, r4
 80049f8:	f0c0 800a 	bcc.w	8004a10 <nl_func_exp_array_f32+0x2c>
 80049fc:	ed95 0a00 	vldr	s0, [r5]
 8004a00:	f00e f964 	bl	8012ccc <expf>
 8004a04:	ed86 0a00 	vstr	s0, [r6]
 8004a08:	1f2d      	subs	r5, r5, #4
 8004a0a:	1f36      	subs	r6, r6, #4
 8004a0c:	42a5      	cmp	r5, r4
 8004a0e:	d2f5      	bcs.n	80049fc <nl_func_exp_array_f32+0x18>
 8004a10:	bd70      	pop	{r4, r5, r6, pc}
	...

08004a14 <forward_exp>:
 8004a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a16:	b081      	sub	sp, #4
 8004a18:	6942      	ldr	r2, [r0, #20]
 8004a1a:	8811      	ldrh	r1, [r2, #0]
 8004a1c:	2900      	cmp	r1, #0
 8004a1e:	bf1a      	itte	ne
 8004a20:	6850      	ldrne	r0, [r2, #4]
 8004a22:	1d00      	addne	r0, r0, #4
 8004a24:	2004      	moveq	r0, #4
 8004a26:	f04f 0501 	mov.w	r5, #1
 8004a2a:	6800      	ldr	r0, [r0, #0]
 8004a2c:	2800      	cmp	r0, #0
 8004a2e:	bf14      	ite	ne
 8004a30:	6803      	ldrne	r3, [r0, #0]
 8004a32:	2300      	moveq	r3, #0
 8004a34:	2902      	cmp	r1, #2
 8004a36:	bfa6      	itte	ge
 8004a38:	6850      	ldrge	r0, [r2, #4]
 8004a3a:	3010      	addge	r0, #16
 8004a3c:	2004      	movlt	r0, #4
 8004a3e:	6800      	ldr	r0, [r0, #0]
 8004a40:	2800      	cmp	r0, #0
 8004a42:	bf19      	ittee	ne
 8004a44:	6800      	ldrne	r0, [r0, #0]
 8004a46:	f100 0418 	addne.w	r4, r0, #24
 8004a4a:	2100      	moveq	r1, #0
 8004a4c:	f101 0418 	addeq.w	r4, r1, #24
 8004a50:	f103 0108 	add.w	r1, r3, #8
 8004a54:	680a      	ldr	r2, [r1, #0]
 8004a56:	0a12      	lsrs	r2, r2, #8
 8004a58:	d01e      	beq.n	8004a98 <forward_exp+0x84>
 8004a5a:	684e      	ldr	r6, [r1, #4]
 8004a5c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004a60:	4610      	mov	r0, r2
 8004a62:	1f0f      	subs	r7, r1, #4
 8004a64:	f010 0103 	ands.w	r1, r0, #3
 8004a68:	d006      	beq.n	8004a78 <forward_exp+0x64>
 8004a6a:	1e52      	subs	r2, r2, #1
 8004a6c:	f857 c904 	ldr.w	ip, [r7], #-4
 8004a70:	1e49      	subs	r1, r1, #1
 8004a72:	fb0c f505 	mul.w	r5, ip, r5
 8004a76:	d1f8      	bne.n	8004a6a <forward_exp+0x56>
 8004a78:	0880      	lsrs	r0, r0, #2
 8004a7a:	d00d      	beq.n	8004a98 <forward_exp+0x84>
 8004a7c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004a80:	3910      	subs	r1, #16
 8004a82:	68ca      	ldr	r2, [r1, #12]
 8004a84:	688e      	ldr	r6, [r1, #8]
 8004a86:	684f      	ldr	r7, [r1, #4]
 8004a88:	4372      	muls	r2, r6
 8004a8a:	f851 6910 	ldr.w	r6, [r1], #-16
 8004a8e:	437a      	muls	r2, r7
 8004a90:	4372      	muls	r2, r6
 8004a92:	4355      	muls	r5, r2
 8004a94:	1e40      	subs	r0, r0, #1
 8004a96:	d1f4      	bne.n	8004a82 <forward_exp+0x6e>
 8004a98:	6998      	ldr	r0, [r3, #24]
 8004a9a:	6886      	ldr	r6, [r0, #8]
 8004a9c:	6821      	ldr	r1, [r4, #0]
 8004a9e:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8004aa2:	1f07      	subs	r7, r0, #4
 8004aa4:	6888      	ldr	r0, [r1, #8]
 8004aa6:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8004aaa:	1f14      	subs	r4, r2, #4
 8004aac:	42b7      	cmp	r7, r6
 8004aae:	d309      	bcc.n	8004ac4 <forward_exp+0xb0>
 8004ab0:	ed97 0a00 	vldr	s0, [r7]
 8004ab4:	f00e f90a 	bl	8012ccc <expf>
 8004ab8:	ed84 0a00 	vstr	s0, [r4]
 8004abc:	1f3f      	subs	r7, r7, #4
 8004abe:	1f24      	subs	r4, r4, #4
 8004ac0:	42b7      	cmp	r7, r6
 8004ac2:	d2f5      	bcs.n	8004ab0 <forward_exp+0x9c>
 8004ac4:	b001      	add	sp, #4
 8004ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004ac8 <nl_func_sigmoid_array_f32>:
 8004ac8:	b570      	push	{r4, r5, r6, lr}
 8004aca:	688c      	ldr	r4, [r1, #8]
 8004acc:	6880      	ldr	r0, [r0, #8]
 8004ace:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8004ad2:	1f0d      	subs	r5, r1, #4
 8004ad4:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8004ad8:	1f0e      	subs	r6, r1, #4
 8004ada:	42a5      	cmp	r5, r4
 8004adc:	f0c0 8014 	bcc.w	8004b08 <nl_func_sigmoid_array_f32+0x40>
 8004ae0:	ed95 0a00 	vldr	s0, [r5]
 8004ae4:	eeb1 0a40 	vneg.f32	s0, s0
 8004ae8:	f00e f8f0 	bl	8012ccc <expf>
 8004aec:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8004af0:	ee70 0a20 	vadd.f32	s1, s0, s1
 8004af4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004af8:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8004afc:	ed86 0a00 	vstr	s0, [r6]
 8004b00:	1f2d      	subs	r5, r5, #4
 8004b02:	1f36      	subs	r6, r6, #4
 8004b04:	42a5      	cmp	r5, r4
 8004b06:	d2eb      	bcs.n	8004ae0 <nl_func_sigmoid_array_f32+0x18>
 8004b08:	bd70      	pop	{r4, r5, r6, pc}
	...

08004b0c <forward_sigmoid>:
 8004b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b0e:	b081      	sub	sp, #4
 8004b10:	6942      	ldr	r2, [r0, #20]
 8004b12:	8811      	ldrh	r1, [r2, #0]
 8004b14:	2900      	cmp	r1, #0
 8004b16:	bf1a      	itte	ne
 8004b18:	6850      	ldrne	r0, [r2, #4]
 8004b1a:	1d00      	addne	r0, r0, #4
 8004b1c:	2004      	moveq	r0, #4
 8004b1e:	f04f 0501 	mov.w	r5, #1
 8004b22:	6800      	ldr	r0, [r0, #0]
 8004b24:	2800      	cmp	r0, #0
 8004b26:	bf14      	ite	ne
 8004b28:	6803      	ldrne	r3, [r0, #0]
 8004b2a:	2300      	moveq	r3, #0
 8004b2c:	2902      	cmp	r1, #2
 8004b2e:	bfa6      	itte	ge
 8004b30:	6850      	ldrge	r0, [r2, #4]
 8004b32:	3010      	addge	r0, #16
 8004b34:	2004      	movlt	r0, #4
 8004b36:	6800      	ldr	r0, [r0, #0]
 8004b38:	2800      	cmp	r0, #0
 8004b3a:	bf19      	ittee	ne
 8004b3c:	6800      	ldrne	r0, [r0, #0]
 8004b3e:	f100 0418 	addne.w	r4, r0, #24
 8004b42:	2100      	moveq	r1, #0
 8004b44:	f101 0418 	addeq.w	r4, r1, #24
 8004b48:	f103 0108 	add.w	r1, r3, #8
 8004b4c:	680a      	ldr	r2, [r1, #0]
 8004b4e:	0a12      	lsrs	r2, r2, #8
 8004b50:	d01e      	beq.n	8004b90 <forward_sigmoid+0x84>
 8004b52:	684e      	ldr	r6, [r1, #4]
 8004b54:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004b58:	4610      	mov	r0, r2
 8004b5a:	1f0f      	subs	r7, r1, #4
 8004b5c:	f010 0103 	ands.w	r1, r0, #3
 8004b60:	d006      	beq.n	8004b70 <forward_sigmoid+0x64>
 8004b62:	1e52      	subs	r2, r2, #1
 8004b64:	f857 c904 	ldr.w	ip, [r7], #-4
 8004b68:	1e49      	subs	r1, r1, #1
 8004b6a:	fb0c f505 	mul.w	r5, ip, r5
 8004b6e:	d1f8      	bne.n	8004b62 <forward_sigmoid+0x56>
 8004b70:	0880      	lsrs	r0, r0, #2
 8004b72:	d00d      	beq.n	8004b90 <forward_sigmoid+0x84>
 8004b74:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004b78:	3910      	subs	r1, #16
 8004b7a:	68ca      	ldr	r2, [r1, #12]
 8004b7c:	688e      	ldr	r6, [r1, #8]
 8004b7e:	684f      	ldr	r7, [r1, #4]
 8004b80:	4372      	muls	r2, r6
 8004b82:	f851 6910 	ldr.w	r6, [r1], #-16
 8004b86:	437a      	muls	r2, r7
 8004b88:	4372      	muls	r2, r6
 8004b8a:	4355      	muls	r5, r2
 8004b8c:	1e40      	subs	r0, r0, #1
 8004b8e:	d1f4      	bne.n	8004b7a <forward_sigmoid+0x6e>
 8004b90:	6998      	ldr	r0, [r3, #24]
 8004b92:	6886      	ldr	r6, [r0, #8]
 8004b94:	6821      	ldr	r1, [r4, #0]
 8004b96:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8004b9a:	1f07      	subs	r7, r0, #4
 8004b9c:	6888      	ldr	r0, [r1, #8]
 8004b9e:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8004ba2:	1f14      	subs	r4, r2, #4
 8004ba4:	42b7      	cmp	r7, r6
 8004ba6:	d313      	bcc.n	8004bd0 <forward_sigmoid+0xc4>
 8004ba8:	ed97 0a00 	vldr	s0, [r7]
 8004bac:	eeb1 0a40 	vneg.f32	s0, s0
 8004bb0:	f00e f88c 	bl	8012ccc <expf>
 8004bb4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8004bb8:	ee70 0a20 	vadd.f32	s1, s0, s1
 8004bbc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004bc0:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8004bc4:	ed84 0a00 	vstr	s0, [r4]
 8004bc8:	1f3f      	subs	r7, r7, #4
 8004bca:	1f24      	subs	r4, r4, #4
 8004bcc:	42b7      	cmp	r7, r6
 8004bce:	d2eb      	bcs.n	8004ba8 <forward_sigmoid+0x9c>
 8004bd0:	b001      	add	sp, #4
 8004bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004bd4 <nl_func_sign_array_f32>:
 8004bd4:	6889      	ldr	r1, [r1, #8]
 8004bd6:	6880      	ldr	r0, [r0, #8]
 8004bd8:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8004bdc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004be0:	1f1b      	subs	r3, r3, #4
 8004be2:	1f10      	subs	r0, r2, #4
 8004be4:	428b      	cmp	r3, r1
 8004be6:	d314      	bcc.n	8004c12 <nl_func_sign_array_f32+0x3e>
 8004be8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004bec:	ed93 0a00 	vldr	s0, [r3]
 8004bf0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bf8:	bfcc      	ite	gt
 8004bfa:	ed9f 0a39 	vldrgt	s0, [pc, #228]	; 8004ce0 <.text_49>
 8004bfe:	ee00 2a10 	vmovle	s0, r2
 8004c02:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8004c06:	ed80 0a00 	vstr	s0, [r0]
 8004c0a:	1f1b      	subs	r3, r3, #4
 8004c0c:	1f00      	subs	r0, r0, #4
 8004c0e:	428b      	cmp	r3, r1
 8004c10:	d2ec      	bcs.n	8004bec <nl_func_sign_array_f32+0x18>
 8004c12:	4770      	bx	lr

08004c14 <forward_sign>:
 8004c14:	b4f0      	push	{r4, r5, r6, r7}
 8004c16:	6942      	ldr	r2, [r0, #20]
 8004c18:	8811      	ldrh	r1, [r2, #0]
 8004c1a:	2900      	cmp	r1, #0
 8004c1c:	bf1a      	itte	ne
 8004c1e:	6850      	ldrne	r0, [r2, #4]
 8004c20:	1d00      	addne	r0, r0, #4
 8004c22:	2004      	moveq	r0, #4
 8004c24:	f04f 0501 	mov.w	r5, #1
 8004c28:	6800      	ldr	r0, [r0, #0]
 8004c2a:	2800      	cmp	r0, #0
 8004c2c:	bf14      	ite	ne
 8004c2e:	6803      	ldrne	r3, [r0, #0]
 8004c30:	2300      	moveq	r3, #0
 8004c32:	2901      	cmp	r1, #1
 8004c34:	bfc6      	itte	gt
 8004c36:	6850      	ldrgt	r0, [r2, #4]
 8004c38:	3010      	addgt	r0, #16
 8004c3a:	2004      	movle	r0, #4
 8004c3c:	6800      	ldr	r0, [r0, #0]
 8004c3e:	2800      	cmp	r0, #0
 8004c40:	bf19      	ittee	ne
 8004c42:	6800      	ldrne	r0, [r0, #0]
 8004c44:	f100 0418 	addne.w	r4, r0, #24
 8004c48:	2100      	moveq	r1, #0
 8004c4a:	f101 0418 	addeq.w	r4, r1, #24
 8004c4e:	f103 0108 	add.w	r1, r3, #8
 8004c52:	680a      	ldr	r2, [r1, #0]
 8004c54:	0a12      	lsrs	r2, r2, #8
 8004c56:	d01e      	beq.n	8004c96 <forward_sign+0x82>
 8004c58:	684e      	ldr	r6, [r1, #4]
 8004c5a:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004c5e:	4610      	mov	r0, r2
 8004c60:	1f0f      	subs	r7, r1, #4
 8004c62:	f010 0103 	ands.w	r1, r0, #3
 8004c66:	d006      	beq.n	8004c76 <forward_sign+0x62>
 8004c68:	1e52      	subs	r2, r2, #1
 8004c6a:	f857 c904 	ldr.w	ip, [r7], #-4
 8004c6e:	1e49      	subs	r1, r1, #1
 8004c70:	fb0c f505 	mul.w	r5, ip, r5
 8004c74:	d1f8      	bne.n	8004c68 <forward_sign+0x54>
 8004c76:	0880      	lsrs	r0, r0, #2
 8004c78:	d00d      	beq.n	8004c96 <forward_sign+0x82>
 8004c7a:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004c7e:	3910      	subs	r1, #16
 8004c80:	68ca      	ldr	r2, [r1, #12]
 8004c82:	688e      	ldr	r6, [r1, #8]
 8004c84:	684f      	ldr	r7, [r1, #4]
 8004c86:	4372      	muls	r2, r6
 8004c88:	f851 6910 	ldr.w	r6, [r1], #-16
 8004c8c:	437a      	muls	r2, r7
 8004c8e:	4372      	muls	r2, r6
 8004c90:	4355      	muls	r5, r2
 8004c92:	1e40      	subs	r0, r0, #1
 8004c94:	d1f4      	bne.n	8004c80 <forward_sign+0x6c>
 8004c96:	6998      	ldr	r0, [r3, #24]
 8004c98:	6822      	ldr	r2, [r4, #0]
 8004c9a:	6880      	ldr	r0, [r0, #8]
 8004c9c:	6893      	ldr	r3, [r2, #8]
 8004c9e:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8004ca2:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8004ca6:	1f09      	subs	r1, r1, #4
 8004ca8:	1f22      	subs	r2, r4, #4
 8004caa:	4281      	cmp	r1, r0
 8004cac:	f0c0 8015 	bcc.w	8004cda <forward_sign+0xc6>
 8004cb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cb4:	ed91 0a00 	vldr	s0, [r1]
 8004cb8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cc0:	bfcc      	ite	gt
 8004cc2:	ed9f 0a07 	vldrgt	s0, [pc, #28]	; 8004ce0 <.text_49>
 8004cc6:	ee00 3a10 	vmovle	s0, r3
 8004cca:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8004cce:	ed82 0a00 	vstr	s0, [r2]
 8004cd2:	1f09      	subs	r1, r1, #4
 8004cd4:	1f12      	subs	r2, r2, #4
 8004cd6:	4281      	cmp	r1, r0
 8004cd8:	d2ec      	bcs.n	8004cb4 <forward_sign+0xa0>
 8004cda:	bcf0      	pop	{r4, r5, r6, r7}
 8004cdc:	4770      	bx	lr
	...

08004ce0 <.text_49>:
 8004ce0:	00000001 	.word	0x00000001

08004ce4 <nl_func_sqrt_array_f32>:
 8004ce4:	b570      	push	{r4, r5, r6, lr}
 8004ce6:	460c      	mov	r4, r1
 8004ce8:	6880      	ldr	r0, [r0, #8]
 8004cea:	68a1      	ldr	r1, [r4, #8]
 8004cec:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8004cf0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004cf4:	1f1d      	subs	r5, r3, #4
 8004cf6:	1f16      	subs	r6, r2, #4
 8004cf8:	428d      	cmp	r5, r1
 8004cfa:	d30a      	bcc.n	8004d12 <nl_func_sqrt_array_f32+0x2e>
 8004cfc:	ed95 0a00 	vldr	s0, [r5]
 8004d00:	f002 faa8 	bl	8007254 <ai_math_sqrt>
 8004d04:	ed86 0a00 	vstr	s0, [r6]
 8004d08:	1f2d      	subs	r5, r5, #4
 8004d0a:	68a0      	ldr	r0, [r4, #8]
 8004d0c:	1f36      	subs	r6, r6, #4
 8004d0e:	4285      	cmp	r5, r0
 8004d10:	d2f4      	bcs.n	8004cfc <nl_func_sqrt_array_f32+0x18>
 8004d12:	bd70      	pop	{r4, r5, r6, pc}

08004d14 <forward_sqrt>:
 8004d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d16:	b081      	sub	sp, #4
 8004d18:	6942      	ldr	r2, [r0, #20]
 8004d1a:	8811      	ldrh	r1, [r2, #0]
 8004d1c:	2900      	cmp	r1, #0
 8004d1e:	bf1a      	itte	ne
 8004d20:	6850      	ldrne	r0, [r2, #4]
 8004d22:	1d00      	addne	r0, r0, #4
 8004d24:	2004      	moveq	r0, #4
 8004d26:	f04f 0501 	mov.w	r5, #1
 8004d2a:	6800      	ldr	r0, [r0, #0]
 8004d2c:	2800      	cmp	r0, #0
 8004d2e:	bf14      	ite	ne
 8004d30:	6803      	ldrne	r3, [r0, #0]
 8004d32:	2300      	moveq	r3, #0
 8004d34:	2902      	cmp	r1, #2
 8004d36:	bfa6      	itte	ge
 8004d38:	6850      	ldrge	r0, [r2, #4]
 8004d3a:	3010      	addge	r0, #16
 8004d3c:	2004      	movlt	r0, #4
 8004d3e:	6800      	ldr	r0, [r0, #0]
 8004d40:	2800      	cmp	r0, #0
 8004d42:	bf19      	ittee	ne
 8004d44:	6800      	ldrne	r0, [r0, #0]
 8004d46:	f100 0418 	addne.w	r4, r0, #24
 8004d4a:	2100      	moveq	r1, #0
 8004d4c:	f101 0418 	addeq.w	r4, r1, #24
 8004d50:	f103 0108 	add.w	r1, r3, #8
 8004d54:	680a      	ldr	r2, [r1, #0]
 8004d56:	0a12      	lsrs	r2, r2, #8
 8004d58:	d01e      	beq.n	8004d98 <forward_sqrt+0x84>
 8004d5a:	684e      	ldr	r6, [r1, #4]
 8004d5c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004d60:	4610      	mov	r0, r2
 8004d62:	1f0f      	subs	r7, r1, #4
 8004d64:	f010 0103 	ands.w	r1, r0, #3
 8004d68:	d006      	beq.n	8004d78 <forward_sqrt+0x64>
 8004d6a:	1e52      	subs	r2, r2, #1
 8004d6c:	f857 c904 	ldr.w	ip, [r7], #-4
 8004d70:	1e49      	subs	r1, r1, #1
 8004d72:	fb0c f505 	mul.w	r5, ip, r5
 8004d76:	d1f8      	bne.n	8004d6a <forward_sqrt+0x56>
 8004d78:	0880      	lsrs	r0, r0, #2
 8004d7a:	d00d      	beq.n	8004d98 <forward_sqrt+0x84>
 8004d7c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004d80:	3910      	subs	r1, #16
 8004d82:	68ca      	ldr	r2, [r1, #12]
 8004d84:	688e      	ldr	r6, [r1, #8]
 8004d86:	684f      	ldr	r7, [r1, #4]
 8004d88:	4372      	muls	r2, r6
 8004d8a:	f851 6910 	ldr.w	r6, [r1], #-16
 8004d8e:	437a      	muls	r2, r7
 8004d90:	4372      	muls	r2, r6
 8004d92:	4355      	muls	r5, r2
 8004d94:	1e40      	subs	r0, r0, #1
 8004d96:	d1f4      	bne.n	8004d82 <forward_sqrt+0x6e>
 8004d98:	699e      	ldr	r6, [r3, #24]
 8004d9a:	68b0      	ldr	r0, [r6, #8]
 8004d9c:	6822      	ldr	r2, [r4, #0]
 8004d9e:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8004da2:	1f0f      	subs	r7, r1, #4
 8004da4:	6891      	ldr	r1, [r2, #8]
 8004da6:	eb01 0385 	add.w	r3, r1, r5, lsl #2
 8004daa:	1f1c      	subs	r4, r3, #4
 8004dac:	4287      	cmp	r7, r0
 8004dae:	d30a      	bcc.n	8004dc6 <forward_sqrt+0xb2>
 8004db0:	ed97 0a00 	vldr	s0, [r7]
 8004db4:	f002 fa4e 	bl	8007254 <ai_math_sqrt>
 8004db8:	ed84 0a00 	vstr	s0, [r4]
 8004dbc:	1f3f      	subs	r7, r7, #4
 8004dbe:	68b0      	ldr	r0, [r6, #8]
 8004dc0:	1f24      	subs	r4, r4, #4
 8004dc2:	4287      	cmp	r7, r0
 8004dc4:	d2f4      	bcs.n	8004db0 <forward_sqrt+0x9c>
 8004dc6:	b001      	add	sp, #4
 8004dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004dcc <nl_func_soft_plus_array_f32>:
 8004dcc:	b570      	push	{r4, r5, r6, lr}
 8004dce:	688c      	ldr	r4, [r1, #8]
 8004dd0:	6880      	ldr	r0, [r0, #8]
 8004dd2:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8004dd6:	1f0d      	subs	r5, r1, #4
 8004dd8:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8004ddc:	1f0e      	subs	r6, r1, #4
 8004dde:	42a5      	cmp	r5, r4
 8004de0:	f0c0 8010 	bcc.w	8004e04 <nl_func_soft_plus_array_f32+0x38>
 8004de4:	ed95 0a00 	vldr	s0, [r5]
 8004de8:	f00d ff70 	bl	8012ccc <expf>
 8004dec:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8004df0:	ee30 0a20 	vadd.f32	s0, s0, s1
 8004df4:	f00e f840 	bl	8012e78 <logf>
 8004df8:	ed86 0a00 	vstr	s0, [r6]
 8004dfc:	1f2d      	subs	r5, r5, #4
 8004dfe:	1f36      	subs	r6, r6, #4
 8004e00:	42a5      	cmp	r5, r4
 8004e02:	d2ef      	bcs.n	8004de4 <nl_func_soft_plus_array_f32+0x18>
 8004e04:	bd70      	pop	{r4, r5, r6, pc}
	...

08004e08 <forward_soft_plus>:
 8004e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e0a:	b081      	sub	sp, #4
 8004e0c:	6942      	ldr	r2, [r0, #20]
 8004e0e:	8811      	ldrh	r1, [r2, #0]
 8004e10:	2900      	cmp	r1, #0
 8004e12:	bf1a      	itte	ne
 8004e14:	6850      	ldrne	r0, [r2, #4]
 8004e16:	1d00      	addne	r0, r0, #4
 8004e18:	2004      	moveq	r0, #4
 8004e1a:	f04f 0501 	mov.w	r5, #1
 8004e1e:	6800      	ldr	r0, [r0, #0]
 8004e20:	2800      	cmp	r0, #0
 8004e22:	bf14      	ite	ne
 8004e24:	6803      	ldrne	r3, [r0, #0]
 8004e26:	2300      	moveq	r3, #0
 8004e28:	2902      	cmp	r1, #2
 8004e2a:	bfa6      	itte	ge
 8004e2c:	6850      	ldrge	r0, [r2, #4]
 8004e2e:	3010      	addge	r0, #16
 8004e30:	2004      	movlt	r0, #4
 8004e32:	6800      	ldr	r0, [r0, #0]
 8004e34:	2800      	cmp	r0, #0
 8004e36:	bf19      	ittee	ne
 8004e38:	6800      	ldrne	r0, [r0, #0]
 8004e3a:	f100 0418 	addne.w	r4, r0, #24
 8004e3e:	2100      	moveq	r1, #0
 8004e40:	f101 0418 	addeq.w	r4, r1, #24
 8004e44:	f103 0108 	add.w	r1, r3, #8
 8004e48:	680a      	ldr	r2, [r1, #0]
 8004e4a:	0a12      	lsrs	r2, r2, #8
 8004e4c:	d01e      	beq.n	8004e8c <forward_soft_plus+0x84>
 8004e4e:	684e      	ldr	r6, [r1, #4]
 8004e50:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004e54:	4610      	mov	r0, r2
 8004e56:	1f0f      	subs	r7, r1, #4
 8004e58:	f010 0103 	ands.w	r1, r0, #3
 8004e5c:	d006      	beq.n	8004e6c <forward_soft_plus+0x64>
 8004e5e:	1e52      	subs	r2, r2, #1
 8004e60:	f857 c904 	ldr.w	ip, [r7], #-4
 8004e64:	1e49      	subs	r1, r1, #1
 8004e66:	fb0c f505 	mul.w	r5, ip, r5
 8004e6a:	d1f8      	bne.n	8004e5e <forward_soft_plus+0x56>
 8004e6c:	0880      	lsrs	r0, r0, #2
 8004e6e:	d00d      	beq.n	8004e8c <forward_soft_plus+0x84>
 8004e70:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004e74:	3910      	subs	r1, #16
 8004e76:	68ca      	ldr	r2, [r1, #12]
 8004e78:	688e      	ldr	r6, [r1, #8]
 8004e7a:	684f      	ldr	r7, [r1, #4]
 8004e7c:	4372      	muls	r2, r6
 8004e7e:	f851 6910 	ldr.w	r6, [r1], #-16
 8004e82:	437a      	muls	r2, r7
 8004e84:	4372      	muls	r2, r6
 8004e86:	4355      	muls	r5, r2
 8004e88:	1e40      	subs	r0, r0, #1
 8004e8a:	d1f4      	bne.n	8004e76 <forward_soft_plus+0x6e>
 8004e8c:	6998      	ldr	r0, [r3, #24]
 8004e8e:	6886      	ldr	r6, [r0, #8]
 8004e90:	6821      	ldr	r1, [r4, #0]
 8004e92:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8004e96:	1f07      	subs	r7, r0, #4
 8004e98:	6888      	ldr	r0, [r1, #8]
 8004e9a:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8004e9e:	1f14      	subs	r4, r2, #4
 8004ea0:	42b7      	cmp	r7, r6
 8004ea2:	d30f      	bcc.n	8004ec4 <forward_soft_plus+0xbc>
 8004ea4:	ed97 0a00 	vldr	s0, [r7]
 8004ea8:	f00d ff10 	bl	8012ccc <expf>
 8004eac:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8004eb0:	ee30 0a20 	vadd.f32	s0, s0, s1
 8004eb4:	f00d ffe0 	bl	8012e78 <logf>
 8004eb8:	ed84 0a00 	vstr	s0, [r4]
 8004ebc:	1f3f      	subs	r7, r7, #4
 8004ebe:	1f24      	subs	r4, r4, #4
 8004ec0:	42b7      	cmp	r7, r6
 8004ec2:	d2ef      	bcs.n	8004ea4 <forward_soft_plus+0x9c>
 8004ec4:	b001      	add	sp, #4
 8004ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004ec8 <nl_func_soft_sign_array_f32>:
 8004ec8:	6889      	ldr	r1, [r1, #8]
 8004eca:	6880      	ldr	r0, [r0, #8]
 8004ecc:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8004ed0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004ed4:	1f1b      	subs	r3, r3, #4
 8004ed6:	1f10      	subs	r0, r2, #4
 8004ed8:	428b      	cmp	r3, r1
 8004eda:	d30f      	bcc.n	8004efc <nl_func_soft_sign_array_f32+0x34>
 8004edc:	ed93 0a00 	vldr	s0, [r3]
 8004ee0:	eef0 0ac0 	vabs.f32	s1, s0
 8004ee4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8004ee8:	ee70 0a81 	vadd.f32	s1, s1, s2
 8004eec:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8004ef0:	ed80 0a00 	vstr	s0, [r0]
 8004ef4:	1f1b      	subs	r3, r3, #4
 8004ef6:	1f00      	subs	r0, r0, #4
 8004ef8:	428b      	cmp	r3, r1
 8004efa:	d2ef      	bcs.n	8004edc <nl_func_soft_sign_array_f32+0x14>
 8004efc:	4770      	bx	lr
	...

08004f00 <forward_soft_sign>:
 8004f00:	b4f0      	push	{r4, r5, r6, r7}
 8004f02:	6942      	ldr	r2, [r0, #20]
 8004f04:	8811      	ldrh	r1, [r2, #0]
 8004f06:	2900      	cmp	r1, #0
 8004f08:	bf1a      	itte	ne
 8004f0a:	6850      	ldrne	r0, [r2, #4]
 8004f0c:	1d00      	addne	r0, r0, #4
 8004f0e:	2004      	moveq	r0, #4
 8004f10:	f04f 0501 	mov.w	r5, #1
 8004f14:	6800      	ldr	r0, [r0, #0]
 8004f16:	2800      	cmp	r0, #0
 8004f18:	bf14      	ite	ne
 8004f1a:	6803      	ldrne	r3, [r0, #0]
 8004f1c:	2300      	moveq	r3, #0
 8004f1e:	2902      	cmp	r1, #2
 8004f20:	bfa6      	itte	ge
 8004f22:	6850      	ldrge	r0, [r2, #4]
 8004f24:	3010      	addge	r0, #16
 8004f26:	2004      	movlt	r0, #4
 8004f28:	6800      	ldr	r0, [r0, #0]
 8004f2a:	2800      	cmp	r0, #0
 8004f2c:	bf19      	ittee	ne
 8004f2e:	6800      	ldrne	r0, [r0, #0]
 8004f30:	f100 0418 	addne.w	r4, r0, #24
 8004f34:	2100      	moveq	r1, #0
 8004f36:	f101 0418 	addeq.w	r4, r1, #24
 8004f3a:	f103 0108 	add.w	r1, r3, #8
 8004f3e:	680a      	ldr	r2, [r1, #0]
 8004f40:	0a12      	lsrs	r2, r2, #8
 8004f42:	d01e      	beq.n	8004f82 <forward_soft_sign+0x82>
 8004f44:	684e      	ldr	r6, [r1, #4]
 8004f46:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004f4a:	4610      	mov	r0, r2
 8004f4c:	1f0f      	subs	r7, r1, #4
 8004f4e:	f010 0103 	ands.w	r1, r0, #3
 8004f52:	d006      	beq.n	8004f62 <forward_soft_sign+0x62>
 8004f54:	1e52      	subs	r2, r2, #1
 8004f56:	f857 c904 	ldr.w	ip, [r7], #-4
 8004f5a:	1e49      	subs	r1, r1, #1
 8004f5c:	fb0c f505 	mul.w	r5, ip, r5
 8004f60:	d1f8      	bne.n	8004f54 <forward_soft_sign+0x54>
 8004f62:	0880      	lsrs	r0, r0, #2
 8004f64:	d00d      	beq.n	8004f82 <forward_soft_sign+0x82>
 8004f66:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004f6a:	3910      	subs	r1, #16
 8004f6c:	68ca      	ldr	r2, [r1, #12]
 8004f6e:	688e      	ldr	r6, [r1, #8]
 8004f70:	684f      	ldr	r7, [r1, #4]
 8004f72:	4372      	muls	r2, r6
 8004f74:	f851 6910 	ldr.w	r6, [r1], #-16
 8004f78:	437a      	muls	r2, r7
 8004f7a:	4372      	muls	r2, r6
 8004f7c:	4355      	muls	r5, r2
 8004f7e:	1e40      	subs	r0, r0, #1
 8004f80:	d1f4      	bne.n	8004f6c <forward_soft_sign+0x6c>
 8004f82:	6998      	ldr	r0, [r3, #24]
 8004f84:	6822      	ldr	r2, [r4, #0]
 8004f86:	6880      	ldr	r0, [r0, #8]
 8004f88:	6893      	ldr	r3, [r2, #8]
 8004f8a:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8004f8e:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8004f92:	1f09      	subs	r1, r1, #4
 8004f94:	1f22      	subs	r2, r4, #4
 8004f96:	4281      	cmp	r1, r0
 8004f98:	f0c0 8010 	bcc.w	8004fbc <forward_soft_sign+0xbc>
 8004f9c:	ed91 0a00 	vldr	s0, [r1]
 8004fa0:	eef0 0ac0 	vabs.f32	s1, s0
 8004fa4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8004fa8:	ee70 0a81 	vadd.f32	s1, s1, s2
 8004fac:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8004fb0:	ed82 0a00 	vstr	s0, [r2]
 8004fb4:	1f09      	subs	r1, r1, #4
 8004fb6:	1f12      	subs	r2, r2, #4
 8004fb8:	4281      	cmp	r1, r0
 8004fba:	d2ef      	bcs.n	8004f9c <forward_soft_sign+0x9c>
 8004fbc:	bcf0      	pop	{r4, r5, r6, r7}
 8004fbe:	4770      	bx	lr

08004fc0 <nl_func_tanh_array_f32>:
 8004fc0:	b570      	push	{r4, r5, r6, lr}
 8004fc2:	688c      	ldr	r4, [r1, #8]
 8004fc4:	6880      	ldr	r0, [r0, #8]
 8004fc6:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8004fca:	1f0d      	subs	r5, r1, #4
 8004fcc:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8004fd0:	1f0e      	subs	r6, r1, #4
 8004fd2:	42a5      	cmp	r5, r4
 8004fd4:	f0c0 800a 	bcc.w	8004fec <nl_func_tanh_array_f32+0x2c>
 8004fd8:	ed95 0a00 	vldr	s0, [r5]
 8004fdc:	f00d fc50 	bl	8012880 <tanhf>
 8004fe0:	ed86 0a00 	vstr	s0, [r6]
 8004fe4:	1f2d      	subs	r5, r5, #4
 8004fe6:	1f36      	subs	r6, r6, #4
 8004fe8:	42a5      	cmp	r5, r4
 8004fea:	d2f5      	bcs.n	8004fd8 <nl_func_tanh_array_f32+0x18>
 8004fec:	bd70      	pop	{r4, r5, r6, pc}
	...

08004ff0 <forward_tanh>:
 8004ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ff2:	b081      	sub	sp, #4
 8004ff4:	6942      	ldr	r2, [r0, #20]
 8004ff6:	8811      	ldrh	r1, [r2, #0]
 8004ff8:	2900      	cmp	r1, #0
 8004ffa:	bf1a      	itte	ne
 8004ffc:	6850      	ldrne	r0, [r2, #4]
 8004ffe:	1d00      	addne	r0, r0, #4
 8005000:	2004      	moveq	r0, #4
 8005002:	f04f 0501 	mov.w	r5, #1
 8005006:	6800      	ldr	r0, [r0, #0]
 8005008:	2800      	cmp	r0, #0
 800500a:	bf14      	ite	ne
 800500c:	6803      	ldrne	r3, [r0, #0]
 800500e:	2300      	moveq	r3, #0
 8005010:	2902      	cmp	r1, #2
 8005012:	bfa6      	itte	ge
 8005014:	6850      	ldrge	r0, [r2, #4]
 8005016:	3010      	addge	r0, #16
 8005018:	2004      	movlt	r0, #4
 800501a:	6800      	ldr	r0, [r0, #0]
 800501c:	2800      	cmp	r0, #0
 800501e:	bf19      	ittee	ne
 8005020:	6800      	ldrne	r0, [r0, #0]
 8005022:	f100 0418 	addne.w	r4, r0, #24
 8005026:	2100      	moveq	r1, #0
 8005028:	f101 0418 	addeq.w	r4, r1, #24
 800502c:	f103 0108 	add.w	r1, r3, #8
 8005030:	680a      	ldr	r2, [r1, #0]
 8005032:	0a12      	lsrs	r2, r2, #8
 8005034:	d01e      	beq.n	8005074 <forward_tanh+0x84>
 8005036:	684e      	ldr	r6, [r1, #4]
 8005038:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800503c:	4610      	mov	r0, r2
 800503e:	1f0f      	subs	r7, r1, #4
 8005040:	f010 0103 	ands.w	r1, r0, #3
 8005044:	d006      	beq.n	8005054 <forward_tanh+0x64>
 8005046:	1e52      	subs	r2, r2, #1
 8005048:	f857 c904 	ldr.w	ip, [r7], #-4
 800504c:	1e49      	subs	r1, r1, #1
 800504e:	fb0c f505 	mul.w	r5, ip, r5
 8005052:	d1f8      	bne.n	8005046 <forward_tanh+0x56>
 8005054:	0880      	lsrs	r0, r0, #2
 8005056:	d00d      	beq.n	8005074 <forward_tanh+0x84>
 8005058:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800505c:	3910      	subs	r1, #16
 800505e:	68ca      	ldr	r2, [r1, #12]
 8005060:	688e      	ldr	r6, [r1, #8]
 8005062:	684f      	ldr	r7, [r1, #4]
 8005064:	4372      	muls	r2, r6
 8005066:	f851 6910 	ldr.w	r6, [r1], #-16
 800506a:	437a      	muls	r2, r7
 800506c:	4372      	muls	r2, r6
 800506e:	4355      	muls	r5, r2
 8005070:	1e40      	subs	r0, r0, #1
 8005072:	d1f4      	bne.n	800505e <forward_tanh+0x6e>
 8005074:	6998      	ldr	r0, [r3, #24]
 8005076:	6886      	ldr	r6, [r0, #8]
 8005078:	6821      	ldr	r1, [r4, #0]
 800507a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800507e:	1f07      	subs	r7, r0, #4
 8005080:	6888      	ldr	r0, [r1, #8]
 8005082:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8005086:	1f14      	subs	r4, r2, #4
 8005088:	42b7      	cmp	r7, r6
 800508a:	d309      	bcc.n	80050a0 <forward_tanh+0xb0>
 800508c:	ed97 0a00 	vldr	s0, [r7]
 8005090:	f00d fbf6 	bl	8012880 <tanhf>
 8005094:	ed84 0a00 	vstr	s0, [r4]
 8005098:	1f3f      	subs	r7, r7, #4
 800509a:	1f24      	subs	r4, r4, #4
 800509c:	42b7      	cmp	r7, r6
 800509e:	d2f5      	bcs.n	800508c <forward_tanh+0x9c>
 80050a0:	b001      	add	sp, #4
 80050a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080050a4 <nl_func_relu_array_f32>:
 80050a4:	6889      	ldr	r1, [r1, #8]
 80050a6:	6880      	ldr	r0, [r0, #8]
 80050a8:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80050ac:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80050b0:	1f1b      	subs	r3, r3, #4
 80050b2:	1f10      	subs	r0, r2, #4
 80050b4:	428b      	cmp	r3, r1
 80050b6:	d30e      	bcc.n	80050d6 <nl_func_relu_array_f32+0x32>
 80050b8:	ed93 0a00 	vldr	s0, [r3]
 80050bc:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80050c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050c4:	bf48      	it	mi
 80050c6:	ed9f 0a7b 	vldrmi	s0, [pc, #492]	; 80052b4 <.text_62>
 80050ca:	ed80 0a00 	vstr	s0, [r0]
 80050ce:	1f1b      	subs	r3, r3, #4
 80050d0:	1f00      	subs	r0, r0, #4
 80050d2:	428b      	cmp	r3, r1
 80050d4:	d2f0      	bcs.n	80050b8 <nl_func_relu_array_f32+0x14>
 80050d6:	4770      	bx	lr

080050d8 <nl_func_sm_channel_f32>:
 80050d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050dc:	ed2d 8b02 	vpush	{d8}
 80050e0:	688f      	ldr	r7, [r1, #8]
 80050e2:	6886      	ldr	r6, [r0, #8]
 80050e4:	ed97 8a00 	vldr	s16, [r7]
 80050e8:	4614      	mov	r4, r2
 80050ea:	2c02      	cmp	r4, #2
 80050ec:	eddf 8a71 	vldr	s17, [pc, #452]	; 80052b4 <.text_62>
 80050f0:	d33d      	bcc.n	800516e <nl_func_sm_channel_f32+0x96>
 80050f2:	1e61      	subs	r1, r4, #1
 80050f4:	1d3a      	adds	r2, r7, #4
 80050f6:	f011 0003 	ands.w	r0, r1, #3
 80050fa:	d00c      	beq.n	8005116 <nl_func_sm_channel_f32+0x3e>
 80050fc:	ed92 0a00 	vldr	s0, [r2]
 8005100:	eeb4 0a48 	vcmp.f32	s0, s16
 8005104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005108:	bf58      	it	pl
 800510a:	eeb0 8a40 	vmovpl.f32	s16, s0
 800510e:	1e40      	subs	r0, r0, #1
 8005110:	f102 0204 	add.w	r2, r2, #4
 8005114:	d1f2      	bne.n	80050fc <nl_func_sm_channel_f32+0x24>
 8005116:	0889      	lsrs	r1, r1, #2
 8005118:	f000 802b 	beq.w	8005172 <nl_func_sm_channel_f32+0x9a>
 800511c:	ed92 0a00 	vldr	s0, [r2]
 8005120:	eeb4 0a48 	vcmp.f32	s0, s16
 8005124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005128:	bf58      	it	pl
 800512a:	eeb0 8a40 	vmovpl.f32	s16, s0
 800512e:	ed92 0a01 	vldr	s0, [r2, #4]
 8005132:	eeb4 0a48 	vcmp.f32	s0, s16
 8005136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800513a:	bf58      	it	pl
 800513c:	eeb0 8a40 	vmovpl.f32	s16, s0
 8005140:	ed92 0a02 	vldr	s0, [r2, #8]
 8005144:	eeb4 0a48 	vcmp.f32	s0, s16
 8005148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800514c:	bf58      	it	pl
 800514e:	eeb0 8a40 	vmovpl.f32	s16, s0
 8005152:	ed92 0a03 	vldr	s0, [r2, #12]
 8005156:	eeb4 0a48 	vcmp.f32	s0, s16
 800515a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800515e:	bf58      	it	pl
 8005160:	eeb0 8a40 	vmovpl.f32	s16, s0
 8005164:	1e49      	subs	r1, r1, #1
 8005166:	f102 0210 	add.w	r2, r2, #16
 800516a:	d1d7      	bne.n	800511c <nl_func_sm_channel_f32+0x44>
 800516c:	e001      	b.n	8005172 <nl_func_sm_channel_f32+0x9a>
 800516e:	2c00      	cmp	r4, #0
 8005170:	d040      	beq.n	80051f4 <nl_func_sm_channel_f32+0x11c>
 8005172:	46b0      	mov	r8, r6
 8005174:	ea4f 0504 	mov.w	r5, r4
 8005178:	ed97 0a00 	vldr	s0, [r7]
 800517c:	ee30 0a48 	vsub.f32	s0, s0, s16
 8005180:	f00d fda4 	bl	8012ccc <expf>
 8005184:	1d3f      	adds	r7, r7, #4
 8005186:	ed88 0a00 	vstr	s0, [r8]
 800518a:	1e6d      	subs	r5, r5, #1
 800518c:	ee78 8a80 	vadd.f32	s17, s17, s0
 8005190:	f108 0804 	add.w	r8, r8, #4
 8005194:	d1f0      	bne.n	8005178 <nl_func_sm_channel_f32+0xa0>
 8005196:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800519a:	f014 0003 	ands.w	r0, r4, #3
 800519e:	ee80 0a28 	vdiv.f32	s0, s0, s17
 80051a2:	d009      	beq.n	80051b8 <nl_func_sm_channel_f32+0xe0>
 80051a4:	edd6 0a00 	vldr	s1, [r6]
 80051a8:	ee60 0a80 	vmul.f32	s1, s1, s0
 80051ac:	edc6 0a00 	vstr	s1, [r6]
 80051b0:	1e40      	subs	r0, r0, #1
 80051b2:	f106 0604 	add.w	r6, r6, #4
 80051b6:	d1f5      	bne.n	80051a4 <nl_func_sm_channel_f32+0xcc>
 80051b8:	08a4      	lsrs	r4, r4, #2
 80051ba:	d01b      	beq.n	80051f4 <nl_func_sm_channel_f32+0x11c>
 80051bc:	edd6 0a00 	vldr	s1, [r6]
 80051c0:	ee60 0a80 	vmul.f32	s1, s1, s0
 80051c4:	edc6 0a00 	vstr	s1, [r6]
 80051c8:	1e64      	subs	r4, r4, #1
 80051ca:	ed96 1a01 	vldr	s2, [r6, #4]
 80051ce:	edd6 0a02 	vldr	s1, [r6, #8]
 80051d2:	ee21 1a00 	vmul.f32	s2, s2, s0
 80051d6:	ed86 1a01 	vstr	s2, [r6, #4]
 80051da:	ee60 0a80 	vmul.f32	s1, s1, s0
 80051de:	ed96 1a03 	vldr	s2, [r6, #12]
 80051e2:	edc6 0a02 	vstr	s1, [r6, #8]
 80051e6:	ee21 1a00 	vmul.f32	s2, s2, s0
 80051ea:	ed86 1a03 	vstr	s2, [r6, #12]
 80051ee:	f106 0610 	add.w	r6, r6, #16
 80051f2:	d1e3      	bne.n	80051bc <nl_func_sm_channel_f32+0xe4>
 80051f4:	ecbd 8b02 	vpop	{d8}
 80051f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080051fc <nl_func_sm_array_f32>:
 80051fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005200:	460d      	mov	r5, r1
 8005202:	4604      	mov	r4, r0
 8005204:	9f08      	ldr	r7, [sp, #32]
 8005206:	68a8      	ldr	r0, [r5, #8]
 8005208:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800520a:	00bf      	lsls	r7, r7, #2
 800520c:	427f      	negs	r7, r7
 800520e:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8005212:	68a0      	ldr	r0, [r4, #8]
 8005214:	eb01 0a07 	add.w	sl, r1, r7
 8005218:	00b6      	lsls	r6, r6, #2
 800521a:	4276      	negs	r6, r6
 800521c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8005220:	68ea      	ldr	r2, [r5, #12]
 8005222:	4592      	cmp	sl, r2
 8005224:	eb01 0906 	add.w	r9, r1, r6
 8005228:	d30f      	bcc.n	800524a <nl_func_sm_array_f32+0x4e>
 800522a:	4698      	mov	r8, r3
 800522c:	f8c5 a008 	str.w	sl, [r5, #8]
 8005230:	f8c4 9008 	str.w	r9, [r4, #8]
 8005234:	2300      	movs	r3, #0
 8005236:	4642      	mov	r2, r8
 8005238:	4629      	mov	r1, r5
 800523a:	4620      	mov	r0, r4
 800523c:	f7ff ff4c 	bl	80050d8 <nl_func_sm_channel_f32>
 8005240:	68e8      	ldr	r0, [r5, #12]
 8005242:	44ba      	add	sl, r7
 8005244:	4582      	cmp	sl, r0
 8005246:	44b1      	add	r9, r6
 8005248:	d2f0      	bcs.n	800522c <nl_func_sm_array_f32+0x30>
 800524a:	68e9      	ldr	r1, [r5, #12]
 800524c:	60a9      	str	r1, [r5, #8]
 800524e:	68e0      	ldr	r0, [r4, #12]
 8005250:	60a0      	str	r0, [r4, #8]
 8005252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08005258 <nl_func_hard_sigmoid_array_f32>:
 8005258:	6889      	ldr	r1, [r1, #8]
 800525a:	6880      	ldr	r0, [r0, #8]
 800525c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8005260:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005264:	1f1b      	subs	r3, r3, #4
 8005266:	1f10      	subs	r0, r2, #4
 8005268:	428b      	cmp	r3, r1
 800526a:	d321      	bcc.n	80052b0 <nl_func_hard_sigmoid_array_f32+0x58>
 800526c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005270:	eddf 0ab8 	vldr	s1, [pc, #736]	; 8005554 <.text_68>
 8005274:	edd3 1a00 	vldr	s3, [r3]
 8005278:	ed9f 2ab7 	vldr	s4, [pc, #732]	; 8005558 <.text_69>
 800527c:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8005280:	ee01 1a82 	vmla.f32	s2, s3, s4
 8005284:	eeb4 1a60 	vcmp.f32	s2, s1
 8005288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800528c:	da08      	bge.n	80052a0 <nl_func_hard_sigmoid_array_f32+0x48>
 800528e:	eeb5 1a40 	vcmp.f32	s2, #0.0
 8005292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005296:	d505      	bpl.n	80052a4 <nl_func_hard_sigmoid_array_f32+0x4c>
 8005298:	ed9f 1a06 	vldr	s2, [pc, #24]	; 80052b4 <.text_62>
 800529c:	e002      	b.n	80052a4 <nl_func_hard_sigmoid_array_f32+0x4c>
 800529e:	bf00      	nop
 80052a0:	eeb0 1a40 	vmov.f32	s2, s0
 80052a4:	ed80 1a00 	vstr	s2, [r0]
 80052a8:	1f1b      	subs	r3, r3, #4
 80052aa:	1f00      	subs	r0, r0, #4
 80052ac:	428b      	cmp	r3, r1
 80052ae:	d2e1      	bcs.n	8005274 <nl_func_hard_sigmoid_array_f32+0x1c>
 80052b0:	4770      	bx	lr
	...

080052b4 <.text_62>:
 80052b4:	00000000 	.word	0x00000000

080052b8 <nl_func_clip_array_f32>:
 80052b8:	6889      	ldr	r1, [r1, #8]
 80052ba:	6880      	ldr	r0, [r0, #8]
 80052bc:	ed93 0a00 	vldr	s0, [r3]
 80052c0:	edd3 0a01 	vldr	s1, [r3, #4]
 80052c4:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80052c8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80052cc:	1f1b      	subs	r3, r3, #4
 80052ce:	1f10      	subs	r0, r2, #4
 80052d0:	428b      	cmp	r3, r1
 80052d2:	d315      	bcc.n	8005300 <nl_func_clip_array_f32+0x48>
 80052d4:	ed93 1a00 	vldr	s2, [r3]
 80052d8:	eeb4 0a41 	vcmp.f32	s0, s2
 80052dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052e0:	bf58      	it	pl
 80052e2:	eeb0 1a40 	vmovpl.f32	s2, s0
 80052e6:	eeb4 1a60 	vcmp.f32	s2, s1
 80052ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052ee:	bf58      	it	pl
 80052f0:	eeb0 1a60 	vmovpl.f32	s2, s1
 80052f4:	ed80 1a00 	vstr	s2, [r0]
 80052f8:	1f1b      	subs	r3, r3, #4
 80052fa:	1f00      	subs	r0, r0, #4
 80052fc:	428b      	cmp	r3, r1
 80052fe:	d2e9      	bcs.n	80052d4 <nl_func_clip_array_f32+0x1c>
 8005300:	4770      	bx	lr
	...

08005304 <nl_func_hardmax_array_f32>:
 8005304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005308:	6852      	ldr	r2, [r2, #4]
 800530a:	6855      	ldr	r5, [r2, #4]
 800530c:	68d4      	ldr	r4, [r2, #12]
 800530e:	688e      	ldr	r6, [r1, #8]
 8005310:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8005314:	436c      	muls	r4, r5
 8005316:	00a1      	lsls	r1, r4, #2
 8005318:	4640      	mov	r0, r8
 800531a:	f00b fd41 	bl	8010da0 <__aeabi_memclr>
 800531e:	2200      	movs	r2, #0
 8005320:	2c00      	cmp	r4, #0
 8005322:	4633      	mov	r3, r6
 8005324:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005328:	f000 805b 	beq.w	80053e2 <nl_func_hardmax_array_f32+0xde>
 800532c:	f102 0c01 	add.w	ip, r2, #1
 8005330:	eb05 0e02 	add.w	lr, r5, r2
 8005334:	45f4      	cmp	ip, lr
 8005336:	edd3 0a00 	vldr	s1, [r3]
 800533a:	d249      	bcs.n	80053d0 <nl_func_hardmax_array_f32+0xcc>
 800533c:	1e69      	subs	r1, r5, #1
 800533e:	f011 0003 	ands.w	r0, r1, #3
 8005342:	eb06 078c 	add.w	r7, r6, ip, lsl #2
 8005346:	d00f      	beq.n	8005368 <nl_func_hardmax_array_f32+0x64>
 8005348:	ed97 1a00 	vldr	s2, [r7]
 800534c:	eef4 0a41 	vcmp.f32	s1, s2
 8005350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005354:	bf44      	itt	mi
 8005356:	eef0 0a41 	vmovmi.f32	s1, s2
 800535a:	4662      	movmi	r2, ip
 800535c:	1e40      	subs	r0, r0, #1
 800535e:	f10c 0c01 	add.w	ip, ip, #1
 8005362:	f107 0704 	add.w	r7, r7, #4
 8005366:	d1ef      	bne.n	8005348 <nl_func_hardmax_array_f32+0x44>
 8005368:	0889      	lsrs	r1, r1, #2
 800536a:	d031      	beq.n	80053d0 <nl_func_hardmax_array_f32+0xcc>
 800536c:	ed97 1a00 	vldr	s2, [r7]
 8005370:	eef4 0a41 	vcmp.f32	s1, s2
 8005374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005378:	bf44      	itt	mi
 800537a:	eef0 0a41 	vmovmi.f32	s1, s2
 800537e:	4662      	movmi	r2, ip
 8005380:	ed97 1a01 	vldr	s2, [r7, #4]
 8005384:	eef4 0a41 	vcmp.f32	s1, s2
 8005388:	f10c 0001 	add.w	r0, ip, #1
 800538c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005390:	bf44      	itt	mi
 8005392:	eef0 0a41 	vmovmi.f32	s1, s2
 8005396:	4602      	movmi	r2, r0
 8005398:	ed97 1a02 	vldr	s2, [r7, #8]
 800539c:	1c40      	adds	r0, r0, #1
 800539e:	eef4 0a41 	vcmp.f32	s1, s2
 80053a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053a6:	bf44      	itt	mi
 80053a8:	eef0 0a41 	vmovmi.f32	s1, s2
 80053ac:	4602      	movmi	r2, r0
 80053ae:	ed97 1a03 	vldr	s2, [r7, #12]
 80053b2:	1c40      	adds	r0, r0, #1
 80053b4:	eef4 0a41 	vcmp.f32	s1, s2
 80053b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053bc:	bf44      	itt	mi
 80053be:	eef0 0a41 	vmovmi.f32	s1, s2
 80053c2:	4602      	movmi	r2, r0
 80053c4:	1e49      	subs	r1, r1, #1
 80053c6:	f100 0c01 	add.w	ip, r0, #1
 80053ca:	f107 0710 	add.w	r7, r7, #16
 80053ce:	d1cd      	bne.n	800536c <nl_func_hardmax_array_f32+0x68>
 80053d0:	eb08 0082 	add.w	r0, r8, r2, lsl #2
 80053d4:	4672      	mov	r2, lr
 80053d6:	42a2      	cmp	r2, r4
 80053d8:	ed80 0a00 	vstr	s0, [r0]
 80053dc:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80053e0:	d3a4      	bcc.n	800532c <nl_func_hardmax_array_f32+0x28>
 80053e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080053e8 <nl_func_relu_generic_array_f32>:
 80053e8:	6880      	ldr	r0, [r0, #8]
 80053ea:	ed93 0a00 	vldr	s0, [r3]
 80053ee:	edd3 0a01 	vldr	s1, [r3, #4]
 80053f2:	ed93 1a02 	vldr	s2, [r3, #8]
 80053f6:	6889      	ldr	r1, [r1, #8]
 80053f8:	1f03      	subs	r3, r0, #4
 80053fa:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 80053fe:	eeb5 1a40 	vcmp.f32	s2, #0.0
 8005402:	1f0b      	subs	r3, r1, #4
 8005404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005408:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800540c:	d52a      	bpl.n	8005464 <nl_func_relu_generic_array_f32+0x7c>
 800540e:	eef5 0a40 	vcmp.f32	s1, #0.0
 8005412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005416:	d013      	beq.n	8005440 <nl_func_relu_generic_array_f32+0x58>
 8005418:	428a      	cmp	r2, r1
 800541a:	d310      	bcc.n	800543e <nl_func_relu_generic_array_f32+0x56>
 800541c:	ed92 1a00 	vldr	s2, [r2]
 8005420:	eeb4 1a40 	vcmp.f32	s2, s0
 8005424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005428:	bf44      	itt	mi
 800542a:	ee31 1a40 	vsubmi.f32	s2, s2, s0
 800542e:	ee21 1a20 	vmulmi.f32	s2, s2, s1
 8005432:	ed80 1a00 	vstr	s2, [r0]
 8005436:	1f12      	subs	r2, r2, #4
 8005438:	1f00      	subs	r0, r0, #4
 800543a:	428a      	cmp	r2, r1
 800543c:	d2ee      	bcs.n	800541c <nl_func_relu_generic_array_f32+0x34>
 800543e:	4770      	bx	lr
 8005440:	428a      	cmp	r2, r1
 8005442:	d3fc      	bcc.n	800543e <nl_func_relu_generic_array_f32+0x56>
 8005444:	edd2 0a00 	vldr	s1, [r2]
 8005448:	eef4 0a40 	vcmp.f32	s1, s0
 800544c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005450:	bf48      	it	mi
 8005452:	eddf 0aa7 	vldrmi	s1, [pc, #668]	; 80056f0 <.text_73>
 8005456:	edc0 0a00 	vstr	s1, [r0]
 800545a:	1f12      	subs	r2, r2, #4
 800545c:	1f00      	subs	r0, r0, #4
 800545e:	428a      	cmp	r2, r1
 8005460:	d2f0      	bcs.n	8005444 <nl_func_relu_generic_array_f32+0x5c>
 8005462:	4770      	bx	lr
 8005464:	428a      	cmp	r2, r1
 8005466:	d3ea      	bcc.n	800543e <nl_func_relu_generic_array_f32+0x56>
 8005468:	edd2 1a00 	vldr	s3, [r2]
 800546c:	eef4 1a41 	vcmp.f32	s3, s2
 8005470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005474:	d50a      	bpl.n	800548c <nl_func_relu_generic_array_f32+0xa4>
 8005476:	eef4 1a40 	vcmp.f32	s3, s0
 800547a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800547e:	d507      	bpl.n	8005490 <nl_func_relu_generic_array_f32+0xa8>
 8005480:	ee71 1ac0 	vsub.f32	s3, s3, s0
 8005484:	ee61 1aa0 	vmul.f32	s3, s3, s1
 8005488:	e002      	b.n	8005490 <nl_func_relu_generic_array_f32+0xa8>
 800548a:	bf00      	nop
 800548c:	eef0 1a41 	vmov.f32	s3, s2
 8005490:	edc0 1a00 	vstr	s3, [r0]
 8005494:	1f12      	subs	r2, r2, #4
 8005496:	1f00      	subs	r0, r0, #4
 8005498:	428a      	cmp	r2, r1
 800549a:	d2e5      	bcs.n	8005468 <nl_func_relu_generic_array_f32+0x80>
 800549c:	4770      	bx	lr
	...

080054a0 <nl_func_relu_thresholded_array_f32>:
 80054a0:	6889      	ldr	r1, [r1, #8]
 80054a2:	6880      	ldr	r0, [r0, #8]
 80054a4:	ed93 0a00 	vldr	s0, [r3]
 80054a8:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80054ac:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80054b0:	1f1b      	subs	r3, r3, #4
 80054b2:	1f10      	subs	r0, r2, #4
 80054b4:	428b      	cmp	r3, r1
 80054b6:	d30e      	bcc.n	80054d6 <nl_func_relu_thresholded_array_f32+0x36>
 80054b8:	edd3 0a00 	vldr	s1, [r3]
 80054bc:	eef4 0a40 	vcmp.f32	s1, s0
 80054c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054c4:	bf48      	it	mi
 80054c6:	eddf 0a8a 	vldrmi	s1, [pc, #552]	; 80056f0 <.text_73>
 80054ca:	edc0 0a00 	vstr	s1, [r0]
 80054ce:	1f1b      	subs	r3, r3, #4
 80054d0:	1f00      	subs	r0, r0, #4
 80054d2:	428b      	cmp	r3, r1
 80054d4:	d2f0      	bcs.n	80054b8 <nl_func_relu_thresholded_array_f32+0x18>
 80054d6:	4770      	bx	lr

080054d8 <nl_func_elu_array_f32>:
 80054d8:	b570      	push	{r4, r5, r6, lr}
 80054da:	ed2d 8b04 	vpush	{d8-d9}
 80054de:	688c      	ldr	r4, [r1, #8]
 80054e0:	6880      	ldr	r0, [r0, #8]
 80054e2:	ed93 8a00 	vldr	s16, [r3]
 80054e6:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80054ea:	1f0d      	subs	r5, r1, #4
 80054ec:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80054f0:	1f0e      	subs	r6, r1, #4
 80054f2:	42a5      	cmp	r5, r4
 80054f4:	f0c0 802a 	bcc.w	800554c <nl_func_elu_array_f32+0x74>
 80054f8:	edd5 8a00 	vldr	s17, [r5]
 80054fc:	eef5 8a40 	vcmp.f32	s17, #0.0
 8005500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005504:	bf4c      	ite	mi
 8005506:	ed9f 9a7a 	vldrmi	s18, [pc, #488]	; 80056f0 <.text_73>
 800550a:	eeb0 9a68 	vmovpl.f32	s18, s17
 800550e:	eeb0 0a68 	vmov.f32	s0, s17
 8005512:	f00d fbdb 	bl	8012ccc <expf>
 8005516:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 800551a:	ee30 0a20 	vadd.f32	s0, s0, s1
 800551e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8005522:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800552a:	dc09      	bgt.n	8005540 <nl_func_elu_array_f32+0x68>
 800552c:	eeb0 0a68 	vmov.f32	s0, s17
 8005530:	f00d fbcc 	bl	8012ccc <expf>
 8005534:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8005538:	ee30 0a20 	vadd.f32	s0, s0, s1
 800553c:	ee00 9a08 	vmla.f32	s18, s0, s16
 8005540:	ed86 9a00 	vstr	s18, [r6]
 8005544:	1f2d      	subs	r5, r5, #4
 8005546:	1f36      	subs	r6, r6, #4
 8005548:	42a5      	cmp	r5, r4
 800554a:	d2d5      	bcs.n	80054f8 <nl_func_elu_array_f32+0x20>
 800554c:	ecbd 8b04 	vpop	{d8-d9}
 8005550:	bd70      	pop	{r4, r5, r6, pc}
	...

08005554 <.text_68>:
 8005554:	3f800001 	.word	0x3f800001

08005558 <.text_69>:
 8005558:	3e4ccccd 	.word	0x3e4ccccd

0800555c <nl_func_selu_array_f32>:
 800555c:	b570      	push	{r4, r5, r6, lr}
 800555e:	ed2d 8b04 	vpush	{d8-d9}
 8005562:	688c      	ldr	r4, [r1, #8]
 8005564:	6880      	ldr	r0, [r0, #8]
 8005566:	ed93 8a00 	vldr	s16, [r3]
 800556a:	edd3 8a01 	vldr	s17, [r3, #4]
 800556e:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8005572:	1f0d      	subs	r5, r1, #4
 8005574:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8005578:	1f0e      	subs	r6, r1, #4
 800557a:	42a5      	cmp	r5, r4
 800557c:	f0c0 802c 	bcc.w	80055d8 <nl_func_selu_array_f32+0x7c>
 8005580:	ed95 9a00 	vldr	s18, [r5]
 8005584:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8005588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800558c:	bf4c      	ite	mi
 800558e:	eddf 9a58 	vldrmi	s19, [pc, #352]	; 80056f0 <.text_73>
 8005592:	eef0 9a49 	vmovpl.f32	s19, s18
 8005596:	eeb0 0a49 	vmov.f32	s0, s18
 800559a:	f00d fb97 	bl	8012ccc <expf>
 800559e:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80055a2:	ee30 0a20 	vadd.f32	s0, s0, s1
 80055a6:	ee20 0a08 	vmul.f32	s0, s0, s16
 80055aa:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80055ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055b2:	dc09      	bgt.n	80055c8 <nl_func_selu_array_f32+0x6c>
 80055b4:	eeb0 0a49 	vmov.f32	s0, s18
 80055b8:	f00d fb88 	bl	8012ccc <expf>
 80055bc:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80055c0:	ee30 0a20 	vadd.f32	s0, s0, s1
 80055c4:	ee40 9a08 	vmla.f32	s19, s0, s16
 80055c8:	ee28 0aa9 	vmul.f32	s0, s17, s19
 80055cc:	ed86 0a00 	vstr	s0, [r6]
 80055d0:	1f2d      	subs	r5, r5, #4
 80055d2:	1f36      	subs	r6, r6, #4
 80055d4:	42a5      	cmp	r5, r4
 80055d6:	d2d3      	bcs.n	8005580 <nl_func_selu_array_f32+0x24>
 80055d8:	ecbd 8b04 	vpop	{d8-d9}
 80055dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080055e0 <nl_func_prelu_array_f32>:
 80055e0:	6889      	ldr	r1, [r1, #8]
 80055e2:	6880      	ldr	r0, [r0, #8]
 80055e4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80055e8:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 80055ec:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80055f0:	1f1b      	subs	r3, r3, #4
 80055f2:	f1ac 0c04 	sub.w	ip, ip, #4
 80055f6:	1f10      	subs	r0, r2, #4
 80055f8:	458c      	cmp	ip, r1
 80055fa:	d320      	bcc.n	800563e <nl_func_prelu_array_f32+0x5e>
 80055fc:	ed9c 0a00 	vldr	s0, [ip]
 8005600:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005608:	bf4c      	ite	mi
 800560a:	eddf 0a39 	vldrmi	s1, [pc, #228]	; 80056f0 <.text_73>
 800560e:	eef0 0a40 	vmovpl.f32	s1, s0
 8005612:	461a      	mov	r2, r3
 8005614:	eeb1 0a40 	vneg.f32	s0, s0
 8005618:	1f13      	subs	r3, r2, #4
 800561a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800561e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005622:	bf48      	it	mi
 8005624:	ed9f 0a32 	vldrmi	s0, [pc, #200]	; 80056f0 <.text_73>
 8005628:	ed92 1a00 	vldr	s2, [r2]
 800562c:	ee41 0a40 	vmls.f32	s1, s2, s0
 8005630:	edc0 0a00 	vstr	s1, [r0]
 8005634:	f1ac 0c04 	sub.w	ip, ip, #4
 8005638:	1f00      	subs	r0, r0, #4
 800563a:	458c      	cmp	ip, r1
 800563c:	d2de      	bcs.n	80055fc <nl_func_prelu_array_f32+0x1c>
 800563e:	4770      	bx	lr

08005640 <forward_relu>:
 8005640:	b570      	push	{r4, r5, r6, lr}
 8005642:	4604      	mov	r4, r0
 8005644:	6962      	ldr	r2, [r4, #20]
 8005646:	8811      	ldrh	r1, [r2, #0]
 8005648:	2900      	cmp	r1, #0
 800564a:	bf1a      	itte	ne
 800564c:	6850      	ldrne	r0, [r2, #4]
 800564e:	1d00      	addne	r0, r0, #4
 8005650:	2004      	moveq	r0, #4
 8005652:	6800      	ldr	r0, [r0, #0]
 8005654:	2800      	cmp	r0, #0
 8005656:	bf14      	ite	ne
 8005658:	6805      	ldrne	r5, [r0, #0]
 800565a:	2500      	moveq	r5, #0
 800565c:	2902      	cmp	r1, #2
 800565e:	bfa6      	itte	ge
 8005660:	6850      	ldrge	r0, [r2, #4]
 8005662:	3010      	addge	r0, #16
 8005664:	2004      	movlt	r0, #4
 8005666:	6800      	ldr	r0, [r0, #0]
 8005668:	2800      	cmp	r0, #0
 800566a:	bf19      	ittee	ne
 800566c:	6800      	ldrne	r0, [r0, #0]
 800566e:	f100 0618 	addne.w	r6, r0, #24
 8005672:	2100      	moveq	r1, #0
 8005674:	f101 0618 	addeq.w	r6, r1, #24
 8005678:	69a0      	ldr	r0, [r4, #24]
 800567a:	b9f8      	cbnz	r0, 80056bc <forward_relu+0x7c>
 800567c:	f105 0008 	add.w	r0, r5, #8
 8005680:	f7fe f80a 	bl	8003698 <ai_shape_get_size>
 8005684:	69a9      	ldr	r1, [r5, #24]
 8005686:	6833      	ldr	r3, [r6, #0]
 8005688:	6889      	ldr	r1, [r1, #8]
 800568a:	689c      	ldr	r4, [r3, #8]
 800568c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8005690:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8005694:	1f12      	subs	r2, r2, #4
 8005696:	1f00      	subs	r0, r0, #4
 8005698:	428a      	cmp	r2, r1
 800569a:	d328      	bcc.n	80056ee <forward_relu+0xae>
 800569c:	ed92 0a00 	vldr	s0, [r2]
 80056a0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80056a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056a8:	bf48      	it	mi
 80056aa:	ed9f 0a11 	vldrmi	s0, [pc, #68]	; 80056f0 <.text_73>
 80056ae:	ed80 0a00 	vstr	s0, [r0]
 80056b2:	1f12      	subs	r2, r2, #4
 80056b4:	1f00      	subs	r0, r0, #4
 80056b6:	428a      	cmp	r2, r1
 80056b8:	d2f0      	bcs.n	800569c <forward_relu+0x5c>
 80056ba:	bd70      	pop	{r4, r5, r6, pc}
 80056bc:	6840      	ldr	r0, [r0, #4]
 80056be:	2801      	cmp	r0, #1
 80056c0:	f105 0008 	add.w	r0, r5, #8
 80056c4:	d109      	bne.n	80056da <forward_relu+0x9a>
 80056c6:	f7fd ffe7 	bl	8003698 <ai_shape_get_size>
 80056ca:	4602      	mov	r2, r0
 80056cc:	69a0      	ldr	r0, [r4, #24]
 80056ce:	6883      	ldr	r3, [r0, #8]
 80056d0:	69a9      	ldr	r1, [r5, #24]
 80056d2:	6830      	ldr	r0, [r6, #0]
 80056d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80056d8:	e6e2      	b.n	80054a0 <nl_func_relu_thresholded_array_f32>
 80056da:	f7fd ffdd 	bl	8003698 <ai_shape_get_size>
 80056de:	69a1      	ldr	r1, [r4, #24]
 80056e0:	688b      	ldr	r3, [r1, #8]
 80056e2:	69a9      	ldr	r1, [r5, #24]
 80056e4:	4602      	mov	r2, r0
 80056e6:	6830      	ldr	r0, [r6, #0]
 80056e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80056ec:	e67c      	b.n	80053e8 <nl_func_relu_generic_array_f32>
 80056ee:	bd70      	pop	{r4, r5, r6, pc}

080056f0 <.text_73>:
 80056f0:	00000000 	.word	0x00000000

080056f4 <forward_relu_thresholded>:
 80056f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056f6:	4602      	mov	r2, r0
 80056f8:	f04f 0601 	mov.w	r6, #1
 80056fc:	6953      	ldr	r3, [r2, #20]
 80056fe:	8819      	ldrh	r1, [r3, #0]
 8005700:	2900      	cmp	r1, #0
 8005702:	bf1a      	itte	ne
 8005704:	6858      	ldrne	r0, [r3, #4]
 8005706:	1d00      	addne	r0, r0, #4
 8005708:	2004      	moveq	r0, #4
 800570a:	6800      	ldr	r0, [r0, #0]
 800570c:	2800      	cmp	r0, #0
 800570e:	bf14      	ite	ne
 8005710:	6804      	ldrne	r4, [r0, #0]
 8005712:	2400      	moveq	r4, #0
 8005714:	2902      	cmp	r1, #2
 8005716:	bfa6      	itte	ge
 8005718:	6858      	ldrge	r0, [r3, #4]
 800571a:	3010      	addge	r0, #16
 800571c:	2004      	movlt	r0, #4
 800571e:	6800      	ldr	r0, [r0, #0]
 8005720:	2800      	cmp	r0, #0
 8005722:	bf19      	ittee	ne
 8005724:	6800      	ldrne	r0, [r0, #0]
 8005726:	f100 0518 	addne.w	r5, r0, #24
 800572a:	2100      	moveq	r1, #0
 800572c:	f101 0518 	addeq.w	r5, r1, #24
 8005730:	f104 0108 	add.w	r1, r4, #8
 8005734:	680b      	ldr	r3, [r1, #0]
 8005736:	0a1b      	lsrs	r3, r3, #8
 8005738:	d01f      	beq.n	800577a <forward_relu_thresholded+0x86>
 800573a:	684f      	ldr	r7, [r1, #4]
 800573c:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 8005740:	4618      	mov	r0, r3
 8005742:	f1a1 0c04 	sub.w	ip, r1, #4
 8005746:	f010 0103 	ands.w	r1, r0, #3
 800574a:	d006      	beq.n	800575a <forward_relu_thresholded+0x66>
 800574c:	1e5b      	subs	r3, r3, #1
 800574e:	f85c e904 	ldr.w	lr, [ip], #-4
 8005752:	1e49      	subs	r1, r1, #1
 8005754:	fb0e f606 	mul.w	r6, lr, r6
 8005758:	d1f8      	bne.n	800574c <forward_relu_thresholded+0x58>
 800575a:	0880      	lsrs	r0, r0, #2
 800575c:	d00d      	beq.n	800577a <forward_relu_thresholded+0x86>
 800575e:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 8005762:	3910      	subs	r1, #16
 8005764:	68cb      	ldr	r3, [r1, #12]
 8005766:	688f      	ldr	r7, [r1, #8]
 8005768:	437b      	muls	r3, r7
 800576a:	684f      	ldr	r7, [r1, #4]
 800576c:	437b      	muls	r3, r7
 800576e:	f851 7910 	ldr.w	r7, [r1], #-16
 8005772:	437b      	muls	r3, r7
 8005774:	435e      	muls	r6, r3
 8005776:	1e40      	subs	r0, r0, #1
 8005778:	d1f4      	bne.n	8005764 <forward_relu_thresholded+0x70>
 800577a:	6990      	ldr	r0, [r2, #24]
 800577c:	6881      	ldr	r1, [r0, #8]
 800577e:	69a0      	ldr	r0, [r4, #24]
 8005780:	682a      	ldr	r2, [r5, #0]
 8005782:	6880      	ldr	r0, [r0, #8]
 8005784:	6893      	ldr	r3, [r2, #8]
 8005786:	ed91 0a00 	vldr	s0, [r1]
 800578a:	eb00 0186 	add.w	r1, r0, r6, lsl #2
 800578e:	eb03 0486 	add.w	r4, r3, r6, lsl #2
 8005792:	1f09      	subs	r1, r1, #4
 8005794:	1f22      	subs	r2, r4, #4
 8005796:	4281      	cmp	r1, r0
 8005798:	f0c0 800f 	bcc.w	80057ba <forward_relu_thresholded+0xc6>
 800579c:	edd1 0a00 	vldr	s1, [r1]
 80057a0:	eef4 0a40 	vcmp.f32	s1, s0
 80057a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057a8:	bf48      	it	mi
 80057aa:	eddf 0ac2 	vldrmi	s1, [pc, #776]	; 8005ab4 <.text_80>
 80057ae:	edc2 0a00 	vstr	s1, [r2]
 80057b2:	1f09      	subs	r1, r1, #4
 80057b4:	1f12      	subs	r2, r2, #4
 80057b6:	4281      	cmp	r1, r0
 80057b8:	d2f0      	bcs.n	800579c <forward_relu_thresholded+0xa8>
 80057ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080057bc <forward_elu>:
 80057bc:	b570      	push	{r4, r5, r6, lr}
 80057be:	4604      	mov	r4, r0
 80057c0:	6962      	ldr	r2, [r4, #20]
 80057c2:	8811      	ldrh	r1, [r2, #0]
 80057c4:	2900      	cmp	r1, #0
 80057c6:	bf1a      	itte	ne
 80057c8:	6850      	ldrne	r0, [r2, #4]
 80057ca:	1d00      	addne	r0, r0, #4
 80057cc:	2004      	moveq	r0, #4
 80057ce:	6800      	ldr	r0, [r0, #0]
 80057d0:	2800      	cmp	r0, #0
 80057d2:	bf14      	ite	ne
 80057d4:	6805      	ldrne	r5, [r0, #0]
 80057d6:	2500      	moveq	r5, #0
 80057d8:	2902      	cmp	r1, #2
 80057da:	bfa6      	itte	ge
 80057dc:	6850      	ldrge	r0, [r2, #4]
 80057de:	3010      	addge	r0, #16
 80057e0:	2004      	movlt	r0, #4
 80057e2:	6800      	ldr	r0, [r0, #0]
 80057e4:	2800      	cmp	r0, #0
 80057e6:	bf19      	ittee	ne
 80057e8:	6800      	ldrne	r0, [r0, #0]
 80057ea:	f100 0618 	addne.w	r6, r0, #24
 80057ee:	2100      	moveq	r1, #0
 80057f0:	f101 0618 	addeq.w	r6, r1, #24
 80057f4:	f105 0008 	add.w	r0, r5, #8
 80057f8:	f7fd ff4e 	bl	8003698 <ai_shape_get_size>
 80057fc:	4602      	mov	r2, r0
 80057fe:	69a0      	ldr	r0, [r4, #24]
 8005800:	6883      	ldr	r3, [r0, #8]
 8005802:	69a9      	ldr	r1, [r5, #24]
 8005804:	6830      	ldr	r0, [r6, #0]
 8005806:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800580a:	e665      	b.n	80054d8 <nl_func_elu_array_f32>

0800580c <forward_selu>:
 800580c:	b570      	push	{r4, r5, r6, lr}
 800580e:	4604      	mov	r4, r0
 8005810:	6962      	ldr	r2, [r4, #20]
 8005812:	8811      	ldrh	r1, [r2, #0]
 8005814:	2900      	cmp	r1, #0
 8005816:	bf1a      	itte	ne
 8005818:	6850      	ldrne	r0, [r2, #4]
 800581a:	1d00      	addne	r0, r0, #4
 800581c:	2004      	moveq	r0, #4
 800581e:	6800      	ldr	r0, [r0, #0]
 8005820:	2800      	cmp	r0, #0
 8005822:	bf14      	ite	ne
 8005824:	6805      	ldrne	r5, [r0, #0]
 8005826:	2500      	moveq	r5, #0
 8005828:	2902      	cmp	r1, #2
 800582a:	bfa6      	itte	ge
 800582c:	6850      	ldrge	r0, [r2, #4]
 800582e:	3010      	addge	r0, #16
 8005830:	2004      	movlt	r0, #4
 8005832:	6800      	ldr	r0, [r0, #0]
 8005834:	2800      	cmp	r0, #0
 8005836:	bf19      	ittee	ne
 8005838:	6800      	ldrne	r0, [r0, #0]
 800583a:	f100 0618 	addne.w	r6, r0, #24
 800583e:	2100      	moveq	r1, #0
 8005840:	f101 0618 	addeq.w	r6, r1, #24
 8005844:	f105 0008 	add.w	r0, r5, #8
 8005848:	f7fd ff26 	bl	8003698 <ai_shape_get_size>
 800584c:	4602      	mov	r2, r0
 800584e:	69a0      	ldr	r0, [r4, #24]
 8005850:	6883      	ldr	r3, [r0, #8]
 8005852:	69a9      	ldr	r1, [r5, #24]
 8005854:	6830      	ldr	r0, [r6, #0]
 8005856:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800585a:	e67f      	b.n	800555c <nl_func_selu_array_f32>

0800585c <forward_prelu>:
 800585c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005860:	b083      	sub	sp, #12
 8005862:	6942      	ldr	r2, [r0, #20]
 8005864:	8810      	ldrh	r0, [r2, #0]
 8005866:	2800      	cmp	r0, #0
 8005868:	bf1a      	itte	ne
 800586a:	6851      	ldrne	r1, [r2, #4]
 800586c:	1d09      	addne	r1, r1, #4
 800586e:	2104      	moveq	r1, #4
 8005870:	6809      	ldr	r1, [r1, #0]
 8005872:	2900      	cmp	r1, #0
 8005874:	bf19      	ittee	ne
 8005876:	6809      	ldrne	r1, [r1, #0]
 8005878:	f101 0518 	addne.w	r5, r1, #24
 800587c:	2300      	moveq	r3, #0
 800587e:	f103 0518 	addeq.w	r5, r3, #24
 8005882:	2801      	cmp	r0, #1
 8005884:	bfc6      	itte	gt
 8005886:	6851      	ldrgt	r1, [r2, #4]
 8005888:	3110      	addgt	r1, #16
 800588a:	2104      	movle	r1, #4
 800588c:	6809      	ldr	r1, [r1, #0]
 800588e:	2900      	cmp	r1, #0
 8005890:	bf19      	ittee	ne
 8005892:	6809      	ldrne	r1, [r1, #0]
 8005894:	f101 0618 	addne.w	r6, r1, #24
 8005898:	2300      	moveq	r3, #0
 800589a:	f103 0618 	addeq.w	r6, r3, #24
 800589e:	2802      	cmp	r0, #2
 80058a0:	bfc6      	itte	gt
 80058a2:	6850      	ldrgt	r0, [r2, #4]
 80058a4:	301c      	addgt	r0, #28
 80058a6:	2004      	movle	r0, #4
 80058a8:	6800      	ldr	r0, [r0, #0]
 80058aa:	2800      	cmp	r0, #0
 80058ac:	bf14      	ite	ne
 80058ae:	6804      	ldrne	r4, [r0, #0]
 80058b0:	2400      	moveq	r4, #0
 80058b2:	69a0      	ldr	r0, [r4, #24]
 80058b4:	6887      	ldr	r7, [r0, #8]
 80058b6:	b12c      	cbz	r4, 80058c4 <forward_prelu+0x68>
 80058b8:	6841      	ldr	r1, [r0, #4]
 80058ba:	6800      	ldr	r0, [r0, #0]
 80058bc:	f001 fb8a 	bl	8006fd4 <ai_array_get_byte_size>
 80058c0:	4680      	mov	r8, r0
 80058c2:	e001      	b.n	80058c8 <forward_prelu+0x6c>
 80058c4:	f04f 0801 	mov.w	r8, #1
 80058c8:	6828      	ldr	r0, [r5, #0]
 80058ca:	6841      	ldr	r1, [r0, #4]
 80058cc:	6800      	ldr	r0, [r0, #0]
 80058ce:	f001 fb81 	bl	8006fd4 <ai_array_get_byte_size>
 80058d2:	4601      	mov	r1, r0
 80058d4:	6828      	ldr	r0, [r5, #0]
 80058d6:	6832      	ldr	r2, [r6, #0]
 80058d8:	6880      	ldr	r0, [r0, #8]
 80058da:	f8d2 9008 	ldr.w	r9, [r2, #8]
 80058de:	4401      	add	r1, r0
 80058e0:	f104 0308 	add.w	r3, r4, #8
 80058e4:	4288      	cmp	r0, r1
 80058e6:	9300      	str	r3, [sp, #0]
 80058e8:	d241      	bcs.n	800596e <forward_prelu+0x112>
 80058ea:	9702      	str	r7, [sp, #8]
 80058ec:	9101      	str	r1, [sp, #4]
 80058ee:	4607      	mov	r7, r0
 80058f0:	6829      	ldr	r1, [r5, #0]
 80058f2:	608f      	str	r7, [r1, #8]
 80058f4:	f04f 0201 	mov.w	r2, #1
 80058f8:	6834      	ldr	r4, [r6, #0]
 80058fa:	f8c4 9008 	str.w	r9, [r4, #8]
 80058fe:	9b00      	ldr	r3, [sp, #0]
 8005900:	6818      	ldr	r0, [r3, #0]
 8005902:	0a00      	lsrs	r0, r0, #8
 8005904:	d02a      	beq.n	800595c <forward_prelu+0x100>
 8005906:	f8d3 e004 	ldr.w	lr, [r3, #4]
 800590a:	eb0e 0380 	add.w	r3, lr, r0, lsl #2
 800590e:	4684      	mov	ip, r0
 8005910:	f1a3 0a04 	sub.w	sl, r3, #4
 8005914:	f01c 0303 	ands.w	r3, ip, #3
 8005918:	d006      	beq.n	8005928 <forward_prelu+0xcc>
 800591a:	1e40      	subs	r0, r0, #1
 800591c:	f85a b904 	ldr.w	fp, [sl], #-4
 8005920:	1e5b      	subs	r3, r3, #1
 8005922:	fb0b f202 	mul.w	r2, fp, r2
 8005926:	d1f8      	bne.n	800591a <forward_prelu+0xbe>
 8005928:	ea5f 0c9c 	movs.w	ip, ip, lsr #2
 800592c:	4663      	mov	r3, ip
 800592e:	d015      	beq.n	800595c <forward_prelu+0x100>
 8005930:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
 8005934:	f1b0 0010 	subs.w	r0, r0, #16
 8005938:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 800593c:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8005940:	f8d0 a004 	ldr.w	sl, [r0, #4]
 8005944:	f850 b910 	ldr.w	fp, [r0], #-16
 8005948:	fb0e fc0c 	mul.w	ip, lr, ip
 800594c:	fb0a fc0c 	mul.w	ip, sl, ip
 8005950:	fb0b fc0c 	mul.w	ip, fp, ip
 8005954:	1e5b      	subs	r3, r3, #1
 8005956:	fb0c f202 	mul.w	r2, ip, r2
 800595a:	d1ed      	bne.n	8005938 <forward_prelu+0xdc>
 800595c:	9b02      	ldr	r3, [sp, #8]
 800595e:	4620      	mov	r0, r4
 8005960:	f7ff fe3e 	bl	80055e0 <nl_func_prelu_array_f32>
 8005964:	9801      	ldr	r0, [sp, #4]
 8005966:	4447      	add	r7, r8
 8005968:	4287      	cmp	r7, r0
 800596a:	44c1      	add	r9, r8
 800596c:	d3c0      	bcc.n	80058f0 <forward_prelu+0x94>
 800596e:	6828      	ldr	r0, [r5, #0]
 8005970:	68c1      	ldr	r1, [r0, #12]
 8005972:	6081      	str	r1, [r0, #8]
 8005974:	6830      	ldr	r0, [r6, #0]
 8005976:	68c1      	ldr	r1, [r0, #12]
 8005978:	6081      	str	r1, [r0, #8]
 800597a:	b003      	add	sp, #12
 800597c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005980 <forward_clip>:
 8005980:	b570      	push	{r4, r5, r6, lr}
 8005982:	4604      	mov	r4, r0
 8005984:	6962      	ldr	r2, [r4, #20]
 8005986:	8811      	ldrh	r1, [r2, #0]
 8005988:	2900      	cmp	r1, #0
 800598a:	bf1a      	itte	ne
 800598c:	6850      	ldrne	r0, [r2, #4]
 800598e:	1d00      	addne	r0, r0, #4
 8005990:	2004      	moveq	r0, #4
 8005992:	6800      	ldr	r0, [r0, #0]
 8005994:	2800      	cmp	r0, #0
 8005996:	bf14      	ite	ne
 8005998:	6805      	ldrne	r5, [r0, #0]
 800599a:	2500      	moveq	r5, #0
 800599c:	2902      	cmp	r1, #2
 800599e:	bfa6      	itte	ge
 80059a0:	6850      	ldrge	r0, [r2, #4]
 80059a2:	3010      	addge	r0, #16
 80059a4:	2004      	movlt	r0, #4
 80059a6:	6800      	ldr	r0, [r0, #0]
 80059a8:	2800      	cmp	r0, #0
 80059aa:	bf19      	ittee	ne
 80059ac:	6800      	ldrne	r0, [r0, #0]
 80059ae:	f100 0618 	addne.w	r6, r0, #24
 80059b2:	2100      	moveq	r1, #0
 80059b4:	f101 0618 	addeq.w	r6, r1, #24
 80059b8:	f105 0008 	add.w	r0, r5, #8
 80059bc:	f7fd fe6c 	bl	8003698 <ai_shape_get_size>
 80059c0:	4602      	mov	r2, r0
 80059c2:	69a0      	ldr	r0, [r4, #24]
 80059c4:	6883      	ldr	r3, [r0, #8]
 80059c6:	69a9      	ldr	r1, [r5, #24]
 80059c8:	6830      	ldr	r0, [r6, #0]
 80059ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80059ce:	e473      	b.n	80052b8 <nl_func_clip_array_f32>

080059d0 <forward_hard_sigmoid>:
 80059d0:	b4f0      	push	{r4, r5, r6, r7}
 80059d2:	6942      	ldr	r2, [r0, #20]
 80059d4:	8811      	ldrh	r1, [r2, #0]
 80059d6:	2900      	cmp	r1, #0
 80059d8:	bf1a      	itte	ne
 80059da:	6850      	ldrne	r0, [r2, #4]
 80059dc:	1d00      	addne	r0, r0, #4
 80059de:	2004      	moveq	r0, #4
 80059e0:	f04f 0501 	mov.w	r5, #1
 80059e4:	6800      	ldr	r0, [r0, #0]
 80059e6:	2800      	cmp	r0, #0
 80059e8:	bf14      	ite	ne
 80059ea:	6803      	ldrne	r3, [r0, #0]
 80059ec:	2300      	moveq	r3, #0
 80059ee:	2902      	cmp	r1, #2
 80059f0:	bfa6      	itte	ge
 80059f2:	6850      	ldrge	r0, [r2, #4]
 80059f4:	3010      	addge	r0, #16
 80059f6:	2004      	movlt	r0, #4
 80059f8:	6800      	ldr	r0, [r0, #0]
 80059fa:	2800      	cmp	r0, #0
 80059fc:	bf19      	ittee	ne
 80059fe:	6800      	ldrne	r0, [r0, #0]
 8005a00:	f100 0418 	addne.w	r4, r0, #24
 8005a04:	2100      	moveq	r1, #0
 8005a06:	f101 0418 	addeq.w	r4, r1, #24
 8005a0a:	f103 0108 	add.w	r1, r3, #8
 8005a0e:	680a      	ldr	r2, [r1, #0]
 8005a10:	0a12      	lsrs	r2, r2, #8
 8005a12:	d01e      	beq.n	8005a52 <forward_hard_sigmoid+0x82>
 8005a14:	684e      	ldr	r6, [r1, #4]
 8005a16:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8005a1a:	4610      	mov	r0, r2
 8005a1c:	1f0f      	subs	r7, r1, #4
 8005a1e:	f010 0103 	ands.w	r1, r0, #3
 8005a22:	d006      	beq.n	8005a32 <forward_hard_sigmoid+0x62>
 8005a24:	1e52      	subs	r2, r2, #1
 8005a26:	f857 c904 	ldr.w	ip, [r7], #-4
 8005a2a:	1e49      	subs	r1, r1, #1
 8005a2c:	fb0c f505 	mul.w	r5, ip, r5
 8005a30:	d1f8      	bne.n	8005a24 <forward_hard_sigmoid+0x54>
 8005a32:	0880      	lsrs	r0, r0, #2
 8005a34:	d00d      	beq.n	8005a52 <forward_hard_sigmoid+0x82>
 8005a36:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8005a3a:	3910      	subs	r1, #16
 8005a3c:	68ca      	ldr	r2, [r1, #12]
 8005a3e:	688e      	ldr	r6, [r1, #8]
 8005a40:	684f      	ldr	r7, [r1, #4]
 8005a42:	4372      	muls	r2, r6
 8005a44:	f851 6910 	ldr.w	r6, [r1], #-16
 8005a48:	437a      	muls	r2, r7
 8005a4a:	4372      	muls	r2, r6
 8005a4c:	4355      	muls	r5, r2
 8005a4e:	1e40      	subs	r0, r0, #1
 8005a50:	d1f4      	bne.n	8005a3c <forward_hard_sigmoid+0x6c>
 8005a52:	6998      	ldr	r0, [r3, #24]
 8005a54:	6822      	ldr	r2, [r4, #0]
 8005a56:	6880      	ldr	r0, [r0, #8]
 8005a58:	6893      	ldr	r3, [r2, #8]
 8005a5a:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8005a5e:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8005a62:	1f09      	subs	r1, r1, #4
 8005a64:	1f22      	subs	r2, r4, #4
 8005a66:	4281      	cmp	r1, r0
 8005a68:	f0c0 8022 	bcc.w	8005ab0 <forward_hard_sigmoid+0xe0>
 8005a6c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005a70:	eddf 0a11 	vldr	s1, [pc, #68]	; 8005ab8 <.text_81>
 8005a74:	edd1 1a00 	vldr	s3, [r1]
 8005a78:	ed9f 2a10 	vldr	s4, [pc, #64]	; 8005abc <.text_82>
 8005a7c:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8005a80:	ee01 1a82 	vmla.f32	s2, s3, s4
 8005a84:	eeb4 1a60 	vcmp.f32	s2, s1
 8005a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a8c:	da08      	bge.n	8005aa0 <forward_hard_sigmoid+0xd0>
 8005a8e:	eeb5 1a40 	vcmp.f32	s2, #0.0
 8005a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a96:	d505      	bpl.n	8005aa4 <forward_hard_sigmoid+0xd4>
 8005a98:	ed9f 1a06 	vldr	s2, [pc, #24]	; 8005ab4 <.text_80>
 8005a9c:	e002      	b.n	8005aa4 <forward_hard_sigmoid+0xd4>
 8005a9e:	bf00      	nop
 8005aa0:	eeb0 1a40 	vmov.f32	s2, s0
 8005aa4:	ed82 1a00 	vstr	s2, [r2]
 8005aa8:	1f09      	subs	r1, r1, #4
 8005aaa:	1f12      	subs	r2, r2, #4
 8005aac:	4281      	cmp	r1, r0
 8005aae:	d2e1      	bcs.n	8005a74 <forward_hard_sigmoid+0xa4>
 8005ab0:	bcf0      	pop	{r4, r5, r6, r7}
 8005ab2:	4770      	bx	lr

08005ab4 <.text_80>:
 8005ab4:	00000000 	.word	0x00000000

08005ab8 <.text_81>:
 8005ab8:	3f800001 	.word	0x3f800001

08005abc <.text_82>:
 8005abc:	3e4ccccd 	.word	0x3e4ccccd

08005ac0 <forward_sm>:
 8005ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	6942      	ldr	r2, [r0, #20]
 8005ac6:	8811      	ldrh	r1, [r2, #0]
 8005ac8:	2900      	cmp	r1, #0
 8005aca:	bf1a      	itte	ne
 8005acc:	6850      	ldrne	r0, [r2, #4]
 8005ace:	1d00      	addne	r0, r0, #4
 8005ad0:	2004      	moveq	r0, #4
 8005ad2:	6800      	ldr	r0, [r0, #0]
 8005ad4:	2800      	cmp	r0, #0
 8005ad6:	bf14      	ite	ne
 8005ad8:	6804      	ldrne	r4, [r0, #0]
 8005ada:	2400      	moveq	r4, #0
 8005adc:	2902      	cmp	r1, #2
 8005ade:	bfa6      	itte	ge
 8005ae0:	6850      	ldrge	r0, [r2, #4]
 8005ae2:	3010      	addge	r0, #16
 8005ae4:	2004      	movlt	r0, #4
 8005ae6:	6800      	ldr	r0, [r0, #0]
 8005ae8:	2800      	cmp	r0, #0
 8005aea:	bf14      	ite	ne
 8005aec:	6805      	ldrne	r5, [r0, #0]
 8005aee:	2500      	moveq	r5, #0
 8005af0:	68e0      	ldr	r0, [r4, #12]
 8005af2:	68e9      	ldr	r1, [r5, #12]
 8005af4:	6846      	ldr	r6, [r0, #4]
 8005af6:	684f      	ldr	r7, [r1, #4]
 8005af8:	f104 0008 	add.w	r0, r4, #8
 8005afc:	f7fd fdcc 	bl	8003698 <ai_shape_get_size>
 8005b00:	4602      	mov	r2, r0
 8005b02:	9701      	str	r7, [sp, #4]
 8005b04:	9600      	str	r6, [sp, #0]
 8005b06:	69a1      	ldr	r1, [r4, #24]
 8005b08:	69a8      	ldr	r0, [r5, #24]
 8005b0a:	4633      	mov	r3, r6
 8005b0c:	f7ff fb76 	bl	80051fc <nl_func_sm_array_f32>
 8005b10:	b003      	add	sp, #12
 8005b12:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b14 <forward_hardmax>:
 8005b14:	b430      	push	{r4, r5}
 8005b16:	6943      	ldr	r3, [r0, #20]
 8005b18:	881a      	ldrh	r2, [r3, #0]
 8005b1a:	6980      	ldr	r0, [r0, #24]
 8005b1c:	2a00      	cmp	r2, #0
 8005b1e:	bf1a      	itte	ne
 8005b20:	6859      	ldrne	r1, [r3, #4]
 8005b22:	1d09      	addne	r1, r1, #4
 8005b24:	2104      	moveq	r1, #4
 8005b26:	6809      	ldr	r1, [r1, #0]
 8005b28:	2900      	cmp	r1, #0
 8005b2a:	bf14      	ite	ne
 8005b2c:	680c      	ldrne	r4, [r1, #0]
 8005b2e:	2400      	moveq	r4, #0
 8005b30:	2a02      	cmp	r2, #2
 8005b32:	bfa6      	itte	ge
 8005b34:	6859      	ldrge	r1, [r3, #4]
 8005b36:	3110      	addge	r1, #16
 8005b38:	2104      	movlt	r1, #4
 8005b3a:	6809      	ldr	r1, [r1, #0]
 8005b3c:	6883      	ldr	r3, [r0, #8]
 8005b3e:	2900      	cmp	r1, #0
 8005b40:	bf19      	ittee	ne
 8005b42:	6809      	ldrne	r1, [r1, #0]
 8005b44:	f101 0518 	addne.w	r5, r1, #24
 8005b48:	2200      	moveq	r2, #0
 8005b4a:	f102 0518 	addeq.w	r5, r2, #24
 8005b4e:	69a1      	ldr	r1, [r4, #24]
 8005b50:	6828      	ldr	r0, [r5, #0]
 8005b52:	f104 0208 	add.w	r2, r4, #8
 8005b56:	bc30      	pop	{r4, r5}
 8005b58:	f7ff bbd4 	b.w	8005304 <nl_func_hardmax_array_f32>

08005b5c <pool_func_mp_array_f32>:
 8005b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b60:	4688      	mov	r8, r1
 8005b62:	b08b      	sub	sp, #44	; 0x2c
 8005b64:	f8d0 b008 	ldr.w	fp, [r0, #8]
 8005b68:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8005b6a:	f9bd e064 	ldrsh.w	lr, [sp, #100]	; 0x64
 8005b6e:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8005b70:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8005b72:	1e48      	subs	r0, r1, #1
 8005b74:	fb10 fe0e 	smulbb	lr, r0, lr
 8005b78:	4615      	mov	r5, r2
 8005b7a:	ebae 0e07 	sub.w	lr, lr, r7
 8005b7e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005b80:	f8bd 0058 	ldrh.w	r0, [sp, #88]	; 0x58
 8005b84:	6892      	ldr	r2, [r2, #8]
 8005b86:	44a6      	add	lr, r4
 8005b88:	f1ae 0601 	sub.w	r6, lr, #1
 8005b8c:	469c      	mov	ip, r3
 8005b8e:	1b76      	subs	r6, r6, r5
 8005b90:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8005b92:	4338      	orrs	r0, r7
 8005b94:	f040 80dd 	bne.w	8005d52 <pool_func_mp_array_f32+0x1f6>
 8005b98:	f9bd 0068 	ldrsh.w	r0, [sp, #104]	; 0x68
 8005b9c:	f1a0 0901 	sub.w	r9, r0, #1
 8005ba0:	f9bd 0058 	ldrsh.w	r0, [sp, #88]	; 0x58
 8005ba4:	fb19 f903 	smulbb	r9, r9, r3
 8005ba8:	eba9 0900 	sub.w	r9, r9, r0
 8005bac:	f9bd 0050 	ldrsh.w	r0, [sp, #80]	; 0x50
 8005bb0:	4448      	add	r0, r9
 8005bb2:	1e40      	subs	r0, r0, #1
 8005bb4:	eba0 0008 	sub.w	r0, r0, r8
 8005bb8:	b200      	sxth	r0, r0
 8005bba:	2800      	cmp	r0, #0
 8005bbc:	bf44      	itt	mi
 8005bbe:	b236      	sxthmi	r6, r6
 8005bc0:	2e00      	cmpmi	r6, #0
 8005bc2:	f140 80c6 	bpl.w	8005d52 <pool_func_mp_array_f32+0x1f6>
 8005bc6:	2000      	movs	r0, #0
 8005bc8:	000d      	movs	r5, r1
 8005bca:	9008      	str	r0, [sp, #32]
 8005bcc:	f000 8178 	beq.w	8005ec0 <pool_func_mp_array_f32+0x364>
 8005bd0:	b224      	sxth	r4, r4
 8005bd2:	f8ad 4006 	strh.w	r4, [sp, #6]
 8005bd6:	9002      	str	r0, [sp, #8]
 8005bd8:	9007      	str	r0, [sp, #28]
 8005bda:	9106      	str	r1, [sp, #24]
 8005bdc:	ea4f 040c 	mov.w	r4, ip
 8005be0:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 8005ec8 <.text_3>
 8005be4:	f8bd 0068 	ldrh.w	r0, [sp, #104]	; 0x68
 8005be8:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 8005bec:	2800      	cmp	r0, #0
 8005bee:	f000 8096 	beq.w	8005d1e <pool_func_mp_array_f32+0x1c2>
 8005bf2:	9907      	ldr	r1, [sp, #28]
 8005bf4:	9808      	ldr	r0, [sp, #32]
 8005bf6:	f9bd 6050 	ldrsh.w	r6, [sp, #80]	; 0x50
 8005bfa:	f8bd 5068 	ldrh.w	r5, [sp, #104]	; 0x68
 8005bfe:	9103      	str	r1, [sp, #12]
 8005c00:	f04f 0a00 	mov.w	sl, #0
 8005c04:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 8005c08:	f8ad c002 	strh.w	ip, [sp, #2]
 8005c0c:	4348      	muls	r0, r1
 8005c0e:	b200      	sxth	r0, r0
 8005c10:	900a      	str	r0, [sp, #40]	; 0x28
 8005c12:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 8005c16:	9204      	str	r2, [sp, #16]
 8005c18:	f8ad 6000 	strh.w	r6, [sp]
 8005c1c:	f8cd 5014 	str.w	r5, [sp, #20]
 8005c20:	f8ad 8004 	strh.w	r8, [sp, #4]
 8005c24:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8005c28:	f9bd e000 	ldrsh.w	lr, [sp]
 8005c2c:	2100      	movs	r1, #0
 8005c2e:	2800      	cmp	r0, #0
 8005c30:	d05d      	beq.n	8005cee <pool_func_mp_array_f32+0x192>
 8005c32:	9a03      	ldr	r2, [sp, #12]
 8005c34:	9804      	ldr	r0, [sp, #16]
 8005c36:	4362      	muls	r2, r4
 8005c38:	ab02      	add	r3, sp, #8
 8005c3a:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
 8005c3e:	5e58      	ldrsh	r0, [r3, r1]
 8005c40:	9009      	str	r0, [sp, #36]	; 0x24
 8005c42:	fa0f f58a 	sxth.w	r5, sl
 8005c46:	f8bd 8004 	ldrh.w	r8, [sp, #4]
 8005c4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c4c:	42b8      	cmp	r0, r7
 8005c4e:	eef0 0a40 	vmov.f32	s1, s0
 8005c52:	da45      	bge.n	8005ce0 <pool_func_mp_array_f32+0x184>
 8005c54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c56:	fb08 f900 	mul.w	r9, r8, r0
 8005c5a:	1aba      	subs	r2, r7, r2
 8005c5c:	4658      	mov	r0, fp
 8005c5e:	4575      	cmp	r5, lr
 8005c60:	462e      	mov	r6, r5
 8005c62:	da39      	bge.n	8005cd8 <pool_func_mp_array_f32+0x17c>
 8005c64:	ebae 0305 	sub.w	r3, lr, r5
 8005c68:	ea5f 7bc3 	movs.w	fp, r3, lsl #31
 8005c6c:	d50f      	bpl.n	8005c8e <pool_func_mp_array_f32+0x132>
 8005c6e:	eb09 0b06 	add.w	fp, r9, r6
 8005c72:	fb0b 1b04 	mla	fp, fp, r4, r1
 8005c76:	eb00 0b8b 	add.w	fp, r0, fp, lsl #2
 8005c7a:	ed9b 1a00 	vldr	s2, [fp]
 8005c7e:	eeb4 1a60 	vcmp.f32	s2, s1
 8005c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c86:	bf58      	it	pl
 8005c88:	eef0 0a41 	vmovpl.f32	s1, s2
 8005c8c:	1c76      	adds	r6, r6, #1
 8005c8e:	085b      	lsrs	r3, r3, #1
 8005c90:	f000 8022 	beq.w	8005cd8 <pool_func_mp_array_f32+0x17c>
 8005c94:	eb09 0b06 	add.w	fp, r9, r6
 8005c98:	fb0b 1b04 	mla	fp, fp, r4, r1
 8005c9c:	eb00 0b8b 	add.w	fp, r0, fp, lsl #2
 8005ca0:	ed9b 1a00 	vldr	s2, [fp]
 8005ca4:	eeb4 1a60 	vcmp.f32	s2, s1
 8005ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cac:	bf58      	it	pl
 8005cae:	eef0 0a41 	vmovpl.f32	s1, s2
 8005cb2:	1c76      	adds	r6, r6, #1
 8005cb4:	eb09 0b06 	add.w	fp, r9, r6
 8005cb8:	fb0b 1b04 	mla	fp, fp, r4, r1
 8005cbc:	eb00 0b8b 	add.w	fp, r0, fp, lsl #2
 8005cc0:	ed9b 1a00 	vldr	s2, [fp]
 8005cc4:	eeb4 1a60 	vcmp.f32	s2, s1
 8005cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ccc:	bf58      	it	pl
 8005cce:	eef0 0a41 	vmovpl.f32	s1, s2
 8005cd2:	1c76      	adds	r6, r6, #1
 8005cd4:	1e5b      	subs	r3, r3, #1
 8005cd6:	d1dd      	bne.n	8005c94 <pool_func_mp_array_f32+0x138>
 8005cd8:	1e52      	subs	r2, r2, #1
 8005cda:	44c1      	add	r9, r8
 8005cdc:	d1bf      	bne.n	8005c5e <pool_func_mp_array_f32+0x102>
 8005cde:	4683      	mov	fp, r0
 8005ce0:	1c49      	adds	r1, r1, #1
 8005ce2:	edcc 0a00 	vstr	s1, [ip]
 8005ce6:	42a1      	cmp	r1, r4
 8005ce8:	f10c 0c04 	add.w	ip, ip, #4
 8005cec:	dbad      	blt.n	8005c4a <pool_func_mp_array_f32+0xee>
 8005cee:	9803      	ldr	r0, [sp, #12]
 8005cf0:	f8bd 1000 	ldrh.w	r1, [sp]
 8005cf4:	1c40      	adds	r0, r0, #1
 8005cf6:	9003      	str	r0, [sp, #12]
 8005cf8:	f8bd 0060 	ldrh.w	r0, [sp, #96]	; 0x60
 8005cfc:	4482      	add	sl, r0
 8005cfe:	f9bd 0060 	ldrsh.w	r0, [sp, #96]	; 0x60
 8005d02:	1841      	adds	r1, r0, r1
 8005d04:	f8ad 1000 	strh.w	r1, [sp]
 8005d08:	9905      	ldr	r1, [sp, #20]
 8005d0a:	1e49      	subs	r1, r1, #1
 8005d0c:	9105      	str	r1, [sp, #20]
 8005d0e:	d189      	bne.n	8005c24 <pool_func_mp_array_f32+0xc8>
 8005d10:	f8bd c002 	ldrh.w	ip, [sp, #2]
 8005d14:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8005d18:	9a04      	ldr	r2, [sp, #16]
 8005d1a:	f8bd 8004 	ldrh.w	r8, [sp, #4]
 8005d1e:	9908      	ldr	r1, [sp, #32]
 8005d20:	f8bd 5068 	ldrh.w	r5, [sp, #104]	; 0x68
 8005d24:	f8bd 7006 	ldrh.w	r7, [sp, #6]
 8005d28:	1c49      	adds	r1, r1, #1
 8005d2a:	9108      	str	r1, [sp, #32]
 8005d2c:	9907      	ldr	r1, [sp, #28]
 8005d2e:	194d      	adds	r5, r1, r5
 8005d30:	9507      	str	r5, [sp, #28]
 8005d32:	9902      	ldr	r1, [sp, #8]
 8005d34:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 8005d38:	194d      	adds	r5, r1, r5
 8005d3a:	9502      	str	r5, [sp, #8]
 8005d3c:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 8005d40:	9d06      	ldr	r5, [sp, #24]
 8005d42:	19cf      	adds	r7, r1, r7
 8005d44:	1e6d      	subs	r5, r5, #1
 8005d46:	f8ad 7006 	strh.w	r7, [sp, #6]
 8005d4a:	9506      	str	r5, [sp, #24]
 8005d4c:	f000 80b8 	beq.w	8005ec0 <pool_func_mp_array_f32+0x364>
 8005d50:	e748      	b.n	8005be4 <pool_func_mp_array_f32+0x88>
 8005d52:	0008      	movs	r0, r1
 8005d54:	f000 80b4 	beq.w	8005ec0 <pool_func_mp_array_f32+0x364>
 8005d58:	427f      	negs	r7, r7
 8005d5a:	19e4      	adds	r4, r4, r7
 8005d5c:	f8ad 7000 	strh.w	r7, [sp]
 8005d60:	f8ad 400a 	strh.w	r4, [sp, #10]
 8005d64:	2000      	movs	r0, #0
 8005d66:	9008      	str	r0, [sp, #32]
 8005d68:	f8cd 101c 	str.w	r1, [sp, #28]
 8005d6c:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8005ec8 <.text_3>
 8005d70:	f8bd 0068 	ldrh.w	r0, [sp, #104]	; 0x68
 8005d74:	f9bd a00a 	ldrsh.w	sl, [sp, #10]
 8005d78:	2800      	cmp	r0, #0
 8005d7a:	f000 8089 	beq.w	8005e90 <pool_func_mp_array_f32+0x334>
 8005d7e:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8005d82:	f9bd 7050 	ldrsh.w	r7, [sp, #80]	; 0x50
 8005d86:	9908      	ldr	r1, [sp, #32]
 8005d88:	f8bd 4068 	ldrh.w	r4, [sp, #104]	; 0x68
 8005d8c:	9103      	str	r1, [sp, #12]
 8005d8e:	f1ce 0e00 	rsb	lr, lr, #0
 8005d92:	4477      	add	r7, lr
 8005d94:	f8ad c002 	strh.w	ip, [sp, #2]
 8005d98:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 8005d9c:	9204      	str	r2, [sp, #16]
 8005d9e:	f8ad e006 	strh.w	lr, [sp, #6]
 8005da2:	f8ad 7008 	strh.w	r7, [sp, #8]
 8005da6:	9406      	str	r4, [sp, #24]
 8005da8:	f8ad 8004 	strh.w	r8, [sp, #4]
 8005dac:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8005db0:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 8005db4:	2600      	movs	r6, #0
 8005db6:	2900      	cmp	r1, #0
 8005db8:	d04e      	beq.n	8005e58 <pool_func_mp_array_f32+0x2fc>
 8005dba:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8005dbe:	9b03      	ldr	r3, [sp, #12]
 8005dc0:	9904      	ldr	r1, [sp, #16]
 8005dc2:	f9bd 4006 	ldrsh.w	r4, [sp, #6]
 8005dc6:	435a      	muls	r2, r3
 8005dc8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005dcc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8005dd0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8005dd4:	f8cd 1014 	str.w	r1, [sp, #20]
 8005dd8:	f9bd 1000 	ldrsh.w	r1, [sp]
 8005ddc:	4551      	cmp	r1, sl
 8005dde:	eef0 0a40 	vmov.f32	s1, s0
 8005de2:	da2a      	bge.n	8005e3a <pool_func_mp_array_f32+0x2de>
 8005de4:	fb03 f901 	mul.w	r9, r3, r1
 8005de8:	f8ad 5002 	strh.w	r5, [sp, #2]
 8005dec:	4284      	cmp	r4, r0
 8005dee:	4625      	mov	r5, r4
 8005df0:	da1d      	bge.n	8005e2e <pool_func_mp_array_f32+0x2d2>
 8005df2:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8005df6:	46de      	mov	lr, fp
 8005df8:	2900      	cmp	r1, #0
 8005dfa:	bf58      	it	pl
 8005dfc:	2d00      	cmppl	r5, #0
 8005dfe:	d412      	bmi.n	8005e26 <pool_func_mp_array_f32+0x2ca>
 8005e00:	42b9      	cmp	r1, r7
 8005e02:	bfb8      	it	lt
 8005e04:	429d      	cmplt	r5, r3
 8005e06:	da0e      	bge.n	8005e26 <pool_func_mp_array_f32+0x2ca>
 8005e08:	eb09 0b05 	add.w	fp, r9, r5
 8005e0c:	fb0b 6b02 	mla	fp, fp, r2, r6
 8005e10:	eb0e 0b8b 	add.w	fp, lr, fp, lsl #2
 8005e14:	ed9b 1a00 	vldr	s2, [fp]
 8005e18:	eeb4 1a60 	vcmp.f32	s2, s1
 8005e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e20:	bf58      	it	pl
 8005e22:	eef0 0a41 	vmovpl.f32	s1, s2
 8005e26:	1c6d      	adds	r5, r5, #1
 8005e28:	4285      	cmp	r5, r0
 8005e2a:	dbe5      	blt.n	8005df8 <pool_func_mp_array_f32+0x29c>
 8005e2c:	46f3      	mov	fp, lr
 8005e2e:	1c49      	adds	r1, r1, #1
 8005e30:	4551      	cmp	r1, sl
 8005e32:	4499      	add	r9, r3
 8005e34:	dbda      	blt.n	8005dec <pool_func_mp_array_f32+0x290>
 8005e36:	f8bd 5002 	ldrh.w	r5, [sp, #2]
 8005e3a:	1c76      	adds	r6, r6, #1
 8005e3c:	9905      	ldr	r1, [sp, #20]
 8005e3e:	edc1 0a00 	vstr	s1, [r1]
 8005e42:	9905      	ldr	r1, [sp, #20]
 8005e44:	1d0f      	adds	r7, r1, #4
 8005e46:	4296      	cmp	r6, r2
 8005e48:	9705      	str	r7, [sp, #20]
 8005e4a:	dbc5      	blt.n	8005dd8 <pool_func_mp_array_f32+0x27c>
 8005e4c:	f8ad 2002 	strh.w	r2, [sp, #2]
 8005e50:	f8ad 4006 	strh.w	r4, [sp, #6]
 8005e54:	f8ad 3004 	strh.w	r3, [sp, #4]
 8005e58:	9803      	ldr	r0, [sp, #12]
 8005e5a:	f9bd 1060 	ldrsh.w	r1, [sp, #96]	; 0x60
 8005e5e:	1c40      	adds	r0, r0, #1
 8005e60:	9003      	str	r0, [sp, #12]
 8005e62:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8005e66:	1808      	adds	r0, r1, r0
 8005e68:	f8ad 0008 	strh.w	r0, [sp, #8]
 8005e6c:	f9bd 1060 	ldrsh.w	r1, [sp, #96]	; 0x60
 8005e70:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8005e74:	1808      	adds	r0, r1, r0
 8005e76:	f8ad 0006 	strh.w	r0, [sp, #6]
 8005e7a:	9806      	ldr	r0, [sp, #24]
 8005e7c:	1e40      	subs	r0, r0, #1
 8005e7e:	9006      	str	r0, [sp, #24]
 8005e80:	d194      	bne.n	8005dac <pool_func_mp_array_f32+0x250>
 8005e82:	f8bd c002 	ldrh.w	ip, [sp, #2]
 8005e86:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8005e8a:	9a04      	ldr	r2, [sp, #16]
 8005e8c:	f8bd 8004 	ldrh.w	r8, [sp, #4]
 8005e90:	9908      	ldr	r1, [sp, #32]
 8005e92:	f8bd 4068 	ldrh.w	r4, [sp, #104]	; 0x68
 8005e96:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8005e9a:	190c      	adds	r4, r1, r4
 8005e9c:	9408      	str	r4, [sp, #32]
 8005e9e:	f8bd 4000 	ldrh.w	r4, [sp]
 8005ea2:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 8005ea6:	19cf      	adds	r7, r1, r7
 8005ea8:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 8005eac:	f8ad 700a 	strh.w	r7, [sp, #10]
 8005eb0:	190c      	adds	r4, r1, r4
 8005eb2:	f8ad 4000 	strh.w	r4, [sp]
 8005eb6:	9c07      	ldr	r4, [sp, #28]
 8005eb8:	1e64      	subs	r4, r4, #1
 8005eba:	9407      	str	r4, [sp, #28]
 8005ebc:	f47f af58 	bne.w	8005d70 <pool_func_mp_array_f32+0x214>
 8005ec0:	b00b      	add	sp, #44	; 0x2c
 8005ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08005ec8 <.text_3>:
 8005ec8:	cf000000 	.word	0xcf000000

08005ecc <pool_func_ap_array_f32>:
 8005ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ed0:	468b      	mov	fp, r1
 8005ed2:	b08c      	sub	sp, #48	; 0x30
 8005ed4:	4699      	mov	r9, r3
 8005ed6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005ed8:	f9bd c068 	ldrsh.w	ip, [sp, #104]	; 0x68
 8005edc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8005ede:	4692      	mov	sl, r2
 8005ee0:	1e4f      	subs	r7, r1, #1
 8005ee2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005ee4:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8005ee6:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
 8005eea:	6880      	ldr	r0, [r0, #8]
 8005eec:	68ad      	ldr	r5, [r5, #8]
 8005eee:	fb17 fc0c 	smulbb	ip, r7, ip
 8005ef2:	ebac 0c03 	sub.w	ip, ip, r3
 8005ef6:	f8bd 705c 	ldrh.w	r7, [sp, #92]	; 0x5c
 8005efa:	4494      	add	ip, r2
 8005efc:	f1ac 0401 	sub.w	r4, ip, #1
 8005f00:	431f      	orrs	r7, r3
 8005f02:	eba4 060a 	sub.w	r6, r4, sl
 8005f06:	f040 80dc 	bne.w	80060c2 <pool_func_ap_array_f32+0x1f6>
 8005f0a:	f9bd 706c 	ldrsh.w	r7, [sp, #108]	; 0x6c
 8005f0e:	1e7c      	subs	r4, r7, #1
 8005f10:	f9bd 705c 	ldrsh.w	r7, [sp, #92]	; 0x5c
 8005f14:	fb14 f408 	smulbb	r4, r4, r8
 8005f18:	1be4      	subs	r4, r4, r7
 8005f1a:	f9bd 7054 	ldrsh.w	r7, [sp, #84]	; 0x54
 8005f1e:	193c      	adds	r4, r7, r4
 8005f20:	1e64      	subs	r4, r4, #1
 8005f22:	eba4 040b 	sub.w	r4, r4, fp
 8005f26:	b224      	sxth	r4, r4
 8005f28:	2c00      	cmp	r4, #0
 8005f2a:	bf44      	itt	mi
 8005f2c:	b234      	sxthmi	r4, r6
 8005f2e:	2c00      	cmpmi	r4, #0
 8005f30:	f140 80c7 	bpl.w	80060c2 <pool_func_ap_array_f32+0x1f6>
 8005f34:	2400      	movs	r4, #0
 8005f36:	000b      	movs	r3, r1
 8005f38:	9409      	str	r4, [sp, #36]	; 0x24
 8005f3a:	f000 81af 	beq.w	800629c <pool_func_ap_array_f32+0x3d0>
 8005f3e:	b212      	sxth	r2, r2
 8005f40:	f8ad 2004 	strh.w	r2, [sp, #4]
 8005f44:	9408      	str	r4, [sp, #32]
 8005f46:	9407      	str	r4, [sp, #28]
 8005f48:	f8cd 1018 	str.w	r1, [sp, #24]
 8005f4c:	f8bd 106c 	ldrh.w	r1, [sp, #108]	; 0x6c
 8005f50:	f9bd e004 	ldrsh.w	lr, [sp, #4]
 8005f54:	2900      	cmp	r1, #0
 8005f56:	f000 809a 	beq.w	800608e <pool_func_ap_array_f32+0x1c2>
 8005f5a:	9907      	ldr	r1, [sp, #28]
 8005f5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f5e:	f9bd 4054 	ldrsh.w	r4, [sp, #84]	; 0x54
 8005f62:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 8005f66:	9102      	str	r1, [sp, #8]
 8005f68:	2700      	movs	r7, #0
 8005f6a:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
 8005f6e:	434a      	muls	r2, r1
 8005f70:	b212      	sxth	r2, r2
 8005f72:	ae08      	add	r6, sp, #32
 8005f74:	920b      	str	r2, [sp, #44]	; 0x2c
 8005f76:	46ca      	mov	sl, r9
 8005f78:	5ff1      	ldrsh	r1, [r6, r7]
 8005f7a:	910a      	str	r1, [sp, #40]	; 0x28
 8005f7c:	f8ad 9002 	strh.w	r9, [sp, #2]
 8005f80:	f8ad 8064 	strh.w	r8, [sp, #100]	; 0x64
 8005f84:	9505      	str	r5, [sp, #20]
 8005f86:	f8ad 4000 	strh.w	r4, [sp]
 8005f8a:	9303      	str	r3, [sp, #12]
 8005f8c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8005f90:	f9bd c000 	ldrsh.w	ip, [sp]
 8005f94:	2200      	movs	r2, #0
 8005f96:	2900      	cmp	r1, #0
 8005f98:	d063      	beq.n	8006062 <pool_func_ap_array_f32+0x196>
 8005f9a:	9d02      	ldr	r5, [sp, #8]
 8005f9c:	9905      	ldr	r1, [sp, #20]
 8005f9e:	f8cd e010 	str.w	lr, [sp, #16]
 8005fa2:	fb05 f50a 	mul.w	r5, r5, sl
 8005fa6:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 8005faa:	f8ad b006 	strh.w	fp, [sp, #6]
 8005fae:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005fb0:	9b04      	ldr	r3, [sp, #16]
 8005fb2:	4299      	cmp	r1, r3
 8005fb4:	ed9f 0abb 	vldr	s0, [pc, #748]	; 80062a4 <.text_5>
 8005fb8:	eddf 0aba 	vldr	s1, [pc, #744]	; 80062a4 <.text_5>
 8005fbc:	da43      	bge.n	8006046 <pool_func_ap_array_f32+0x17a>
 8005fbe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8005fc0:	f8bd b006 	ldrh.w	fp, [sp, #6]
 8005fc4:	eba3 0804 	sub.w	r8, r3, r4
 8005fc8:	fb01 f10b 	mul.w	r1, r1, fp
 8005fcc:	4603      	mov	r3, r0
 8005fce:	ee10 ea90 	vmov	lr, s1
 8005fd2:	b23c      	sxth	r4, r7
 8005fd4:	4564      	cmp	r4, ip
 8005fd6:	46b9      	mov	r9, r7
 8005fd8:	da2e      	bge.n	8006038 <pool_func_ap_array_f32+0x16c>
 8005fda:	ebac 0004 	sub.w	r0, ip, r4
 8005fde:	44e6      	add	lr, ip
 8005fe0:	07c6      	lsls	r6, r0, #31
 8005fe2:	ebae 0e04 	sub.w	lr, lr, r4
 8005fe6:	d50a      	bpl.n	8005ffe <pool_func_ap_array_f32+0x132>
 8005fe8:	190c      	adds	r4, r1, r4
 8005fea:	fb04 240a 	mla	r4, r4, sl, r2
 8005fee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005ff2:	f109 0901 	add.w	r9, r9, #1
 8005ff6:	edd4 0a00 	vldr	s1, [r4]
 8005ffa:	ee30 0a20 	vadd.f32	s0, s0, s1
 8005ffe:	0840      	lsrs	r0, r0, #1
 8006000:	f000 801a 	beq.w	8006038 <pool_func_ap_array_f32+0x16c>
 8006004:	fa01 f489 	sxtah	r4, r1, r9
 8006008:	f109 0901 	add.w	r9, r9, #1
 800600c:	fb04 240a 	mla	r4, r4, sl, r2
 8006010:	fa01 f689 	sxtah	r6, r1, r9
 8006014:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006018:	fb06 260a 	mla	r6, r6, sl, r2
 800601c:	edd4 0a00 	vldr	s1, [r4]
 8006020:	eb03 0486 	add.w	r4, r3, r6, lsl #2
 8006024:	ee30 0a20 	vadd.f32	s0, s0, s1
 8006028:	ed94 1a00 	vldr	s2, [r4]
 800602c:	1e40      	subs	r0, r0, #1
 800602e:	ee30 0a01 	vadd.f32	s0, s0, s2
 8006032:	f109 0901 	add.w	r9, r9, #1
 8006036:	d1e5      	bne.n	8006004 <pool_func_ap_array_f32+0x138>
 8006038:	f1b8 0801 	subs.w	r8, r8, #1
 800603c:	4459      	add	r1, fp
 800603e:	d1c8      	bne.n	8005fd2 <pool_func_ap_array_f32+0x106>
 8006040:	4618      	mov	r0, r3
 8006042:	ee00 ea90 	vmov	s1, lr
 8006046:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 800604a:	ee80 0a20 	vdiv.f32	s0, s0, s1
 800604e:	ed85 0a00 	vstr	s0, [r5]
 8006052:	1c52      	adds	r2, r2, #1
 8006054:	1d2d      	adds	r5, r5, #4
 8006056:	4552      	cmp	r2, sl
 8006058:	dba9      	blt.n	8005fae <pool_func_ap_array_f32+0xe2>
 800605a:	f8dd e010 	ldr.w	lr, [sp, #16]
 800605e:	f8bd b006 	ldrh.w	fp, [sp, #6]
 8006062:	9902      	ldr	r1, [sp, #8]
 8006064:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8006068:	1c49      	adds	r1, r1, #1
 800606a:	9102      	str	r1, [sp, #8]
 800606c:	f8bd 1000 	ldrh.w	r1, [sp]
 8006070:	1851      	adds	r1, r2, r1
 8006072:	f8ad 1000 	strh.w	r1, [sp]
 8006076:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 800607a:	9a03      	ldr	r2, [sp, #12]
 800607c:	19cf      	adds	r7, r1, r7
 800607e:	1e52      	subs	r2, r2, #1
 8006080:	9203      	str	r2, [sp, #12]
 8006082:	d183      	bne.n	8005f8c <pool_func_ap_array_f32+0xc0>
 8006084:	f8bd 9002 	ldrh.w	r9, [sp, #2]
 8006088:	f8bd 8064 	ldrh.w	r8, [sp, #100]	; 0x64
 800608c:	9d05      	ldr	r5, [sp, #20]
 800608e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006090:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 8006094:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8006098:	1c49      	adds	r1, r1, #1
 800609a:	9109      	str	r1, [sp, #36]	; 0x24
 800609c:	9907      	ldr	r1, [sp, #28]
 800609e:	188a      	adds	r2, r1, r2
 80060a0:	9207      	str	r2, [sp, #28]
 80060a2:	9908      	ldr	r1, [sp, #32]
 80060a4:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
 80060a8:	188a      	adds	r2, r1, r2
 80060aa:	9208      	str	r2, [sp, #32]
 80060ac:	f9bd 1068 	ldrsh.w	r1, [sp, #104]	; 0x68
 80060b0:	9a06      	ldr	r2, [sp, #24]
 80060b2:	18cb      	adds	r3, r1, r3
 80060b4:	1e52      	subs	r2, r2, #1
 80060b6:	f8ad 3004 	strh.w	r3, [sp, #4]
 80060ba:	9206      	str	r2, [sp, #24]
 80060bc:	f000 80ee 	beq.w	800629c <pool_func_ap_array_f32+0x3d0>
 80060c0:	e744      	b.n	8005f4c <pool_func_ap_array_f32+0x80>
 80060c2:	000f      	movs	r7, r1
 80060c4:	f000 80ea 	beq.w	800629c <pool_func_ap_array_f32+0x3d0>
 80060c8:	425b      	negs	r3, r3
 80060ca:	18d2      	adds	r2, r2, r3
 80060cc:	2700      	movs	r7, #0
 80060ce:	f8ad 3000 	strh.w	r3, [sp]
 80060d2:	f8ad 200a 	strh.w	r2, [sp, #10]
 80060d6:	9709      	str	r7, [sp, #36]	; 0x24
 80060d8:	f8cd 1020 	str.w	r1, [sp, #32]
 80060dc:	f8bd 106c 	ldrh.w	r1, [sp, #108]	; 0x6c
 80060e0:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80060e4:	2900      	cmp	r1, #0
 80060e6:	f000 80c1 	beq.w	800626c <pool_func_ap_array_f32+0x3a0>
 80060ea:	f9bd 605c 	ldrsh.w	r6, [sp, #92]	; 0x5c
 80060ee:	f9bd 4054 	ldrsh.w	r4, [sp, #84]	; 0x54
 80060f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060f4:	f8bd 106c 	ldrh.w	r1, [sp, #108]	; 0x6c
 80060f8:	9204      	str	r2, [sp, #16]
 80060fa:	4276      	negs	r6, r6
 80060fc:	19a4      	adds	r4, r4, r6
 80060fe:	f8ad 9002 	strh.w	r9, [sp, #2]
 8006102:	f8ad 8064 	strh.w	r8, [sp, #100]	; 0x64
 8006106:	9505      	str	r5, [sp, #20]
 8006108:	f8ad 6004 	strh.w	r6, [sp, #4]
 800610c:	f8ad 4008 	strh.w	r4, [sp, #8]
 8006110:	f8cd 101c 	str.w	r1, [sp, #28]
 8006114:	f8ad b006 	strh.w	fp, [sp, #6]
 8006118:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800611c:	f9bd 8008 	ldrsh.w	r8, [sp, #8]
 8006120:	2100      	movs	r1, #0
 8006122:	2a00      	cmp	r2, #0
 8006124:	f000 8085 	beq.w	8006232 <pool_func_ap_array_f32+0x366>
 8006128:	f8bd 5002 	ldrh.w	r5, [sp, #2]
 800612c:	9c04      	ldr	r4, [sp, #16]
 800612e:	9a05      	ldr	r2, [sp, #20]
 8006130:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 8006134:	f8ad a00c 	strh.w	sl, [sp, #12]
 8006138:	4365      	muls	r5, r4
 800613a:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800613e:	9506      	str	r5, [sp, #24]
 8006140:	f9bd 5000 	ldrsh.w	r5, [sp]
 8006144:	f8bd a002 	ldrh.w	sl, [sp, #2]
 8006148:	429d      	cmp	r5, r3
 800614a:	ed9f 0a56 	vldr	s0, [pc, #344]	; 80062a4 <.text_5>
 800614e:	eddf 0a55 	vldr	s1, [pc, #340]	; 80062a4 <.text_5>
 8006152:	da5d      	bge.n	8006210 <pool_func_ap_array_f32+0x344>
 8006154:	930a      	str	r3, [sp, #40]	; 0x28
 8006156:	fb09 fe05 	mul.w	lr, r9, r5
 800615a:	462b      	mov	r3, r5
 800615c:	f9bd 5004 	ldrsh.w	r5, [sp, #4]
 8006160:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 8006164:	ee10 2a90 	vmov	r2, s1
 8006168:	4545      	cmp	r5, r8
 800616a:	462f      	mov	r7, r5
 800616c:	da44      	bge.n	80061f8 <pool_func_ap_array_f32+0x32c>
 800616e:	eba8 0405 	sub.w	r4, r8, r5
 8006172:	07e6      	lsls	r6, r4, #31
 8006174:	d513      	bpl.n	800619e <pool_func_ap_array_f32+0x2d2>
 8006176:	2b00      	cmp	r3, #0
 8006178:	bf58      	it	pl
 800617a:	2f00      	cmppl	r7, #0
 800617c:	d40e      	bmi.n	800619c <pool_func_ap_array_f32+0x2d0>
 800617e:	455b      	cmp	r3, fp
 8006180:	bfb8      	it	lt
 8006182:	454f      	cmplt	r7, r9
 8006184:	da0a      	bge.n	800619c <pool_func_ap_array_f32+0x2d0>
 8006186:	eb0e 0607 	add.w	r6, lr, r7
 800618a:	fb06 160a 	mla	r6, r6, sl, r1
 800618e:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8006192:	1c52      	adds	r2, r2, #1
 8006194:	edd6 0a00 	vldr	s1, [r6]
 8006198:	ee30 0a20 	vadd.f32	s0, s0, s1
 800619c:	1c7f      	adds	r7, r7, #1
 800619e:	0864      	lsrs	r4, r4, #1
 80061a0:	d02a      	beq.n	80061f8 <pool_func_ap_array_f32+0x32c>
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d405      	bmi.n	80061b2 <pool_func_ap_array_f32+0x2e6>
 80061a6:	2f00      	cmp	r7, #0
 80061a8:	bf48      	it	mi
 80061aa:	1c7e      	addmi	r6, r7, #1
 80061ac:	d410      	bmi.n	80061d0 <pool_func_ap_array_f32+0x304>
 80061ae:	455b      	cmp	r3, fp
 80061b0:	db01      	blt.n	80061b6 <pool_func_ap_array_f32+0x2ea>
 80061b2:	1c7e      	adds	r6, r7, #1
 80061b4:	e01d      	b.n	80061f2 <pool_func_ap_array_f32+0x326>
 80061b6:	1c7e      	adds	r6, r7, #1
 80061b8:	454f      	cmp	r7, r9
 80061ba:	da09      	bge.n	80061d0 <pool_func_ap_array_f32+0x304>
 80061bc:	4477      	add	r7, lr
 80061be:	fb07 170a 	mla	r7, r7, sl, r1
 80061c2:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 80061c6:	1c52      	adds	r2, r2, #1
 80061c8:	edd7 0a00 	vldr	s1, [r7]
 80061cc:	ee30 0a20 	vadd.f32	s0, s0, s1
 80061d0:	2e00      	cmp	r6, #0
 80061d2:	d40e      	bmi.n	80061f2 <pool_func_ap_array_f32+0x326>
 80061d4:	455b      	cmp	r3, fp
 80061d6:	bfb8      	it	lt
 80061d8:	454e      	cmplt	r6, r9
 80061da:	da0a      	bge.n	80061f2 <pool_func_ap_array_f32+0x326>
 80061dc:	eb0e 0706 	add.w	r7, lr, r6
 80061e0:	fb07 170a 	mla	r7, r7, sl, r1
 80061e4:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 80061e8:	1c52      	adds	r2, r2, #1
 80061ea:	edd7 0a00 	vldr	s1, [r7]
 80061ee:	ee30 0a20 	vadd.f32	s0, s0, s1
 80061f2:	1c77      	adds	r7, r6, #1
 80061f4:	1e64      	subs	r4, r4, #1
 80061f6:	d1d4      	bne.n	80061a2 <pool_func_ap_array_f32+0x2d6>
 80061f8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80061fa:	1c5b      	adds	r3, r3, #1
 80061fc:	42bb      	cmp	r3, r7
 80061fe:	44ce      	add	lr, r9
 8006200:	dbb2      	blt.n	8006168 <pool_func_ap_array_f32+0x29c>
 8006202:	463b      	mov	r3, r7
 8006204:	ee00 2a90 	vmov	s1, r2
 8006208:	f8ad 5004 	strh.w	r5, [sp, #4]
 800620c:	f8ad b00c 	strh.w	fp, [sp, #12]
 8006210:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8006214:	9d06      	ldr	r5, [sp, #24]
 8006216:	ee80 0a20 	vdiv.f32	s0, s0, s1
 800621a:	ed85 0a00 	vstr	s0, [r5]
 800621e:	1c49      	adds	r1, r1, #1
 8006220:	9a06      	ldr	r2, [sp, #24]
 8006222:	1d15      	adds	r5, r2, #4
 8006224:	4551      	cmp	r1, sl
 8006226:	9506      	str	r5, [sp, #24]
 8006228:	db8a      	blt.n	8006140 <pool_func_ap_array_f32+0x274>
 800622a:	f8ad 9006 	strh.w	r9, [sp, #6]
 800622e:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 8006232:	9904      	ldr	r1, [sp, #16]
 8006234:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8006238:	1c49      	adds	r1, r1, #1
 800623a:	9104      	str	r1, [sp, #16]
 800623c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8006240:	1851      	adds	r1, r2, r1
 8006242:	f8ad 1008 	strh.w	r1, [sp, #8]
 8006246:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 800624a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 800624e:	1851      	adds	r1, r2, r1
 8006250:	f8ad 1004 	strh.w	r1, [sp, #4]
 8006254:	9907      	ldr	r1, [sp, #28]
 8006256:	1e49      	subs	r1, r1, #1
 8006258:	9107      	str	r1, [sp, #28]
 800625a:	f47f af5d 	bne.w	8006118 <pool_func_ap_array_f32+0x24c>
 800625e:	f8bd 9002 	ldrh.w	r9, [sp, #2]
 8006262:	f8bd 8064 	ldrh.w	r8, [sp, #100]	; 0x64
 8006266:	9d05      	ldr	r5, [sp, #20]
 8006268:	f8bd b006 	ldrh.w	fp, [sp, #6]
 800626c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800626e:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 8006272:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8006276:	188a      	adds	r2, r1, r2
 8006278:	9209      	str	r2, [sp, #36]	; 0x24
 800627a:	f8bd 2000 	ldrh.w	r2, [sp]
 800627e:	f9bd 1068 	ldrsh.w	r1, [sp, #104]	; 0x68
 8006282:	18cb      	adds	r3, r1, r3
 8006284:	f9bd 1068 	ldrsh.w	r1, [sp, #104]	; 0x68
 8006288:	f8ad 300a 	strh.w	r3, [sp, #10]
 800628c:	188a      	adds	r2, r1, r2
 800628e:	f8ad 2000 	strh.w	r2, [sp]
 8006292:	9a08      	ldr	r2, [sp, #32]
 8006294:	1e52      	subs	r2, r2, #1
 8006296:	9208      	str	r2, [sp, #32]
 8006298:	f47f af20 	bne.w	80060dc <pool_func_ap_array_f32+0x210>
 800629c:	b00c      	add	sp, #48	; 0x30
 800629e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080062a4 <.text_5>:
 80062a4:	00000000 	.word	0x00000000

080062a8 <pool_func_mp_kernel_array_f32>:
 80062a8:	b470      	push	{r4, r5, r6}
 80062aa:	eb01 0482 	add.w	r4, r1, r2, lsl #2
 80062ae:	42a1      	cmp	r1, r4
 80062b0:	d257      	bcs.n	8006362 <pool_func_mp_kernel_array_f32+0xba>
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d051      	beq.n	800635a <pool_func_mp_kernel_array_f32+0xb2>
 80062b6:	f013 0203 	ands.w	r2, r3, #3
 80062ba:	460d      	mov	r5, r1
 80062bc:	4606      	mov	r6, r0
 80062be:	d011      	beq.n	80062e4 <pool_func_mp_kernel_array_f32+0x3c>
 80062c0:	ed96 0a00 	vldr	s0, [r6]
 80062c4:	edd5 0a00 	vldr	s1, [r5]
 80062c8:	eef4 0a40 	vcmp.f32	s1, s0
 80062cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062d0:	bf58      	it	pl
 80062d2:	eeb0 0a60 	vmovpl.f32	s0, s1
 80062d6:	ed86 0a00 	vstr	s0, [r6]
 80062da:	1e52      	subs	r2, r2, #1
 80062dc:	1d36      	adds	r6, r6, #4
 80062de:	1d2d      	adds	r5, r5, #4
 80062e0:	2a00      	cmp	r2, #0
 80062e2:	d1ed      	bne.n	80062c0 <pool_func_mp_kernel_array_f32+0x18>
 80062e4:	089a      	lsrs	r2, r3, #2
 80062e6:	d038      	beq.n	800635a <pool_func_mp_kernel_array_f32+0xb2>
 80062e8:	edd5 0a00 	vldr	s1, [r5]
 80062ec:	edd6 1a00 	vldr	s3, [r6]
 80062f0:	eef4 0a61 	vcmp.f32	s1, s3
 80062f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062f8:	bf48      	it	mi
 80062fa:	eef0 0a61 	vmovmi.f32	s1, s3
 80062fe:	edc6 0a00 	vstr	s1, [r6]
 8006302:	edd5 0a01 	vldr	s1, [r5, #4]
 8006306:	edd6 1a01 	vldr	s3, [r6, #4]
 800630a:	ed96 0a02 	vldr	s0, [r6, #8]
 800630e:	eef4 0a61 	vcmp.f32	s1, s3
 8006312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006316:	bf48      	it	mi
 8006318:	eef0 0a61 	vmovmi.f32	s1, s3
 800631c:	edc6 0a01 	vstr	s1, [r6, #4]
 8006320:	ed95 1a02 	vldr	s2, [r5, #8]
 8006324:	edd6 1a03 	vldr	s3, [r6, #12]
 8006328:	eeb4 1a40 	vcmp.f32	s2, s0
 800632c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006330:	bf48      	it	mi
 8006332:	eeb0 1a40 	vmovmi.f32	s2, s0
 8006336:	ed86 1a02 	vstr	s2, [r6, #8]
 800633a:	edd5 0a03 	vldr	s1, [r5, #12]
 800633e:	eef4 0a61 	vcmp.f32	s1, s3
 8006342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006346:	bf58      	it	pl
 8006348:	eef0 1a60 	vmovpl.f32	s3, s1
 800634c:	edc6 1a03 	vstr	s3, [r6, #12]
 8006350:	1e52      	subs	r2, r2, #1
 8006352:	3610      	adds	r6, #16
 8006354:	3510      	adds	r5, #16
 8006356:	2a00      	cmp	r2, #0
 8006358:	d1c6      	bne.n	80062e8 <pool_func_mp_kernel_array_f32+0x40>
 800635a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800635e:	42a1      	cmp	r1, r4
 8006360:	d3a7      	bcc.n	80062b2 <pool_func_mp_kernel_array_f32+0xa>
 8006362:	bc70      	pop	{r4, r5, r6}
 8006364:	4770      	bx	lr
	...

08006368 <pool_func_ap_kernel_array_f32>:
 8006368:	b4f0      	push	{r4, r5, r6, r7}
 800636a:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 800636e:	9c05      	ldr	r4, [sp, #20]
 8006370:	42a9      	cmp	r1, r5
 8006372:	d251      	bcs.n	8006418 <pool_func_ap_kernel_array_f32+0xb0>
 8006374:	2b00      	cmp	r3, #0
 8006376:	d04a      	beq.n	800640e <pool_func_ap_kernel_array_f32+0xa6>
 8006378:	f013 0203 	ands.w	r2, r3, #3
 800637c:	460e      	mov	r6, r1
 800637e:	4607      	mov	r7, r0
 8006380:	f000 800f 	beq.w	80063a2 <pool_func_ap_kernel_array_f32+0x3a>
 8006384:	ed96 0a00 	vldr	s0, [r6]
 8006388:	2c01      	cmp	r4, #1
 800638a:	bf1c      	itt	ne
 800638c:	edd7 0a00 	vldrne	s1, [r7]
 8006390:	ee30 0a80 	vaddne.f32	s0, s1, s0
 8006394:	ed87 0a00 	vstr	s0, [r7]
 8006398:	1e52      	subs	r2, r2, #1
 800639a:	1d3f      	adds	r7, r7, #4
 800639c:	1d36      	adds	r6, r6, #4
 800639e:	2a00      	cmp	r2, #0
 80063a0:	d1f0      	bne.n	8006384 <pool_func_ap_kernel_array_f32+0x1c>
 80063a2:	089a      	lsrs	r2, r3, #2
 80063a4:	d033      	beq.n	800640e <pool_func_ap_kernel_array_f32+0xa6>
 80063a6:	2c01      	cmp	r4, #1
 80063a8:	edd6 1a00 	vldr	s3, [r6]
 80063ac:	d10c      	bne.n	80063c8 <pool_func_ap_kernel_array_f32+0x60>
 80063ae:	edc7 1a00 	vstr	s3, [r7]
 80063b2:	ed96 0a01 	vldr	s0, [r6, #4]
 80063b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80063ba:	edd6 1a02 	vldr	s3, [r6, #8]
 80063be:	edc7 1a02 	vstr	s3, [r7, #8]
 80063c2:	edd6 1a03 	vldr	s3, [r6, #12]
 80063c6:	e01b      	b.n	8006400 <pool_func_ap_kernel_array_f32+0x98>
 80063c8:	edd7 0a00 	vldr	s1, [r7]
 80063cc:	ee30 0aa1 	vadd.f32	s0, s1, s3
 80063d0:	ed87 0a00 	vstr	s0, [r7]
 80063d4:	ed97 1a01 	vldr	s2, [r7, #4]
 80063d8:	ed96 0a01 	vldr	s0, [r6, #4]
 80063dc:	edd7 1a02 	vldr	s3, [r7, #8]
 80063e0:	ee31 0a00 	vadd.f32	s0, s2, s0
 80063e4:	ed87 0a01 	vstr	s0, [r7, #4]
 80063e8:	edd6 0a02 	vldr	s1, [r6, #8]
 80063ec:	ee31 0aa0 	vadd.f32	s0, s3, s1
 80063f0:	ed87 0a02 	vstr	s0, [r7, #8]
 80063f4:	ed97 0a03 	vldr	s0, [r7, #12]
 80063f8:	ed96 1a03 	vldr	s2, [r6, #12]
 80063fc:	ee70 1a01 	vadd.f32	s3, s0, s2
 8006400:	edc7 1a03 	vstr	s3, [r7, #12]
 8006404:	1e52      	subs	r2, r2, #1
 8006406:	3710      	adds	r7, #16
 8006408:	3610      	adds	r6, #16
 800640a:	2a00      	cmp	r2, #0
 800640c:	d1cb      	bne.n	80063a6 <pool_func_ap_kernel_array_f32+0x3e>
 800640e:	2400      	movs	r4, #0
 8006410:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8006414:	42a9      	cmp	r1, r5
 8006416:	d3ad      	bcc.n	8006374 <pool_func_ap_kernel_array_f32+0xc>
 8006418:	9904      	ldr	r1, [sp, #16]
 800641a:	b399      	cbz	r1, 8006484 <pool_func_ap_kernel_array_f32+0x11c>
 800641c:	ee00 1a10 	vmov	s0, r1
 8006420:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8006424:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8006428:	ee80 0a80 	vdiv.f32	s0, s1, s0
 800642c:	b353      	cbz	r3, 8006484 <pool_func_ap_kernel_array_f32+0x11c>
 800642e:	f013 0103 	ands.w	r1, r3, #3
 8006432:	d009      	beq.n	8006448 <pool_func_ap_kernel_array_f32+0xe0>
 8006434:	edd0 0a00 	vldr	s1, [r0]
 8006438:	ee60 0a80 	vmul.f32	s1, s1, s0
 800643c:	edc0 0a00 	vstr	s1, [r0]
 8006440:	1e49      	subs	r1, r1, #1
 8006442:	f100 0004 	add.w	r0, r0, #4
 8006446:	d1f5      	bne.n	8006434 <pool_func_ap_kernel_array_f32+0xcc>
 8006448:	089b      	lsrs	r3, r3, #2
 800644a:	d01b      	beq.n	8006484 <pool_func_ap_kernel_array_f32+0x11c>
 800644c:	edd0 0a00 	vldr	s1, [r0]
 8006450:	ee60 0a80 	vmul.f32	s1, s1, s0
 8006454:	edc0 0a00 	vstr	s1, [r0]
 8006458:	1e5b      	subs	r3, r3, #1
 800645a:	ed90 1a01 	vldr	s2, [r0, #4]
 800645e:	edd0 0a02 	vldr	s1, [r0, #8]
 8006462:	ee21 1a00 	vmul.f32	s2, s2, s0
 8006466:	ed80 1a01 	vstr	s2, [r0, #4]
 800646a:	ee60 0a80 	vmul.f32	s1, s1, s0
 800646e:	ed90 1a03 	vldr	s2, [r0, #12]
 8006472:	edc0 0a02 	vstr	s1, [r0, #8]
 8006476:	ee21 1a00 	vmul.f32	s2, s2, s0
 800647a:	ed80 1a03 	vstr	s2, [r0, #12]
 800647e:	f100 0010 	add.w	r0, r0, #16
 8006482:	d1e3      	bne.n	800644c <pool_func_ap_kernel_array_f32+0xe4>
 8006484:	bcf0      	pop	{r4, r5, r6, r7}
 8006486:	4770      	bx	lr

08006488 <forward_mp>:
 8006488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800648c:	4604      	mov	r4, r0
 800648e:	b08e      	sub	sp, #56	; 0x38
 8006490:	6962      	ldr	r2, [r4, #20]
 8006492:	8811      	ldrh	r1, [r2, #0]
 8006494:	2900      	cmp	r1, #0
 8006496:	bf1a      	itte	ne
 8006498:	6850      	ldrne	r0, [r2, #4]
 800649a:	1d00      	addne	r0, r0, #4
 800649c:	2004      	moveq	r0, #4
 800649e:	6800      	ldr	r0, [r0, #0]
 80064a0:	2800      	cmp	r0, #0
 80064a2:	bf14      	ite	ne
 80064a4:	6805      	ldrne	r5, [r0, #0]
 80064a6:	2500      	moveq	r5, #0
 80064a8:	2901      	cmp	r1, #1
 80064aa:	bfc6      	itte	gt
 80064ac:	6850      	ldrgt	r0, [r2, #4]
 80064ae:	3010      	addgt	r0, #16
 80064b0:	2004      	movle	r0, #4
 80064b2:	6800      	ldr	r0, [r0, #0]
 80064b4:	68ea      	ldr	r2, [r5, #12]
 80064b6:	2800      	cmp	r0, #0
 80064b8:	bf14      	ite	ne
 80064ba:	6807      	ldrne	r7, [r0, #0]
 80064bc:	2700      	moveq	r7, #0
 80064be:	68f9      	ldr	r1, [r7, #12]
 80064c0:	68d0      	ldr	r0, [r2, #12]
 80064c2:	68cb      	ldr	r3, [r1, #12]
 80064c4:	9009      	str	r0, [sp, #36]	; 0x24
 80064c6:	6889      	ldr	r1, [r1, #8]
 80064c8:	9108      	str	r1, [sp, #32]
 80064ca:	f8d2 8008 	ldr.w	r8, [r2, #8]
 80064ce:	6851      	ldr	r1, [r2, #4]
 80064d0:	69a2      	ldr	r2, [r4, #24]
 80064d2:	69e0      	ldr	r0, [r4, #28]
 80064d4:	9007      	str	r0, [sp, #28]
 80064d6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80064d8:	6a20      	ldr	r0, [r4, #32]
 80064da:	960d      	str	r6, [sp, #52]	; 0x34
 80064dc:	f8d4 c02c 	ldr.w	ip, [r4, #44]	; 0x2c
 80064e0:	69ac      	ldr	r4, [r5, #24]
 80064e2:	69bd      	ldr	r5, [r7, #24]
 80064e4:	f8dc 7000 	ldr.w	r7, [ip]
 80064e8:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80064ec:	68a4      	ldr	r4, [r4, #8]
 80064ee:	f8d5 e008 	ldr.w	lr, [r5, #8]
 80064f2:	427f      	negs	r7, r7
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	9700      	str	r7, [sp, #0]
 80064f8:	f000 80d9 	beq.w	80066ae <forward_mp+0x226>
 80064fc:	9301      	str	r3, [sp, #4]
 80064fe:	4276      	negs	r6, r6
 8006500:	960c      	str	r6, [sp, #48]	; 0x30
 8006502:	fb01 f508 	mul.w	r5, r1, r8
 8006506:	950b      	str	r5, [sp, #44]	; 0x2c
 8006508:	9d00      	ldr	r5, [sp, #0]
 800650a:	9b00      	ldr	r3, [sp, #0]
 800650c:	9f00      	ldr	r7, [sp, #0]
 800650e:	426d      	negs	r5, r5
 8006510:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006512:	bfcc      	ite	gt
 8006514:	2600      	movgt	r6, #0
 8006516:	9e00      	ldrle	r6, [sp, #0]
 8006518:	1aeb      	subs	r3, r5, r3
 800651a:	9d07      	ldr	r5, [sp, #28]
 800651c:	42ab      	cmp	r3, r5
 800651e:	bf88      	it	hi
 8006520:	462b      	movhi	r3, r5
 8006522:	19df      	adds	r7, r3, r7
 8006524:	9b08      	ldr	r3, [sp, #32]
 8006526:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006528:	2b00      	cmp	r3, #0
 800652a:	f000 80b7 	beq.w	800669c <forward_mp+0x214>
 800652e:	fb08 fa06 	mul.w	sl, r8, r6
 8006532:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8006536:	f8cd 800c 	str.w	r8, [sp, #12]
 800653a:	9202      	str	r2, [sp, #8]
 800653c:	9006      	str	r0, [sp, #24]
 800653e:	9605      	str	r6, [sp, #20]
 8006540:	9704      	str	r7, [sp, #16]
 8006542:	4268      	negs	r0, r5
 8006544:	9f03      	ldr	r7, [sp, #12]
 8006546:	9a02      	ldr	r2, [sp, #8]
 8006548:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800654c:	bfcc      	ite	gt
 800654e:	2000      	movgt	r0, #0
 8006550:	4628      	movle	r0, r5
 8006552:	1b7f      	subs	r7, r7, r5
 8006554:	4297      	cmp	r7, r2
 8006556:	bf88      	it	hi
 8006558:	4617      	movhi	r7, r2
 800655a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800655c:	197f      	adds	r7, r7, r5
 800655e:	1a3f      	subs	r7, r7, r0
 8006560:	1880      	adds	r0, r0, r2
 8006562:	4348      	muls	r0, r1
 8006564:	434f      	muls	r7, r1
 8006566:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
 800656a:	b311      	cbz	r1, 80065b2 <forward_mp+0x12a>
 800656c:	f011 0003 	ands.w	r0, r1, #3
 8006570:	4672      	mov	r2, lr
 8006572:	4666      	mov	r6, ip
 8006574:	f000 8006 	beq.w	8006584 <forward_mp+0xfc>
 8006578:	f856 9b04 	ldr.w	r9, [r6], #4
 800657c:	f842 9b04 	str.w	r9, [r2], #4
 8006580:	1e40      	subs	r0, r0, #1
 8006582:	d1f9      	bne.n	8006578 <forward_mp+0xf0>
 8006584:	0888      	lsrs	r0, r1, #2
 8006586:	d014      	beq.n	80065b2 <forward_mp+0x12a>
 8006588:	ed96 0a00 	vldr	s0, [r6]
 800658c:	ed82 0a00 	vstr	s0, [r2]
 8006590:	1e40      	subs	r0, r0, #1
 8006592:	edd6 0a01 	vldr	s1, [r6, #4]
 8006596:	edc2 0a01 	vstr	s1, [r2, #4]
 800659a:	ed96 0a02 	vldr	s0, [r6, #8]
 800659e:	ed82 0a02 	vstr	s0, [r2, #8]
 80065a2:	edd6 0a03 	vldr	s1, [r6, #12]
 80065a6:	edc2 0a03 	vstr	s1, [r2, #12]
 80065aa:	3210      	adds	r2, #16
 80065ac:	3610      	adds	r6, #16
 80065ae:	2800      	cmp	r0, #0
 80065b0:	d1ea      	bne.n	8006588 <forward_mp+0x100>
 80065b2:	9805      	ldr	r0, [sp, #20]
 80065b4:	9a04      	ldr	r2, [sp, #16]
 80065b6:	4290      	cmp	r0, r2
 80065b8:	da66      	bge.n	8006688 <forward_mp+0x200>
 80065ba:	4610      	mov	r0, r2
 80065bc:	9a05      	ldr	r2, [sp, #20]
 80065be:	1a82      	subs	r2, r0, r2
 80065c0:	46e2      	mov	sl, ip
 80065c2:	eb0a 0b87 	add.w	fp, sl, r7, lsl #2
 80065c6:	45da      	cmp	sl, fp
 80065c8:	d25a      	bcs.n	8006680 <forward_mp+0x1f8>
 80065ca:	2900      	cmp	r1, #0
 80065cc:	d054      	beq.n	8006678 <forward_mp+0x1f0>
 80065ce:	f011 0003 	ands.w	r0, r1, #3
 80065d2:	4656      	mov	r6, sl
 80065d4:	46f1      	mov	r9, lr
 80065d6:	d012      	beq.n	80065fe <forward_mp+0x176>
 80065d8:	ed99 0a00 	vldr	s0, [r9]
 80065dc:	edd6 0a00 	vldr	s1, [r6]
 80065e0:	eef4 0a40 	vcmp.f32	s1, s0
 80065e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065e8:	bf58      	it	pl
 80065ea:	eeb0 0a60 	vmovpl.f32	s0, s1
 80065ee:	1e40      	subs	r0, r0, #1
 80065f0:	1d36      	adds	r6, r6, #4
 80065f2:	ed89 0a00 	vstr	s0, [r9]
 80065f6:	2800      	cmp	r0, #0
 80065f8:	f109 0904 	add.w	r9, r9, #4
 80065fc:	d1ec      	bne.n	80065d8 <forward_mp+0x150>
 80065fe:	0888      	lsrs	r0, r1, #2
 8006600:	f000 803a 	beq.w	8006678 <forward_mp+0x1f0>
 8006604:	edd6 0a00 	vldr	s1, [r6]
 8006608:	edd9 1a00 	vldr	s3, [r9]
 800660c:	eef4 0a61 	vcmp.f32	s1, s3
 8006610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006614:	bf48      	it	mi
 8006616:	eef0 0a61 	vmovmi.f32	s1, s3
 800661a:	edc9 0a00 	vstr	s1, [r9]
 800661e:	edd6 0a01 	vldr	s1, [r6, #4]
 8006622:	edd9 1a01 	vldr	s3, [r9, #4]
 8006626:	ed99 0a02 	vldr	s0, [r9, #8]
 800662a:	eef4 0a61 	vcmp.f32	s1, s3
 800662e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006632:	bf48      	it	mi
 8006634:	eef0 0a61 	vmovmi.f32	s1, s3
 8006638:	edc9 0a01 	vstr	s1, [r9, #4]
 800663c:	ed96 1a02 	vldr	s2, [r6, #8]
 8006640:	edd9 1a03 	vldr	s3, [r9, #12]
 8006644:	eeb4 1a40 	vcmp.f32	s2, s0
 8006648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800664c:	bf48      	it	mi
 800664e:	eeb0 1a40 	vmovmi.f32	s2, s0
 8006652:	ed89 1a02 	vstr	s2, [r9, #8]
 8006656:	edd6 0a03 	vldr	s1, [r6, #12]
 800665a:	eef4 0a61 	vcmp.f32	s1, s3
 800665e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006662:	bf58      	it	pl
 8006664:	eef0 1a60 	vmovpl.f32	s3, s1
 8006668:	1e40      	subs	r0, r0, #1
 800666a:	3610      	adds	r6, #16
 800666c:	edc9 1a03 	vstr	s3, [r9, #12]
 8006670:	2800      	cmp	r0, #0
 8006672:	f109 0910 	add.w	r9, r9, #16
 8006676:	d1c5      	bne.n	8006604 <forward_mp+0x17c>
 8006678:	eb0a 0a81 	add.w	sl, sl, r1, lsl #2
 800667c:	45da      	cmp	sl, fp
 800667e:	d3a4      	bcc.n	80065ca <forward_mp+0x142>
 8006680:	1e52      	subs	r2, r2, #1
 8006682:	eb0c 0c88 	add.w	ip, ip, r8, lsl #2
 8006686:	d19b      	bne.n	80065c0 <forward_mp+0x138>
 8006688:	9806      	ldr	r0, [sp, #24]
 800668a:	1945      	adds	r5, r0, r5
 800668c:	1e5b      	subs	r3, r3, #1
 800668e:	eb0e 0e81 	add.w	lr, lr, r1, lsl #2
 8006692:	f47f af56 	bne.w	8006542 <forward_mp+0xba>
 8006696:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800669a:	9a02      	ldr	r2, [sp, #8]
 800669c:	9d00      	ldr	r5, [sp, #0]
 800669e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066a0:	195d      	adds	r5, r3, r5
 80066a2:	9500      	str	r5, [sp, #0]
 80066a4:	9d01      	ldr	r5, [sp, #4]
 80066a6:	1e6d      	subs	r5, r5, #1
 80066a8:	9501      	str	r5, [sp, #4]
 80066aa:	f47f af2d 	bne.w	8006508 <forward_mp+0x80>
 80066ae:	b00e      	add	sp, #56	; 0x38
 80066b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080066b4 <forward_ap>:
 80066b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066b8:	4607      	mov	r7, r0
 80066ba:	b097      	sub	sp, #92	; 0x5c
 80066bc:	697a      	ldr	r2, [r7, #20]
 80066be:	8811      	ldrh	r1, [r2, #0]
 80066c0:	2900      	cmp	r1, #0
 80066c2:	bf1a      	itte	ne
 80066c4:	6850      	ldrne	r0, [r2, #4]
 80066c6:	1d00      	addne	r0, r0, #4
 80066c8:	2004      	moveq	r0, #4
 80066ca:	6800      	ldr	r0, [r0, #0]
 80066cc:	2800      	cmp	r0, #0
 80066ce:	bf14      	ite	ne
 80066d0:	6804      	ldrne	r4, [r0, #0]
 80066d2:	2400      	moveq	r4, #0
 80066d4:	2901      	cmp	r1, #1
 80066d6:	bfc6      	itte	gt
 80066d8:	6850      	ldrgt	r0, [r2, #4]
 80066da:	3010      	addgt	r0, #16
 80066dc:	2004      	movle	r0, #4
 80066de:	6800      	ldr	r0, [r0, #0]
 80066e0:	68e3      	ldr	r3, [r4, #12]
 80066e2:	68dd      	ldr	r5, [r3, #12]
 80066e4:	2800      	cmp	r0, #0
 80066e6:	bf14      	ite	ne
 80066e8:	6806      	ldrne	r6, [r0, #0]
 80066ea:	2600      	moveq	r6, #0
 80066ec:	68f2      	ldr	r2, [r6, #12]
 80066ee:	68d0      	ldr	r0, [r2, #12]
 80066f0:	950d      	str	r5, [sp, #52]	; 0x34
 80066f2:	6892      	ldr	r2, [r2, #8]
 80066f4:	920c      	str	r2, [sp, #48]	; 0x30
 80066f6:	f8d3 c008 	ldr.w	ip, [r3, #8]
 80066fa:	6859      	ldr	r1, [r3, #4]
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	69fd      	ldr	r5, [r7, #28]
 8006700:	9505      	str	r5, [sp, #20]
 8006702:	f8d7 8020 	ldr.w	r8, [r7, #32]
 8006706:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 8006708:	9516      	str	r5, [sp, #88]	; 0x58
 800670a:	69a4      	ldr	r4, [r4, #24]
 800670c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800670e:	68a5      	ldr	r5, [r4, #8]
 8006710:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8006714:	69b4      	ldr	r4, [r6, #24]
 8006716:	6812      	ldr	r2, [r2, #0]
 8006718:	f8d4 e008 	ldr.w	lr, [r4, #8]
 800671c:	4252      	negs	r2, r2
 800671e:	2800      	cmp	r0, #0
 8006720:	9201      	str	r2, [sp, #4]
 8006722:	f000 811c 	beq.w	800695e <forward_ap+0x2aa>
 8006726:	9c05      	ldr	r4, [sp, #20]
 8006728:	f1c9 0900 	rsb	r9, r9, #0
 800672c:	435c      	muls	r4, r3
 800672e:	fb01 f20c 	mul.w	r2, r1, ip
 8006732:	9004      	str	r0, [sp, #16]
 8006734:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
 8006738:	9414      	str	r4, [sp, #80]	; 0x50
 800673a:	9213      	str	r2, [sp, #76]	; 0x4c
 800673c:	9a01      	ldr	r2, [sp, #4]
 800673e:	9801      	ldr	r0, [sp, #4]
 8006740:	9c01      	ldr	r4, [sp, #4]
 8006742:	4252      	negs	r2, r2
 8006744:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006746:	bfcc      	ite	gt
 8006748:	2600      	movgt	r6, #0
 800674a:	9e01      	ldrle	r6, [sp, #4]
 800674c:	1a10      	subs	r0, r2, r0
 800674e:	9a05      	ldr	r2, [sp, #20]
 8006750:	4290      	cmp	r0, r2
 8006752:	bf88      	it	hi
 8006754:	4610      	movhi	r0, r2
 8006756:	1904      	adds	r4, r0, r4
 8006758:	9815      	ldr	r0, [sp, #84]	; 0x54
 800675a:	9000      	str	r0, [sp, #0]
 800675c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800675e:	2800      	cmp	r0, #0
 8006760:	f000 80f4 	beq.w	800694c <forward_ap+0x298>
 8006764:	fb0c f006 	mul.w	r0, ip, r6
 8006768:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800676a:	9012      	str	r0, [sp, #72]	; 0x48
 800676c:	9202      	str	r2, [sp, #8]
 800676e:	1b30      	subs	r0, r6, r4
 8006770:	9011      	str	r0, [sp, #68]	; 0x44
 8006772:	970e      	str	r7, [sp, #56]	; 0x38
 8006774:	f8cd c01c 	str.w	ip, [sp, #28]
 8006778:	9306      	str	r3, [sp, #24]
 800677a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800677e:	950a      	str	r5, [sp, #40]	; 0x28
 8006780:	9609      	str	r6, [sp, #36]	; 0x24
 8006782:	9408      	str	r4, [sp, #32]
 8006784:	9800      	ldr	r0, [sp, #0]
 8006786:	9a07      	ldr	r2, [sp, #28]
 8006788:	f8dd a000 	ldr.w	sl, [sp]
 800678c:	4240      	negs	r0, r0
 800678e:	9800      	ldr	r0, [sp, #0]
 8006790:	bfcc      	ite	gt
 8006792:	f04f 0900 	movgt.w	r9, #0
 8006796:	f8dd 9000 	ldrle.w	r9, [sp]
 800679a:	1a10      	subs	r0, r2, r0
 800679c:	9a06      	ldr	r2, [sp, #24]
 800679e:	4290      	cmp	r0, r2
 80067a0:	bf88      	it	hi
 80067a2:	4610      	movhi	r0, r2
 80067a4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80067a6:	9203      	str	r2, [sp, #12]
 80067a8:	4482      	add	sl, r0
 80067aa:	9811      	ldr	r0, [sp, #68]	; 0x44
 80067ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80067ae:	eba9 030a 	sub.w	r3, r9, sl
 80067b2:	4343      	muls	r3, r0
 80067b4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80067b6:	444a      	add	r2, r9
 80067b8:	434a      	muls	r2, r1
 80067ba:	eb00 0582 	add.w	r5, r0, r2, lsl #2
 80067be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80067c0:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
 80067c4:	9a08      	ldr	r2, [sp, #32]
 80067c6:	ebaa 0409 	sub.w	r4, sl, r9
 80067ca:	434c      	muls	r4, r1
 80067cc:	2800      	cmp	r0, #0
 80067ce:	bf14      	ite	ne
 80067d0:	9e14      	ldrne	r6, [sp, #80]	; 0x50
 80067d2:	461e      	moveq	r6, r3
 80067d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067d6:	2701      	movs	r7, #1
 80067d8:	4290      	cmp	r0, r2
 80067da:	f04f 0800 	mov.w	r8, #0
 80067de:	f280 80a4 	bge.w	800692a <forward_ap+0x276>
 80067e2:	1a12      	subs	r2, r2, r0
 80067e4:	ebaa 0009 	sub.w	r0, sl, r9
 80067e8:	900f      	str	r0, [sp, #60]	; 0x3c
 80067ea:	9310      	str	r3, [sp, #64]	; 0x40
 80067ec:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80067ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80067f0:	4480      	add	r8, r0
 80067f2:	4543      	cmp	r3, r8
 80067f4:	46a9      	mov	r9, r5
 80067f6:	bf0c      	ite	eq
 80067f8:	4633      	moveq	r3, r6
 80067fa:	2300      	movne	r3, #0
 80067fc:	eb09 0c84 	add.w	ip, r9, r4, lsl #2
 8006800:	45e1      	cmp	r9, ip
 8006802:	d254      	bcs.n	80068ae <forward_ap+0x1fa>
 8006804:	2900      	cmp	r1, #0
 8006806:	d04d      	beq.n	80068a4 <forward_ap+0x1f0>
 8006808:	f011 0003 	ands.w	r0, r1, #3
 800680c:	46ca      	mov	sl, r9
 800680e:	46f3      	mov	fp, lr
 8006810:	f000 8010 	beq.w	8006834 <forward_ap+0x180>
 8006814:	ed9a 0a00 	vldr	s0, [sl]
 8006818:	2f01      	cmp	r7, #1
 800681a:	bf1c      	itt	ne
 800681c:	eddb 0a00 	vldrne	s1, [fp]
 8006820:	ee30 0a80 	vaddne.f32	s0, s1, s0
 8006824:	ed8b 0a00 	vstr	s0, [fp]
 8006828:	1e40      	subs	r0, r0, #1
 800682a:	f10b 0b04 	add.w	fp, fp, #4
 800682e:	f10a 0a04 	add.w	sl, sl, #4
 8006832:	d1ef      	bne.n	8006814 <forward_ap+0x160>
 8006834:	0888      	lsrs	r0, r1, #2
 8006836:	d035      	beq.n	80068a4 <forward_ap+0x1f0>
 8006838:	2f01      	cmp	r7, #1
 800683a:	edda 1a00 	vldr	s3, [sl]
 800683e:	d10d      	bne.n	800685c <forward_ap+0x1a8>
 8006840:	edcb 1a00 	vstr	s3, [fp]
 8006844:	ed9a 0a01 	vldr	s0, [sl, #4]
 8006848:	ed8b 0a01 	vstr	s0, [fp, #4]
 800684c:	edda 1a02 	vldr	s3, [sl, #8]
 8006850:	edcb 1a02 	vstr	s3, [fp, #8]
 8006854:	edda 1a03 	vldr	s3, [sl, #12]
 8006858:	e01c      	b.n	8006894 <forward_ap+0x1e0>
 800685a:	bf00      	nop
 800685c:	eddb 0a00 	vldr	s1, [fp]
 8006860:	ee30 0aa1 	vadd.f32	s0, s1, s3
 8006864:	ed8b 0a00 	vstr	s0, [fp]
 8006868:	ed9b 1a01 	vldr	s2, [fp, #4]
 800686c:	ed9a 0a01 	vldr	s0, [sl, #4]
 8006870:	eddb 1a02 	vldr	s3, [fp, #8]
 8006874:	ee31 0a00 	vadd.f32	s0, s2, s0
 8006878:	ed8b 0a01 	vstr	s0, [fp, #4]
 800687c:	edda 0a02 	vldr	s1, [sl, #8]
 8006880:	ee31 0aa0 	vadd.f32	s0, s3, s1
 8006884:	ed8b 0a02 	vstr	s0, [fp, #8]
 8006888:	ed9b 0a03 	vldr	s0, [fp, #12]
 800688c:	ed9a 1a03 	vldr	s2, [sl, #12]
 8006890:	ee70 1a01 	vadd.f32	s3, s0, s2
 8006894:	edcb 1a03 	vstr	s3, [fp, #12]
 8006898:	1e40      	subs	r0, r0, #1
 800689a:	f10b 0b10 	add.w	fp, fp, #16
 800689e:	f10a 0a10 	add.w	sl, sl, #16
 80068a2:	d1c9      	bne.n	8006838 <forward_ap+0x184>
 80068a4:	2700      	movs	r7, #0
 80068a6:	eb09 0981 	add.w	r9, r9, r1, lsl #2
 80068aa:	45e1      	cmp	r9, ip
 80068ac:	d3aa      	bcc.n	8006804 <forward_ap+0x150>
 80068ae:	b3ab      	cbz	r3, 800691c <forward_ap+0x268>
 80068b0:	ee00 3a10 	vmov	s0, r3
 80068b4:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80068b8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80068bc:	ee80 0a80 	vdiv.f32	s0, s1, s0
 80068c0:	b361      	cbz	r1, 800691c <forward_ap+0x268>
 80068c2:	f011 0003 	ands.w	r0, r1, #3
 80068c6:	4673      	mov	r3, lr
 80068c8:	f000 800a 	beq.w	80068e0 <forward_ap+0x22c>
 80068cc:	edd3 0a00 	vldr	s1, [r3]
 80068d0:	ee60 0a80 	vmul.f32	s1, s1, s0
 80068d4:	edc3 0a00 	vstr	s1, [r3]
 80068d8:	1e40      	subs	r0, r0, #1
 80068da:	f103 0304 	add.w	r3, r3, #4
 80068de:	d1f5      	bne.n	80068cc <forward_ap+0x218>
 80068e0:	0888      	lsrs	r0, r1, #2
 80068e2:	d01b      	beq.n	800691c <forward_ap+0x268>
 80068e4:	edd3 0a00 	vldr	s1, [r3]
 80068e8:	ee60 0a80 	vmul.f32	s1, s1, s0
 80068ec:	edc3 0a00 	vstr	s1, [r3]
 80068f0:	1e40      	subs	r0, r0, #1
 80068f2:	ed93 1a01 	vldr	s2, [r3, #4]
 80068f6:	edd3 0a02 	vldr	s1, [r3, #8]
 80068fa:	ee21 1a00 	vmul.f32	s2, s2, s0
 80068fe:	ed83 1a01 	vstr	s2, [r3, #4]
 8006902:	ee60 0a80 	vmul.f32	s1, s1, s0
 8006906:	ed93 1a03 	vldr	s2, [r3, #12]
 800690a:	edc3 0a02 	vstr	s1, [r3, #8]
 800690e:	ee21 1a00 	vmul.f32	s2, s2, s0
 8006912:	ed83 1a03 	vstr	s2, [r3, #12]
 8006916:	f103 0310 	add.w	r3, r3, #16
 800691a:	d1e3      	bne.n	80068e4 <forward_ap+0x230>
 800691c:	9803      	ldr	r0, [sp, #12]
 800691e:	2700      	movs	r7, #0
 8006920:	1e52      	subs	r2, r2, #1
 8006922:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 8006926:	f47f af61 	bne.w	80067ec <forward_ap+0x138>
 800692a:	9800      	ldr	r0, [sp, #0]
 800692c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800692e:	1810      	adds	r0, r2, r0
 8006930:	9000      	str	r0, [sp, #0]
 8006932:	eb0e 0e81 	add.w	lr, lr, r1, lsl #2
 8006936:	9802      	ldr	r0, [sp, #8]
 8006938:	1e40      	subs	r0, r0, #1
 800693a:	9002      	str	r0, [sp, #8]
 800693c:	f47f af22 	bne.w	8006784 <forward_ap+0xd0>
 8006940:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8006942:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8006946:	9b06      	ldr	r3, [sp, #24]
 8006948:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800694a:	4690      	mov	r8, r2
 800694c:	9c01      	ldr	r4, [sp, #4]
 800694e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006950:	1914      	adds	r4, r2, r4
 8006952:	9401      	str	r4, [sp, #4]
 8006954:	9c04      	ldr	r4, [sp, #16]
 8006956:	1e64      	subs	r4, r4, #1
 8006958:	9404      	str	r4, [sp, #16]
 800695a:	f47f aeef 	bne.w	800673c <forward_ap+0x88>
 800695e:	b017      	add	sp, #92	; 0x5c
 8006960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006964 <ai_array_fmt_name>:
 8006964:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8006968:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 800696c:	d062      	beq.n	8006a34 <ai_array_fmt_name+0xd0>
 800696e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006972:	1a89      	subs	r1, r1, r2
 8006974:	f000 8094 	beq.w	8006aa0 <ai_array_fmt_name+0x13c>
 8006978:	f44f 7200 	mov.w	r2, #512	; 0x200
 800697c:	1a89      	subs	r1, r1, r2
 800697e:	d071      	beq.n	8006a64 <ai_array_fmt_name+0x100>
 8006980:	1a89      	subs	r1, r1, r2
 8006982:	d063      	beq.n	8006a4c <ai_array_fmt_name+0xe8>
 8006984:	1fc9      	subs	r1, r1, #7
 8006986:	f000 808e 	beq.w	8006aa6 <ai_array_fmt_name+0x142>
 800698a:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800698e:	1a89      	subs	r1, r1, r2
 8006990:	d05f      	beq.n	8006a52 <ai_array_fmt_name+0xee>
 8006992:	390f      	subs	r1, #15
 8006994:	f000 808a 	beq.w	8006aac <ai_array_fmt_name+0x148>
 8006998:	f240 72f1 	movw	r2, #2033	; 0x7f1
 800699c:	1a89      	subs	r1, r1, r2
 800699e:	d05b      	beq.n	8006a58 <ai_array_fmt_name+0xf4>
 80069a0:	391f      	subs	r1, #31
 80069a2:	f000 8086 	beq.w	8006ab2 <ai_array_fmt_name+0x14e>
 80069a6:	f640 72e1 	movw	r2, #4065	; 0xfe1
 80069aa:	1a89      	subs	r1, r1, r2
 80069ac:	d057      	beq.n	8006a5e <ai_array_fmt_name+0xfa>
 80069ae:	f8df 25d4 	ldr.w	r2, [pc, #1492]	; 8006f84 <.text_15>
 80069b2:	1a89      	subs	r1, r1, r2
 80069b4:	f000 808f 	beq.w	8006ad6 <ai_array_fmt_name+0x172>
 80069b8:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80069bc:	1a89      	subs	r1, r1, r2
 80069be:	f000 8087 	beq.w	8006ad0 <ai_array_fmt_name+0x16c>
 80069c2:	f8df 25c4 	ldr.w	r2, [pc, #1476]	; 8006f88 <.text_16>
 80069c6:	1a89      	subs	r1, r1, r2
 80069c8:	d05e      	beq.n	8006a88 <ai_array_fmt_name+0x124>
 80069ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069ce:	1a89      	subs	r1, r1, r2
 80069d0:	d057      	beq.n	8006a82 <ai_array_fmt_name+0x11e>
 80069d2:	1a89      	subs	r1, r1, r2
 80069d4:	d049      	beq.n	8006a6a <ai_array_fmt_name+0x106>
 80069d6:	1fc9      	subs	r1, r1, #7
 80069d8:	d059      	beq.n	8006a8e <ai_array_fmt_name+0x12a>
 80069da:	f240 32f9 	movw	r2, #1017	; 0x3f9
 80069de:	1a89      	subs	r1, r1, r2
 80069e0:	d046      	beq.n	8006a70 <ai_array_fmt_name+0x10c>
 80069e2:	390f      	subs	r1, #15
 80069e4:	d056      	beq.n	8006a94 <ai_array_fmt_name+0x130>
 80069e6:	f240 72f1 	movw	r2, #2033	; 0x7f1
 80069ea:	1a89      	subs	r1, r1, r2
 80069ec:	d043      	beq.n	8006a76 <ai_array_fmt_name+0x112>
 80069ee:	391f      	subs	r1, #31
 80069f0:	d053      	beq.n	8006a9a <ai_array_fmt_name+0x136>
 80069f2:	f640 72e1 	movw	r2, #4065	; 0xfe1
 80069f6:	1a89      	subs	r1, r1, r2
 80069f8:	d040      	beq.n	8006a7c <ai_array_fmt_name+0x118>
 80069fa:	f8df 2588 	ldr.w	r2, [pc, #1416]	; 8006f84 <.text_15>
 80069fe:	1a89      	subs	r1, r1, r2
 8006a00:	d063      	beq.n	8006aca <ai_array_fmt_name+0x166>
 8006a02:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8006a06:	1a89      	subs	r1, r1, r2
 8006a08:	d05c      	beq.n	8006ac4 <ai_array_fmt_name+0x160>
 8006a0a:	f8df 2580 	ldr.w	r2, [pc, #1408]	; 8006f8c <.text_17>
 8006a0e:	1a89      	subs	r1, r1, r2
 8006a10:	d019      	beq.n	8006a46 <ai_array_fmt_name+0xe2>
 8006a12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a16:	1a89      	subs	r1, r1, r2
 8006a18:	d00f      	beq.n	8006a3a <ai_array_fmt_name+0xd6>
 8006a1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006a1e:	1a89      	subs	r1, r1, r2
 8006a20:	d00e      	beq.n	8006a40 <ai_array_fmt_name+0xdc>
 8006a22:	f8df 256c 	ldr.w	r2, [pc, #1388]	; 8006f90 <.text_18>
 8006a26:	1a89      	subs	r1, r1, r2
 8006a28:	d049      	beq.n	8006abe <ai_array_fmt_name+0x15a>
 8006a2a:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8006a2e:	1a89      	subs	r1, r1, r2
 8006a30:	d042      	beq.n	8006ab8 <ai_array_fmt_name+0x154>
 8006a32:	e053      	b.n	8006adc <ai_array_fmt_name+0x178>
 8006a34:	f20f 6074 	addw	r0, pc, #1652	; 0x674
 8006a38:	4770      	bx	lr
 8006a3a:	f20f 607c 	addw	r0, pc, #1660	; 0x67c
 8006a3e:	4770      	bx	lr
 8006a40:	f20f 6080 	addw	r0, pc, #1664	; 0x680
 8006a44:	4770      	bx	lr
 8006a46:	f20f 6088 	addw	r0, pc, #1672	; 0x688
 8006a4a:	4770      	bx	lr
 8006a4c:	f20f 608c 	addw	r0, pc, #1676	; 0x68c
 8006a50:	4770      	bx	lr
 8006a52:	f20f 6090 	addw	r0, pc, #1680	; 0x690
 8006a56:	4770      	bx	lr
 8006a58:	f20f 6090 	addw	r0, pc, #1680	; 0x690
 8006a5c:	4770      	bx	lr
 8006a5e:	f20f 6094 	addw	r0, pc, #1684	; 0x694
 8006a62:	4770      	bx	lr
 8006a64:	f20f 6094 	addw	r0, pc, #1684	; 0x694
 8006a68:	4770      	bx	lr
 8006a6a:	f20f 6098 	addw	r0, pc, #1688	; 0x698
 8006a6e:	4770      	bx	lr
 8006a70:	f20f 6098 	addw	r0, pc, #1688	; 0x698
 8006a74:	4770      	bx	lr
 8006a76:	f20f 609c 	addw	r0, pc, #1692	; 0x69c
 8006a7a:	4770      	bx	lr
 8006a7c:	f20f 609c 	addw	r0, pc, #1692	; 0x69c
 8006a80:	4770      	bx	lr
 8006a82:	f20f 60a0 	addw	r0, pc, #1696	; 0x6a0
 8006a86:	4770      	bx	lr
 8006a88:	f20f 60a0 	addw	r0, pc, #1696	; 0x6a0
 8006a8c:	4770      	bx	lr
 8006a8e:	f20f 60a4 	addw	r0, pc, #1700	; 0x6a4
 8006a92:	4770      	bx	lr
 8006a94:	f20f 60a4 	addw	r0, pc, #1700	; 0x6a4
 8006a98:	4770      	bx	lr
 8006a9a:	f20f 60a8 	addw	r0, pc, #1704	; 0x6a8
 8006a9e:	4770      	bx	lr
 8006aa0:	f20f 60a8 	addw	r0, pc, #1704	; 0x6a8
 8006aa4:	4770      	bx	lr
 8006aa6:	f20f 60ac 	addw	r0, pc, #1708	; 0x6ac
 8006aaa:	4770      	bx	lr
 8006aac:	f20f 60ac 	addw	r0, pc, #1708	; 0x6ac
 8006ab0:	4770      	bx	lr
 8006ab2:	f20f 60b4 	addw	r0, pc, #1716	; 0x6b4
 8006ab6:	4770      	bx	lr
 8006ab8:	f20f 60b8 	addw	r0, pc, #1720	; 0x6b8
 8006abc:	4770      	bx	lr
 8006abe:	f20f 60c4 	addw	r0, pc, #1732	; 0x6c4
 8006ac2:	4770      	bx	lr
 8006ac4:	f20f 60cc 	addw	r0, pc, #1740	; 0x6cc
 8006ac8:	4770      	bx	lr
 8006aca:	f20f 60d8 	addw	r0, pc, #1752	; 0x6d8
 8006ace:	4770      	bx	lr
 8006ad0:	f20f 60e0 	addw	r0, pc, #1760	; 0x6e0
 8006ad4:	4770      	bx	lr
 8006ad6:	f20f 60ec 	addw	r0, pc, #1772	; 0x6ec
 8006ada:	4770      	bx	lr
 8006adc:	f36f 000d 	bfc	r0, #0, #14
 8006ae0:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8006ae4:	2840      	cmp	r0, #64	; 0x40
 8006ae6:	d009      	beq.n	8006afc <ai_array_fmt_name+0x198>
 8006ae8:	f8df 14a8 	ldr.w	r1, [pc, #1192]	; 8006f94 <.text_19>
 8006aec:	4288      	cmp	r0, r1
 8006aee:	d00b      	beq.n	8006b08 <ai_array_fmt_name+0x1a4>
 8006af0:	f8df 14a4 	ldr.w	r1, [pc, #1188]	; 8006f98 <.text_20>
 8006af4:	4288      	cmp	r0, r1
 8006af6:	d004      	beq.n	8006b02 <ai_array_fmt_name+0x19e>
 8006af8:	a07a      	add	r0, pc, #488	; (adr r0, 8006ce4 <.text_8>)
 8006afa:	4770      	bx	lr
 8006afc:	f20f 60d4 	addw	r0, pc, #1748	; 0x6d4
 8006b00:	4770      	bx	lr
 8006b02:	f20f 60e8 	addw	r0, pc, #1768	; 0x6e8
 8006b06:	4770      	bx	lr
 8006b08:	f20f 60f4 	addw	r0, pc, #1780	; 0x6f4
 8006b0c:	4770      	bx	lr

08006b0e <ai_array_fmt_exported>:
 8006b0e:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8006b12:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8006b16:	d068      	beq.n	8006bea <ai_array_fmt_exported+0xdc>
 8006b18:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006b1c:	1a89      	subs	r1, r1, r2
 8006b1e:	d064      	beq.n	8006bea <ai_array_fmt_exported+0xdc>
 8006b20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b24:	1a89      	subs	r1, r1, r2
 8006b26:	d062      	beq.n	8006bee <ai_array_fmt_exported+0xe0>
 8006b28:	1a89      	subs	r1, r1, r2
 8006b2a:	d05e      	beq.n	8006bea <ai_array_fmt_exported+0xdc>
 8006b2c:	1fc9      	subs	r1, r1, #7
 8006b2e:	d05c      	beq.n	8006bea <ai_array_fmt_exported+0xdc>
 8006b30:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8006b34:	1a89      	subs	r1, r1, r2
 8006b36:	d058      	beq.n	8006bea <ai_array_fmt_exported+0xdc>
 8006b38:	390f      	subs	r1, #15
 8006b3a:	d056      	beq.n	8006bea <ai_array_fmt_exported+0xdc>
 8006b3c:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8006b40:	1a89      	subs	r1, r1, r2
 8006b42:	d054      	beq.n	8006bee <ai_array_fmt_exported+0xe0>
 8006b44:	391f      	subs	r1, #31
 8006b46:	d052      	beq.n	8006bee <ai_array_fmt_exported+0xe0>
 8006b48:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8006b4c:	1a89      	subs	r1, r1, r2
 8006b4e:	d04e      	beq.n	8006bee <ai_array_fmt_exported+0xe0>
 8006b50:	f8df 2430 	ldr.w	r2, [pc, #1072]	; 8006f84 <.text_15>
 8006b54:	1a89      	subs	r1, r1, r2
 8006b56:	d04a      	beq.n	8006bee <ai_array_fmt_exported+0xe0>
 8006b58:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8006b5c:	1a89      	subs	r1, r1, r2
 8006b5e:	d046      	beq.n	8006bee <ai_array_fmt_exported+0xe0>
 8006b60:	f8df 2424 	ldr.w	r2, [pc, #1060]	; 8006f88 <.text_16>
 8006b64:	1a89      	subs	r1, r1, r2
 8006b66:	d040      	beq.n	8006bea <ai_array_fmt_exported+0xdc>
 8006b68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b6c:	1a89      	subs	r1, r1, r2
 8006b6e:	d03e      	beq.n	8006bee <ai_array_fmt_exported+0xe0>
 8006b70:	1a89      	subs	r1, r1, r2
 8006b72:	d03a      	beq.n	8006bea <ai_array_fmt_exported+0xdc>
 8006b74:	1fc9      	subs	r1, r1, #7
 8006b76:	d038      	beq.n	8006bea <ai_array_fmt_exported+0xdc>
 8006b78:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8006b7c:	1a89      	subs	r1, r1, r2
 8006b7e:	d034      	beq.n	8006bea <ai_array_fmt_exported+0xdc>
 8006b80:	390f      	subs	r1, #15
 8006b82:	d032      	beq.n	8006bea <ai_array_fmt_exported+0xdc>
 8006b84:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8006b88:	1a89      	subs	r1, r1, r2
 8006b8a:	d030      	beq.n	8006bee <ai_array_fmt_exported+0xe0>
 8006b8c:	391f      	subs	r1, #31
 8006b8e:	d02e      	beq.n	8006bee <ai_array_fmt_exported+0xe0>
 8006b90:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8006b94:	1a89      	subs	r1, r1, r2
 8006b96:	d02a      	beq.n	8006bee <ai_array_fmt_exported+0xe0>
 8006b98:	f8df 23e8 	ldr.w	r2, [pc, #1000]	; 8006f84 <.text_15>
 8006b9c:	1a89      	subs	r1, r1, r2
 8006b9e:	d026      	beq.n	8006bee <ai_array_fmt_exported+0xe0>
 8006ba0:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8006ba4:	1a89      	subs	r1, r1, r2
 8006ba6:	d022      	beq.n	8006bee <ai_array_fmt_exported+0xe0>
 8006ba8:	f8df 23e0 	ldr.w	r2, [pc, #992]	; 8006f8c <.text_17>
 8006bac:	1a89      	subs	r1, r1, r2
 8006bae:	d01e      	beq.n	8006bee <ai_array_fmt_exported+0xe0>
 8006bb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bb4:	1a89      	subs	r1, r1, r2
 8006bb6:	d018      	beq.n	8006bea <ai_array_fmt_exported+0xdc>
 8006bb8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006bbc:	1a89      	subs	r1, r1, r2
 8006bbe:	d016      	beq.n	8006bee <ai_array_fmt_exported+0xe0>
 8006bc0:	f8df 23cc 	ldr.w	r2, [pc, #972]	; 8006f90 <.text_18>
 8006bc4:	1a89      	subs	r1, r1, r2
 8006bc6:	d012      	beq.n	8006bee <ai_array_fmt_exported+0xe0>
 8006bc8:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8006bcc:	1a89      	subs	r1, r1, r2
 8006bce:	d00e      	beq.n	8006bee <ai_array_fmt_exported+0xe0>
 8006bd0:	f36f 000d 	bfc	r0, #0, #14
 8006bd4:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8006bd8:	2840      	cmp	r0, #64	; 0x40
 8006bda:	bf1f      	itttt	ne
 8006bdc:	f8df 33b4 	ldrne.w	r3, [pc, #948]	; 8006f94 <.text_19>
 8006be0:	4298      	cmpne	r0, r3
 8006be2:	f8df 33b4 	ldrne.w	r3, [pc, #948]	; 8006f98 <.text_20>
 8006be6:	4298      	cmpne	r0, r3
 8006be8:	d101      	bne.n	8006bee <ai_array_fmt_exported+0xe0>
 8006bea:	2001      	movs	r0, #1
 8006bec:	4770      	bx	lr
 8006bee:	2000      	movs	r0, #0
 8006bf0:	4770      	bx	lr

08006bf2 <ai_array_fmt_valid>:
 8006bf2:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8006bf6:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8006bfa:	d069      	beq.n	8006cd0 <ai_array_fmt_valid+0xde>
 8006bfc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006c00:	1a89      	subs	r1, r1, r2
 8006c02:	d065      	beq.n	8006cd0 <ai_array_fmt_valid+0xde>
 8006c04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c08:	1a89      	subs	r1, r1, r2
 8006c0a:	d061      	beq.n	8006cd0 <ai_array_fmt_valid+0xde>
 8006c0c:	1a89      	subs	r1, r1, r2
 8006c0e:	d05f      	beq.n	8006cd0 <ai_array_fmt_valid+0xde>
 8006c10:	1fc9      	subs	r1, r1, #7
 8006c12:	d05d      	beq.n	8006cd0 <ai_array_fmt_valid+0xde>
 8006c14:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8006c18:	1a89      	subs	r1, r1, r2
 8006c1a:	d059      	beq.n	8006cd0 <ai_array_fmt_valid+0xde>
 8006c1c:	390f      	subs	r1, #15
 8006c1e:	d057      	beq.n	8006cd0 <ai_array_fmt_valid+0xde>
 8006c20:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8006c24:	1a89      	subs	r1, r1, r2
 8006c26:	d053      	beq.n	8006cd0 <ai_array_fmt_valid+0xde>
 8006c28:	391f      	subs	r1, #31
 8006c2a:	d051      	beq.n	8006cd0 <ai_array_fmt_valid+0xde>
 8006c2c:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8006c30:	1a89      	subs	r1, r1, r2
 8006c32:	d04d      	beq.n	8006cd0 <ai_array_fmt_valid+0xde>
 8006c34:	f8df 234c 	ldr.w	r2, [pc, #844]	; 8006f84 <.text_15>
 8006c38:	1a89      	subs	r1, r1, r2
 8006c3a:	d049      	beq.n	8006cd0 <ai_array_fmt_valid+0xde>
 8006c3c:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8006c40:	1a89      	subs	r1, r1, r2
 8006c42:	d045      	beq.n	8006cd0 <ai_array_fmt_valid+0xde>
 8006c44:	f8df 2340 	ldr.w	r2, [pc, #832]	; 8006f88 <.text_16>
 8006c48:	1a89      	subs	r1, r1, r2
 8006c4a:	d041      	beq.n	8006cd0 <ai_array_fmt_valid+0xde>
 8006c4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c50:	1a89      	subs	r1, r1, r2
 8006c52:	d03d      	beq.n	8006cd0 <ai_array_fmt_valid+0xde>
 8006c54:	1a89      	subs	r1, r1, r2
 8006c56:	d03b      	beq.n	8006cd0 <ai_array_fmt_valid+0xde>
 8006c58:	1fc9      	subs	r1, r1, #7
 8006c5a:	d039      	beq.n	8006cd0 <ai_array_fmt_valid+0xde>
 8006c5c:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8006c60:	1a89      	subs	r1, r1, r2
 8006c62:	d035      	beq.n	8006cd0 <ai_array_fmt_valid+0xde>
 8006c64:	390f      	subs	r1, #15
 8006c66:	d033      	beq.n	8006cd0 <ai_array_fmt_valid+0xde>
 8006c68:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8006c6c:	1a89      	subs	r1, r1, r2
 8006c6e:	d02f      	beq.n	8006cd0 <ai_array_fmt_valid+0xde>
 8006c70:	391f      	subs	r1, #31
 8006c72:	d02d      	beq.n	8006cd0 <ai_array_fmt_valid+0xde>
 8006c74:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8006c78:	1a89      	subs	r1, r1, r2
 8006c7a:	d029      	beq.n	8006cd0 <ai_array_fmt_valid+0xde>
 8006c7c:	f8df 2304 	ldr.w	r2, [pc, #772]	; 8006f84 <.text_15>
 8006c80:	1a89      	subs	r1, r1, r2
 8006c82:	d025      	beq.n	8006cd0 <ai_array_fmt_valid+0xde>
 8006c84:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8006c88:	1a89      	subs	r1, r1, r2
 8006c8a:	d021      	beq.n	8006cd0 <ai_array_fmt_valid+0xde>
 8006c8c:	f8df 22fc 	ldr.w	r2, [pc, #764]	; 8006f8c <.text_17>
 8006c90:	1a89      	subs	r1, r1, r2
 8006c92:	d01d      	beq.n	8006cd0 <ai_array_fmt_valid+0xde>
 8006c94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c98:	1a89      	subs	r1, r1, r2
 8006c9a:	d019      	beq.n	8006cd0 <ai_array_fmt_valid+0xde>
 8006c9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006ca0:	1a89      	subs	r1, r1, r2
 8006ca2:	d015      	beq.n	8006cd0 <ai_array_fmt_valid+0xde>
 8006ca4:	f8df 22e8 	ldr.w	r2, [pc, #744]	; 8006f90 <.text_18>
 8006ca8:	1a89      	subs	r1, r1, r2
 8006caa:	d011      	beq.n	8006cd0 <ai_array_fmt_valid+0xde>
 8006cac:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8006cb0:	1a89      	subs	r1, r1, r2
 8006cb2:	bf1e      	ittt	ne
 8006cb4:	f36f 000d 	bfcne	r0, #0, #14
 8006cb8:	f040 0040 	orrne.w	r0, r0, #64	; 0x40
 8006cbc:	2840      	cmpne	r0, #64	; 0x40
 8006cbe:	d007      	beq.n	8006cd0 <ai_array_fmt_valid+0xde>
 8006cc0:	f8df 32d0 	ldr.w	r3, [pc, #720]	; 8006f94 <.text_19>
 8006cc4:	4298      	cmp	r0, r3
 8006cc6:	bf1c      	itt	ne
 8006cc8:	f8df 32cc 	ldrne.w	r3, [pc, #716]	; 8006f98 <.text_20>
 8006ccc:	4298      	cmpne	r0, r3
 8006cce:	d101      	bne.n	8006cd4 <ai_array_fmt_valid+0xe2>
 8006cd0:	2001      	movs	r0, #1
 8006cd2:	4770      	bx	lr
 8006cd4:	2000      	movs	r0, #0
 8006cd6:	4770      	bx	lr

08006cd8 <ai_array_fmt_get_formats>:
 8006cd8:	f8df 12c0 	ldr.w	r1, [pc, #704]	; 8006f9c <.text_21>
 8006cdc:	6001      	str	r1, [r0, #0]
 8006cde:	201c      	movs	r0, #28
 8006ce0:	4770      	bx	lr
	...

08006ce4 <.text_8>:
 8006ce4:	00000000 	.word	0x00000000

08006ce8 <ai_buffer_fmt_name>:
 8006ce8:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8006cec:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8006cf0:	d022      	beq.n	8006d38 <ai_buffer_fmt_name+0x50>
 8006cf2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006cf6:	1a89      	subs	r1, r1, r2
 8006cf8:	d039      	beq.n	8006d6e <ai_buffer_fmt_name+0x86>
 8006cfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006cfe:	1a89      	subs	r1, r1, r2
 8006d00:	d020      	beq.n	8006d44 <ai_buffer_fmt_name+0x5c>
 8006d02:	1fc9      	subs	r1, r1, #7
 8006d04:	d036      	beq.n	8006d74 <ai_buffer_fmt_name+0x8c>
 8006d06:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8006d0a:	1a89      	subs	r1, r1, r2
 8006d0c:	d01d      	beq.n	8006d4a <ai_buffer_fmt_name+0x62>
 8006d0e:	390f      	subs	r1, #15
 8006d10:	d033      	beq.n	8006d7a <ai_buffer_fmt_name+0x92>
 8006d12:	4aa3      	ldr	r2, [pc, #652]	; (8006fa0 <.text_22>)
 8006d14:	1a89      	subs	r1, r1, r2
 8006d16:	d021      	beq.n	8006d5c <ai_buffer_fmt_name+0x74>
 8006d18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006d1c:	1a89      	subs	r1, r1, r2
 8006d1e:	d017      	beq.n	8006d50 <ai_buffer_fmt_name+0x68>
 8006d20:	1fc9      	subs	r1, r1, #7
 8006d22:	d01e      	beq.n	8006d62 <ai_buffer_fmt_name+0x7a>
 8006d24:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8006d28:	1a89      	subs	r1, r1, r2
 8006d2a:	d014      	beq.n	8006d56 <ai_buffer_fmt_name+0x6e>
 8006d2c:	390f      	subs	r1, #15
 8006d2e:	d01b      	beq.n	8006d68 <ai_buffer_fmt_name+0x80>
 8006d30:	4a9c      	ldr	r2, [pc, #624]	; (8006fa4 <.text_23>)
 8006d32:	1a89      	subs	r1, r1, r2
 8006d34:	d003      	beq.n	8006d3e <ai_buffer_fmt_name+0x56>
 8006d36:	e023      	b.n	8006d80 <ai_buffer_fmt_name+0x98>
 8006d38:	f20f 3070 	addw	r0, pc, #880	; 0x370
 8006d3c:	4770      	bx	lr
 8006d3e:	f20f 3078 	addw	r0, pc, #888	; 0x378
 8006d42:	4770      	bx	lr
 8006d44:	f20f 3094 	addw	r0, pc, #916	; 0x394
 8006d48:	4770      	bx	lr
 8006d4a:	f20f 3098 	addw	r0, pc, #920	; 0x398
 8006d4e:	4770      	bx	lr
 8006d50:	f20f 30b0 	addw	r0, pc, #944	; 0x3b0
 8006d54:	4770      	bx	lr
 8006d56:	f20f 30b4 	addw	r0, pc, #948	; 0x3b4
 8006d5a:	4770      	bx	lr
 8006d5c:	f20f 30cc 	addw	r0, pc, #972	; 0x3cc
 8006d60:	4770      	bx	lr
 8006d62:	f20f 30d0 	addw	r0, pc, #976	; 0x3d0
 8006d66:	4770      	bx	lr
 8006d68:	f20f 30d0 	addw	r0, pc, #976	; 0x3d0
 8006d6c:	4770      	bx	lr
 8006d6e:	f20f 30dc 	addw	r0, pc, #988	; 0x3dc
 8006d72:	4770      	bx	lr
 8006d74:	f20f 30dc 	addw	r0, pc, #988	; 0x3dc
 8006d78:	4770      	bx	lr
 8006d7a:	f20f 30e0 	addw	r0, pc, #992	; 0x3e0
 8006d7e:	4770      	bx	lr
 8006d80:	0b80      	lsrs	r0, r0, #14
 8006d82:	0380      	lsls	r0, r0, #14
 8006d84:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8006d88:	2840      	cmp	r0, #64	; 0x40
 8006d8a:	d007      	beq.n	8006d9c <ai_buffer_fmt_name+0xb4>
 8006d8c:	4981      	ldr	r1, [pc, #516]	; (8006f94 <.text_19>)
 8006d8e:	4288      	cmp	r0, r1
 8006d90:	d00a      	beq.n	8006da8 <ai_buffer_fmt_name+0xc0>
 8006d92:	4981      	ldr	r1, [pc, #516]	; (8006f98 <.text_20>)
 8006d94:	4288      	cmp	r0, r1
 8006d96:	d004      	beq.n	8006da2 <ai_buffer_fmt_name+0xba>
 8006d98:	a079      	add	r0, pc, #484	; (adr r0, 8006f80 <.text_14>)
 8006d9a:	4770      	bx	lr
 8006d9c:	f20f 4074 	addw	r0, pc, #1140	; 0x474
 8006da0:	4770      	bx	lr
 8006da2:	f20f 4088 	addw	r0, pc, #1160	; 0x488
 8006da6:	4770      	bx	lr
 8006da8:	f20f 4094 	addw	r0, pc, #1172	; 0x494
 8006dac:	4770      	bx	lr

08006dae <ai_buffer_fmt_valid>:
 8006dae:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8006db2:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8006db6:	d02d      	beq.n	8006e14 <ai_buffer_fmt_valid+0x66>
 8006db8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006dbc:	1a89      	subs	r1, r1, r2
 8006dbe:	d029      	beq.n	8006e14 <ai_buffer_fmt_valid+0x66>
 8006dc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006dc4:	1a89      	subs	r1, r1, r2
 8006dc6:	d025      	beq.n	8006e14 <ai_buffer_fmt_valid+0x66>
 8006dc8:	1fc9      	subs	r1, r1, #7
 8006dca:	d023      	beq.n	8006e14 <ai_buffer_fmt_valid+0x66>
 8006dcc:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8006dd0:	1a89      	subs	r1, r1, r2
 8006dd2:	d01f      	beq.n	8006e14 <ai_buffer_fmt_valid+0x66>
 8006dd4:	390f      	subs	r1, #15
 8006dd6:	d01d      	beq.n	8006e14 <ai_buffer_fmt_valid+0x66>
 8006dd8:	4a71      	ldr	r2, [pc, #452]	; (8006fa0 <.text_22>)
 8006dda:	1a89      	subs	r1, r1, r2
 8006ddc:	d01a      	beq.n	8006e14 <ai_buffer_fmt_valid+0x66>
 8006dde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006de2:	1a89      	subs	r1, r1, r2
 8006de4:	d016      	beq.n	8006e14 <ai_buffer_fmt_valid+0x66>
 8006de6:	1fc9      	subs	r1, r1, #7
 8006de8:	d014      	beq.n	8006e14 <ai_buffer_fmt_valid+0x66>
 8006dea:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8006dee:	1a89      	subs	r1, r1, r2
 8006df0:	d010      	beq.n	8006e14 <ai_buffer_fmt_valid+0x66>
 8006df2:	390f      	subs	r1, #15
 8006df4:	d00e      	beq.n	8006e14 <ai_buffer_fmt_valid+0x66>
 8006df6:	4a6b      	ldr	r2, [pc, #428]	; (8006fa4 <.text_23>)
 8006df8:	1a89      	subs	r1, r1, r2
 8006dfa:	bf1f      	itttt	ne
 8006dfc:	0b80      	lsrne	r0, r0, #14
 8006dfe:	0380      	lslne	r0, r0, #14
 8006e00:	f040 0040 	orrne.w	r0, r0, #64	; 0x40
 8006e04:	2840      	cmpne	r0, #64	; 0x40
 8006e06:	d005      	beq.n	8006e14 <ai_buffer_fmt_valid+0x66>
 8006e08:	4b62      	ldr	r3, [pc, #392]	; (8006f94 <.text_19>)
 8006e0a:	4298      	cmp	r0, r3
 8006e0c:	bf1c      	itt	ne
 8006e0e:	4b62      	ldrne	r3, [pc, #392]	; (8006f98 <.text_20>)
 8006e10:	4298      	cmpne	r0, r3
 8006e12:	d101      	bne.n	8006e18 <ai_buffer_fmt_valid+0x6a>
 8006e14:	2001      	movs	r0, #1
 8006e16:	4770      	bx	lr
 8006e18:	2000      	movs	r0, #0
 8006e1a:	4770      	bx	lr

08006e1c <ai_buffer_fmt_get_formats>:
 8006e1c:	4962      	ldr	r1, [pc, #392]	; (8006fa8 <.text_24>)
 8006e1e:	6001      	str	r1, [r0, #0]
 8006e20:	200c      	movs	r0, #12
 8006e22:	4770      	bx	lr

08006e24 <ai_array_to_buffer_fmt>:
 8006e24:	4601      	mov	r1, r0
 8006e26:	2040      	movs	r0, #64	; 0x40
 8006e28:	f3c1 4243 	ubfx	r2, r1, #17, #4
 8006e2c:	2a02      	cmp	r2, #2
 8006e2e:	d104      	bne.n	8006e3a <ai_array_to_buffer_fmt+0x16>
 8006e30:	485e      	ldr	r0, [pc, #376]	; (8006fac <.text_25>)
 8006e32:	4008      	ands	r0, r1
 8006e34:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 8006e38:	e037      	b.n	8006eaa <ai_array_to_buffer_fmt+0x86>
 8006e3a:	f021 427e 	bic.w	r2, r1, #4261412864	; 0xfe000000
 8006e3e:	4b55      	ldr	r3, [pc, #340]	; (8006f94 <.text_19>)
 8006e40:	1ad2      	subs	r2, r2, r3
 8006e42:	d02d      	beq.n	8006ea0 <ai_array_to_buffer_fmt+0x7c>
 8006e44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e48:	1ad2      	subs	r2, r2, r3
 8006e4a:	d01b      	beq.n	8006e84 <ai_array_to_buffer_fmt+0x60>
 8006e4c:	1fd2      	subs	r2, r2, #7
 8006e4e:	d029      	beq.n	8006ea4 <ai_array_to_buffer_fmt+0x80>
 8006e50:	f240 33f9 	movw	r3, #1017	; 0x3f9
 8006e54:	1ad2      	subs	r2, r2, r3
 8006e56:	d017      	beq.n	8006e88 <ai_array_to_buffer_fmt+0x64>
 8006e58:	3a0f      	subs	r2, #15
 8006e5a:	d025      	beq.n	8006ea8 <ai_array_to_buffer_fmt+0x84>
 8006e5c:	4b50      	ldr	r3, [pc, #320]	; (8006fa0 <.text_22>)
 8006e5e:	1ad2      	subs	r2, r2, r3
 8006e60:	d018      	beq.n	8006e94 <ai_array_to_buffer_fmt+0x70>
 8006e62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e66:	1ad2      	subs	r2, r2, r3
 8006e68:	d010      	beq.n	8006e8c <ai_array_to_buffer_fmt+0x68>
 8006e6a:	1fd2      	subs	r2, r2, #7
 8006e6c:	d014      	beq.n	8006e98 <ai_array_to_buffer_fmt+0x74>
 8006e6e:	f240 33f9 	movw	r3, #1017	; 0x3f9
 8006e72:	1ad2      	subs	r2, r2, r3
 8006e74:	d00c      	beq.n	8006e90 <ai_array_to_buffer_fmt+0x6c>
 8006e76:	3a0f      	subs	r2, #15
 8006e78:	d010      	beq.n	8006e9c <ai_array_to_buffer_fmt+0x78>
 8006e7a:	4b4a      	ldr	r3, [pc, #296]	; (8006fa4 <.text_23>)
 8006e7c:	1ad2      	subs	r2, r2, r3
 8006e7e:	d114      	bne.n	8006eaa <ai_array_to_buffer_fmt+0x86>
 8006e80:	484b      	ldr	r0, [pc, #300]	; (8006fb0 <.text_26>)
 8006e82:	e012      	b.n	8006eaa <ai_array_to_buffer_fmt+0x86>
 8006e84:	484b      	ldr	r0, [pc, #300]	; (8006fb4 <.text_27>)
 8006e86:	e010      	b.n	8006eaa <ai_array_to_buffer_fmt+0x86>
 8006e88:	484b      	ldr	r0, [pc, #300]	; (8006fb8 <.text_28>)
 8006e8a:	e00e      	b.n	8006eaa <ai_array_to_buffer_fmt+0x86>
 8006e8c:	484b      	ldr	r0, [pc, #300]	; (8006fbc <.text_29>)
 8006e8e:	e00c      	b.n	8006eaa <ai_array_to_buffer_fmt+0x86>
 8006e90:	484b      	ldr	r0, [pc, #300]	; (8006fc0 <.text_30>)
 8006e92:	e00a      	b.n	8006eaa <ai_array_to_buffer_fmt+0x86>
 8006e94:	4840      	ldr	r0, [pc, #256]	; (8006f98 <.text_20>)
 8006e96:	e008      	b.n	8006eaa <ai_array_to_buffer_fmt+0x86>
 8006e98:	484a      	ldr	r0, [pc, #296]	; (8006fc4 <.text_31>)
 8006e9a:	e006      	b.n	8006eaa <ai_array_to_buffer_fmt+0x86>
 8006e9c:	484a      	ldr	r0, [pc, #296]	; (8006fc8 <.text_32>)
 8006e9e:	e004      	b.n	8006eaa <ai_array_to_buffer_fmt+0x86>
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	e002      	b.n	8006eaa <ai_array_to_buffer_fmt+0x86>
 8006ea4:	4849      	ldr	r0, [pc, #292]	; (8006fcc <.text_33>)
 8006ea6:	e000      	b.n	8006eaa <ai_array_to_buffer_fmt+0x86>
 8006ea8:	4849      	ldr	r0, [pc, #292]	; (8006fd0 <.text_34>)
 8006eaa:	004a      	lsls	r2, r1, #1
 8006eac:	bf4c      	ite	mi
 8006eae:	f04f 4280 	movmi.w	r2, #1073741824	; 0x40000000
 8006eb2:	2200      	movpl	r2, #0
 8006eb4:	4310      	orrs	r0, r2
 8006eb6:	008a      	lsls	r2, r1, #2
 8006eb8:	bf4c      	ite	mi
 8006eba:	f04f 5200 	movmi.w	r2, #536870912	; 0x20000000
 8006ebe:	2200      	movpl	r2, #0
 8006ec0:	4310      	orrs	r0, r2
 8006ec2:	0109      	lsls	r1, r1, #4
 8006ec4:	bf4c      	ite	mi
 8006ec6:	f04f 6100 	movmi.w	r1, #134217728	; 0x8000000
 8006eca:	2100      	movpl	r1, #0
 8006ecc:	4308      	orrs	r0, r1
 8006ece:	4770      	bx	lr

08006ed0 <ai_buffer_to_array_fmt>:
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	f022 407e 	bic.w	r0, r2, #4261412864	; 0xfe000000
 8006ed6:	3840      	subs	r0, #64	; 0x40
 8006ed8:	d022      	beq.n	8006f20 <ai_buffer_to_array_fmt+0x50>
 8006eda:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8006ede:	1a40      	subs	r0, r0, r1
 8006ee0:	d030      	beq.n	8006f44 <ai_buffer_to_array_fmt+0x74>
 8006ee2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006ee6:	1a40      	subs	r0, r0, r1
 8006ee8:	d01e      	beq.n	8006f28 <ai_buffer_to_array_fmt+0x58>
 8006eea:	1fc0      	subs	r0, r0, #7
 8006eec:	d02c      	beq.n	8006f48 <ai_buffer_to_array_fmt+0x78>
 8006eee:	f240 31f9 	movw	r1, #1017	; 0x3f9
 8006ef2:	1a40      	subs	r0, r0, r1
 8006ef4:	d01a      	beq.n	8006f2c <ai_buffer_to_array_fmt+0x5c>
 8006ef6:	380f      	subs	r0, #15
 8006ef8:	d028      	beq.n	8006f4c <ai_buffer_to_array_fmt+0x7c>
 8006efa:	4929      	ldr	r1, [pc, #164]	; (8006fa0 <.text_22>)
 8006efc:	1a40      	subs	r0, r0, r1
 8006efe:	d01b      	beq.n	8006f38 <ai_buffer_to_array_fmt+0x68>
 8006f00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006f04:	1a40      	subs	r0, r0, r1
 8006f06:	d013      	beq.n	8006f30 <ai_buffer_to_array_fmt+0x60>
 8006f08:	1fc0      	subs	r0, r0, #7
 8006f0a:	d017      	beq.n	8006f3c <ai_buffer_to_array_fmt+0x6c>
 8006f0c:	f240 31f9 	movw	r1, #1017	; 0x3f9
 8006f10:	1a40      	subs	r0, r0, r1
 8006f12:	d00f      	beq.n	8006f34 <ai_buffer_to_array_fmt+0x64>
 8006f14:	380f      	subs	r0, #15
 8006f16:	d013      	beq.n	8006f40 <ai_buffer_to_array_fmt+0x70>
 8006f18:	4922      	ldr	r1, [pc, #136]	; (8006fa4 <.text_23>)
 8006f1a:	1a40      	subs	r0, r0, r1
 8006f1c:	d002      	beq.n	8006f24 <ai_buffer_to_array_fmt+0x54>
 8006f1e:	e017      	b.n	8006f50 <ai_buffer_to_array_fmt+0x80>
 8006f20:	2040      	movs	r0, #64	; 0x40
 8006f22:	e01f      	b.n	8006f64 <ai_buffer_to_array_fmt+0x94>
 8006f24:	4822      	ldr	r0, [pc, #136]	; (8006fb0 <.text_26>)
 8006f26:	e01d      	b.n	8006f64 <ai_buffer_to_array_fmt+0x94>
 8006f28:	4822      	ldr	r0, [pc, #136]	; (8006fb4 <.text_27>)
 8006f2a:	e01b      	b.n	8006f64 <ai_buffer_to_array_fmt+0x94>
 8006f2c:	4822      	ldr	r0, [pc, #136]	; (8006fb8 <.text_28>)
 8006f2e:	e019      	b.n	8006f64 <ai_buffer_to_array_fmt+0x94>
 8006f30:	4822      	ldr	r0, [pc, #136]	; (8006fbc <.text_29>)
 8006f32:	e017      	b.n	8006f64 <ai_buffer_to_array_fmt+0x94>
 8006f34:	4822      	ldr	r0, [pc, #136]	; (8006fc0 <.text_30>)
 8006f36:	e015      	b.n	8006f64 <ai_buffer_to_array_fmt+0x94>
 8006f38:	4817      	ldr	r0, [pc, #92]	; (8006f98 <.text_20>)
 8006f3a:	e013      	b.n	8006f64 <ai_buffer_to_array_fmt+0x94>
 8006f3c:	4821      	ldr	r0, [pc, #132]	; (8006fc4 <.text_31>)
 8006f3e:	e011      	b.n	8006f64 <ai_buffer_to_array_fmt+0x94>
 8006f40:	4821      	ldr	r0, [pc, #132]	; (8006fc8 <.text_32>)
 8006f42:	e00f      	b.n	8006f64 <ai_buffer_to_array_fmt+0x94>
 8006f44:	4813      	ldr	r0, [pc, #76]	; (8006f94 <.text_19>)
 8006f46:	e00d      	b.n	8006f64 <ai_buffer_to_array_fmt+0x94>
 8006f48:	4820      	ldr	r0, [pc, #128]	; (8006fcc <.text_33>)
 8006f4a:	e00b      	b.n	8006f64 <ai_buffer_to_array_fmt+0x94>
 8006f4c:	4820      	ldr	r0, [pc, #128]	; (8006fd0 <.text_34>)
 8006f4e:	e009      	b.n	8006f64 <ai_buffer_to_array_fmt+0x94>
 8006f50:	f3c2 51c0 	ubfx	r1, r2, #23, #1
 8006f54:	f3c2 000d 	ubfx	r0, r2, #0, #14
 8006f58:	2900      	cmp	r1, #0
 8006f5a:	bf14      	ite	ne
 8006f5c:	f440 0004 	orrne.w	r0, r0, #8650752	; 0x840000
 8006f60:	f440 2080 	orreq.w	r0, r0, #262144	; 0x40000
 8006f64:	0051      	lsls	r1, r2, #1
 8006f66:	bf48      	it	mi
 8006f68:	f040 4080 	orrmi.w	r0, r0, #1073741824	; 0x40000000
 8006f6c:	0091      	lsls	r1, r2, #2
 8006f6e:	bf48      	it	mi
 8006f70:	f040 5000 	orrmi.w	r0, r0, #536870912	; 0x20000000
 8006f74:	0111      	lsls	r1, r2, #4
 8006f76:	bf48      	it	mi
 8006f78:	f040 6000 	orrmi.w	r0, r0, #134217728	; 0x8000000
 8006f7c:	4770      	bx	lr
	...

08006f80 <.text_14>:
 8006f80:	00000000 	.word	0x00000000

08006f84 <.text_15>:
 8006f84:	002be80f 	.word	0x002be80f

08006f88 <.text_16>:
 8006f88:	003bf7f1 	.word	0x003bf7f1

08006f8c <.text_17>:
 8006f8c:	00b9fff1 	.word	0x00b9fff1

08006f90 <.text_18>:
 8006f90:	004df000 	.word	0x004df000

08006f94 <.text_19>:
 8006f94:	00040040 	.word	0x00040040

08006f98 <.text_20>:
 8006f98:	00840040 	.word	0x00840040

08006f9c <.text_21>:
 8006f9c:	08015bf8 	.word	0x08015bf8

08006fa0 <.text_22>:
 8006fa0:	007ff7f1 	.word	0x007ff7f1

08006fa4 <.text_23>:
 8006fa4:	00fe07f1 	.word	0x00fe07f1

08006fa8 <.text_24>:
 8006fa8:	08015c68 	.word	0x08015c68

08006fac <.text_25>:
 8006fac:	00803fff 	.word	0x00803fff

08006fb0 <.text_26>:
 8006fb0:	01821040 	.word	0x01821040

08006fb4 <.text_27>:
 8006fb4:	00040440 	.word	0x00040440

08006fb8 <.text_28>:
 8006fb8:	00040840 	.word	0x00040840

08006fbc <.text_29>:
 8006fbc:	00840440 	.word	0x00840440

08006fc0 <.text_30>:
 8006fc0:	00840840 	.word	0x00840840

08006fc4 <.text_31>:
 8006fc4:	00840447 	.word	0x00840447

08006fc8 <.text_32>:
 8006fc8:	0084084f 	.word	0x0084084f

08006fcc <.text_33>:
 8006fcc:	00040447 	.word	0x00040447

08006fd0 <.text_34>:
 8006fd0:	0004084f 	.word	0x0004084f

08006fd4 <ai_array_get_byte_size>:
 8006fd4:	b909      	cbnz	r1, 8006fda <ai_array_get_byte_size+0x6>
 8006fd6:	2000      	movs	r0, #0
 8006fd8:	4770      	bx	lr
 8006fda:	11c2      	asrs	r2, r0, #7
 8006fdc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006fe0:	f3c0 3382 	ubfx	r3, r0, #14, #3
 8006fe4:	189b      	adds	r3, r3, r2
 8006fe6:	4359      	muls	r1, r3
 8006fe8:	1dc9      	adds	r1, r1, #7
 8006fea:	08c9      	lsrs	r1, r1, #3
 8006fec:	1543      	asrs	r3, r0, #21
 8006fee:	00c9      	lsls	r1, r1, #3
 8006ff0:	f003 0303 	and.w	r3, r3, #3
 8006ff4:	ea4f 4c60 	mov.w	ip, r0, asr #17
 8006ff8:	40d9      	lsrs	r1, r3
 8006ffa:	f00c 0c0f 	and.w	ip, ip, #15
 8006ffe:	f1bc 0f04 	cmp.w	ip, #4
 8007002:	d00a      	beq.n	800701a <ai_array_get_byte_size+0x46>
 8007004:	f1bc 0f08 	cmp.w	ip, #8
 8007008:	bf02      	ittt	eq
 800700a:	f3c0 3082 	ubfxeq	r0, r0, #14, #3
 800700e:	1882      	addeq	r2, r0, r2
 8007010:	eb01 2102 	addeq.w	r1, r1, r2, lsl #8
 8007014:	1dc9      	adds	r1, r1, #7
 8007016:	08c8      	lsrs	r0, r1, #3
 8007018:	4770      	bx	lr
 800701a:	f3c0 3082 	ubfx	r0, r0, #14, #3
 800701e:	1882      	adds	r2, r0, r2
 8007020:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 8007024:	1dc9      	adds	r1, r1, #7
 8007026:	08c8      	lsrs	r0, r1, #3
 8007028:	4770      	bx	lr

0800702a <ai_array_get_data_byte_size>:
 800702a:	b909      	cbnz	r1, 8007030 <ai_array_get_data_byte_size+0x6>
 800702c:	2000      	movs	r0, #0
 800702e:	4770      	bx	lr
 8007030:	11c2      	asrs	r2, r0, #7
 8007032:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007036:	f3c0 3382 	ubfx	r3, r0, #14, #3
 800703a:	189a      	adds	r2, r3, r2
 800703c:	4351      	muls	r1, r2
 800703e:	1dc9      	adds	r1, r1, #7
 8007040:	08c9      	lsrs	r1, r1, #3
 8007042:	1540      	asrs	r0, r0, #21
 8007044:	00c9      	lsls	r1, r1, #3
 8007046:	f000 0003 	and.w	r0, r0, #3
 800704a:	40c1      	lsrs	r1, r0
 800704c:	1dc9      	adds	r1, r1, #7
 800704e:	08c8      	lsrs	r0, r1, #3
 8007050:	4770      	bx	lr

08007052 <ai_array_get_elems_from_size>:
 8007052:	b909      	cbnz	r1, 8007058 <ai_array_get_elems_from_size+0x6>
 8007054:	2000      	movs	r0, #0
 8007056:	4770      	bx	lr
 8007058:	1442      	asrs	r2, r0, #17
 800705a:	00c9      	lsls	r1, r1, #3
 800705c:	f002 020f 	and.w	r2, r2, #15
 8007060:	2a04      	cmp	r2, #4
 8007062:	d002      	beq.n	800706a <ai_array_get_elems_from_size+0x18>
 8007064:	2a08      	cmp	r2, #8
 8007066:	d009      	beq.n	800707c <ai_array_get_elems_from_size+0x2a>
 8007068:	e010      	b.n	800708c <ai_array_get_elems_from_size+0x3a>
 800706a:	11c3      	asrs	r3, r0, #7
 800706c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007070:	f3c0 3282 	ubfx	r2, r0, #14, #3
 8007074:	18d2      	adds	r2, r2, r3
 8007076:	eba1 1102 	sub.w	r1, r1, r2, lsl #4
 800707a:	e007      	b.n	800708c <ai_array_get_elems_from_size+0x3a>
 800707c:	11c2      	asrs	r2, r0, #7
 800707e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007082:	f3c0 3382 	ubfx	r3, r0, #14, #3
 8007086:	189a      	adds	r2, r3, r2
 8007088:	eba1 2102 	sub.w	r1, r1, r2, lsl #8
 800708c:	1542      	asrs	r2, r0, #21
 800708e:	f002 0203 	and.w	r2, r2, #3
 8007092:	4091      	lsls	r1, r2
 8007094:	1dc9      	adds	r1, r1, #7
 8007096:	11c2      	asrs	r2, r0, #7
 8007098:	08c9      	lsrs	r1, r1, #3
 800709a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800709e:	f3c0 3082 	ubfx	r0, r0, #14, #3
 80070a2:	00c9      	lsls	r1, r1, #3
 80070a4:	1880      	adds	r0, r0, r2
 80070a6:	fbb1 f0f0 	udiv	r0, r1, r0
 80070aa:	4770      	bx	lr

080070ac <.text_38>:
 80070ac:	5f544d46 	.word	0x5f544d46
 80070b0:	454e4f4e 	.word	0x454e4f4e
 80070b4:	00          	.byte	0x00
 80070b5:	00          	.byte	0x00
	...

080070b8 <.text_39>:
 80070b8:	5f544d46 	.word	0x5f544d46
 80070bc:	414f4c46 	.word	0x414f4c46
 80070c0:	0054      	.short	0x0054
	...

080070c4 <.text_40>:
 80070c4:	5f544d46 	.word	0x5f544d46
 80070c8:	414f4c46 	.word	0x414f4c46
 80070cc:	00343654 	.word	0x00343654

080070d0 <.text_41>:
 80070d0:	5f544d46 	.word	0x5f544d46
 80070d4:	414f4c46 	.word	0x414f4c46
 80070d8:	00363154 	.word	0x00363154

080070dc <.text_42>:
 80070dc:	5f544d46 	.word	0x5f544d46
 80070e0:	00003855 	.word	0x00003855

080070e4 <.text_43>:
 80070e4:	5f544d46 	.word	0x5f544d46
 80070e8:	00363155 	.word	0x00363155

080070ec <.text_44>:
 80070ec:	5f544d46 	.word	0x5f544d46
 80070f0:	00323355 	.word	0x00323355

080070f4 <.text_45>:
 80070f4:	5f544d46 	.word	0x5f544d46
 80070f8:	00343655 	.word	0x00343655

080070fc <.text_46>:
 80070fc:	5f544d46 	.word	0x5f544d46
 8007100:	00003455 	.word	0x00003455

08007104 <.text_47>:
 8007104:	5f544d46 	.word	0x5f544d46
 8007108:	00003853 	.word	0x00003853

0800710c <.text_48>:
 800710c:	5f544d46 	.word	0x5f544d46
 8007110:	00363153 	.word	0x00363153

08007114 <.text_49>:
 8007114:	5f544d46 	.word	0x5f544d46
 8007118:	00323353 	.word	0x00323353

0800711c <.text_50>:
 800711c:	5f544d46 	.word	0x5f544d46
 8007120:	00343653 	.word	0x00343653

08007124 <.text_51>:
 8007124:	5f544d46 	.word	0x5f544d46
 8007128:	00003453 	.word	0x00003453

0800712c <.text_52>:
 800712c:	5f544d46 	.word	0x5f544d46
 8007130:	0051      	.short	0x0051
	...

08007134 <.text_53>:
 8007134:	5f544d46 	.word	0x5f544d46
 8007138:	00003751 	.word	0x00003751

0800713c <.text_54>:
 800713c:	5f544d46 	.word	0x5f544d46
 8007140:	00353151 	.word	0x00353151

08007144 <.text_55>:
 8007144:	5f544d46 	.word	0x5f544d46
 8007148:	00313351 	.word	0x00313351

0800714c <.text_56>:
 800714c:	5f544d46 	.word	0x5f544d46
 8007150:	00005155 	.word	0x00005155

08007154 <.text_57>:
 8007154:	5f544d46 	.word	0x5f544d46
 8007158:	00375155 	.word	0x00375155

0800715c <.text_58>:
 800715c:	5f544d46 	.word	0x5f544d46
 8007160:	35315155 	.word	0x35315155
 8007164:	00          	.byte	0x00
 8007165:	00          	.byte	0x00
	...

08007168 <.text_59>:
 8007168:	5f544d46 	.word	0x5f544d46
 800716c:	31335155 	.word	0x31335155
 8007170:	00          	.byte	0x00
 8007171:	00          	.byte	0x00
	...

08007174 <.text_60>:
 8007174:	5f544d46 	.word	0x5f544d46
 8007178:	3454554c 	.word	0x3454554c
 800717c:	4f4c465f 	.word	0x4f4c465f
 8007180:	00005441 	.word	0x00005441

08007184 <.text_61>:
 8007184:	5f544d46 	.word	0x5f544d46
 8007188:	3854554c 	.word	0x3854554c
 800718c:	4f4c465f 	.word	0x4f4c465f
 8007190:	00005441 	.word	0x00005441

08007194 <.text_62>:
 8007194:	5f544d46 	.word	0x5f544d46
 8007198:	3454554c 	.word	0x3454554c
 800719c:	3531515f 	.word	0x3531515f
 80071a0:	00          	.byte	0x00
 80071a1:	00          	.byte	0x00
	...

080071a4 <.text_63>:
 80071a4:	5f544d46 	.word	0x5f544d46
 80071a8:	3854554c 	.word	0x3854554c
 80071ac:	3531515f 	.word	0x3531515f
 80071b0:	00          	.byte	0x00
 80071b1:	00          	.byte	0x00
	...

080071b4 <.text_64>:
 80071b4:	5f544d46 	.word	0x5f544d46
 80071b8:	3454554c 	.word	0x3454554c
 80071bc:	3151555f 	.word	0x3151555f
 80071c0:	0035      	.short	0x0035
	...

080071c4 <.text_65>:
 80071c4:	5f544d46 	.word	0x5f544d46
 80071c8:	3854554c 	.word	0x3854554c
 80071cc:	3151555f 	.word	0x3151555f
 80071d0:	0035      	.short	0x0035
	...

080071d4 <.text_66>:
 80071d4:	415f4941 	.word	0x415f4941
 80071d8:	59415252 	.word	0x59415252
 80071dc:	524f465f 	.word	0x524f465f
 80071e0:	5f54414d 	.word	0x5f54414d
 80071e4:	454e4f4e 	.word	0x454e4f4e
 80071e8:	00          	.byte	0x00
 80071e9:	00          	.byte	0x00
	...

080071ec <.text_67>:
 80071ec:	415f4941 	.word	0x415f4941
 80071f0:	59415252 	.word	0x59415252
 80071f4:	524f465f 	.word	0x524f465f
 80071f8:	5f54414d 	.word	0x5f54414d
 80071fc:	0051      	.short	0x0051
	...

08007200 <.text_68>:
 8007200:	415f4941 	.word	0x415f4941
 8007204:	59415252 	.word	0x59415252
 8007208:	524f465f 	.word	0x524f465f
 800720c:	5f54414d 	.word	0x5f54414d
 8007210:	00005155 	.word	0x00005155

08007214 <.text_69>:
 8007214:	425f4941 	.word	0x425f4941
 8007218:	45464655 	.word	0x45464655
 800721c:	4f465f52 	.word	0x4f465f52
 8007220:	54414d52 	.word	0x54414d52
 8007224:	4e4f4e5f 	.word	0x4e4f4e5f
 8007228:	0045      	.short	0x0045
	...

0800722c <.text_70>:
 800722c:	425f4941 	.word	0x425f4941
 8007230:	45464655 	.word	0x45464655
 8007234:	4f465f52 	.word	0x4f465f52
 8007238:	54414d52 	.word	0x54414d52
 800723c:	0000515f 	.word	0x0000515f

08007240 <.text_71>:
 8007240:	425f4941 	.word	0x425f4941
 8007244:	45464655 	.word	0x45464655
 8007248:	4f465f52 	.word	0x4f465f52
 800724c:	54414d52 	.word	0x54414d52
 8007250:	0051555f 	.word	0x0051555f

08007254 <ai_math_sqrt>:
 8007254:	eef0 0a40 	vmov.f32	s1, s0
 8007258:	eef5 0a40 	vcmp.f32	s1, #0.0
 800725c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007260:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8007308 <.text_12>
 8007264:	db01      	blt.n	800726a <ai_math_sqrt+0x16>
 8007266:	eeb1 0ae0 	vsqrt.f32	s0, s1
 800726a:	4770      	bx	lr

0800726c <ai_math_exp>:
 800726c:	f00b bd2e 	b.w	8012ccc <expf>

08007270 <ai_math_pow>:
 8007270:	f00b be78 	b.w	8012f64 <powf>

08007274 <ai_math_tanh>:
 8007274:	f00b bb04 	b.w	8012880 <tanhf>

08007278 <ai_math_cosh>:
 8007278:	f00b bcc8 	b.w	8012c0c <coshf>

0800727c <ai_math_relu>:
 800727c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8007280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007284:	bf48      	it	mi
 8007286:	ed9f 0a20 	vldrmi	s0, [pc, #128]	; 8007308 <.text_12>
 800728a:	4770      	bx	lr

0800728c <ai_math_prelu>:
 800728c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8007290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007294:	bf48      	it	mi
 8007296:	ee20 0a20 	vmulmi.f32	s0, s0, s1
 800729a:	4770      	bx	lr

0800729c <ai_math_sigmoid>:
 800729c:	b500      	push	{lr}
 800729e:	b081      	sub	sp, #4
 80072a0:	eeb1 0a40 	vneg.f32	s0, s0
 80072a4:	f00b fd12 	bl	8012ccc <expf>
 80072a8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80072ac:	ee30 0a20 	vadd.f32	s0, s0, s1
 80072b0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80072b4:	ee81 0a00 	vdiv.f32	s0, s2, s0
 80072b8:	b001      	add	sp, #4
 80072ba:	bd00      	pop	{pc}

080072bc <ai_math_hard_sigmoid>:
 80072bc:	eef0 0a40 	vmov.f32	s1, s0
 80072c0:	ed9f 1a12 	vldr	s2, [pc, #72]	; 800730c <.text_13>
 80072c4:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80072c8:	ee00 0a81 	vmla.f32	s0, s1, s2
 80072cc:	eddf 0a10 	vldr	s1, [pc, #64]	; 8007310 <.text_14>
 80072d0:	eeb4 0a60 	vcmp.f32	s0, s1
 80072d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072d8:	da07      	bge.n	80072ea <ai_math_hard_sigmoid+0x2e>
 80072da:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80072de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072e2:	d504      	bpl.n	80072ee <ai_math_hard_sigmoid+0x32>
 80072e4:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8007308 <.text_12>
 80072e8:	4770      	bx	lr
 80072ea:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80072ee:	4770      	bx	lr

080072f0 <ai_math_sign>:
 80072f0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80072f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072f8:	bfcc      	ite	gt
 80072fa:	ed9f 0a06 	vldrgt	s0, [pc, #24]	; 8007314 <.text_15>
 80072fe:	ed9f 0a06 	vldrle	s0, [pc, #24]	; 8007318 <.text_16>
 8007302:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8007306:	4770      	bx	lr

08007308 <.text_12>:
 8007308:	00000000 	.word	0x00000000

0800730c <.text_13>:
 800730c:	3e4ccccd 	.word	0x3e4ccccd

08007310 <.text_14>:
 8007310:	3f800001 	.word	0x3f800001

08007314 <.text_15>:
 8007314:	00000001 	.word	0x00000001

08007318 <.text_16>:
 8007318:	ffffffff 	.word	0xffffffff

0800731c <ai_div>:
 800731c:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8007320:	4770      	bx	lr

08007322 <ai_floor_div>:
 8007322:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8007326:	f00b b8d1 	b.w	80124cc <floorf>

0800732a <ai_floor_mod>:
 800732a:	f00b bd49 	b.w	8012dc0 <fmodf>

0800732e <ai_max>:
 800732e:	eef4 0a40 	vcmp.f32	s1, s0
 8007332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007336:	bf58      	it	pl
 8007338:	eeb0 0a60 	vmovpl.f32	s0, s1
 800733c:	4770      	bx	lr

0800733e <ai_min>:
 800733e:	eeb4 0a60 	vcmp.f32	s0, s1
 8007342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007346:	bf58      	it	pl
 8007348:	eeb0 0a60 	vmovpl.f32	s0, s1
 800734c:	4770      	bx	lr

0800734e <ai_mul>:
 800734e:	ee20 0a20 	vmul.f32	s0, s0, s1
 8007352:	4770      	bx	lr

08007354 <ai_sub>:
 8007354:	ee30 0a60 	vsub.f32	s0, s0, s1
 8007358:	4770      	bx	lr

0800735a <ai_sum>:
 800735a:	ee30 0a20 	vadd.f32	s0, s0, s1
 800735e:	4770      	bx	lr

08007360 <arm_mat_init_f32>:
 8007360:	8001      	strh	r1, [r0, #0]
 8007362:	8042      	strh	r2, [r0, #2]
 8007364:	6043      	str	r3, [r0, #4]
 8007366:	4770      	bx	lr

08007368 <core_timer_init_>:
 8007368:	4770      	bx	lr

0800736a <core_timer_ticks_>:
 800736a:	2000      	movs	r0, #0
 800736c:	4770      	bx	lr
	...

08007370 <core_timer_init>:
 8007370:	b530      	push	{r4, r5, lr}
 8007372:	0005      	movs	r5, r0
 8007374:	b081      	sub	sp, #4
 8007376:	460c      	mov	r4, r1
 8007378:	d00d      	beq.n	8007396 <core_timer_init+0x26>
 800737a:	4929      	ldr	r1, [pc, #164]	; (8007420 <.text_12>)
 800737c:	7808      	ldrb	r0, [r1, #0]
 800737e:	b118      	cbz	r0, 8007388 <core_timer_init+0x18>
 8007380:	2200      	movs	r2, #0
 8007382:	700a      	strb	r2, [r1, #0]
 8007384:	f7ff fff0 	bl	8007368 <core_timer_init_>
 8007388:	b904      	cbnz	r4, 800738c <core_timer_init+0x1c>
 800738a:	a423      	add	r4, pc, #140	; (adr r4, 8007418 <.text_10>)
 800738c:	602c      	str	r4, [r5, #0]
 800738e:	2000      	movs	r0, #0
 8007390:	60a8      	str	r0, [r5, #8]
 8007392:	6068      	str	r0, [r5, #4]
 8007394:	2001      	movs	r0, #1
 8007396:	b001      	add	sp, #4
 8007398:	bd30      	pop	{r4, r5, pc}

0800739a <core_timer_reset>:
 800739a:	b118      	cbz	r0, 80073a4 <core_timer_reset+0xa>
 800739c:	2100      	movs	r1, #0
 800739e:	6081      	str	r1, [r0, #8]
 80073a0:	6041      	str	r1, [r0, #4]
 80073a2:	2001      	movs	r0, #1
 80073a4:	4770      	bx	lr

080073a6 <core_timer_start>:
 80073a6:	b510      	push	{r4, lr}
 80073a8:	0004      	movs	r4, r0
 80073aa:	d101      	bne.n	80073b0 <core_timer_start+0xa>
 80073ac:	2000      	movs	r0, #0
 80073ae:	bd10      	pop	{r4, pc}
 80073b0:	f7ff ffdb 	bl	800736a <core_timer_ticks_>
 80073b4:	6060      	str	r0, [r4, #4]
 80073b6:	2001      	movs	r0, #1
 80073b8:	bd10      	pop	{r4, pc}

080073ba <core_timer_stop>:
 80073ba:	b510      	push	{r4, lr}
 80073bc:	0004      	movs	r4, r0
 80073be:	d101      	bne.n	80073c4 <core_timer_stop+0xa>
 80073c0:	2000      	movs	r0, #0
 80073c2:	bd10      	pop	{r4, pc}
 80073c4:	f7ff ffd1 	bl	800736a <core_timer_ticks_>
 80073c8:	68a2      	ldr	r2, [r4, #8]
 80073ca:	6861      	ldr	r1, [r4, #4]
 80073cc:	1880      	adds	r0, r0, r2
 80073ce:	1a40      	subs	r0, r0, r1
 80073d0:	60a0      	str	r0, [r4, #8]
 80073d2:	bd10      	pop	{r4, pc}

080073d4 <core_timer_main_test_unit>:
 80073d4:	b500      	push	{lr}
 80073d6:	b083      	sub	sp, #12
 80073d8:	a112      	add	r1, pc, #72	; (adr r1, 8007424 <.text_13>)
 80073da:	4668      	mov	r0, sp
 80073dc:	f7ff ffc8 	bl	8007370 <core_timer_init>
 80073e0:	f7ff ffc3 	bl	800736a <core_timer_ticks_>
 80073e4:	9001      	str	r0, [sp, #4]
 80073e6:	4668      	mov	r0, sp
 80073e8:	f7ff ffe7 	bl	80073ba <core_timer_stop>
 80073ec:	ed9d 0a02 	vldr	s0, [sp, #8]
 80073f0:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80073f4:	eddf 0a09 	vldr	s1, [pc, #36]	; 800741c <.text_11>
 80073f8:	ee60 0a20 	vmul.f32	s1, s0, s1
 80073fc:	ee10 0a90 	vmov	r0, s1
 8007400:	f000 fa32 	bl	8007868 <__aeabi_f2d>
 8007404:	460b      	mov	r3, r1
 8007406:	4602      	mov	r2, r0
 8007408:	f8dd 1000 	ldr.w	r1, [sp]
 800740c:	a009      	add	r0, pc, #36	; (adr r0, 8007434 <.text_14>)
 800740e:	f009 fdd1 	bl	8010fb4 <iprintf>
 8007412:	2000      	movs	r0, #0
 8007414:	b003      	add	sp, #12
 8007416:	bd00      	pop	{pc}

08007418 <.text_10>:
 8007418:	00000000 	.word	0x00000000

0800741c <.text_11>:
 800741c:	3a83126f 	.word	0x3a83126f

08007420 <.text_12>:
 8007420:	20000004 	.word	0x20000004

08007424 <.text_13>:
 8007424:	6d617845 	.word	0x6d617845
 8007428:	20656c70 	.word	0x20656c70
 800742c:	656d6954 	.word	0x656d6954
 8007430:	0072      	.short	0x0072
	...

08007434 <.text_14>:
 8007434:	656d6954 	.word	0x656d6954
 8007438:	73252072 	.word	0x73252072
 800743c:	6c45203a 	.word	0x6c45203a
 8007440:	65737061 	.word	0x65737061
 8007444:	66252064 	.word	0x66252064
 8007448:	0d736d20 	.word	0x0d736d20
 800744c:	000a      	.short	0x000a
	...

08007450 <__aeabi_memset>:
 8007450:	b470      	push	{r4, r5, r6}
 8007452:	0784      	lsls	r4, r0, #30
 8007454:	d046      	beq.n	80074e4 <__aeabi_memset+0x94>
 8007456:	1e4c      	subs	r4, r1, #1
 8007458:	2900      	cmp	r1, #0
 800745a:	d041      	beq.n	80074e0 <__aeabi_memset+0x90>
 800745c:	b2d5      	uxtb	r5, r2
 800745e:	4603      	mov	r3, r0
 8007460:	e002      	b.n	8007468 <__aeabi_memset+0x18>
 8007462:	1e61      	subs	r1, r4, #1
 8007464:	b3e4      	cbz	r4, 80074e0 <__aeabi_memset+0x90>
 8007466:	460c      	mov	r4, r1
 8007468:	f803 5b01 	strb.w	r5, [r3], #1
 800746c:	0799      	lsls	r1, r3, #30
 800746e:	d1f8      	bne.n	8007462 <__aeabi_memset+0x12>
 8007470:	2c03      	cmp	r4, #3
 8007472:	d92e      	bls.n	80074d2 <__aeabi_memset+0x82>
 8007474:	b2d5      	uxtb	r5, r2
 8007476:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800747a:	2c0f      	cmp	r4, #15
 800747c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8007480:	d919      	bls.n	80074b6 <__aeabi_memset+0x66>
 8007482:	4626      	mov	r6, r4
 8007484:	f103 0110 	add.w	r1, r3, #16
 8007488:	3e10      	subs	r6, #16
 800748a:	2e0f      	cmp	r6, #15
 800748c:	f841 5c10 	str.w	r5, [r1, #-16]
 8007490:	f841 5c0c 	str.w	r5, [r1, #-12]
 8007494:	f841 5c08 	str.w	r5, [r1, #-8]
 8007498:	f841 5c04 	str.w	r5, [r1, #-4]
 800749c:	f101 0110 	add.w	r1, r1, #16
 80074a0:	d8f2      	bhi.n	8007488 <__aeabi_memset+0x38>
 80074a2:	f1a4 0110 	sub.w	r1, r4, #16
 80074a6:	f021 010f 	bic.w	r1, r1, #15
 80074aa:	f004 040f 	and.w	r4, r4, #15
 80074ae:	3110      	adds	r1, #16
 80074b0:	2c03      	cmp	r4, #3
 80074b2:	440b      	add	r3, r1
 80074b4:	d90d      	bls.n	80074d2 <__aeabi_memset+0x82>
 80074b6:	461e      	mov	r6, r3
 80074b8:	4621      	mov	r1, r4
 80074ba:	3904      	subs	r1, #4
 80074bc:	2903      	cmp	r1, #3
 80074be:	f846 5b04 	str.w	r5, [r6], #4
 80074c2:	d8fa      	bhi.n	80074ba <__aeabi_memset+0x6a>
 80074c4:	1f21      	subs	r1, r4, #4
 80074c6:	f021 0103 	bic.w	r1, r1, #3
 80074ca:	3104      	adds	r1, #4
 80074cc:	440b      	add	r3, r1
 80074ce:	f004 0403 	and.w	r4, r4, #3
 80074d2:	b12c      	cbz	r4, 80074e0 <__aeabi_memset+0x90>
 80074d4:	b2d2      	uxtb	r2, r2
 80074d6:	441c      	add	r4, r3
 80074d8:	f803 2b01 	strb.w	r2, [r3], #1
 80074dc:	42a3      	cmp	r3, r4
 80074de:	d1fb      	bne.n	80074d8 <__aeabi_memset+0x88>
 80074e0:	bc70      	pop	{r4, r5, r6}
 80074e2:	4770      	bx	lr
 80074e4:	460c      	mov	r4, r1
 80074e6:	4603      	mov	r3, r0
 80074e8:	e7c2      	b.n	8007470 <__aeabi_memset+0x20>

080074ea <strlen>:
 80074ea:	4603      	mov	r3, r0
 80074ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074f0:	2a00      	cmp	r2, #0
 80074f2:	d1fb      	bne.n	80074ec <strlen+0x2>
 80074f4:	1a18      	subs	r0, r3, r0
 80074f6:	3801      	subs	r0, #1
 80074f8:	4770      	bx	lr
 80074fa:	0000      	movs	r0, r0
 80074fc:	0000      	movs	r0, r0
	...

08007500 <memchr>:
 8007500:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8007504:	2a10      	cmp	r2, #16
 8007506:	db2b      	blt.n	8007560 <memchr+0x60>
 8007508:	f010 0f07 	tst.w	r0, #7
 800750c:	d008      	beq.n	8007520 <memchr+0x20>
 800750e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007512:	3a01      	subs	r2, #1
 8007514:	428b      	cmp	r3, r1
 8007516:	d02d      	beq.n	8007574 <memchr+0x74>
 8007518:	f010 0f07 	tst.w	r0, #7
 800751c:	b342      	cbz	r2, 8007570 <memchr+0x70>
 800751e:	d1f6      	bne.n	800750e <memchr+0xe>
 8007520:	b4f0      	push	{r4, r5, r6, r7}
 8007522:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8007526:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800752a:	f022 0407 	bic.w	r4, r2, #7
 800752e:	f07f 0700 	mvns.w	r7, #0
 8007532:	2300      	movs	r3, #0
 8007534:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8007538:	3c08      	subs	r4, #8
 800753a:	ea85 0501 	eor.w	r5, r5, r1
 800753e:	ea86 0601 	eor.w	r6, r6, r1
 8007542:	fa85 f547 	uadd8	r5, r5, r7
 8007546:	faa3 f587 	sel	r5, r3, r7
 800754a:	fa86 f647 	uadd8	r6, r6, r7
 800754e:	faa5 f687 	sel	r6, r5, r7
 8007552:	b98e      	cbnz	r6, 8007578 <memchr+0x78>
 8007554:	d1ee      	bne.n	8007534 <memchr+0x34>
 8007556:	bcf0      	pop	{r4, r5, r6, r7}
 8007558:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800755c:	f002 0207 	and.w	r2, r2, #7
 8007560:	b132      	cbz	r2, 8007570 <memchr+0x70>
 8007562:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007566:	3a01      	subs	r2, #1
 8007568:	ea83 0301 	eor.w	r3, r3, r1
 800756c:	b113      	cbz	r3, 8007574 <memchr+0x74>
 800756e:	d1f8      	bne.n	8007562 <memchr+0x62>
 8007570:	2000      	movs	r0, #0
 8007572:	4770      	bx	lr
 8007574:	3801      	subs	r0, #1
 8007576:	4770      	bx	lr
 8007578:	2d00      	cmp	r5, #0
 800757a:	bf06      	itte	eq
 800757c:	4635      	moveq	r5, r6
 800757e:	3803      	subeq	r0, #3
 8007580:	3807      	subne	r0, #7
 8007582:	f015 0f01 	tst.w	r5, #1
 8007586:	d107      	bne.n	8007598 <memchr+0x98>
 8007588:	3001      	adds	r0, #1
 800758a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800758e:	bf02      	ittt	eq
 8007590:	3001      	addeq	r0, #1
 8007592:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8007596:	3001      	addeq	r0, #1
 8007598:	bcf0      	pop	{r4, r5, r6, r7}
 800759a:	3801      	subs	r0, #1
 800759c:	4770      	bx	lr
 800759e:	bf00      	nop

080075a0 <__aeabi_drsub>:
 80075a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80075a4:	e002      	b.n	80075ac <__adddf3>
 80075a6:	bf00      	nop

080075a8 <__aeabi_dsub>:
 80075a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080075ac <__adddf3>:
 80075ac:	b530      	push	{r4, r5, lr}
 80075ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80075b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80075b6:	ea94 0f05 	teq	r4, r5
 80075ba:	bf08      	it	eq
 80075bc:	ea90 0f02 	teqeq	r0, r2
 80075c0:	bf1f      	itttt	ne
 80075c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80075c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80075ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80075ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80075d2:	f000 80e2 	beq.w	800779a <__adddf3+0x1ee>
 80075d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80075da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80075de:	bfb8      	it	lt
 80075e0:	426d      	neglt	r5, r5
 80075e2:	dd0c      	ble.n	80075fe <__adddf3+0x52>
 80075e4:	442c      	add	r4, r5
 80075e6:	ea80 0202 	eor.w	r2, r0, r2
 80075ea:	ea81 0303 	eor.w	r3, r1, r3
 80075ee:	ea82 0000 	eor.w	r0, r2, r0
 80075f2:	ea83 0101 	eor.w	r1, r3, r1
 80075f6:	ea80 0202 	eor.w	r2, r0, r2
 80075fa:	ea81 0303 	eor.w	r3, r1, r3
 80075fe:	2d36      	cmp	r5, #54	; 0x36
 8007600:	bf88      	it	hi
 8007602:	bd30      	pophi	{r4, r5, pc}
 8007604:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8007608:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800760c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8007610:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8007614:	d002      	beq.n	800761c <__adddf3+0x70>
 8007616:	4240      	negs	r0, r0
 8007618:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800761c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8007620:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8007624:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8007628:	d002      	beq.n	8007630 <__adddf3+0x84>
 800762a:	4252      	negs	r2, r2
 800762c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8007630:	ea94 0f05 	teq	r4, r5
 8007634:	f000 80a7 	beq.w	8007786 <__adddf3+0x1da>
 8007638:	f1a4 0401 	sub.w	r4, r4, #1
 800763c:	f1d5 0e20 	rsbs	lr, r5, #32
 8007640:	db0d      	blt.n	800765e <__adddf3+0xb2>
 8007642:	fa02 fc0e 	lsl.w	ip, r2, lr
 8007646:	fa22 f205 	lsr.w	r2, r2, r5
 800764a:	1880      	adds	r0, r0, r2
 800764c:	f141 0100 	adc.w	r1, r1, #0
 8007650:	fa03 f20e 	lsl.w	r2, r3, lr
 8007654:	1880      	adds	r0, r0, r2
 8007656:	fa43 f305 	asr.w	r3, r3, r5
 800765a:	4159      	adcs	r1, r3
 800765c:	e00e      	b.n	800767c <__adddf3+0xd0>
 800765e:	f1a5 0520 	sub.w	r5, r5, #32
 8007662:	f10e 0e20 	add.w	lr, lr, #32
 8007666:	2a01      	cmp	r2, #1
 8007668:	fa03 fc0e 	lsl.w	ip, r3, lr
 800766c:	bf28      	it	cs
 800766e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8007672:	fa43 f305 	asr.w	r3, r3, r5
 8007676:	18c0      	adds	r0, r0, r3
 8007678:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800767c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007680:	d507      	bpl.n	8007692 <__adddf3+0xe6>
 8007682:	f04f 0e00 	mov.w	lr, #0
 8007686:	f1dc 0c00 	rsbs	ip, ip, #0
 800768a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800768e:	eb6e 0101 	sbc.w	r1, lr, r1
 8007692:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007696:	d31b      	bcc.n	80076d0 <__adddf3+0x124>
 8007698:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800769c:	d30c      	bcc.n	80076b8 <__adddf3+0x10c>
 800769e:	0849      	lsrs	r1, r1, #1
 80076a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80076a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80076a8:	f104 0401 	add.w	r4, r4, #1
 80076ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80076b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80076b4:	f080 809a 	bcs.w	80077ec <__adddf3+0x240>
 80076b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80076bc:	bf08      	it	eq
 80076be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80076c2:	f150 0000 	adcs.w	r0, r0, #0
 80076c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80076ca:	ea41 0105 	orr.w	r1, r1, r5
 80076ce:	bd30      	pop	{r4, r5, pc}
 80076d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80076d4:	4140      	adcs	r0, r0
 80076d6:	eb41 0101 	adc.w	r1, r1, r1
 80076da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80076de:	f1a4 0401 	sub.w	r4, r4, #1
 80076e2:	d1e9      	bne.n	80076b8 <__adddf3+0x10c>
 80076e4:	f091 0f00 	teq	r1, #0
 80076e8:	bf04      	itt	eq
 80076ea:	4601      	moveq	r1, r0
 80076ec:	2000      	moveq	r0, #0
 80076ee:	fab1 f381 	clz	r3, r1
 80076f2:	bf08      	it	eq
 80076f4:	3320      	addeq	r3, #32
 80076f6:	f1a3 030b 	sub.w	r3, r3, #11
 80076fa:	f1b3 0220 	subs.w	r2, r3, #32
 80076fe:	da0c      	bge.n	800771a <__adddf3+0x16e>
 8007700:	320c      	adds	r2, #12
 8007702:	dd08      	ble.n	8007716 <__adddf3+0x16a>
 8007704:	f102 0c14 	add.w	ip, r2, #20
 8007708:	f1c2 020c 	rsb	r2, r2, #12
 800770c:	fa01 f00c 	lsl.w	r0, r1, ip
 8007710:	fa21 f102 	lsr.w	r1, r1, r2
 8007714:	e00c      	b.n	8007730 <__adddf3+0x184>
 8007716:	f102 0214 	add.w	r2, r2, #20
 800771a:	bfd8      	it	le
 800771c:	f1c2 0c20 	rsble	ip, r2, #32
 8007720:	fa01 f102 	lsl.w	r1, r1, r2
 8007724:	fa20 fc0c 	lsr.w	ip, r0, ip
 8007728:	bfdc      	itt	le
 800772a:	ea41 010c 	orrle.w	r1, r1, ip
 800772e:	4090      	lslle	r0, r2
 8007730:	1ae4      	subs	r4, r4, r3
 8007732:	bfa2      	ittt	ge
 8007734:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8007738:	4329      	orrge	r1, r5
 800773a:	bd30      	popge	{r4, r5, pc}
 800773c:	ea6f 0404 	mvn.w	r4, r4
 8007740:	3c1f      	subs	r4, #31
 8007742:	da1c      	bge.n	800777e <__adddf3+0x1d2>
 8007744:	340c      	adds	r4, #12
 8007746:	dc0e      	bgt.n	8007766 <__adddf3+0x1ba>
 8007748:	f104 0414 	add.w	r4, r4, #20
 800774c:	f1c4 0220 	rsb	r2, r4, #32
 8007750:	fa20 f004 	lsr.w	r0, r0, r4
 8007754:	fa01 f302 	lsl.w	r3, r1, r2
 8007758:	ea40 0003 	orr.w	r0, r0, r3
 800775c:	fa21 f304 	lsr.w	r3, r1, r4
 8007760:	ea45 0103 	orr.w	r1, r5, r3
 8007764:	bd30      	pop	{r4, r5, pc}
 8007766:	f1c4 040c 	rsb	r4, r4, #12
 800776a:	f1c4 0220 	rsb	r2, r4, #32
 800776e:	fa20 f002 	lsr.w	r0, r0, r2
 8007772:	fa01 f304 	lsl.w	r3, r1, r4
 8007776:	ea40 0003 	orr.w	r0, r0, r3
 800777a:	4629      	mov	r1, r5
 800777c:	bd30      	pop	{r4, r5, pc}
 800777e:	fa21 f004 	lsr.w	r0, r1, r4
 8007782:	4629      	mov	r1, r5
 8007784:	bd30      	pop	{r4, r5, pc}
 8007786:	f094 0f00 	teq	r4, #0
 800778a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800778e:	bf06      	itte	eq
 8007790:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8007794:	3401      	addeq	r4, #1
 8007796:	3d01      	subne	r5, #1
 8007798:	e74e      	b.n	8007638 <__adddf3+0x8c>
 800779a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800779e:	bf18      	it	ne
 80077a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80077a4:	d029      	beq.n	80077fa <__adddf3+0x24e>
 80077a6:	ea94 0f05 	teq	r4, r5
 80077aa:	bf08      	it	eq
 80077ac:	ea90 0f02 	teqeq	r0, r2
 80077b0:	d005      	beq.n	80077be <__adddf3+0x212>
 80077b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80077b6:	bf04      	itt	eq
 80077b8:	4619      	moveq	r1, r3
 80077ba:	4610      	moveq	r0, r2
 80077bc:	bd30      	pop	{r4, r5, pc}
 80077be:	ea91 0f03 	teq	r1, r3
 80077c2:	bf1e      	ittt	ne
 80077c4:	2100      	movne	r1, #0
 80077c6:	2000      	movne	r0, #0
 80077c8:	bd30      	popne	{r4, r5, pc}
 80077ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80077ce:	d105      	bne.n	80077dc <__adddf3+0x230>
 80077d0:	0040      	lsls	r0, r0, #1
 80077d2:	4149      	adcs	r1, r1
 80077d4:	bf28      	it	cs
 80077d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80077da:	bd30      	pop	{r4, r5, pc}
 80077dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80077e0:	bf3c      	itt	cc
 80077e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80077e6:	bd30      	popcc	{r4, r5, pc}
 80077e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80077ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80077f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80077f4:	f04f 0000 	mov.w	r0, #0
 80077f8:	bd30      	pop	{r4, r5, pc}
 80077fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80077fe:	bf1a      	itte	ne
 8007800:	4619      	movne	r1, r3
 8007802:	4610      	movne	r0, r2
 8007804:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8007808:	bf1c      	itt	ne
 800780a:	460b      	movne	r3, r1
 800780c:	4602      	movne	r2, r0
 800780e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8007812:	bf06      	itte	eq
 8007814:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8007818:	ea91 0f03 	teqeq	r1, r3
 800781c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8007820:	bd30      	pop	{r4, r5, pc}
 8007822:	bf00      	nop

08007824 <__aeabi_ui2d>:
 8007824:	f090 0f00 	teq	r0, #0
 8007828:	bf04      	itt	eq
 800782a:	2100      	moveq	r1, #0
 800782c:	4770      	bxeq	lr
 800782e:	b530      	push	{r4, r5, lr}
 8007830:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007834:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007838:	f04f 0500 	mov.w	r5, #0
 800783c:	f04f 0100 	mov.w	r1, #0
 8007840:	e750      	b.n	80076e4 <__adddf3+0x138>
 8007842:	bf00      	nop

08007844 <__aeabi_i2d>:
 8007844:	f090 0f00 	teq	r0, #0
 8007848:	bf04      	itt	eq
 800784a:	2100      	moveq	r1, #0
 800784c:	4770      	bxeq	lr
 800784e:	b530      	push	{r4, r5, lr}
 8007850:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007854:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007858:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800785c:	bf48      	it	mi
 800785e:	4240      	negmi	r0, r0
 8007860:	f04f 0100 	mov.w	r1, #0
 8007864:	e73e      	b.n	80076e4 <__adddf3+0x138>
 8007866:	bf00      	nop

08007868 <__aeabi_f2d>:
 8007868:	0042      	lsls	r2, r0, #1
 800786a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800786e:	ea4f 0131 	mov.w	r1, r1, rrx
 8007872:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8007876:	bf1f      	itttt	ne
 8007878:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800787c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8007880:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8007884:	4770      	bxne	lr
 8007886:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800788a:	bf08      	it	eq
 800788c:	4770      	bxeq	lr
 800788e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8007892:	bf04      	itt	eq
 8007894:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8007898:	4770      	bxeq	lr
 800789a:	b530      	push	{r4, r5, lr}
 800789c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80078a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80078a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80078a8:	e71c      	b.n	80076e4 <__adddf3+0x138>
 80078aa:	bf00      	nop

080078ac <__aeabi_ul2d>:
 80078ac:	ea50 0201 	orrs.w	r2, r0, r1
 80078b0:	bf08      	it	eq
 80078b2:	4770      	bxeq	lr
 80078b4:	b530      	push	{r4, r5, lr}
 80078b6:	f04f 0500 	mov.w	r5, #0
 80078ba:	e00a      	b.n	80078d2 <__aeabi_l2d+0x16>

080078bc <__aeabi_l2d>:
 80078bc:	ea50 0201 	orrs.w	r2, r0, r1
 80078c0:	bf08      	it	eq
 80078c2:	4770      	bxeq	lr
 80078c4:	b530      	push	{r4, r5, lr}
 80078c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80078ca:	d502      	bpl.n	80078d2 <__aeabi_l2d+0x16>
 80078cc:	4240      	negs	r0, r0
 80078ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80078d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80078d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80078da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80078de:	f43f aed8 	beq.w	8007692 <__adddf3+0xe6>
 80078e2:	f04f 0203 	mov.w	r2, #3
 80078e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80078ea:	bf18      	it	ne
 80078ec:	3203      	addne	r2, #3
 80078ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80078f2:	bf18      	it	ne
 80078f4:	3203      	addne	r2, #3
 80078f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80078fa:	f1c2 0320 	rsb	r3, r2, #32
 80078fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8007902:	fa20 f002 	lsr.w	r0, r0, r2
 8007906:	fa01 fe03 	lsl.w	lr, r1, r3
 800790a:	ea40 000e 	orr.w	r0, r0, lr
 800790e:	fa21 f102 	lsr.w	r1, r1, r2
 8007912:	4414      	add	r4, r2
 8007914:	e6bd      	b.n	8007692 <__adddf3+0xe6>
 8007916:	bf00      	nop

08007918 <__aeabi_dmul>:
 8007918:	b570      	push	{r4, r5, r6, lr}
 800791a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800791e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8007922:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8007926:	bf1d      	ittte	ne
 8007928:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800792c:	ea94 0f0c 	teqne	r4, ip
 8007930:	ea95 0f0c 	teqne	r5, ip
 8007934:	f000 f8de 	bleq	8007af4 <__aeabi_dmul+0x1dc>
 8007938:	442c      	add	r4, r5
 800793a:	ea81 0603 	eor.w	r6, r1, r3
 800793e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8007942:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8007946:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800794a:	bf18      	it	ne
 800794c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8007950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007954:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007958:	d038      	beq.n	80079cc <__aeabi_dmul+0xb4>
 800795a:	fba0 ce02 	umull	ip, lr, r0, r2
 800795e:	f04f 0500 	mov.w	r5, #0
 8007962:	fbe1 e502 	umlal	lr, r5, r1, r2
 8007966:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800796a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800796e:	f04f 0600 	mov.w	r6, #0
 8007972:	fbe1 5603 	umlal	r5, r6, r1, r3
 8007976:	f09c 0f00 	teq	ip, #0
 800797a:	bf18      	it	ne
 800797c:	f04e 0e01 	orrne.w	lr, lr, #1
 8007980:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8007984:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8007988:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800798c:	d204      	bcs.n	8007998 <__aeabi_dmul+0x80>
 800798e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8007992:	416d      	adcs	r5, r5
 8007994:	eb46 0606 	adc.w	r6, r6, r6
 8007998:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800799c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80079a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80079a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80079a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80079ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80079b0:	bf88      	it	hi
 80079b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80079b6:	d81e      	bhi.n	80079f6 <__aeabi_dmul+0xde>
 80079b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80079bc:	bf08      	it	eq
 80079be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80079c2:	f150 0000 	adcs.w	r0, r0, #0
 80079c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80079ca:	bd70      	pop	{r4, r5, r6, pc}
 80079cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80079d0:	ea46 0101 	orr.w	r1, r6, r1
 80079d4:	ea40 0002 	orr.w	r0, r0, r2
 80079d8:	ea81 0103 	eor.w	r1, r1, r3
 80079dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80079e0:	bfc2      	ittt	gt
 80079e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80079e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80079ea:	bd70      	popgt	{r4, r5, r6, pc}
 80079ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80079f0:	f04f 0e00 	mov.w	lr, #0
 80079f4:	3c01      	subs	r4, #1
 80079f6:	f300 80ab 	bgt.w	8007b50 <__aeabi_dmul+0x238>
 80079fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80079fe:	bfde      	ittt	le
 8007a00:	2000      	movle	r0, #0
 8007a02:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8007a06:	bd70      	pople	{r4, r5, r6, pc}
 8007a08:	f1c4 0400 	rsb	r4, r4, #0
 8007a0c:	3c20      	subs	r4, #32
 8007a0e:	da35      	bge.n	8007a7c <__aeabi_dmul+0x164>
 8007a10:	340c      	adds	r4, #12
 8007a12:	dc1b      	bgt.n	8007a4c <__aeabi_dmul+0x134>
 8007a14:	f104 0414 	add.w	r4, r4, #20
 8007a18:	f1c4 0520 	rsb	r5, r4, #32
 8007a1c:	fa00 f305 	lsl.w	r3, r0, r5
 8007a20:	fa20 f004 	lsr.w	r0, r0, r4
 8007a24:	fa01 f205 	lsl.w	r2, r1, r5
 8007a28:	ea40 0002 	orr.w	r0, r0, r2
 8007a2c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8007a30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007a34:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8007a38:	fa21 f604 	lsr.w	r6, r1, r4
 8007a3c:	eb42 0106 	adc.w	r1, r2, r6
 8007a40:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8007a44:	bf08      	it	eq
 8007a46:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8007a4a:	bd70      	pop	{r4, r5, r6, pc}
 8007a4c:	f1c4 040c 	rsb	r4, r4, #12
 8007a50:	f1c4 0520 	rsb	r5, r4, #32
 8007a54:	fa00 f304 	lsl.w	r3, r0, r4
 8007a58:	fa20 f005 	lsr.w	r0, r0, r5
 8007a5c:	fa01 f204 	lsl.w	r2, r1, r4
 8007a60:	ea40 0002 	orr.w	r0, r0, r2
 8007a64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007a68:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8007a6c:	f141 0100 	adc.w	r1, r1, #0
 8007a70:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8007a74:	bf08      	it	eq
 8007a76:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8007a7a:	bd70      	pop	{r4, r5, r6, pc}
 8007a7c:	f1c4 0520 	rsb	r5, r4, #32
 8007a80:	fa00 f205 	lsl.w	r2, r0, r5
 8007a84:	ea4e 0e02 	orr.w	lr, lr, r2
 8007a88:	fa20 f304 	lsr.w	r3, r0, r4
 8007a8c:	fa01 f205 	lsl.w	r2, r1, r5
 8007a90:	ea43 0302 	orr.w	r3, r3, r2
 8007a94:	fa21 f004 	lsr.w	r0, r1, r4
 8007a98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007a9c:	fa21 f204 	lsr.w	r2, r1, r4
 8007aa0:	ea20 0002 	bic.w	r0, r0, r2
 8007aa4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8007aa8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8007aac:	bf08      	it	eq
 8007aae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8007ab2:	bd70      	pop	{r4, r5, r6, pc}
 8007ab4:	f094 0f00 	teq	r4, #0
 8007ab8:	d10f      	bne.n	8007ada <__aeabi_dmul+0x1c2>
 8007aba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8007abe:	0040      	lsls	r0, r0, #1
 8007ac0:	eb41 0101 	adc.w	r1, r1, r1
 8007ac4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007ac8:	bf08      	it	eq
 8007aca:	3c01      	subeq	r4, #1
 8007acc:	d0f7      	beq.n	8007abe <__aeabi_dmul+0x1a6>
 8007ace:	ea41 0106 	orr.w	r1, r1, r6
 8007ad2:	f095 0f00 	teq	r5, #0
 8007ad6:	bf18      	it	ne
 8007ad8:	4770      	bxne	lr
 8007ada:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8007ade:	0052      	lsls	r2, r2, #1
 8007ae0:	eb43 0303 	adc.w	r3, r3, r3
 8007ae4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8007ae8:	bf08      	it	eq
 8007aea:	3d01      	subeq	r5, #1
 8007aec:	d0f7      	beq.n	8007ade <__aeabi_dmul+0x1c6>
 8007aee:	ea43 0306 	orr.w	r3, r3, r6
 8007af2:	4770      	bx	lr
 8007af4:	ea94 0f0c 	teq	r4, ip
 8007af8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8007afc:	bf18      	it	ne
 8007afe:	ea95 0f0c 	teqne	r5, ip
 8007b02:	d00c      	beq.n	8007b1e <__aeabi_dmul+0x206>
 8007b04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8007b08:	bf18      	it	ne
 8007b0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8007b0e:	d1d1      	bne.n	8007ab4 <__aeabi_dmul+0x19c>
 8007b10:	ea81 0103 	eor.w	r1, r1, r3
 8007b14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007b18:	f04f 0000 	mov.w	r0, #0
 8007b1c:	bd70      	pop	{r4, r5, r6, pc}
 8007b1e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8007b22:	bf06      	itte	eq
 8007b24:	4610      	moveq	r0, r2
 8007b26:	4619      	moveq	r1, r3
 8007b28:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8007b2c:	d019      	beq.n	8007b62 <__aeabi_dmul+0x24a>
 8007b2e:	ea94 0f0c 	teq	r4, ip
 8007b32:	d102      	bne.n	8007b3a <__aeabi_dmul+0x222>
 8007b34:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8007b38:	d113      	bne.n	8007b62 <__aeabi_dmul+0x24a>
 8007b3a:	ea95 0f0c 	teq	r5, ip
 8007b3e:	d105      	bne.n	8007b4c <__aeabi_dmul+0x234>
 8007b40:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8007b44:	bf1c      	itt	ne
 8007b46:	4610      	movne	r0, r2
 8007b48:	4619      	movne	r1, r3
 8007b4a:	d10a      	bne.n	8007b62 <__aeabi_dmul+0x24a>
 8007b4c:	ea81 0103 	eor.w	r1, r1, r3
 8007b50:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007b54:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8007b58:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007b5c:	f04f 0000 	mov.w	r0, #0
 8007b60:	bd70      	pop	{r4, r5, r6, pc}
 8007b62:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8007b66:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8007b6a:	bd70      	pop	{r4, r5, r6, pc}

08007b6c <__aeabi_ddiv>:
 8007b6c:	b570      	push	{r4, r5, r6, lr}
 8007b6e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8007b72:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8007b76:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8007b7a:	bf1d      	ittte	ne
 8007b7c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8007b80:	ea94 0f0c 	teqne	r4, ip
 8007b84:	ea95 0f0c 	teqne	r5, ip
 8007b88:	f000 f8a7 	bleq	8007cda <__aeabi_ddiv+0x16e>
 8007b8c:	eba4 0405 	sub.w	r4, r4, r5
 8007b90:	ea81 0e03 	eor.w	lr, r1, r3
 8007b94:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8007b98:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8007b9c:	f000 8088 	beq.w	8007cb0 <__aeabi_ddiv+0x144>
 8007ba0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8007ba4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8007ba8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8007bac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8007bb0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8007bb4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8007bb8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8007bbc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8007bc0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8007bc4:	429d      	cmp	r5, r3
 8007bc6:	bf08      	it	eq
 8007bc8:	4296      	cmpeq	r6, r2
 8007bca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8007bce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8007bd2:	d202      	bcs.n	8007bda <__aeabi_ddiv+0x6e>
 8007bd4:	085b      	lsrs	r3, r3, #1
 8007bd6:	ea4f 0232 	mov.w	r2, r2, rrx
 8007bda:	1ab6      	subs	r6, r6, r2
 8007bdc:	eb65 0503 	sbc.w	r5, r5, r3
 8007be0:	085b      	lsrs	r3, r3, #1
 8007be2:	ea4f 0232 	mov.w	r2, r2, rrx
 8007be6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007bea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8007bee:	ebb6 0e02 	subs.w	lr, r6, r2
 8007bf2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8007bf6:	bf22      	ittt	cs
 8007bf8:	1ab6      	subcs	r6, r6, r2
 8007bfa:	4675      	movcs	r5, lr
 8007bfc:	ea40 000c 	orrcs.w	r0, r0, ip
 8007c00:	085b      	lsrs	r3, r3, #1
 8007c02:	ea4f 0232 	mov.w	r2, r2, rrx
 8007c06:	ebb6 0e02 	subs.w	lr, r6, r2
 8007c0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8007c0e:	bf22      	ittt	cs
 8007c10:	1ab6      	subcs	r6, r6, r2
 8007c12:	4675      	movcs	r5, lr
 8007c14:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8007c18:	085b      	lsrs	r3, r3, #1
 8007c1a:	ea4f 0232 	mov.w	r2, r2, rrx
 8007c1e:	ebb6 0e02 	subs.w	lr, r6, r2
 8007c22:	eb75 0e03 	sbcs.w	lr, r5, r3
 8007c26:	bf22      	ittt	cs
 8007c28:	1ab6      	subcs	r6, r6, r2
 8007c2a:	4675      	movcs	r5, lr
 8007c2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8007c30:	085b      	lsrs	r3, r3, #1
 8007c32:	ea4f 0232 	mov.w	r2, r2, rrx
 8007c36:	ebb6 0e02 	subs.w	lr, r6, r2
 8007c3a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8007c3e:	bf22      	ittt	cs
 8007c40:	1ab6      	subcs	r6, r6, r2
 8007c42:	4675      	movcs	r5, lr
 8007c44:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8007c48:	ea55 0e06 	orrs.w	lr, r5, r6
 8007c4c:	d018      	beq.n	8007c80 <__aeabi_ddiv+0x114>
 8007c4e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8007c52:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8007c56:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8007c5a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8007c5e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8007c62:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8007c66:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8007c6a:	d1c0      	bne.n	8007bee <__aeabi_ddiv+0x82>
 8007c6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007c70:	d10b      	bne.n	8007c8a <__aeabi_ddiv+0x11e>
 8007c72:	ea41 0100 	orr.w	r1, r1, r0
 8007c76:	f04f 0000 	mov.w	r0, #0
 8007c7a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8007c7e:	e7b6      	b.n	8007bee <__aeabi_ddiv+0x82>
 8007c80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007c84:	bf04      	itt	eq
 8007c86:	4301      	orreq	r1, r0
 8007c88:	2000      	moveq	r0, #0
 8007c8a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8007c8e:	bf88      	it	hi
 8007c90:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8007c94:	f63f aeaf 	bhi.w	80079f6 <__aeabi_dmul+0xde>
 8007c98:	ebb5 0c03 	subs.w	ip, r5, r3
 8007c9c:	bf04      	itt	eq
 8007c9e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8007ca2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8007ca6:	f150 0000 	adcs.w	r0, r0, #0
 8007caa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8007cae:	bd70      	pop	{r4, r5, r6, pc}
 8007cb0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8007cb4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8007cb8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8007cbc:	bfc2      	ittt	gt
 8007cbe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8007cc2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8007cc6:	bd70      	popgt	{r4, r5, r6, pc}
 8007cc8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007ccc:	f04f 0e00 	mov.w	lr, #0
 8007cd0:	3c01      	subs	r4, #1
 8007cd2:	e690      	b.n	80079f6 <__aeabi_dmul+0xde>
 8007cd4:	ea45 0e06 	orr.w	lr, r5, r6
 8007cd8:	e68d      	b.n	80079f6 <__aeabi_dmul+0xde>
 8007cda:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8007cde:	ea94 0f0c 	teq	r4, ip
 8007ce2:	bf08      	it	eq
 8007ce4:	ea95 0f0c 	teqeq	r5, ip
 8007ce8:	f43f af3b 	beq.w	8007b62 <__aeabi_dmul+0x24a>
 8007cec:	ea94 0f0c 	teq	r4, ip
 8007cf0:	d10a      	bne.n	8007d08 <__aeabi_ddiv+0x19c>
 8007cf2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8007cf6:	f47f af34 	bne.w	8007b62 <__aeabi_dmul+0x24a>
 8007cfa:	ea95 0f0c 	teq	r5, ip
 8007cfe:	f47f af25 	bne.w	8007b4c <__aeabi_dmul+0x234>
 8007d02:	4610      	mov	r0, r2
 8007d04:	4619      	mov	r1, r3
 8007d06:	e72c      	b.n	8007b62 <__aeabi_dmul+0x24a>
 8007d08:	ea95 0f0c 	teq	r5, ip
 8007d0c:	d106      	bne.n	8007d1c <__aeabi_ddiv+0x1b0>
 8007d0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8007d12:	f43f aefd 	beq.w	8007b10 <__aeabi_dmul+0x1f8>
 8007d16:	4610      	mov	r0, r2
 8007d18:	4619      	mov	r1, r3
 8007d1a:	e722      	b.n	8007b62 <__aeabi_dmul+0x24a>
 8007d1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8007d20:	bf18      	it	ne
 8007d22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8007d26:	f47f aec5 	bne.w	8007ab4 <__aeabi_dmul+0x19c>
 8007d2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8007d2e:	f47f af0d 	bne.w	8007b4c <__aeabi_dmul+0x234>
 8007d32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8007d36:	f47f aeeb 	bne.w	8007b10 <__aeabi_dmul+0x1f8>
 8007d3a:	e712      	b.n	8007b62 <__aeabi_dmul+0x24a>

08007d3c <__aeabi_d2f>:
 8007d3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8007d40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8007d44:	bf24      	itt	cs
 8007d46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8007d4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8007d4e:	d90d      	bls.n	8007d6c <__aeabi_d2f+0x30>
 8007d50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8007d54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8007d58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8007d5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8007d60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8007d64:	bf08      	it	eq
 8007d66:	f020 0001 	biceq.w	r0, r0, #1
 8007d6a:	4770      	bx	lr
 8007d6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8007d70:	d121      	bne.n	8007db6 <__aeabi_d2f+0x7a>
 8007d72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8007d76:	bfbc      	itt	lt
 8007d78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8007d7c:	4770      	bxlt	lr
 8007d7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007d82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8007d86:	f1c2 0218 	rsb	r2, r2, #24
 8007d8a:	f1c2 0c20 	rsb	ip, r2, #32
 8007d8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8007d92:	fa20 f002 	lsr.w	r0, r0, r2
 8007d96:	bf18      	it	ne
 8007d98:	f040 0001 	orrne.w	r0, r0, #1
 8007d9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8007da0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8007da4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8007da8:	ea40 000c 	orr.w	r0, r0, ip
 8007dac:	fa23 f302 	lsr.w	r3, r3, r2
 8007db0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007db4:	e7cc      	b.n	8007d50 <__aeabi_d2f+0x14>
 8007db6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8007dba:	d107      	bne.n	8007dcc <__aeabi_d2f+0x90>
 8007dbc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8007dc0:	bf1e      	ittt	ne
 8007dc2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8007dc6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8007dca:	4770      	bxne	lr
 8007dcc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8007dd0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8007dd4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007dd8:	4770      	bx	lr
 8007dda:	bf00      	nop

08007ddc <__aeabi_frsub>:
 8007ddc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8007de0:	e002      	b.n	8007de8 <__addsf3>
 8007de2:	bf00      	nop

08007de4 <__aeabi_fsub>:
 8007de4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08007de8 <__addsf3>:
 8007de8:	0042      	lsls	r2, r0, #1
 8007dea:	bf1f      	itttt	ne
 8007dec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8007df0:	ea92 0f03 	teqne	r2, r3
 8007df4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8007df8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8007dfc:	d06a      	beq.n	8007ed4 <__addsf3+0xec>
 8007dfe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8007e02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8007e06:	bfc1      	itttt	gt
 8007e08:	18d2      	addgt	r2, r2, r3
 8007e0a:	4041      	eorgt	r1, r0
 8007e0c:	4048      	eorgt	r0, r1
 8007e0e:	4041      	eorgt	r1, r0
 8007e10:	bfb8      	it	lt
 8007e12:	425b      	neglt	r3, r3
 8007e14:	2b19      	cmp	r3, #25
 8007e16:	bf88      	it	hi
 8007e18:	4770      	bxhi	lr
 8007e1a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8007e1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007e22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8007e26:	bf18      	it	ne
 8007e28:	4240      	negne	r0, r0
 8007e2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8007e2e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8007e32:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8007e36:	bf18      	it	ne
 8007e38:	4249      	negne	r1, r1
 8007e3a:	ea92 0f03 	teq	r2, r3
 8007e3e:	d03f      	beq.n	8007ec0 <__addsf3+0xd8>
 8007e40:	f1a2 0201 	sub.w	r2, r2, #1
 8007e44:	fa41 fc03 	asr.w	ip, r1, r3
 8007e48:	eb10 000c 	adds.w	r0, r0, ip
 8007e4c:	f1c3 0320 	rsb	r3, r3, #32
 8007e50:	fa01 f103 	lsl.w	r1, r1, r3
 8007e54:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8007e58:	d502      	bpl.n	8007e60 <__addsf3+0x78>
 8007e5a:	4249      	negs	r1, r1
 8007e5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8007e60:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8007e64:	d313      	bcc.n	8007e8e <__addsf3+0xa6>
 8007e66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8007e6a:	d306      	bcc.n	8007e7a <__addsf3+0x92>
 8007e6c:	0840      	lsrs	r0, r0, #1
 8007e6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8007e72:	f102 0201 	add.w	r2, r2, #1
 8007e76:	2afe      	cmp	r2, #254	; 0xfe
 8007e78:	d251      	bcs.n	8007f1e <__addsf3+0x136>
 8007e7a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8007e7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8007e82:	bf08      	it	eq
 8007e84:	f020 0001 	biceq.w	r0, r0, #1
 8007e88:	ea40 0003 	orr.w	r0, r0, r3
 8007e8c:	4770      	bx	lr
 8007e8e:	0049      	lsls	r1, r1, #1
 8007e90:	eb40 0000 	adc.w	r0, r0, r0
 8007e94:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8007e98:	f1a2 0201 	sub.w	r2, r2, #1
 8007e9c:	d1ed      	bne.n	8007e7a <__addsf3+0x92>
 8007e9e:	fab0 fc80 	clz	ip, r0
 8007ea2:	f1ac 0c08 	sub.w	ip, ip, #8
 8007ea6:	ebb2 020c 	subs.w	r2, r2, ip
 8007eaa:	fa00 f00c 	lsl.w	r0, r0, ip
 8007eae:	bfaa      	itet	ge
 8007eb0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8007eb4:	4252      	neglt	r2, r2
 8007eb6:	4318      	orrge	r0, r3
 8007eb8:	bfbc      	itt	lt
 8007eba:	40d0      	lsrlt	r0, r2
 8007ebc:	4318      	orrlt	r0, r3
 8007ebe:	4770      	bx	lr
 8007ec0:	f092 0f00 	teq	r2, #0
 8007ec4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8007ec8:	bf06      	itte	eq
 8007eca:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8007ece:	3201      	addeq	r2, #1
 8007ed0:	3b01      	subne	r3, #1
 8007ed2:	e7b5      	b.n	8007e40 <__addsf3+0x58>
 8007ed4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8007ed8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8007edc:	bf18      	it	ne
 8007ede:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8007ee2:	d021      	beq.n	8007f28 <__addsf3+0x140>
 8007ee4:	ea92 0f03 	teq	r2, r3
 8007ee8:	d004      	beq.n	8007ef4 <__addsf3+0x10c>
 8007eea:	f092 0f00 	teq	r2, #0
 8007eee:	bf08      	it	eq
 8007ef0:	4608      	moveq	r0, r1
 8007ef2:	4770      	bx	lr
 8007ef4:	ea90 0f01 	teq	r0, r1
 8007ef8:	bf1c      	itt	ne
 8007efa:	2000      	movne	r0, #0
 8007efc:	4770      	bxne	lr
 8007efe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8007f02:	d104      	bne.n	8007f0e <__addsf3+0x126>
 8007f04:	0040      	lsls	r0, r0, #1
 8007f06:	bf28      	it	cs
 8007f08:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8007f0c:	4770      	bx	lr
 8007f0e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8007f12:	bf3c      	itt	cc
 8007f14:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8007f18:	4770      	bxcc	lr
 8007f1a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8007f1e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8007f22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007f26:	4770      	bx	lr
 8007f28:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8007f2c:	bf16      	itet	ne
 8007f2e:	4608      	movne	r0, r1
 8007f30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8007f34:	4601      	movne	r1, r0
 8007f36:	0242      	lsls	r2, r0, #9
 8007f38:	bf06      	itte	eq
 8007f3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8007f3e:	ea90 0f01 	teqeq	r0, r1
 8007f42:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8007f46:	4770      	bx	lr

08007f48 <__aeabi_ui2f>:
 8007f48:	f04f 0300 	mov.w	r3, #0
 8007f4c:	e004      	b.n	8007f58 <__aeabi_i2f+0x8>
 8007f4e:	bf00      	nop

08007f50 <__aeabi_i2f>:
 8007f50:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8007f54:	bf48      	it	mi
 8007f56:	4240      	negmi	r0, r0
 8007f58:	ea5f 0c00 	movs.w	ip, r0
 8007f5c:	bf08      	it	eq
 8007f5e:	4770      	bxeq	lr
 8007f60:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8007f64:	4601      	mov	r1, r0
 8007f66:	f04f 0000 	mov.w	r0, #0
 8007f6a:	e01c      	b.n	8007fa6 <__aeabi_l2f+0x2a>

08007f6c <__aeabi_ul2f>:
 8007f6c:	ea50 0201 	orrs.w	r2, r0, r1
 8007f70:	bf08      	it	eq
 8007f72:	4770      	bxeq	lr
 8007f74:	f04f 0300 	mov.w	r3, #0
 8007f78:	e00a      	b.n	8007f90 <__aeabi_l2f+0x14>
 8007f7a:	bf00      	nop

08007f7c <__aeabi_l2f>:
 8007f7c:	ea50 0201 	orrs.w	r2, r0, r1
 8007f80:	bf08      	it	eq
 8007f82:	4770      	bxeq	lr
 8007f84:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8007f88:	d502      	bpl.n	8007f90 <__aeabi_l2f+0x14>
 8007f8a:	4240      	negs	r0, r0
 8007f8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007f90:	ea5f 0c01 	movs.w	ip, r1
 8007f94:	bf02      	ittt	eq
 8007f96:	4684      	moveq	ip, r0
 8007f98:	4601      	moveq	r1, r0
 8007f9a:	2000      	moveq	r0, #0
 8007f9c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8007fa0:	bf08      	it	eq
 8007fa2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8007fa6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8007faa:	fabc f28c 	clz	r2, ip
 8007fae:	3a08      	subs	r2, #8
 8007fb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8007fb4:	db10      	blt.n	8007fd8 <__aeabi_l2f+0x5c>
 8007fb6:	fa01 fc02 	lsl.w	ip, r1, r2
 8007fba:	4463      	add	r3, ip
 8007fbc:	fa00 fc02 	lsl.w	ip, r0, r2
 8007fc0:	f1c2 0220 	rsb	r2, r2, #32
 8007fc4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8007fc8:	fa20 f202 	lsr.w	r2, r0, r2
 8007fcc:	eb43 0002 	adc.w	r0, r3, r2
 8007fd0:	bf08      	it	eq
 8007fd2:	f020 0001 	biceq.w	r0, r0, #1
 8007fd6:	4770      	bx	lr
 8007fd8:	f102 0220 	add.w	r2, r2, #32
 8007fdc:	fa01 fc02 	lsl.w	ip, r1, r2
 8007fe0:	f1c2 0220 	rsb	r2, r2, #32
 8007fe4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8007fe8:	fa21 f202 	lsr.w	r2, r1, r2
 8007fec:	eb43 0002 	adc.w	r0, r3, r2
 8007ff0:	bf08      	it	eq
 8007ff2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8007ff6:	4770      	bx	lr

08007ff8 <__aeabi_uldivmod>:
 8007ff8:	b953      	cbnz	r3, 8008010 <__aeabi_uldivmod+0x18>
 8007ffa:	b94a      	cbnz	r2, 8008010 <__aeabi_uldivmod+0x18>
 8007ffc:	2900      	cmp	r1, #0
 8007ffe:	bf08      	it	eq
 8008000:	2800      	cmpeq	r0, #0
 8008002:	bf1c      	itt	ne
 8008004:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8008008:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800800c:	f000 b972 	b.w	80082f4 <__aeabi_idiv0>
 8008010:	f1ad 0c08 	sub.w	ip, sp, #8
 8008014:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008018:	f000 f806 	bl	8008028 <__udivmoddi4>
 800801c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008020:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008024:	b004      	add	sp, #16
 8008026:	4770      	bx	lr

08008028 <__udivmoddi4>:
 8008028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800802c:	9e08      	ldr	r6, [sp, #32]
 800802e:	4604      	mov	r4, r0
 8008030:	4688      	mov	r8, r1
 8008032:	2b00      	cmp	r3, #0
 8008034:	d14b      	bne.n	80080ce <__udivmoddi4+0xa6>
 8008036:	428a      	cmp	r2, r1
 8008038:	4615      	mov	r5, r2
 800803a:	d967      	bls.n	800810c <__udivmoddi4+0xe4>
 800803c:	fab2 f282 	clz	r2, r2
 8008040:	b14a      	cbz	r2, 8008056 <__udivmoddi4+0x2e>
 8008042:	f1c2 0720 	rsb	r7, r2, #32
 8008046:	fa01 f302 	lsl.w	r3, r1, r2
 800804a:	fa20 f707 	lsr.w	r7, r0, r7
 800804e:	4095      	lsls	r5, r2
 8008050:	ea47 0803 	orr.w	r8, r7, r3
 8008054:	4094      	lsls	r4, r2
 8008056:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800805a:	0c23      	lsrs	r3, r4, #16
 800805c:	fbb8 f7fe 	udiv	r7, r8, lr
 8008060:	fa1f fc85 	uxth.w	ip, r5
 8008064:	fb0e 8817 	mls	r8, lr, r7, r8
 8008068:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800806c:	fb07 f10c 	mul.w	r1, r7, ip
 8008070:	4299      	cmp	r1, r3
 8008072:	d909      	bls.n	8008088 <__udivmoddi4+0x60>
 8008074:	18eb      	adds	r3, r5, r3
 8008076:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800807a:	f080 811b 	bcs.w	80082b4 <__udivmoddi4+0x28c>
 800807e:	4299      	cmp	r1, r3
 8008080:	f240 8118 	bls.w	80082b4 <__udivmoddi4+0x28c>
 8008084:	3f02      	subs	r7, #2
 8008086:	442b      	add	r3, r5
 8008088:	1a5b      	subs	r3, r3, r1
 800808a:	b2a4      	uxth	r4, r4
 800808c:	fbb3 f0fe 	udiv	r0, r3, lr
 8008090:	fb0e 3310 	mls	r3, lr, r0, r3
 8008094:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008098:	fb00 fc0c 	mul.w	ip, r0, ip
 800809c:	45a4      	cmp	ip, r4
 800809e:	d909      	bls.n	80080b4 <__udivmoddi4+0x8c>
 80080a0:	192c      	adds	r4, r5, r4
 80080a2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80080a6:	f080 8107 	bcs.w	80082b8 <__udivmoddi4+0x290>
 80080aa:	45a4      	cmp	ip, r4
 80080ac:	f240 8104 	bls.w	80082b8 <__udivmoddi4+0x290>
 80080b0:	3802      	subs	r0, #2
 80080b2:	442c      	add	r4, r5
 80080b4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80080b8:	eba4 040c 	sub.w	r4, r4, ip
 80080bc:	2700      	movs	r7, #0
 80080be:	b11e      	cbz	r6, 80080c8 <__udivmoddi4+0xa0>
 80080c0:	40d4      	lsrs	r4, r2
 80080c2:	2300      	movs	r3, #0
 80080c4:	e9c6 4300 	strd	r4, r3, [r6]
 80080c8:	4639      	mov	r1, r7
 80080ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080ce:	428b      	cmp	r3, r1
 80080d0:	d909      	bls.n	80080e6 <__udivmoddi4+0xbe>
 80080d2:	2e00      	cmp	r6, #0
 80080d4:	f000 80eb 	beq.w	80082ae <__udivmoddi4+0x286>
 80080d8:	2700      	movs	r7, #0
 80080da:	e9c6 0100 	strd	r0, r1, [r6]
 80080de:	4638      	mov	r0, r7
 80080e0:	4639      	mov	r1, r7
 80080e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080e6:	fab3 f783 	clz	r7, r3
 80080ea:	2f00      	cmp	r7, #0
 80080ec:	d147      	bne.n	800817e <__udivmoddi4+0x156>
 80080ee:	428b      	cmp	r3, r1
 80080f0:	d302      	bcc.n	80080f8 <__udivmoddi4+0xd0>
 80080f2:	4282      	cmp	r2, r0
 80080f4:	f200 80fa 	bhi.w	80082ec <__udivmoddi4+0x2c4>
 80080f8:	1a84      	subs	r4, r0, r2
 80080fa:	eb61 0303 	sbc.w	r3, r1, r3
 80080fe:	2001      	movs	r0, #1
 8008100:	4698      	mov	r8, r3
 8008102:	2e00      	cmp	r6, #0
 8008104:	d0e0      	beq.n	80080c8 <__udivmoddi4+0xa0>
 8008106:	e9c6 4800 	strd	r4, r8, [r6]
 800810a:	e7dd      	b.n	80080c8 <__udivmoddi4+0xa0>
 800810c:	b902      	cbnz	r2, 8008110 <__udivmoddi4+0xe8>
 800810e:	deff      	udf	#255	; 0xff
 8008110:	fab2 f282 	clz	r2, r2
 8008114:	2a00      	cmp	r2, #0
 8008116:	f040 808f 	bne.w	8008238 <__udivmoddi4+0x210>
 800811a:	1b49      	subs	r1, r1, r5
 800811c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008120:	fa1f f885 	uxth.w	r8, r5
 8008124:	2701      	movs	r7, #1
 8008126:	fbb1 fcfe 	udiv	ip, r1, lr
 800812a:	0c23      	lsrs	r3, r4, #16
 800812c:	fb0e 111c 	mls	r1, lr, ip, r1
 8008130:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008134:	fb08 f10c 	mul.w	r1, r8, ip
 8008138:	4299      	cmp	r1, r3
 800813a:	d907      	bls.n	800814c <__udivmoddi4+0x124>
 800813c:	18eb      	adds	r3, r5, r3
 800813e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8008142:	d202      	bcs.n	800814a <__udivmoddi4+0x122>
 8008144:	4299      	cmp	r1, r3
 8008146:	f200 80cd 	bhi.w	80082e4 <__udivmoddi4+0x2bc>
 800814a:	4684      	mov	ip, r0
 800814c:	1a59      	subs	r1, r3, r1
 800814e:	b2a3      	uxth	r3, r4
 8008150:	fbb1 f0fe 	udiv	r0, r1, lr
 8008154:	fb0e 1410 	mls	r4, lr, r0, r1
 8008158:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800815c:	fb08 f800 	mul.w	r8, r8, r0
 8008160:	45a0      	cmp	r8, r4
 8008162:	d907      	bls.n	8008174 <__udivmoddi4+0x14c>
 8008164:	192c      	adds	r4, r5, r4
 8008166:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800816a:	d202      	bcs.n	8008172 <__udivmoddi4+0x14a>
 800816c:	45a0      	cmp	r8, r4
 800816e:	f200 80b6 	bhi.w	80082de <__udivmoddi4+0x2b6>
 8008172:	4618      	mov	r0, r3
 8008174:	eba4 0408 	sub.w	r4, r4, r8
 8008178:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800817c:	e79f      	b.n	80080be <__udivmoddi4+0x96>
 800817e:	f1c7 0c20 	rsb	ip, r7, #32
 8008182:	40bb      	lsls	r3, r7
 8008184:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008188:	ea4e 0e03 	orr.w	lr, lr, r3
 800818c:	fa01 f407 	lsl.w	r4, r1, r7
 8008190:	fa20 f50c 	lsr.w	r5, r0, ip
 8008194:	fa21 f30c 	lsr.w	r3, r1, ip
 8008198:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800819c:	4325      	orrs	r5, r4
 800819e:	fbb3 f9f8 	udiv	r9, r3, r8
 80081a2:	0c2c      	lsrs	r4, r5, #16
 80081a4:	fb08 3319 	mls	r3, r8, r9, r3
 80081a8:	fa1f fa8e 	uxth.w	sl, lr
 80081ac:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80081b0:	fb09 f40a 	mul.w	r4, r9, sl
 80081b4:	429c      	cmp	r4, r3
 80081b6:	fa02 f207 	lsl.w	r2, r2, r7
 80081ba:	fa00 f107 	lsl.w	r1, r0, r7
 80081be:	d90b      	bls.n	80081d8 <__udivmoddi4+0x1b0>
 80081c0:	eb1e 0303 	adds.w	r3, lr, r3
 80081c4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80081c8:	f080 8087 	bcs.w	80082da <__udivmoddi4+0x2b2>
 80081cc:	429c      	cmp	r4, r3
 80081ce:	f240 8084 	bls.w	80082da <__udivmoddi4+0x2b2>
 80081d2:	f1a9 0902 	sub.w	r9, r9, #2
 80081d6:	4473      	add	r3, lr
 80081d8:	1b1b      	subs	r3, r3, r4
 80081da:	b2ad      	uxth	r5, r5
 80081dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80081e0:	fb08 3310 	mls	r3, r8, r0, r3
 80081e4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80081e8:	fb00 fa0a 	mul.w	sl, r0, sl
 80081ec:	45a2      	cmp	sl, r4
 80081ee:	d908      	bls.n	8008202 <__udivmoddi4+0x1da>
 80081f0:	eb1e 0404 	adds.w	r4, lr, r4
 80081f4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80081f8:	d26b      	bcs.n	80082d2 <__udivmoddi4+0x2aa>
 80081fa:	45a2      	cmp	sl, r4
 80081fc:	d969      	bls.n	80082d2 <__udivmoddi4+0x2aa>
 80081fe:	3802      	subs	r0, #2
 8008200:	4474      	add	r4, lr
 8008202:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008206:	fba0 8902 	umull	r8, r9, r0, r2
 800820a:	eba4 040a 	sub.w	r4, r4, sl
 800820e:	454c      	cmp	r4, r9
 8008210:	46c2      	mov	sl, r8
 8008212:	464b      	mov	r3, r9
 8008214:	d354      	bcc.n	80082c0 <__udivmoddi4+0x298>
 8008216:	d051      	beq.n	80082bc <__udivmoddi4+0x294>
 8008218:	2e00      	cmp	r6, #0
 800821a:	d069      	beq.n	80082f0 <__udivmoddi4+0x2c8>
 800821c:	ebb1 050a 	subs.w	r5, r1, sl
 8008220:	eb64 0403 	sbc.w	r4, r4, r3
 8008224:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008228:	40fd      	lsrs	r5, r7
 800822a:	40fc      	lsrs	r4, r7
 800822c:	ea4c 0505 	orr.w	r5, ip, r5
 8008230:	e9c6 5400 	strd	r5, r4, [r6]
 8008234:	2700      	movs	r7, #0
 8008236:	e747      	b.n	80080c8 <__udivmoddi4+0xa0>
 8008238:	f1c2 0320 	rsb	r3, r2, #32
 800823c:	fa20 f703 	lsr.w	r7, r0, r3
 8008240:	4095      	lsls	r5, r2
 8008242:	fa01 f002 	lsl.w	r0, r1, r2
 8008246:	fa21 f303 	lsr.w	r3, r1, r3
 800824a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800824e:	4338      	orrs	r0, r7
 8008250:	0c01      	lsrs	r1, r0, #16
 8008252:	fbb3 f7fe 	udiv	r7, r3, lr
 8008256:	fa1f f885 	uxth.w	r8, r5
 800825a:	fb0e 3317 	mls	r3, lr, r7, r3
 800825e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008262:	fb07 f308 	mul.w	r3, r7, r8
 8008266:	428b      	cmp	r3, r1
 8008268:	fa04 f402 	lsl.w	r4, r4, r2
 800826c:	d907      	bls.n	800827e <__udivmoddi4+0x256>
 800826e:	1869      	adds	r1, r5, r1
 8008270:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8008274:	d22f      	bcs.n	80082d6 <__udivmoddi4+0x2ae>
 8008276:	428b      	cmp	r3, r1
 8008278:	d92d      	bls.n	80082d6 <__udivmoddi4+0x2ae>
 800827a:	3f02      	subs	r7, #2
 800827c:	4429      	add	r1, r5
 800827e:	1acb      	subs	r3, r1, r3
 8008280:	b281      	uxth	r1, r0
 8008282:	fbb3 f0fe 	udiv	r0, r3, lr
 8008286:	fb0e 3310 	mls	r3, lr, r0, r3
 800828a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800828e:	fb00 f308 	mul.w	r3, r0, r8
 8008292:	428b      	cmp	r3, r1
 8008294:	d907      	bls.n	80082a6 <__udivmoddi4+0x27e>
 8008296:	1869      	adds	r1, r5, r1
 8008298:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800829c:	d217      	bcs.n	80082ce <__udivmoddi4+0x2a6>
 800829e:	428b      	cmp	r3, r1
 80082a0:	d915      	bls.n	80082ce <__udivmoddi4+0x2a6>
 80082a2:	3802      	subs	r0, #2
 80082a4:	4429      	add	r1, r5
 80082a6:	1ac9      	subs	r1, r1, r3
 80082a8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80082ac:	e73b      	b.n	8008126 <__udivmoddi4+0xfe>
 80082ae:	4637      	mov	r7, r6
 80082b0:	4630      	mov	r0, r6
 80082b2:	e709      	b.n	80080c8 <__udivmoddi4+0xa0>
 80082b4:	4607      	mov	r7, r0
 80082b6:	e6e7      	b.n	8008088 <__udivmoddi4+0x60>
 80082b8:	4618      	mov	r0, r3
 80082ba:	e6fb      	b.n	80080b4 <__udivmoddi4+0x8c>
 80082bc:	4541      	cmp	r1, r8
 80082be:	d2ab      	bcs.n	8008218 <__udivmoddi4+0x1f0>
 80082c0:	ebb8 0a02 	subs.w	sl, r8, r2
 80082c4:	eb69 020e 	sbc.w	r2, r9, lr
 80082c8:	3801      	subs	r0, #1
 80082ca:	4613      	mov	r3, r2
 80082cc:	e7a4      	b.n	8008218 <__udivmoddi4+0x1f0>
 80082ce:	4660      	mov	r0, ip
 80082d0:	e7e9      	b.n	80082a6 <__udivmoddi4+0x27e>
 80082d2:	4618      	mov	r0, r3
 80082d4:	e795      	b.n	8008202 <__udivmoddi4+0x1da>
 80082d6:	4667      	mov	r7, ip
 80082d8:	e7d1      	b.n	800827e <__udivmoddi4+0x256>
 80082da:	4681      	mov	r9, r0
 80082dc:	e77c      	b.n	80081d8 <__udivmoddi4+0x1b0>
 80082de:	3802      	subs	r0, #2
 80082e0:	442c      	add	r4, r5
 80082e2:	e747      	b.n	8008174 <__udivmoddi4+0x14c>
 80082e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80082e8:	442b      	add	r3, r5
 80082ea:	e72f      	b.n	800814c <__udivmoddi4+0x124>
 80082ec:	4638      	mov	r0, r7
 80082ee:	e708      	b.n	8008102 <__udivmoddi4+0xda>
 80082f0:	4637      	mov	r7, r6
 80082f2:	e6e9      	b.n	80080c8 <__udivmoddi4+0xa0>

080082f4 <__aeabi_idiv0>:
 80082f4:	4770      	bx	lr
 80082f6:	bf00      	nop

080082f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80082fc:	f000 fa87 	bl	800880e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008300:	f000 f809 	bl	8008316 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008304:	f000 f8d0 	bl	80084a8 <MX_GPIO_Init>
  MX_CRC_Init();
 8008308:	f000 f87c 	bl	8008404 <MX_CRC_Init>
  MX_X_CUBE_AI_Init();
 800830c:	f005 fb10 	bl	800d930 <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_X_CUBE_AI_Process();
 8008310:	f005 fb16 	bl	800d940 <MX_X_CUBE_AI_Process>
 8008314:	e7fc      	b.n	8008310 <main+0x18>

08008316 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008316:	b580      	push	{r7, lr}
 8008318:	b0b8      	sub	sp, #224	; 0xe0
 800831a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800831c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008320:	2244      	movs	r2, #68	; 0x44
 8008322:	2100      	movs	r1, #0
 8008324:	4618      	mov	r0, r3
 8008326:	f008 fd95 	bl	8010e54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800832a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800832e:	2200      	movs	r2, #0
 8008330:	601a      	str	r2, [r3, #0]
 8008332:	605a      	str	r2, [r3, #4]
 8008334:	609a      	str	r2, [r3, #8]
 8008336:	60da      	str	r2, [r3, #12]
 8008338:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800833a:	463b      	mov	r3, r7
 800833c:	2288      	movs	r2, #136	; 0x88
 800833e:	2100      	movs	r1, #0
 8008340:	4618      	mov	r0, r3
 8008342:	f008 fd87 	bl	8010e54 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8008346:	2310      	movs	r3, #16
 8008348:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800834c:	2301      	movs	r3, #1
 800834e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8008352:	2300      	movs	r3, #0
 8008354:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8008358:	2360      	movs	r3, #96	; 0x60
 800835a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800835e:	2302      	movs	r3, #2
 8008360:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8008364:	2301      	movs	r3, #1
 8008366:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800836a:	2301      	movs	r3, #1
 800836c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8008370:	2328      	movs	r3, #40	; 0x28
 8008372:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8008376:	2307      	movs	r3, #7
 8008378:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800837c:	2302      	movs	r3, #2
 800837e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8008382:	2302      	movs	r3, #2
 8008384:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008388:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800838c:	4618      	mov	r0, r3
 800838e:	f000 fed3 	bl	8009138 <HAL_RCC_OscConfig>
 8008392:	4603      	mov	r3, r0
 8008394:	2b00      	cmp	r3, #0
 8008396:	d001      	beq.n	800839c <SystemClock_Config+0x86>
  {
    Error_Handler();
 8008398:	f000 f89e 	bl	80084d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800839c:	230f      	movs	r3, #15
 800839e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80083a2:	2303      	movs	r3, #3
 80083a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80083a8:	2300      	movs	r3, #0
 80083aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80083ae:	2300      	movs	r3, #0
 80083b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80083b4:	2300      	movs	r3, #0
 80083b6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80083ba:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80083be:	2104      	movs	r1, #4
 80083c0:	4618      	mov	r0, r3
 80083c2:	f001 fa9f 	bl	8009904 <HAL_RCC_ClockConfig>
 80083c6:	4603      	mov	r3, r0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d001      	beq.n	80083d0 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80083cc:	f000 f884 	bl	80084d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80083d0:	2301      	movs	r3, #1
 80083d2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80083d4:	2300      	movs	r3, #0
 80083d6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80083d8:	463b      	mov	r3, r7
 80083da:	4618      	mov	r0, r3
 80083dc:	f001 fc96 	bl	8009d0c <HAL_RCCEx_PeriphCLKConfig>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d001      	beq.n	80083ea <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80083e6:	f000 f877 	bl	80084d8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80083ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80083ee:	f000 fe4d 	bl	800908c <HAL_PWREx_ControlVoltageScaling>
 80083f2:	4603      	mov	r3, r0
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d001      	beq.n	80083fc <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80083f8:	f000 f86e 	bl	80084d8 <Error_Handler>
  }
}
 80083fc:	bf00      	nop
 80083fe:	37e0      	adds	r7, #224	; 0xe0
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8008408:	4b0d      	ldr	r3, [pc, #52]	; (8008440 <MX_CRC_Init+0x3c>)
 800840a:	4a0e      	ldr	r2, [pc, #56]	; (8008444 <MX_CRC_Init+0x40>)
 800840c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800840e:	4b0c      	ldr	r3, [pc, #48]	; (8008440 <MX_CRC_Init+0x3c>)
 8008410:	2200      	movs	r2, #0
 8008412:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8008414:	4b0a      	ldr	r3, [pc, #40]	; (8008440 <MX_CRC_Init+0x3c>)
 8008416:	2200      	movs	r2, #0
 8008418:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800841a:	4b09      	ldr	r3, [pc, #36]	; (8008440 <MX_CRC_Init+0x3c>)
 800841c:	2200      	movs	r2, #0
 800841e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8008420:	4b07      	ldr	r3, [pc, #28]	; (8008440 <MX_CRC_Init+0x3c>)
 8008422:	2200      	movs	r2, #0
 8008424:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8008426:	4b06      	ldr	r3, [pc, #24]	; (8008440 <MX_CRC_Init+0x3c>)
 8008428:	2201      	movs	r2, #1
 800842a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800842c:	4804      	ldr	r0, [pc, #16]	; (8008440 <MX_CRC_Init+0x3c>)
 800842e:	f000 fb8d 	bl	8008b4c <HAL_CRC_Init>
 8008432:	4603      	mov	r3, r0
 8008434:	2b00      	cmp	r3, #0
 8008436:	d001      	beq.n	800843c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8008438:	f000 f84e 	bl	80084d8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800843c:	bf00      	nop
 800843e:	bd80      	pop	{r7, pc}
 8008440:	200121b4 	.word	0x200121b4
 8008444:	40023000 	.word	0x40023000

08008448 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800844c:	4b14      	ldr	r3, [pc, #80]	; (80084a0 <MX_USART1_UART_Init+0x58>)
 800844e:	4a15      	ldr	r2, [pc, #84]	; (80084a4 <MX_USART1_UART_Init+0x5c>)
 8008450:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008452:	4b13      	ldr	r3, [pc, #76]	; (80084a0 <MX_USART1_UART_Init+0x58>)
 8008454:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008458:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800845a:	4b11      	ldr	r3, [pc, #68]	; (80084a0 <MX_USART1_UART_Init+0x58>)
 800845c:	2200      	movs	r2, #0
 800845e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008460:	4b0f      	ldr	r3, [pc, #60]	; (80084a0 <MX_USART1_UART_Init+0x58>)
 8008462:	2200      	movs	r2, #0
 8008464:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008466:	4b0e      	ldr	r3, [pc, #56]	; (80084a0 <MX_USART1_UART_Init+0x58>)
 8008468:	2200      	movs	r2, #0
 800846a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800846c:	4b0c      	ldr	r3, [pc, #48]	; (80084a0 <MX_USART1_UART_Init+0x58>)
 800846e:	220c      	movs	r2, #12
 8008470:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008472:	4b0b      	ldr	r3, [pc, #44]	; (80084a0 <MX_USART1_UART_Init+0x58>)
 8008474:	2200      	movs	r2, #0
 8008476:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008478:	4b09      	ldr	r3, [pc, #36]	; (80084a0 <MX_USART1_UART_Init+0x58>)
 800847a:	2200      	movs	r2, #0
 800847c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800847e:	4b08      	ldr	r3, [pc, #32]	; (80084a0 <MX_USART1_UART_Init+0x58>)
 8008480:	2200      	movs	r2, #0
 8008482:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008484:	4b06      	ldr	r3, [pc, #24]	; (80084a0 <MX_USART1_UART_Init+0x58>)
 8008486:	2200      	movs	r2, #0
 8008488:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800848a:	4805      	ldr	r0, [pc, #20]	; (80084a0 <MX_USART1_UART_Init+0x58>)
 800848c:	f002 f8ee 	bl	800a66c <HAL_UART_Init>
 8008490:	4603      	mov	r3, r0
 8008492:	2b00      	cmp	r3, #0
 8008494:	d001      	beq.n	800849a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8008496:	f000 f81f 	bl	80084d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800849a:	bf00      	nop
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop
 80084a0:	200121d8 	.word	0x200121d8
 80084a4:	40013800 	.word	0x40013800

080084a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b083      	sub	sp, #12
 80084ac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80084ae:	4b09      	ldr	r3, [pc, #36]	; (80084d4 <MX_GPIO_Init+0x2c>)
 80084b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084b2:	4a08      	ldr	r2, [pc, #32]	; (80084d4 <MX_GPIO_Init+0x2c>)
 80084b4:	f043 0302 	orr.w	r3, r3, #2
 80084b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80084ba:	4b06      	ldr	r3, [pc, #24]	; (80084d4 <MX_GPIO_Init+0x2c>)
 80084bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084be:	f003 0302 	and.w	r3, r3, #2
 80084c2:	607b      	str	r3, [r7, #4]
 80084c4:	687b      	ldr	r3, [r7, #4]

}
 80084c6:	bf00      	nop
 80084c8:	370c      	adds	r7, #12
 80084ca:	46bd      	mov	sp, r7
 80084cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d0:	4770      	bx	lr
 80084d2:	bf00      	nop
 80084d4:	40021000 	.word	0x40021000

080084d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80084d8:	b480      	push	{r7}
 80084da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80084dc:	bf00      	nop
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr
	...

080084e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b083      	sub	sp, #12
 80084ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80084ee:	4b0f      	ldr	r3, [pc, #60]	; (800852c <HAL_MspInit+0x44>)
 80084f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084f2:	4a0e      	ldr	r2, [pc, #56]	; (800852c <HAL_MspInit+0x44>)
 80084f4:	f043 0301 	orr.w	r3, r3, #1
 80084f8:	6613      	str	r3, [r2, #96]	; 0x60
 80084fa:	4b0c      	ldr	r3, [pc, #48]	; (800852c <HAL_MspInit+0x44>)
 80084fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084fe:	f003 0301 	and.w	r3, r3, #1
 8008502:	607b      	str	r3, [r7, #4]
 8008504:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008506:	4b09      	ldr	r3, [pc, #36]	; (800852c <HAL_MspInit+0x44>)
 8008508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800850a:	4a08      	ldr	r2, [pc, #32]	; (800852c <HAL_MspInit+0x44>)
 800850c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008510:	6593      	str	r3, [r2, #88]	; 0x58
 8008512:	4b06      	ldr	r3, [pc, #24]	; (800852c <HAL_MspInit+0x44>)
 8008514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800851a:	603b      	str	r3, [r7, #0]
 800851c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800851e:	bf00      	nop
 8008520:	370c      	adds	r7, #12
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr
 800852a:	bf00      	nop
 800852c:	40021000 	.word	0x40021000

08008530 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8008530:	b480      	push	{r7}
 8008532:	b085      	sub	sp, #20
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a0a      	ldr	r2, [pc, #40]	; (8008568 <HAL_CRC_MspInit+0x38>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d10b      	bne.n	800855a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8008542:	4b0a      	ldr	r3, [pc, #40]	; (800856c <HAL_CRC_MspInit+0x3c>)
 8008544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008546:	4a09      	ldr	r2, [pc, #36]	; (800856c <HAL_CRC_MspInit+0x3c>)
 8008548:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800854c:	6493      	str	r3, [r2, #72]	; 0x48
 800854e:	4b07      	ldr	r3, [pc, #28]	; (800856c <HAL_CRC_MspInit+0x3c>)
 8008550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008552:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008556:	60fb      	str	r3, [r7, #12]
 8008558:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800855a:	bf00      	nop
 800855c:	3714      	adds	r7, #20
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr
 8008566:	bf00      	nop
 8008568:	40023000 	.word	0x40023000
 800856c:	40021000 	.word	0x40021000

08008570 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b08a      	sub	sp, #40	; 0x28
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008578:	f107 0314 	add.w	r3, r7, #20
 800857c:	2200      	movs	r2, #0
 800857e:	601a      	str	r2, [r3, #0]
 8008580:	605a      	str	r2, [r3, #4]
 8008582:	609a      	str	r2, [r3, #8]
 8008584:	60da      	str	r2, [r3, #12]
 8008586:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a17      	ldr	r2, [pc, #92]	; (80085ec <HAL_UART_MspInit+0x7c>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d127      	bne.n	80085e2 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008592:	4b17      	ldr	r3, [pc, #92]	; (80085f0 <HAL_UART_MspInit+0x80>)
 8008594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008596:	4a16      	ldr	r2, [pc, #88]	; (80085f0 <HAL_UART_MspInit+0x80>)
 8008598:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800859c:	6613      	str	r3, [r2, #96]	; 0x60
 800859e:	4b14      	ldr	r3, [pc, #80]	; (80085f0 <HAL_UART_MspInit+0x80>)
 80085a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085a6:	613b      	str	r3, [r7, #16]
 80085a8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80085aa:	4b11      	ldr	r3, [pc, #68]	; (80085f0 <HAL_UART_MspInit+0x80>)
 80085ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085ae:	4a10      	ldr	r2, [pc, #64]	; (80085f0 <HAL_UART_MspInit+0x80>)
 80085b0:	f043 0302 	orr.w	r3, r3, #2
 80085b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80085b6:	4b0e      	ldr	r3, [pc, #56]	; (80085f0 <HAL_UART_MspInit+0x80>)
 80085b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085ba:	f003 0302 	and.w	r3, r3, #2
 80085be:	60fb      	str	r3, [r7, #12]
 80085c0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80085c2:	23c0      	movs	r3, #192	; 0xc0
 80085c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085c6:	2302      	movs	r3, #2
 80085c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085ca:	2300      	movs	r3, #0
 80085cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085ce:	2303      	movs	r3, #3
 80085d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80085d2:	2307      	movs	r3, #7
 80085d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80085d6:	f107 0314 	add.w	r3, r7, #20
 80085da:	4619      	mov	r1, r3
 80085dc:	4805      	ldr	r0, [pc, #20]	; (80085f4 <HAL_UART_MspInit+0x84>)
 80085de:	f000 fb9f 	bl	8008d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80085e2:	bf00      	nop
 80085e4:	3728      	adds	r7, #40	; 0x28
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
 80085ea:	bf00      	nop
 80085ec:	40013800 	.word	0x40013800
 80085f0:	40021000 	.word	0x40021000
 80085f4:	48000400 	.word	0x48000400

080085f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80085f8:	b480      	push	{r7}
 80085fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80085fc:	bf00      	nop
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr

08008606 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008606:	b480      	push	{r7}
 8008608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800860a:	e7fe      	b.n	800860a <HardFault_Handler+0x4>

0800860c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800860c:	b480      	push	{r7}
 800860e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008610:	e7fe      	b.n	8008610 <MemManage_Handler+0x4>

08008612 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008612:	b480      	push	{r7}
 8008614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008616:	e7fe      	b.n	8008616 <BusFault_Handler+0x4>

08008618 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008618:	b480      	push	{r7}
 800861a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800861c:	e7fe      	b.n	800861c <UsageFault_Handler+0x4>

0800861e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800861e:	b480      	push	{r7}
 8008620:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008622:	bf00      	nop
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800862c:	b480      	push	{r7}
 800862e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008630:	bf00      	nop
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr

0800863a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800863a:	b480      	push	{r7}
 800863c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800863e:	bf00      	nop
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr

08008648 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800864c:	f000 f932 	bl	80088b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008650:	bf00      	nop
 8008652:	bd80      	pop	{r7, pc}

08008654 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b086      	sub	sp, #24
 8008658:	af00      	add	r7, sp, #0
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	60b9      	str	r1, [r7, #8]
 800865e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008660:	2300      	movs	r3, #0
 8008662:	617b      	str	r3, [r7, #20]
 8008664:	e00a      	b.n	800867c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8008666:	f3af 8000 	nop.w
 800866a:	4601      	mov	r1, r0
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	1c5a      	adds	r2, r3, #1
 8008670:	60ba      	str	r2, [r7, #8]
 8008672:	b2ca      	uxtb	r2, r1
 8008674:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	3301      	adds	r3, #1
 800867a:	617b      	str	r3, [r7, #20]
 800867c:	697a      	ldr	r2, [r7, #20]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	429a      	cmp	r2, r3
 8008682:	dbf0      	blt.n	8008666 <_read+0x12>
	}

return len;
 8008684:	687b      	ldr	r3, [r7, #4]
}
 8008686:	4618      	mov	r0, r3
 8008688:	3718      	adds	r7, #24
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}

0800868e <_close>:
	}
	return len;
}

int _close(int file)
{
 800868e:	b480      	push	{r7}
 8008690:	b083      	sub	sp, #12
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
	return -1;
 8008696:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800869a:	4618      	mov	r0, r3
 800869c:	370c      	adds	r7, #12
 800869e:	46bd      	mov	sp, r7
 80086a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a4:	4770      	bx	lr

080086a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80086a6:	b480      	push	{r7}
 80086a8:	b083      	sub	sp, #12
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	6078      	str	r0, [r7, #4]
 80086ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80086b6:	605a      	str	r2, [r3, #4]
	return 0;
 80086b8:	2300      	movs	r3, #0
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	370c      	adds	r7, #12
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr

080086c6 <_isatty>:

int _isatty(int file)
{
 80086c6:	b480      	push	{r7}
 80086c8:	b083      	sub	sp, #12
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
	return 1;
 80086ce:	2301      	movs	r3, #1
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	370c      	adds	r7, #12
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr

080086dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80086dc:	b480      	push	{r7}
 80086de:	b085      	sub	sp, #20
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	60f8      	str	r0, [r7, #12]
 80086e4:	60b9      	str	r1, [r7, #8]
 80086e6:	607a      	str	r2, [r7, #4]
	return 0;
 80086e8:	2300      	movs	r3, #0
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3714      	adds	r7, #20
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr
	...

080086f8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008700:	4b11      	ldr	r3, [pc, #68]	; (8008748 <_sbrk+0x50>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d102      	bne.n	800870e <_sbrk+0x16>
		heap_end = &end;
 8008708:	4b0f      	ldr	r3, [pc, #60]	; (8008748 <_sbrk+0x50>)
 800870a:	4a10      	ldr	r2, [pc, #64]	; (800874c <_sbrk+0x54>)
 800870c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800870e:	4b0e      	ldr	r3, [pc, #56]	; (8008748 <_sbrk+0x50>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008714:	4b0c      	ldr	r3, [pc, #48]	; (8008748 <_sbrk+0x50>)
 8008716:	681a      	ldr	r2, [r3, #0]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	4413      	add	r3, r2
 800871c:	466a      	mov	r2, sp
 800871e:	4293      	cmp	r3, r2
 8008720:	d907      	bls.n	8008732 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8008722:	f008 fb43 	bl	8010dac <__errno>
 8008726:	4602      	mov	r2, r0
 8008728:	230c      	movs	r3, #12
 800872a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800872c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008730:	e006      	b.n	8008740 <_sbrk+0x48>
	}

	heap_end += incr;
 8008732:	4b05      	ldr	r3, [pc, #20]	; (8008748 <_sbrk+0x50>)
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	4413      	add	r3, r2
 800873a:	4a03      	ldr	r2, [pc, #12]	; (8008748 <_sbrk+0x50>)
 800873c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800873e:	68fb      	ldr	r3, [r7, #12]
}
 8008740:	4618      	mov	r0, r3
 8008742:	3710      	adds	r7, #16
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}
 8008748:	20000a80 	.word	0x20000a80
 800874c:	20014278 	.word	0x20014278

08008750 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8008750:	b480      	push	{r7}
 8008752:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008754:	4b17      	ldr	r3, [pc, #92]	; (80087b4 <SystemInit+0x64>)
 8008756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800875a:	4a16      	ldr	r2, [pc, #88]	; (80087b4 <SystemInit+0x64>)
 800875c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008760:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8008764:	4b14      	ldr	r3, [pc, #80]	; (80087b8 <SystemInit+0x68>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a13      	ldr	r2, [pc, #76]	; (80087b8 <SystemInit+0x68>)
 800876a:	f043 0301 	orr.w	r3, r3, #1
 800876e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8008770:	4b11      	ldr	r3, [pc, #68]	; (80087b8 <SystemInit+0x68>)
 8008772:	2200      	movs	r2, #0
 8008774:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8008776:	4b10      	ldr	r3, [pc, #64]	; (80087b8 <SystemInit+0x68>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a0f      	ldr	r2, [pc, #60]	; (80087b8 <SystemInit+0x68>)
 800877c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8008780:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8008784:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8008786:	4b0c      	ldr	r3, [pc, #48]	; (80087b8 <SystemInit+0x68>)
 8008788:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800878c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800878e:	4b0a      	ldr	r3, [pc, #40]	; (80087b8 <SystemInit+0x68>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a09      	ldr	r2, [pc, #36]	; (80087b8 <SystemInit+0x68>)
 8008794:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008798:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800879a:	4b07      	ldr	r3, [pc, #28]	; (80087b8 <SystemInit+0x68>)
 800879c:	2200      	movs	r2, #0
 800879e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80087a0:	4b04      	ldr	r3, [pc, #16]	; (80087b4 <SystemInit+0x64>)
 80087a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80087a6:	609a      	str	r2, [r3, #8]
#endif
}
 80087a8:	bf00      	nop
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr
 80087b2:	bf00      	nop
 80087b4:	e000ed00 	.word	0xe000ed00
 80087b8:	40021000 	.word	0x40021000

080087bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80087bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80087f4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80087c0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80087c2:	e003      	b.n	80087cc <LoopCopyDataInit>

080087c4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80087c4:	4b0c      	ldr	r3, [pc, #48]	; (80087f8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80087c6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80087c8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80087ca:	3104      	adds	r1, #4

080087cc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80087cc:	480b      	ldr	r0, [pc, #44]	; (80087fc <LoopForever+0xa>)
	ldr	r3, =_edata
 80087ce:	4b0c      	ldr	r3, [pc, #48]	; (8008800 <LoopForever+0xe>)
	adds	r2, r0, r1
 80087d0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80087d2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80087d4:	d3f6      	bcc.n	80087c4 <CopyDataInit>
	ldr	r2, =_sbss
 80087d6:	4a0b      	ldr	r2, [pc, #44]	; (8008804 <LoopForever+0x12>)
	b	LoopFillZerobss
 80087d8:	e002      	b.n	80087e0 <LoopFillZerobss>

080087da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80087da:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80087dc:	f842 3b04 	str.w	r3, [r2], #4

080087e0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80087e0:	4b09      	ldr	r3, [pc, #36]	; (8008808 <LoopForever+0x16>)
	cmp	r2, r3
 80087e2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80087e4:	d3f9      	bcc.n	80087da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80087e6:	f7ff ffb3 	bl	8008750 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80087ea:	f008 fae5 	bl	8010db8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80087ee:	f7ff fd83 	bl	80082f8 <main>

080087f2 <LoopForever>:

LoopForever:
    b LoopForever
 80087f2:	e7fe      	b.n	80087f2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80087f4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80087f8:	0801803c 	.word	0x0801803c
	ldr	r0, =_sdata
 80087fc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8008800:	20000a40 	.word	0x20000a40
	ldr	r2, =_sbss
 8008804:	20000a40 	.word	0x20000a40
	ldr	r3, = _ebss
 8008808:	20014278 	.word	0x20014278

0800880c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800880c:	e7fe      	b.n	800880c <ADC1_2_IRQHandler>

0800880e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800880e:	b580      	push	{r7, lr}
 8008810:	b082      	sub	sp, #8
 8008812:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008814:	2300      	movs	r3, #0
 8008816:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008818:	2003      	movs	r0, #3
 800881a:	f000 f963 	bl	8008ae4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800881e:	2000      	movs	r0, #0
 8008820:	f000 f80e 	bl	8008840 <HAL_InitTick>
 8008824:	4603      	mov	r3, r0
 8008826:	2b00      	cmp	r3, #0
 8008828:	d002      	beq.n	8008830 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800882a:	2301      	movs	r3, #1
 800882c:	71fb      	strb	r3, [r7, #7]
 800882e:	e001      	b.n	8008834 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008830:	f7ff fe5a 	bl	80084e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008834:	79fb      	ldrb	r3, [r7, #7]
}
 8008836:	4618      	mov	r0, r3
 8008838:	3708      	adds	r7, #8
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
	...

08008840 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b084      	sub	sp, #16
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008848:	2300      	movs	r3, #0
 800884a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800884c:	4b16      	ldr	r3, [pc, #88]	; (80088a8 <HAL_InitTick+0x68>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d022      	beq.n	800889a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8008854:	4b15      	ldr	r3, [pc, #84]	; (80088ac <HAL_InitTick+0x6c>)
 8008856:	681a      	ldr	r2, [r3, #0]
 8008858:	4b13      	ldr	r3, [pc, #76]	; (80088a8 <HAL_InitTick+0x68>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008860:	fbb1 f3f3 	udiv	r3, r1, r3
 8008864:	fbb2 f3f3 	udiv	r3, r2, r3
 8008868:	4618      	mov	r0, r3
 800886a:	f000 f962 	bl	8008b32 <HAL_SYSTICK_Config>
 800886e:	4603      	mov	r3, r0
 8008870:	2b00      	cmp	r3, #0
 8008872:	d10f      	bne.n	8008894 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2b0f      	cmp	r3, #15
 8008878:	d809      	bhi.n	800888e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800887a:	2200      	movs	r2, #0
 800887c:	6879      	ldr	r1, [r7, #4]
 800887e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008882:	f000 f93a 	bl	8008afa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008886:	4a0a      	ldr	r2, [pc, #40]	; (80088b0 <HAL_InitTick+0x70>)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6013      	str	r3, [r2, #0]
 800888c:	e007      	b.n	800889e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	73fb      	strb	r3, [r7, #15]
 8008892:	e004      	b.n	800889e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008894:	2301      	movs	r3, #1
 8008896:	73fb      	strb	r3, [r7, #15]
 8008898:	e001      	b.n	800889e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800889a:	2301      	movs	r3, #1
 800889c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800889e:	7bfb      	ldrb	r3, [r7, #15]
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3710      	adds	r7, #16
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}
 80088a8:	20000010 	.word	0x20000010
 80088ac:	20000008 	.word	0x20000008
 80088b0:	2000000c 	.word	0x2000000c

080088b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80088b4:	b480      	push	{r7}
 80088b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80088b8:	4b05      	ldr	r3, [pc, #20]	; (80088d0 <HAL_IncTick+0x1c>)
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	4b05      	ldr	r3, [pc, #20]	; (80088d4 <HAL_IncTick+0x20>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4413      	add	r3, r2
 80088c2:	4a03      	ldr	r2, [pc, #12]	; (80088d0 <HAL_IncTick+0x1c>)
 80088c4:	6013      	str	r3, [r2, #0]
}
 80088c6:	bf00      	nop
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr
 80088d0:	20012258 	.word	0x20012258
 80088d4:	20000010 	.word	0x20000010

080088d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80088d8:	b480      	push	{r7}
 80088da:	af00      	add	r7, sp, #0
  return uwTick;
 80088dc:	4b03      	ldr	r3, [pc, #12]	; (80088ec <HAL_GetTick+0x14>)
 80088de:	681b      	ldr	r3, [r3, #0]
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	46bd      	mov	sp, r7
 80088e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e8:	4770      	bx	lr
 80088ea:	bf00      	nop
 80088ec:	20012258 	.word	0x20012258

080088f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b084      	sub	sp, #16
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80088f8:	f7ff ffee 	bl	80088d8 <HAL_GetTick>
 80088fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008908:	d004      	beq.n	8008914 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800890a:	4b09      	ldr	r3, [pc, #36]	; (8008930 <HAL_Delay+0x40>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	68fa      	ldr	r2, [r7, #12]
 8008910:	4413      	add	r3, r2
 8008912:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008914:	bf00      	nop
 8008916:	f7ff ffdf 	bl	80088d8 <HAL_GetTick>
 800891a:	4602      	mov	r2, r0
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	1ad3      	subs	r3, r2, r3
 8008920:	68fa      	ldr	r2, [r7, #12]
 8008922:	429a      	cmp	r2, r3
 8008924:	d8f7      	bhi.n	8008916 <HAL_Delay+0x26>
  {
  }
}
 8008926:	bf00      	nop
 8008928:	3710      	adds	r7, #16
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
 800892e:	bf00      	nop
 8008930:	20000010 	.word	0x20000010

08008934 <HAL_GetHalVersion>:
/**
  * @brief  Return the HAL revision.
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8008934:	b480      	push	{r7}
 8008936:	af00      	add	r7, sp, #0
  return STM32L4XX_HAL_VERSION;
 8008938:	4b02      	ldr	r3, [pc, #8]	; (8008944 <HAL_GetHalVersion+0x10>)
}
 800893a:	4618      	mov	r0, r3
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr
 8008944:	010b0100 	.word	0x010b0100

08008948 <HAL_GetREVID>:
/**
  * @brief  Return the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8008948:	b480      	push	{r7}
 800894a:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 800894c:	4b04      	ldr	r3, [pc, #16]	; (8008960 <HAL_GetREVID+0x18>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	0c1b      	lsrs	r3, r3, #16
 8008952:	b29b      	uxth	r3, r3
}
 8008954:	4618      	mov	r0, r3
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr
 800895e:	bf00      	nop
 8008960:	e0042000 	.word	0xe0042000

08008964 <HAL_GetDEVID>:
/**
  * @brief  Return the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8008964:	b480      	push	{r7}
 8008966:	af00      	add	r7, sp, #0
  return(DBGMCU->IDCODE & DBGMCU_IDCODE_DEV_ID);
 8008968:	4b04      	ldr	r3, [pc, #16]	; (800897c <HAL_GetDEVID+0x18>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8008970:	4618      	mov	r0, r3
 8008972:	46bd      	mov	sp, r7
 8008974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008978:	4770      	bx	lr
 800897a:	bf00      	nop
 800897c:	e0042000 	.word	0xe0042000

08008980 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008980:	b480      	push	{r7}
 8008982:	b085      	sub	sp, #20
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f003 0307 	and.w	r3, r3, #7
 800898e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008990:	4b0c      	ldr	r3, [pc, #48]	; (80089c4 <__NVIC_SetPriorityGrouping+0x44>)
 8008992:	68db      	ldr	r3, [r3, #12]
 8008994:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008996:	68ba      	ldr	r2, [r7, #8]
 8008998:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800899c:	4013      	ands	r3, r2
 800899e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80089a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80089ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80089b2:	4a04      	ldr	r2, [pc, #16]	; (80089c4 <__NVIC_SetPriorityGrouping+0x44>)
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	60d3      	str	r3, [r2, #12]
}
 80089b8:	bf00      	nop
 80089ba:	3714      	adds	r7, #20
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr
 80089c4:	e000ed00 	.word	0xe000ed00

080089c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80089c8:	b480      	push	{r7}
 80089ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80089cc:	4b04      	ldr	r3, [pc, #16]	; (80089e0 <__NVIC_GetPriorityGrouping+0x18>)
 80089ce:	68db      	ldr	r3, [r3, #12]
 80089d0:	0a1b      	lsrs	r3, r3, #8
 80089d2:	f003 0307 	and.w	r3, r3, #7
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr
 80089e0:	e000ed00 	.word	0xe000ed00

080089e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b083      	sub	sp, #12
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	4603      	mov	r3, r0
 80089ec:	6039      	str	r1, [r7, #0]
 80089ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80089f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	db0a      	blt.n	8008a0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	b2da      	uxtb	r2, r3
 80089fc:	490c      	ldr	r1, [pc, #48]	; (8008a30 <__NVIC_SetPriority+0x4c>)
 80089fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a02:	0112      	lsls	r2, r2, #4
 8008a04:	b2d2      	uxtb	r2, r2
 8008a06:	440b      	add	r3, r1
 8008a08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008a0c:	e00a      	b.n	8008a24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	b2da      	uxtb	r2, r3
 8008a12:	4908      	ldr	r1, [pc, #32]	; (8008a34 <__NVIC_SetPriority+0x50>)
 8008a14:	79fb      	ldrb	r3, [r7, #7]
 8008a16:	f003 030f 	and.w	r3, r3, #15
 8008a1a:	3b04      	subs	r3, #4
 8008a1c:	0112      	lsls	r2, r2, #4
 8008a1e:	b2d2      	uxtb	r2, r2
 8008a20:	440b      	add	r3, r1
 8008a22:	761a      	strb	r2, [r3, #24]
}
 8008a24:	bf00      	nop
 8008a26:	370c      	adds	r7, #12
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr
 8008a30:	e000e100 	.word	0xe000e100
 8008a34:	e000ed00 	.word	0xe000ed00

08008a38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b089      	sub	sp, #36	; 0x24
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	60f8      	str	r0, [r7, #12]
 8008a40:	60b9      	str	r1, [r7, #8]
 8008a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f003 0307 	and.w	r3, r3, #7
 8008a4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008a4c:	69fb      	ldr	r3, [r7, #28]
 8008a4e:	f1c3 0307 	rsb	r3, r3, #7
 8008a52:	2b04      	cmp	r3, #4
 8008a54:	bf28      	it	cs
 8008a56:	2304      	movcs	r3, #4
 8008a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008a5a:	69fb      	ldr	r3, [r7, #28]
 8008a5c:	3304      	adds	r3, #4
 8008a5e:	2b06      	cmp	r3, #6
 8008a60:	d902      	bls.n	8008a68 <NVIC_EncodePriority+0x30>
 8008a62:	69fb      	ldr	r3, [r7, #28]
 8008a64:	3b03      	subs	r3, #3
 8008a66:	e000      	b.n	8008a6a <NVIC_EncodePriority+0x32>
 8008a68:	2300      	movs	r3, #0
 8008a6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a70:	69bb      	ldr	r3, [r7, #24]
 8008a72:	fa02 f303 	lsl.w	r3, r2, r3
 8008a76:	43da      	mvns	r2, r3
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	401a      	ands	r2, r3
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008a80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	fa01 f303 	lsl.w	r3, r1, r3
 8008a8a:	43d9      	mvns	r1, r3
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a90:	4313      	orrs	r3, r2
         );
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3724      	adds	r7, #36	; 0x24
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr
	...

08008aa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b082      	sub	sp, #8
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	3b01      	subs	r3, #1
 8008aac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008ab0:	d301      	bcc.n	8008ab6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e00f      	b.n	8008ad6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008ab6:	4a0a      	ldr	r2, [pc, #40]	; (8008ae0 <SysTick_Config+0x40>)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	3b01      	subs	r3, #1
 8008abc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008abe:	210f      	movs	r1, #15
 8008ac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ac4:	f7ff ff8e 	bl	80089e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008ac8:	4b05      	ldr	r3, [pc, #20]	; (8008ae0 <SysTick_Config+0x40>)
 8008aca:	2200      	movs	r2, #0
 8008acc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008ace:	4b04      	ldr	r3, [pc, #16]	; (8008ae0 <SysTick_Config+0x40>)
 8008ad0:	2207      	movs	r2, #7
 8008ad2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008ad4:	2300      	movs	r3, #0
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3708      	adds	r7, #8
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}
 8008ade:	bf00      	nop
 8008ae0:	e000e010 	.word	0xe000e010

08008ae4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b082      	sub	sp, #8
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f7ff ff47 	bl	8008980 <__NVIC_SetPriorityGrouping>
}
 8008af2:	bf00      	nop
 8008af4:	3708      	adds	r7, #8
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}

08008afa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008afa:	b580      	push	{r7, lr}
 8008afc:	b086      	sub	sp, #24
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	4603      	mov	r3, r0
 8008b02:	60b9      	str	r1, [r7, #8]
 8008b04:	607a      	str	r2, [r7, #4]
 8008b06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008b0c:	f7ff ff5c 	bl	80089c8 <__NVIC_GetPriorityGrouping>
 8008b10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	68b9      	ldr	r1, [r7, #8]
 8008b16:	6978      	ldr	r0, [r7, #20]
 8008b18:	f7ff ff8e 	bl	8008a38 <NVIC_EncodePriority>
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b22:	4611      	mov	r1, r2
 8008b24:	4618      	mov	r0, r3
 8008b26:	f7ff ff5d 	bl	80089e4 <__NVIC_SetPriority>
}
 8008b2a:	bf00      	nop
 8008b2c:	3718      	adds	r7, #24
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}

08008b32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008b32:	b580      	push	{r7, lr}
 8008b34:	b082      	sub	sp, #8
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f7ff ffb0 	bl	8008aa0 <SysTick_Config>
 8008b40:	4603      	mov	r3, r0
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3708      	adds	r7, #8
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
	...

08008b4c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b082      	sub	sp, #8
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d101      	bne.n	8008b5e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	e054      	b.n	8008c08 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	7f5b      	ldrb	r3, [r3, #29]
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d105      	bne.n	8008b74 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f7ff fcde 	bl	8008530 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2202      	movs	r2, #2
 8008b78:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	791b      	ldrb	r3, [r3, #4]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d10c      	bne.n	8008b9c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a22      	ldr	r2, [pc, #136]	; (8008c10 <HAL_CRC_Init+0xc4>)
 8008b88:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	689a      	ldr	r2, [r3, #8]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f022 0218 	bic.w	r2, r2, #24
 8008b98:	609a      	str	r2, [r3, #8]
 8008b9a:	e00c      	b.n	8008bb6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6899      	ldr	r1, [r3, #8]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	68db      	ldr	r3, [r3, #12]
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 f834 	bl	8008c14 <HAL_CRCEx_Polynomial_Set>
 8008bac:	4603      	mov	r3, r0
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d001      	beq.n	8008bb6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	e028      	b.n	8008c08 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	795b      	ldrb	r3, [r3, #5]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d105      	bne.n	8008bca <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008bc6:	611a      	str	r2, [r3, #16]
 8008bc8:	e004      	b.n	8008bd4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	6912      	ldr	r2, [r2, #16]
 8008bd2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	689b      	ldr	r3, [r3, #8]
 8008bda:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	695a      	ldr	r2, [r3, #20]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	430a      	orrs	r2, r1
 8008be8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	689b      	ldr	r3, [r3, #8]
 8008bf0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	699a      	ldr	r2, [r3, #24]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	430a      	orrs	r2, r1
 8008bfe:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2201      	movs	r2, #1
 8008c04:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8008c06:	2300      	movs	r3, #0
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3708      	adds	r7, #8
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}
 8008c10:	04c11db7 	.word	0x04c11db7

08008c14 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b087      	sub	sp, #28
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	60f8      	str	r0, [r7, #12]
 8008c1c:	60b9      	str	r1, [r7, #8]
 8008c1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c20:	2300      	movs	r3, #0
 8008c22:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8008c24:	231f      	movs	r3, #31
 8008c26:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8008c28:	bf00      	nop
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	1e5a      	subs	r2, r3, #1
 8008c2e:	613a      	str	r2, [r7, #16]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d009      	beq.n	8008c48 <HAL_CRCEx_Polynomial_Set+0x34>
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	f003 031f 	and.w	r3, r3, #31
 8008c3a:	68ba      	ldr	r2, [r7, #8]
 8008c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8008c40:	f003 0301 	and.w	r3, r3, #1
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d0f0      	beq.n	8008c2a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2b18      	cmp	r3, #24
 8008c4c:	d846      	bhi.n	8008cdc <HAL_CRCEx_Polynomial_Set+0xc8>
 8008c4e:	a201      	add	r2, pc, #4	; (adr r2, 8008c54 <HAL_CRCEx_Polynomial_Set+0x40>)
 8008c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c54:	08008ce3 	.word	0x08008ce3
 8008c58:	08008cdd 	.word	0x08008cdd
 8008c5c:	08008cdd 	.word	0x08008cdd
 8008c60:	08008cdd 	.word	0x08008cdd
 8008c64:	08008cdd 	.word	0x08008cdd
 8008c68:	08008cdd 	.word	0x08008cdd
 8008c6c:	08008cdd 	.word	0x08008cdd
 8008c70:	08008cdd 	.word	0x08008cdd
 8008c74:	08008cd1 	.word	0x08008cd1
 8008c78:	08008cdd 	.word	0x08008cdd
 8008c7c:	08008cdd 	.word	0x08008cdd
 8008c80:	08008cdd 	.word	0x08008cdd
 8008c84:	08008cdd 	.word	0x08008cdd
 8008c88:	08008cdd 	.word	0x08008cdd
 8008c8c:	08008cdd 	.word	0x08008cdd
 8008c90:	08008cdd 	.word	0x08008cdd
 8008c94:	08008cc5 	.word	0x08008cc5
 8008c98:	08008cdd 	.word	0x08008cdd
 8008c9c:	08008cdd 	.word	0x08008cdd
 8008ca0:	08008cdd 	.word	0x08008cdd
 8008ca4:	08008cdd 	.word	0x08008cdd
 8008ca8:	08008cdd 	.word	0x08008cdd
 8008cac:	08008cdd 	.word	0x08008cdd
 8008cb0:	08008cdd 	.word	0x08008cdd
 8008cb4:	08008cb9 	.word	0x08008cb9
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	2b06      	cmp	r3, #6
 8008cbc:	d913      	bls.n	8008ce6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008cc2:	e010      	b.n	8008ce6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	2b07      	cmp	r3, #7
 8008cc8:	d90f      	bls.n	8008cea <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8008cca:	2301      	movs	r3, #1
 8008ccc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008cce:	e00c      	b.n	8008cea <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	2b0f      	cmp	r3, #15
 8008cd4:	d90b      	bls.n	8008cee <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008cda:	e008      	b.n	8008cee <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8008cdc:	2301      	movs	r3, #1
 8008cde:	75fb      	strb	r3, [r7, #23]
      break;
 8008ce0:	e006      	b.n	8008cf0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8008ce2:	bf00      	nop
 8008ce4:	e004      	b.n	8008cf0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8008ce6:	bf00      	nop
 8008ce8:	e002      	b.n	8008cf0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8008cea:	bf00      	nop
 8008cec:	e000      	b.n	8008cf0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8008cee:	bf00      	nop
  }
  if (status == HAL_OK)
 8008cf0:	7dfb      	ldrb	r3, [r7, #23]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d10d      	bne.n	8008d12 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	68ba      	ldr	r2, [r7, #8]
 8008cfc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	689b      	ldr	r3, [r3, #8]
 8008d04:	f023 0118 	bic.w	r1, r3, #24
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	687a      	ldr	r2, [r7, #4]
 8008d0e:	430a      	orrs	r2, r1
 8008d10:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8008d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	371c      	adds	r7, #28
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b087      	sub	sp, #28
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008d2e:	e17f      	b.n	8009030 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	681a      	ldr	r2, [r3, #0]
 8008d34:	2101      	movs	r1, #1
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	fa01 f303 	lsl.w	r3, r1, r3
 8008d3c:	4013      	ands	r3, r2
 8008d3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	f000 8171 	beq.w	800902a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d00b      	beq.n	8008d68 <HAL_GPIO_Init+0x48>
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	2b02      	cmp	r3, #2
 8008d56:	d007      	beq.n	8008d68 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008d5c:	2b11      	cmp	r3, #17
 8008d5e:	d003      	beq.n	8008d68 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	2b12      	cmp	r3, #18
 8008d66:	d130      	bne.n	8008dca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	689b      	ldr	r3, [r3, #8]
 8008d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	005b      	lsls	r3, r3, #1
 8008d72:	2203      	movs	r2, #3
 8008d74:	fa02 f303 	lsl.w	r3, r2, r3
 8008d78:	43db      	mvns	r3, r3
 8008d7a:	693a      	ldr	r2, [r7, #16]
 8008d7c:	4013      	ands	r3, r2
 8008d7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	68da      	ldr	r2, [r3, #12]
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	005b      	lsls	r3, r3, #1
 8008d88:	fa02 f303 	lsl.w	r3, r2, r3
 8008d8c:	693a      	ldr	r2, [r7, #16]
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	693a      	ldr	r2, [r7, #16]
 8008d96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008d9e:	2201      	movs	r2, #1
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	fa02 f303 	lsl.w	r3, r2, r3
 8008da6:	43db      	mvns	r3, r3
 8008da8:	693a      	ldr	r2, [r7, #16]
 8008daa:	4013      	ands	r3, r2
 8008dac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	091b      	lsrs	r3, r3, #4
 8008db4:	f003 0201 	and.w	r2, r3, #1
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	fa02 f303 	lsl.w	r3, r2, r3
 8008dbe:	693a      	ldr	r2, [r7, #16]
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	693a      	ldr	r2, [r7, #16]
 8008dc8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	f003 0303 	and.w	r3, r3, #3
 8008dd2:	2b03      	cmp	r3, #3
 8008dd4:	d118      	bne.n	8008e08 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8008ddc:	2201      	movs	r2, #1
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	fa02 f303 	lsl.w	r3, r2, r3
 8008de4:	43db      	mvns	r3, r3
 8008de6:	693a      	ldr	r2, [r7, #16]
 8008de8:	4013      	ands	r3, r2
 8008dea:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	08db      	lsrs	r3, r3, #3
 8008df2:	f003 0201 	and.w	r2, r3, #1
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	fa02 f303 	lsl.w	r3, r2, r3
 8008dfc:	693a      	ldr	r2, [r7, #16]
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	693a      	ldr	r2, [r7, #16]
 8008e06:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	68db      	ldr	r3, [r3, #12]
 8008e0c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	005b      	lsls	r3, r3, #1
 8008e12:	2203      	movs	r2, #3
 8008e14:	fa02 f303 	lsl.w	r3, r2, r3
 8008e18:	43db      	mvns	r3, r3
 8008e1a:	693a      	ldr	r2, [r7, #16]
 8008e1c:	4013      	ands	r3, r2
 8008e1e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	689a      	ldr	r2, [r3, #8]
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	005b      	lsls	r3, r3, #1
 8008e28:	fa02 f303 	lsl.w	r3, r2, r3
 8008e2c:	693a      	ldr	r2, [r7, #16]
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	693a      	ldr	r2, [r7, #16]
 8008e36:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	2b02      	cmp	r3, #2
 8008e3e:	d003      	beq.n	8008e48 <HAL_GPIO_Init+0x128>
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	2b12      	cmp	r3, #18
 8008e46:	d123      	bne.n	8008e90 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	08da      	lsrs	r2, r3, #3
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	3208      	adds	r2, #8
 8008e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e54:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	f003 0307 	and.w	r3, r3, #7
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	220f      	movs	r2, #15
 8008e60:	fa02 f303 	lsl.w	r3, r2, r3
 8008e64:	43db      	mvns	r3, r3
 8008e66:	693a      	ldr	r2, [r7, #16]
 8008e68:	4013      	ands	r3, r2
 8008e6a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	691a      	ldr	r2, [r3, #16]
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	f003 0307 	and.w	r3, r3, #7
 8008e76:	009b      	lsls	r3, r3, #2
 8008e78:	fa02 f303 	lsl.w	r3, r2, r3
 8008e7c:	693a      	ldr	r2, [r7, #16]
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	08da      	lsrs	r2, r3, #3
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	3208      	adds	r2, #8
 8008e8a:	6939      	ldr	r1, [r7, #16]
 8008e8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	005b      	lsls	r3, r3, #1
 8008e9a:	2203      	movs	r2, #3
 8008e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8008ea0:	43db      	mvns	r3, r3
 8008ea2:	693a      	ldr	r2, [r7, #16]
 8008ea4:	4013      	ands	r3, r2
 8008ea6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	f003 0203 	and.w	r2, r3, #3
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	005b      	lsls	r3, r3, #1
 8008eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8008eb8:	693a      	ldr	r2, [r7, #16]
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	693a      	ldr	r2, [r7, #16]
 8008ec2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	f000 80ac 	beq.w	800902a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008ed2:	4b5e      	ldr	r3, [pc, #376]	; (800904c <HAL_GPIO_Init+0x32c>)
 8008ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ed6:	4a5d      	ldr	r2, [pc, #372]	; (800904c <HAL_GPIO_Init+0x32c>)
 8008ed8:	f043 0301 	orr.w	r3, r3, #1
 8008edc:	6613      	str	r3, [r2, #96]	; 0x60
 8008ede:	4b5b      	ldr	r3, [pc, #364]	; (800904c <HAL_GPIO_Init+0x32c>)
 8008ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ee2:	f003 0301 	and.w	r3, r3, #1
 8008ee6:	60bb      	str	r3, [r7, #8]
 8008ee8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8008eea:	4a59      	ldr	r2, [pc, #356]	; (8009050 <HAL_GPIO_Init+0x330>)
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	089b      	lsrs	r3, r3, #2
 8008ef0:	3302      	adds	r3, #2
 8008ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	f003 0303 	and.w	r3, r3, #3
 8008efe:	009b      	lsls	r3, r3, #2
 8008f00:	220f      	movs	r2, #15
 8008f02:	fa02 f303 	lsl.w	r3, r2, r3
 8008f06:	43db      	mvns	r3, r3
 8008f08:	693a      	ldr	r2, [r7, #16]
 8008f0a:	4013      	ands	r3, r2
 8008f0c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008f14:	d025      	beq.n	8008f62 <HAL_GPIO_Init+0x242>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	4a4e      	ldr	r2, [pc, #312]	; (8009054 <HAL_GPIO_Init+0x334>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d01f      	beq.n	8008f5e <HAL_GPIO_Init+0x23e>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	4a4d      	ldr	r2, [pc, #308]	; (8009058 <HAL_GPIO_Init+0x338>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d019      	beq.n	8008f5a <HAL_GPIO_Init+0x23a>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	4a4c      	ldr	r2, [pc, #304]	; (800905c <HAL_GPIO_Init+0x33c>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d013      	beq.n	8008f56 <HAL_GPIO_Init+0x236>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	4a4b      	ldr	r2, [pc, #300]	; (8009060 <HAL_GPIO_Init+0x340>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d00d      	beq.n	8008f52 <HAL_GPIO_Init+0x232>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	4a4a      	ldr	r2, [pc, #296]	; (8009064 <HAL_GPIO_Init+0x344>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d007      	beq.n	8008f4e <HAL_GPIO_Init+0x22e>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	4a49      	ldr	r2, [pc, #292]	; (8009068 <HAL_GPIO_Init+0x348>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d101      	bne.n	8008f4a <HAL_GPIO_Init+0x22a>
 8008f46:	2306      	movs	r3, #6
 8008f48:	e00c      	b.n	8008f64 <HAL_GPIO_Init+0x244>
 8008f4a:	2307      	movs	r3, #7
 8008f4c:	e00a      	b.n	8008f64 <HAL_GPIO_Init+0x244>
 8008f4e:	2305      	movs	r3, #5
 8008f50:	e008      	b.n	8008f64 <HAL_GPIO_Init+0x244>
 8008f52:	2304      	movs	r3, #4
 8008f54:	e006      	b.n	8008f64 <HAL_GPIO_Init+0x244>
 8008f56:	2303      	movs	r3, #3
 8008f58:	e004      	b.n	8008f64 <HAL_GPIO_Init+0x244>
 8008f5a:	2302      	movs	r3, #2
 8008f5c:	e002      	b.n	8008f64 <HAL_GPIO_Init+0x244>
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e000      	b.n	8008f64 <HAL_GPIO_Init+0x244>
 8008f62:	2300      	movs	r3, #0
 8008f64:	697a      	ldr	r2, [r7, #20]
 8008f66:	f002 0203 	and.w	r2, r2, #3
 8008f6a:	0092      	lsls	r2, r2, #2
 8008f6c:	4093      	lsls	r3, r2
 8008f6e:	693a      	ldr	r2, [r7, #16]
 8008f70:	4313      	orrs	r3, r2
 8008f72:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008f74:	4936      	ldr	r1, [pc, #216]	; (8009050 <HAL_GPIO_Init+0x330>)
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	089b      	lsrs	r3, r3, #2
 8008f7a:	3302      	adds	r3, #2
 8008f7c:	693a      	ldr	r2, [r7, #16]
 8008f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008f82:	4b3a      	ldr	r3, [pc, #232]	; (800906c <HAL_GPIO_Init+0x34c>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	43db      	mvns	r3, r3
 8008f8c:	693a      	ldr	r2, [r7, #16]
 8008f8e:	4013      	ands	r3, r2
 8008f90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d003      	beq.n	8008fa6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8008f9e:	693a      	ldr	r2, [r7, #16]
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008fa6:	4a31      	ldr	r2, [pc, #196]	; (800906c <HAL_GPIO_Init+0x34c>)
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8008fac:	4b2f      	ldr	r3, [pc, #188]	; (800906c <HAL_GPIO_Init+0x34c>)
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	43db      	mvns	r3, r3
 8008fb6:	693a      	ldr	r2, [r7, #16]
 8008fb8:	4013      	ands	r3, r2
 8008fba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d003      	beq.n	8008fd0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8008fc8:	693a      	ldr	r2, [r7, #16]
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008fd0:	4a26      	ldr	r2, [pc, #152]	; (800906c <HAL_GPIO_Init+0x34c>)
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008fd6:	4b25      	ldr	r3, [pc, #148]	; (800906c <HAL_GPIO_Init+0x34c>)
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	43db      	mvns	r3, r3
 8008fe0:	693a      	ldr	r2, [r7, #16]
 8008fe2:	4013      	ands	r3, r2
 8008fe4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d003      	beq.n	8008ffa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8008ff2:	693a      	ldr	r2, [r7, #16]
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008ffa:	4a1c      	ldr	r2, [pc, #112]	; (800906c <HAL_GPIO_Init+0x34c>)
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8009000:	4b1a      	ldr	r3, [pc, #104]	; (800906c <HAL_GPIO_Init+0x34c>)
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	43db      	mvns	r3, r3
 800900a:	693a      	ldr	r2, [r7, #16]
 800900c:	4013      	ands	r3, r2
 800900e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009018:	2b00      	cmp	r3, #0
 800901a:	d003      	beq.n	8009024 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800901c:	693a      	ldr	r2, [r7, #16]
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	4313      	orrs	r3, r2
 8009022:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8009024:	4a11      	ldr	r2, [pc, #68]	; (800906c <HAL_GPIO_Init+0x34c>)
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	3301      	adds	r3, #1
 800902e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	681a      	ldr	r2, [r3, #0]
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	fa22 f303 	lsr.w	r3, r2, r3
 800903a:	2b00      	cmp	r3, #0
 800903c:	f47f ae78 	bne.w	8008d30 <HAL_GPIO_Init+0x10>
  }
}
 8009040:	bf00      	nop
 8009042:	371c      	adds	r7, #28
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr
 800904c:	40021000 	.word	0x40021000
 8009050:	40010000 	.word	0x40010000
 8009054:	48000400 	.word	0x48000400
 8009058:	48000800 	.word	0x48000800
 800905c:	48000c00 	.word	0x48000c00
 8009060:	48001000 	.word	0x48001000
 8009064:	48001400 	.word	0x48001400
 8009068:	48001800 	.word	0x48001800
 800906c:	40010400 	.word	0x40010400

08009070 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8009070:	b480      	push	{r7}
 8009072:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8009074:	4b04      	ldr	r3, [pc, #16]	; (8009088 <HAL_PWREx_GetVoltageRange+0x18>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800907c:	4618      	mov	r0, r3
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr
 8009086:	bf00      	nop
 8009088:	40007000 	.word	0x40007000

0800908c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800908c:	b480      	push	{r7}
 800908e:	b085      	sub	sp, #20
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800909a:	d130      	bne.n	80090fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800909c:	4b23      	ldr	r3, [pc, #140]	; (800912c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80090a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090a8:	d038      	beq.n	800911c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80090aa:	4b20      	ldr	r3, [pc, #128]	; (800912c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80090b2:	4a1e      	ldr	r2, [pc, #120]	; (800912c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80090b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80090b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80090ba:	4b1d      	ldr	r3, [pc, #116]	; (8009130 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	2232      	movs	r2, #50	; 0x32
 80090c0:	fb02 f303 	mul.w	r3, r2, r3
 80090c4:	4a1b      	ldr	r2, [pc, #108]	; (8009134 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80090c6:	fba2 2303 	umull	r2, r3, r2, r3
 80090ca:	0c9b      	lsrs	r3, r3, #18
 80090cc:	3301      	adds	r3, #1
 80090ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80090d0:	e002      	b.n	80090d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	3b01      	subs	r3, #1
 80090d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80090d8:	4b14      	ldr	r3, [pc, #80]	; (800912c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80090da:	695b      	ldr	r3, [r3, #20]
 80090dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090e4:	d102      	bne.n	80090ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d1f2      	bne.n	80090d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80090ec:	4b0f      	ldr	r3, [pc, #60]	; (800912c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80090ee:	695b      	ldr	r3, [r3, #20]
 80090f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090f8:	d110      	bne.n	800911c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80090fa:	2303      	movs	r3, #3
 80090fc:	e00f      	b.n	800911e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80090fe:	4b0b      	ldr	r3, [pc, #44]	; (800912c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800910a:	d007      	beq.n	800911c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800910c:	4b07      	ldr	r3, [pc, #28]	; (800912c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009114:	4a05      	ldr	r2, [pc, #20]	; (800912c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009116:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800911a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800911c:	2300      	movs	r3, #0
}
 800911e:	4618      	mov	r0, r3
 8009120:	3714      	adds	r7, #20
 8009122:	46bd      	mov	sp, r7
 8009124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009128:	4770      	bx	lr
 800912a:	bf00      	nop
 800912c:	40007000 	.word	0x40007000
 8009130:	20000008 	.word	0x20000008
 8009134:	431bde83 	.word	0x431bde83

08009138 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b088      	sub	sp, #32
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d101      	bne.n	800914a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009146:	2301      	movs	r3, #1
 8009148:	e3d4      	b.n	80098f4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800914a:	4ba1      	ldr	r3, [pc, #644]	; (80093d0 <HAL_RCC_OscConfig+0x298>)
 800914c:	689b      	ldr	r3, [r3, #8]
 800914e:	f003 030c 	and.w	r3, r3, #12
 8009152:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009154:	4b9e      	ldr	r3, [pc, #632]	; (80093d0 <HAL_RCC_OscConfig+0x298>)
 8009156:	68db      	ldr	r3, [r3, #12]
 8009158:	f003 0303 	and.w	r3, r3, #3
 800915c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f003 0310 	and.w	r3, r3, #16
 8009166:	2b00      	cmp	r3, #0
 8009168:	f000 80e4 	beq.w	8009334 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800916c:	69bb      	ldr	r3, [r7, #24]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d007      	beq.n	8009182 <HAL_RCC_OscConfig+0x4a>
 8009172:	69bb      	ldr	r3, [r7, #24]
 8009174:	2b0c      	cmp	r3, #12
 8009176:	f040 808b 	bne.w	8009290 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	2b01      	cmp	r3, #1
 800917e:	f040 8087 	bne.w	8009290 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009182:	4b93      	ldr	r3, [pc, #588]	; (80093d0 <HAL_RCC_OscConfig+0x298>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f003 0302 	and.w	r3, r3, #2
 800918a:	2b00      	cmp	r3, #0
 800918c:	d005      	beq.n	800919a <HAL_RCC_OscConfig+0x62>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	699b      	ldr	r3, [r3, #24]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d101      	bne.n	800919a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8009196:	2301      	movs	r3, #1
 8009198:	e3ac      	b.n	80098f4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6a1a      	ldr	r2, [r3, #32]
 800919e:	4b8c      	ldr	r3, [pc, #560]	; (80093d0 <HAL_RCC_OscConfig+0x298>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f003 0308 	and.w	r3, r3, #8
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d004      	beq.n	80091b4 <HAL_RCC_OscConfig+0x7c>
 80091aa:	4b89      	ldr	r3, [pc, #548]	; (80093d0 <HAL_RCC_OscConfig+0x298>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80091b2:	e005      	b.n	80091c0 <HAL_RCC_OscConfig+0x88>
 80091b4:	4b86      	ldr	r3, [pc, #536]	; (80093d0 <HAL_RCC_OscConfig+0x298>)
 80091b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80091ba:	091b      	lsrs	r3, r3, #4
 80091bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d223      	bcs.n	800920c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6a1b      	ldr	r3, [r3, #32]
 80091c8:	4618      	mov	r0, r3
 80091ca:	f000 fd3f 	bl	8009c4c <RCC_SetFlashLatencyFromMSIRange>
 80091ce:	4603      	mov	r3, r0
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d001      	beq.n	80091d8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80091d4:	2301      	movs	r3, #1
 80091d6:	e38d      	b.n	80098f4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80091d8:	4b7d      	ldr	r3, [pc, #500]	; (80093d0 <HAL_RCC_OscConfig+0x298>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4a7c      	ldr	r2, [pc, #496]	; (80093d0 <HAL_RCC_OscConfig+0x298>)
 80091de:	f043 0308 	orr.w	r3, r3, #8
 80091e2:	6013      	str	r3, [r2, #0]
 80091e4:	4b7a      	ldr	r3, [pc, #488]	; (80093d0 <HAL_RCC_OscConfig+0x298>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6a1b      	ldr	r3, [r3, #32]
 80091f0:	4977      	ldr	r1, [pc, #476]	; (80093d0 <HAL_RCC_OscConfig+0x298>)
 80091f2:	4313      	orrs	r3, r2
 80091f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80091f6:	4b76      	ldr	r3, [pc, #472]	; (80093d0 <HAL_RCC_OscConfig+0x298>)
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	69db      	ldr	r3, [r3, #28]
 8009202:	021b      	lsls	r3, r3, #8
 8009204:	4972      	ldr	r1, [pc, #456]	; (80093d0 <HAL_RCC_OscConfig+0x298>)
 8009206:	4313      	orrs	r3, r2
 8009208:	604b      	str	r3, [r1, #4]
 800920a:	e025      	b.n	8009258 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800920c:	4b70      	ldr	r3, [pc, #448]	; (80093d0 <HAL_RCC_OscConfig+0x298>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a6f      	ldr	r2, [pc, #444]	; (80093d0 <HAL_RCC_OscConfig+0x298>)
 8009212:	f043 0308 	orr.w	r3, r3, #8
 8009216:	6013      	str	r3, [r2, #0]
 8009218:	4b6d      	ldr	r3, [pc, #436]	; (80093d0 <HAL_RCC_OscConfig+0x298>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6a1b      	ldr	r3, [r3, #32]
 8009224:	496a      	ldr	r1, [pc, #424]	; (80093d0 <HAL_RCC_OscConfig+0x298>)
 8009226:	4313      	orrs	r3, r2
 8009228:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800922a:	4b69      	ldr	r3, [pc, #420]	; (80093d0 <HAL_RCC_OscConfig+0x298>)
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	69db      	ldr	r3, [r3, #28]
 8009236:	021b      	lsls	r3, r3, #8
 8009238:	4965      	ldr	r1, [pc, #404]	; (80093d0 <HAL_RCC_OscConfig+0x298>)
 800923a:	4313      	orrs	r3, r2
 800923c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800923e:	69bb      	ldr	r3, [r7, #24]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d109      	bne.n	8009258 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6a1b      	ldr	r3, [r3, #32]
 8009248:	4618      	mov	r0, r3
 800924a:	f000 fcff 	bl	8009c4c <RCC_SetFlashLatencyFromMSIRange>
 800924e:	4603      	mov	r3, r0
 8009250:	2b00      	cmp	r3, #0
 8009252:	d001      	beq.n	8009258 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8009254:	2301      	movs	r3, #1
 8009256:	e34d      	b.n	80098f4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009258:	f000 fc36 	bl	8009ac8 <HAL_RCC_GetSysClockFreq>
 800925c:	4601      	mov	r1, r0
 800925e:	4b5c      	ldr	r3, [pc, #368]	; (80093d0 <HAL_RCC_OscConfig+0x298>)
 8009260:	689b      	ldr	r3, [r3, #8]
 8009262:	091b      	lsrs	r3, r3, #4
 8009264:	f003 030f 	and.w	r3, r3, #15
 8009268:	4a5a      	ldr	r2, [pc, #360]	; (80093d4 <HAL_RCC_OscConfig+0x29c>)
 800926a:	5cd3      	ldrb	r3, [r2, r3]
 800926c:	f003 031f 	and.w	r3, r3, #31
 8009270:	fa21 f303 	lsr.w	r3, r1, r3
 8009274:	4a58      	ldr	r2, [pc, #352]	; (80093d8 <HAL_RCC_OscConfig+0x2a0>)
 8009276:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009278:	4b58      	ldr	r3, [pc, #352]	; (80093dc <HAL_RCC_OscConfig+0x2a4>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	4618      	mov	r0, r3
 800927e:	f7ff fadf 	bl	8008840 <HAL_InitTick>
 8009282:	4603      	mov	r3, r0
 8009284:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8009286:	7bfb      	ldrb	r3, [r7, #15]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d052      	beq.n	8009332 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800928c:	7bfb      	ldrb	r3, [r7, #15]
 800928e:	e331      	b.n	80098f4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	699b      	ldr	r3, [r3, #24]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d032      	beq.n	80092fe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8009298:	4b4d      	ldr	r3, [pc, #308]	; (80093d0 <HAL_RCC_OscConfig+0x298>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4a4c      	ldr	r2, [pc, #304]	; (80093d0 <HAL_RCC_OscConfig+0x298>)
 800929e:	f043 0301 	orr.w	r3, r3, #1
 80092a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80092a4:	f7ff fb18 	bl	80088d8 <HAL_GetTick>
 80092a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80092aa:	e008      	b.n	80092be <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80092ac:	f7ff fb14 	bl	80088d8 <HAL_GetTick>
 80092b0:	4602      	mov	r2, r0
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	1ad3      	subs	r3, r2, r3
 80092b6:	2b02      	cmp	r3, #2
 80092b8:	d901      	bls.n	80092be <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80092ba:	2303      	movs	r3, #3
 80092bc:	e31a      	b.n	80098f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80092be:	4b44      	ldr	r3, [pc, #272]	; (80093d0 <HAL_RCC_OscConfig+0x298>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f003 0302 	and.w	r3, r3, #2
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d0f0      	beq.n	80092ac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80092ca:	4b41      	ldr	r3, [pc, #260]	; (80093d0 <HAL_RCC_OscConfig+0x298>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4a40      	ldr	r2, [pc, #256]	; (80093d0 <HAL_RCC_OscConfig+0x298>)
 80092d0:	f043 0308 	orr.w	r3, r3, #8
 80092d4:	6013      	str	r3, [r2, #0]
 80092d6:	4b3e      	ldr	r3, [pc, #248]	; (80093d0 <HAL_RCC_OscConfig+0x298>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6a1b      	ldr	r3, [r3, #32]
 80092e2:	493b      	ldr	r1, [pc, #236]	; (80093d0 <HAL_RCC_OscConfig+0x298>)
 80092e4:	4313      	orrs	r3, r2
 80092e6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80092e8:	4b39      	ldr	r3, [pc, #228]	; (80093d0 <HAL_RCC_OscConfig+0x298>)
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	69db      	ldr	r3, [r3, #28]
 80092f4:	021b      	lsls	r3, r3, #8
 80092f6:	4936      	ldr	r1, [pc, #216]	; (80093d0 <HAL_RCC_OscConfig+0x298>)
 80092f8:	4313      	orrs	r3, r2
 80092fa:	604b      	str	r3, [r1, #4]
 80092fc:	e01a      	b.n	8009334 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80092fe:	4b34      	ldr	r3, [pc, #208]	; (80093d0 <HAL_RCC_OscConfig+0x298>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4a33      	ldr	r2, [pc, #204]	; (80093d0 <HAL_RCC_OscConfig+0x298>)
 8009304:	f023 0301 	bic.w	r3, r3, #1
 8009308:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800930a:	f7ff fae5 	bl	80088d8 <HAL_GetTick>
 800930e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009310:	e008      	b.n	8009324 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009312:	f7ff fae1 	bl	80088d8 <HAL_GetTick>
 8009316:	4602      	mov	r2, r0
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	1ad3      	subs	r3, r2, r3
 800931c:	2b02      	cmp	r3, #2
 800931e:	d901      	bls.n	8009324 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8009320:	2303      	movs	r3, #3
 8009322:	e2e7      	b.n	80098f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009324:	4b2a      	ldr	r3, [pc, #168]	; (80093d0 <HAL_RCC_OscConfig+0x298>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f003 0302 	and.w	r3, r3, #2
 800932c:	2b00      	cmp	r3, #0
 800932e:	d1f0      	bne.n	8009312 <HAL_RCC_OscConfig+0x1da>
 8009330:	e000      	b.n	8009334 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009332:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f003 0301 	and.w	r3, r3, #1
 800933c:	2b00      	cmp	r3, #0
 800933e:	d074      	beq.n	800942a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8009340:	69bb      	ldr	r3, [r7, #24]
 8009342:	2b08      	cmp	r3, #8
 8009344:	d005      	beq.n	8009352 <HAL_RCC_OscConfig+0x21a>
 8009346:	69bb      	ldr	r3, [r7, #24]
 8009348:	2b0c      	cmp	r3, #12
 800934a:	d10e      	bne.n	800936a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	2b03      	cmp	r3, #3
 8009350:	d10b      	bne.n	800936a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009352:	4b1f      	ldr	r3, [pc, #124]	; (80093d0 <HAL_RCC_OscConfig+0x298>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800935a:	2b00      	cmp	r3, #0
 800935c:	d064      	beq.n	8009428 <HAL_RCC_OscConfig+0x2f0>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	685b      	ldr	r3, [r3, #4]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d160      	bne.n	8009428 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8009366:	2301      	movs	r3, #1
 8009368:	e2c4      	b.n	80098f4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009372:	d106      	bne.n	8009382 <HAL_RCC_OscConfig+0x24a>
 8009374:	4b16      	ldr	r3, [pc, #88]	; (80093d0 <HAL_RCC_OscConfig+0x298>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	4a15      	ldr	r2, [pc, #84]	; (80093d0 <HAL_RCC_OscConfig+0x298>)
 800937a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800937e:	6013      	str	r3, [r2, #0]
 8009380:	e01d      	b.n	80093be <HAL_RCC_OscConfig+0x286>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800938a:	d10c      	bne.n	80093a6 <HAL_RCC_OscConfig+0x26e>
 800938c:	4b10      	ldr	r3, [pc, #64]	; (80093d0 <HAL_RCC_OscConfig+0x298>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a0f      	ldr	r2, [pc, #60]	; (80093d0 <HAL_RCC_OscConfig+0x298>)
 8009392:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009396:	6013      	str	r3, [r2, #0]
 8009398:	4b0d      	ldr	r3, [pc, #52]	; (80093d0 <HAL_RCC_OscConfig+0x298>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4a0c      	ldr	r2, [pc, #48]	; (80093d0 <HAL_RCC_OscConfig+0x298>)
 800939e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80093a2:	6013      	str	r3, [r2, #0]
 80093a4:	e00b      	b.n	80093be <HAL_RCC_OscConfig+0x286>
 80093a6:	4b0a      	ldr	r3, [pc, #40]	; (80093d0 <HAL_RCC_OscConfig+0x298>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4a09      	ldr	r2, [pc, #36]	; (80093d0 <HAL_RCC_OscConfig+0x298>)
 80093ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093b0:	6013      	str	r3, [r2, #0]
 80093b2:	4b07      	ldr	r3, [pc, #28]	; (80093d0 <HAL_RCC_OscConfig+0x298>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4a06      	ldr	r2, [pc, #24]	; (80093d0 <HAL_RCC_OscConfig+0x298>)
 80093b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80093bc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d01c      	beq.n	8009400 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093c6:	f7ff fa87 	bl	80088d8 <HAL_GetTick>
 80093ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80093cc:	e011      	b.n	80093f2 <HAL_RCC_OscConfig+0x2ba>
 80093ce:	bf00      	nop
 80093d0:	40021000 	.word	0x40021000
 80093d4:	08015c98 	.word	0x08015c98
 80093d8:	20000008 	.word	0x20000008
 80093dc:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80093e0:	f7ff fa7a 	bl	80088d8 <HAL_GetTick>
 80093e4:	4602      	mov	r2, r0
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	1ad3      	subs	r3, r2, r3
 80093ea:	2b64      	cmp	r3, #100	; 0x64
 80093ec:	d901      	bls.n	80093f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80093ee:	2303      	movs	r3, #3
 80093f0:	e280      	b.n	80098f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80093f2:	4baf      	ldr	r3, [pc, #700]	; (80096b0 <HAL_RCC_OscConfig+0x578>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d0f0      	beq.n	80093e0 <HAL_RCC_OscConfig+0x2a8>
 80093fe:	e014      	b.n	800942a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009400:	f7ff fa6a 	bl	80088d8 <HAL_GetTick>
 8009404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009406:	e008      	b.n	800941a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009408:	f7ff fa66 	bl	80088d8 <HAL_GetTick>
 800940c:	4602      	mov	r2, r0
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	1ad3      	subs	r3, r2, r3
 8009412:	2b64      	cmp	r3, #100	; 0x64
 8009414:	d901      	bls.n	800941a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009416:	2303      	movs	r3, #3
 8009418:	e26c      	b.n	80098f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800941a:	4ba5      	ldr	r3, [pc, #660]	; (80096b0 <HAL_RCC_OscConfig+0x578>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009422:	2b00      	cmp	r3, #0
 8009424:	d1f0      	bne.n	8009408 <HAL_RCC_OscConfig+0x2d0>
 8009426:	e000      	b.n	800942a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009428:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f003 0302 	and.w	r3, r3, #2
 8009432:	2b00      	cmp	r3, #0
 8009434:	d060      	beq.n	80094f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8009436:	69bb      	ldr	r3, [r7, #24]
 8009438:	2b04      	cmp	r3, #4
 800943a:	d005      	beq.n	8009448 <HAL_RCC_OscConfig+0x310>
 800943c:	69bb      	ldr	r3, [r7, #24]
 800943e:	2b0c      	cmp	r3, #12
 8009440:	d119      	bne.n	8009476 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	2b02      	cmp	r3, #2
 8009446:	d116      	bne.n	8009476 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009448:	4b99      	ldr	r3, [pc, #612]	; (80096b0 <HAL_RCC_OscConfig+0x578>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009450:	2b00      	cmp	r3, #0
 8009452:	d005      	beq.n	8009460 <HAL_RCC_OscConfig+0x328>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	68db      	ldr	r3, [r3, #12]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d101      	bne.n	8009460 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800945c:	2301      	movs	r3, #1
 800945e:	e249      	b.n	80098f4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009460:	4b93      	ldr	r3, [pc, #588]	; (80096b0 <HAL_RCC_OscConfig+0x578>)
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	691b      	ldr	r3, [r3, #16]
 800946c:	061b      	lsls	r3, r3, #24
 800946e:	4990      	ldr	r1, [pc, #576]	; (80096b0 <HAL_RCC_OscConfig+0x578>)
 8009470:	4313      	orrs	r3, r2
 8009472:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009474:	e040      	b.n	80094f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	68db      	ldr	r3, [r3, #12]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d023      	beq.n	80094c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800947e:	4b8c      	ldr	r3, [pc, #560]	; (80096b0 <HAL_RCC_OscConfig+0x578>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4a8b      	ldr	r2, [pc, #556]	; (80096b0 <HAL_RCC_OscConfig+0x578>)
 8009484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009488:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800948a:	f7ff fa25 	bl	80088d8 <HAL_GetTick>
 800948e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009490:	e008      	b.n	80094a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009492:	f7ff fa21 	bl	80088d8 <HAL_GetTick>
 8009496:	4602      	mov	r2, r0
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	1ad3      	subs	r3, r2, r3
 800949c:	2b02      	cmp	r3, #2
 800949e:	d901      	bls.n	80094a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80094a0:	2303      	movs	r3, #3
 80094a2:	e227      	b.n	80098f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80094a4:	4b82      	ldr	r3, [pc, #520]	; (80096b0 <HAL_RCC_OscConfig+0x578>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d0f0      	beq.n	8009492 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80094b0:	4b7f      	ldr	r3, [pc, #508]	; (80096b0 <HAL_RCC_OscConfig+0x578>)
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	691b      	ldr	r3, [r3, #16]
 80094bc:	061b      	lsls	r3, r3, #24
 80094be:	497c      	ldr	r1, [pc, #496]	; (80096b0 <HAL_RCC_OscConfig+0x578>)
 80094c0:	4313      	orrs	r3, r2
 80094c2:	604b      	str	r3, [r1, #4]
 80094c4:	e018      	b.n	80094f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80094c6:	4b7a      	ldr	r3, [pc, #488]	; (80096b0 <HAL_RCC_OscConfig+0x578>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4a79      	ldr	r2, [pc, #484]	; (80096b0 <HAL_RCC_OscConfig+0x578>)
 80094cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094d2:	f7ff fa01 	bl	80088d8 <HAL_GetTick>
 80094d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80094d8:	e008      	b.n	80094ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80094da:	f7ff f9fd 	bl	80088d8 <HAL_GetTick>
 80094de:	4602      	mov	r2, r0
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	1ad3      	subs	r3, r2, r3
 80094e4:	2b02      	cmp	r3, #2
 80094e6:	d901      	bls.n	80094ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80094e8:	2303      	movs	r3, #3
 80094ea:	e203      	b.n	80098f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80094ec:	4b70      	ldr	r3, [pc, #448]	; (80096b0 <HAL_RCC_OscConfig+0x578>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d1f0      	bne.n	80094da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f003 0308 	and.w	r3, r3, #8
 8009500:	2b00      	cmp	r3, #0
 8009502:	d03c      	beq.n	800957e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	695b      	ldr	r3, [r3, #20]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d01c      	beq.n	8009546 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800950c:	4b68      	ldr	r3, [pc, #416]	; (80096b0 <HAL_RCC_OscConfig+0x578>)
 800950e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009512:	4a67      	ldr	r2, [pc, #412]	; (80096b0 <HAL_RCC_OscConfig+0x578>)
 8009514:	f043 0301 	orr.w	r3, r3, #1
 8009518:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800951c:	f7ff f9dc 	bl	80088d8 <HAL_GetTick>
 8009520:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009522:	e008      	b.n	8009536 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009524:	f7ff f9d8 	bl	80088d8 <HAL_GetTick>
 8009528:	4602      	mov	r2, r0
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	1ad3      	subs	r3, r2, r3
 800952e:	2b02      	cmp	r3, #2
 8009530:	d901      	bls.n	8009536 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8009532:	2303      	movs	r3, #3
 8009534:	e1de      	b.n	80098f4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009536:	4b5e      	ldr	r3, [pc, #376]	; (80096b0 <HAL_RCC_OscConfig+0x578>)
 8009538:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800953c:	f003 0302 	and.w	r3, r3, #2
 8009540:	2b00      	cmp	r3, #0
 8009542:	d0ef      	beq.n	8009524 <HAL_RCC_OscConfig+0x3ec>
 8009544:	e01b      	b.n	800957e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009546:	4b5a      	ldr	r3, [pc, #360]	; (80096b0 <HAL_RCC_OscConfig+0x578>)
 8009548:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800954c:	4a58      	ldr	r2, [pc, #352]	; (80096b0 <HAL_RCC_OscConfig+0x578>)
 800954e:	f023 0301 	bic.w	r3, r3, #1
 8009552:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009556:	f7ff f9bf 	bl	80088d8 <HAL_GetTick>
 800955a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800955c:	e008      	b.n	8009570 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800955e:	f7ff f9bb 	bl	80088d8 <HAL_GetTick>
 8009562:	4602      	mov	r2, r0
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	1ad3      	subs	r3, r2, r3
 8009568:	2b02      	cmp	r3, #2
 800956a:	d901      	bls.n	8009570 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800956c:	2303      	movs	r3, #3
 800956e:	e1c1      	b.n	80098f4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009570:	4b4f      	ldr	r3, [pc, #316]	; (80096b0 <HAL_RCC_OscConfig+0x578>)
 8009572:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009576:	f003 0302 	and.w	r3, r3, #2
 800957a:	2b00      	cmp	r3, #0
 800957c:	d1ef      	bne.n	800955e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f003 0304 	and.w	r3, r3, #4
 8009586:	2b00      	cmp	r3, #0
 8009588:	f000 80a6 	beq.w	80096d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800958c:	2300      	movs	r3, #0
 800958e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8009590:	4b47      	ldr	r3, [pc, #284]	; (80096b0 <HAL_RCC_OscConfig+0x578>)
 8009592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009598:	2b00      	cmp	r3, #0
 800959a:	d10d      	bne.n	80095b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800959c:	4b44      	ldr	r3, [pc, #272]	; (80096b0 <HAL_RCC_OscConfig+0x578>)
 800959e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095a0:	4a43      	ldr	r2, [pc, #268]	; (80096b0 <HAL_RCC_OscConfig+0x578>)
 80095a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095a6:	6593      	str	r3, [r2, #88]	; 0x58
 80095a8:	4b41      	ldr	r3, [pc, #260]	; (80096b0 <HAL_RCC_OscConfig+0x578>)
 80095aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095b0:	60bb      	str	r3, [r7, #8]
 80095b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80095b4:	2301      	movs	r3, #1
 80095b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80095b8:	4b3e      	ldr	r3, [pc, #248]	; (80096b4 <HAL_RCC_OscConfig+0x57c>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d118      	bne.n	80095f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80095c4:	4b3b      	ldr	r3, [pc, #236]	; (80096b4 <HAL_RCC_OscConfig+0x57c>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4a3a      	ldr	r2, [pc, #232]	; (80096b4 <HAL_RCC_OscConfig+0x57c>)
 80095ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80095d0:	f7ff f982 	bl	80088d8 <HAL_GetTick>
 80095d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80095d6:	e008      	b.n	80095ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80095d8:	f7ff f97e 	bl	80088d8 <HAL_GetTick>
 80095dc:	4602      	mov	r2, r0
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	1ad3      	subs	r3, r2, r3
 80095e2:	2b02      	cmp	r3, #2
 80095e4:	d901      	bls.n	80095ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80095e6:	2303      	movs	r3, #3
 80095e8:	e184      	b.n	80098f4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80095ea:	4b32      	ldr	r3, [pc, #200]	; (80096b4 <HAL_RCC_OscConfig+0x57c>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d0f0      	beq.n	80095d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	689b      	ldr	r3, [r3, #8]
 80095fa:	2b01      	cmp	r3, #1
 80095fc:	d108      	bne.n	8009610 <HAL_RCC_OscConfig+0x4d8>
 80095fe:	4b2c      	ldr	r3, [pc, #176]	; (80096b0 <HAL_RCC_OscConfig+0x578>)
 8009600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009604:	4a2a      	ldr	r2, [pc, #168]	; (80096b0 <HAL_RCC_OscConfig+0x578>)
 8009606:	f043 0301 	orr.w	r3, r3, #1
 800960a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800960e:	e024      	b.n	800965a <HAL_RCC_OscConfig+0x522>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	689b      	ldr	r3, [r3, #8]
 8009614:	2b05      	cmp	r3, #5
 8009616:	d110      	bne.n	800963a <HAL_RCC_OscConfig+0x502>
 8009618:	4b25      	ldr	r3, [pc, #148]	; (80096b0 <HAL_RCC_OscConfig+0x578>)
 800961a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800961e:	4a24      	ldr	r2, [pc, #144]	; (80096b0 <HAL_RCC_OscConfig+0x578>)
 8009620:	f043 0304 	orr.w	r3, r3, #4
 8009624:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009628:	4b21      	ldr	r3, [pc, #132]	; (80096b0 <HAL_RCC_OscConfig+0x578>)
 800962a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800962e:	4a20      	ldr	r2, [pc, #128]	; (80096b0 <HAL_RCC_OscConfig+0x578>)
 8009630:	f043 0301 	orr.w	r3, r3, #1
 8009634:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009638:	e00f      	b.n	800965a <HAL_RCC_OscConfig+0x522>
 800963a:	4b1d      	ldr	r3, [pc, #116]	; (80096b0 <HAL_RCC_OscConfig+0x578>)
 800963c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009640:	4a1b      	ldr	r2, [pc, #108]	; (80096b0 <HAL_RCC_OscConfig+0x578>)
 8009642:	f023 0301 	bic.w	r3, r3, #1
 8009646:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800964a:	4b19      	ldr	r3, [pc, #100]	; (80096b0 <HAL_RCC_OscConfig+0x578>)
 800964c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009650:	4a17      	ldr	r2, [pc, #92]	; (80096b0 <HAL_RCC_OscConfig+0x578>)
 8009652:	f023 0304 	bic.w	r3, r3, #4
 8009656:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	689b      	ldr	r3, [r3, #8]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d016      	beq.n	8009690 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009662:	f7ff f939 	bl	80088d8 <HAL_GetTick>
 8009666:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009668:	e00a      	b.n	8009680 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800966a:	f7ff f935 	bl	80088d8 <HAL_GetTick>
 800966e:	4602      	mov	r2, r0
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	1ad3      	subs	r3, r2, r3
 8009674:	f241 3288 	movw	r2, #5000	; 0x1388
 8009678:	4293      	cmp	r3, r2
 800967a:	d901      	bls.n	8009680 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800967c:	2303      	movs	r3, #3
 800967e:	e139      	b.n	80098f4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009680:	4b0b      	ldr	r3, [pc, #44]	; (80096b0 <HAL_RCC_OscConfig+0x578>)
 8009682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009686:	f003 0302 	and.w	r3, r3, #2
 800968a:	2b00      	cmp	r3, #0
 800968c:	d0ed      	beq.n	800966a <HAL_RCC_OscConfig+0x532>
 800968e:	e01a      	b.n	80096c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009690:	f7ff f922 	bl	80088d8 <HAL_GetTick>
 8009694:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009696:	e00f      	b.n	80096b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009698:	f7ff f91e 	bl	80088d8 <HAL_GetTick>
 800969c:	4602      	mov	r2, r0
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	1ad3      	subs	r3, r2, r3
 80096a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d906      	bls.n	80096b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80096aa:	2303      	movs	r3, #3
 80096ac:	e122      	b.n	80098f4 <HAL_RCC_OscConfig+0x7bc>
 80096ae:	bf00      	nop
 80096b0:	40021000 	.word	0x40021000
 80096b4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80096b8:	4b90      	ldr	r3, [pc, #576]	; (80098fc <HAL_RCC_OscConfig+0x7c4>)
 80096ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096be:	f003 0302 	and.w	r3, r3, #2
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d1e8      	bne.n	8009698 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80096c6:	7ffb      	ldrb	r3, [r7, #31]
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	d105      	bne.n	80096d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80096cc:	4b8b      	ldr	r3, [pc, #556]	; (80098fc <HAL_RCC_OscConfig+0x7c4>)
 80096ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096d0:	4a8a      	ldr	r2, [pc, #552]	; (80098fc <HAL_RCC_OscConfig+0x7c4>)
 80096d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80096d6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096dc:	2b00      	cmp	r3, #0
 80096de:	f000 8108 	beq.w	80098f2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096e6:	2b02      	cmp	r3, #2
 80096e8:	f040 80d0 	bne.w	800988c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80096ec:	4b83      	ldr	r3, [pc, #524]	; (80098fc <HAL_RCC_OscConfig+0x7c4>)
 80096ee:	68db      	ldr	r3, [r3, #12]
 80096f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	f003 0203 	and.w	r2, r3, #3
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d130      	bne.n	8009762 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800970a:	3b01      	subs	r3, #1
 800970c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800970e:	429a      	cmp	r2, r3
 8009710:	d127      	bne.n	8009762 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800971c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800971e:	429a      	cmp	r2, r3
 8009720:	d11f      	bne.n	8009762 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800972c:	2a07      	cmp	r2, #7
 800972e:	bf14      	ite	ne
 8009730:	2201      	movne	r2, #1
 8009732:	2200      	moveq	r2, #0
 8009734:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009736:	4293      	cmp	r3, r2
 8009738:	d113      	bne.n	8009762 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009744:	085b      	lsrs	r3, r3, #1
 8009746:	3b01      	subs	r3, #1
 8009748:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800974a:	429a      	cmp	r2, r3
 800974c:	d109      	bne.n	8009762 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009758:	085b      	lsrs	r3, r3, #1
 800975a:	3b01      	subs	r3, #1
 800975c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800975e:	429a      	cmp	r2, r3
 8009760:	d06e      	beq.n	8009840 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009762:	69bb      	ldr	r3, [r7, #24]
 8009764:	2b0c      	cmp	r3, #12
 8009766:	d069      	beq.n	800983c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8009768:	4b64      	ldr	r3, [pc, #400]	; (80098fc <HAL_RCC_OscConfig+0x7c4>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009770:	2b00      	cmp	r3, #0
 8009772:	d105      	bne.n	8009780 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8009774:	4b61      	ldr	r3, [pc, #388]	; (80098fc <HAL_RCC_OscConfig+0x7c4>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800977c:	2b00      	cmp	r3, #0
 800977e:	d001      	beq.n	8009784 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8009780:	2301      	movs	r3, #1
 8009782:	e0b7      	b.n	80098f4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8009784:	4b5d      	ldr	r3, [pc, #372]	; (80098fc <HAL_RCC_OscConfig+0x7c4>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4a5c      	ldr	r2, [pc, #368]	; (80098fc <HAL_RCC_OscConfig+0x7c4>)
 800978a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800978e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009790:	f7ff f8a2 	bl	80088d8 <HAL_GetTick>
 8009794:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009796:	e008      	b.n	80097aa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009798:	f7ff f89e 	bl	80088d8 <HAL_GetTick>
 800979c:	4602      	mov	r2, r0
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	1ad3      	subs	r3, r2, r3
 80097a2:	2b02      	cmp	r3, #2
 80097a4:	d901      	bls.n	80097aa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80097a6:	2303      	movs	r3, #3
 80097a8:	e0a4      	b.n	80098f4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80097aa:	4b54      	ldr	r3, [pc, #336]	; (80098fc <HAL_RCC_OscConfig+0x7c4>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d1f0      	bne.n	8009798 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80097b6:	4b51      	ldr	r3, [pc, #324]	; (80098fc <HAL_RCC_OscConfig+0x7c4>)
 80097b8:	68da      	ldr	r2, [r3, #12]
 80097ba:	4b51      	ldr	r3, [pc, #324]	; (8009900 <HAL_RCC_OscConfig+0x7c8>)
 80097bc:	4013      	ands	r3, r2
 80097be:	687a      	ldr	r2, [r7, #4]
 80097c0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80097c2:	687a      	ldr	r2, [r7, #4]
 80097c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80097c6:	3a01      	subs	r2, #1
 80097c8:	0112      	lsls	r2, r2, #4
 80097ca:	4311      	orrs	r1, r2
 80097cc:	687a      	ldr	r2, [r7, #4]
 80097ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80097d0:	0212      	lsls	r2, r2, #8
 80097d2:	4311      	orrs	r1, r2
 80097d4:	687a      	ldr	r2, [r7, #4]
 80097d6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80097d8:	0852      	lsrs	r2, r2, #1
 80097da:	3a01      	subs	r2, #1
 80097dc:	0552      	lsls	r2, r2, #21
 80097de:	4311      	orrs	r1, r2
 80097e0:	687a      	ldr	r2, [r7, #4]
 80097e2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80097e4:	0852      	lsrs	r2, r2, #1
 80097e6:	3a01      	subs	r2, #1
 80097e8:	0652      	lsls	r2, r2, #25
 80097ea:	4311      	orrs	r1, r2
 80097ec:	687a      	ldr	r2, [r7, #4]
 80097ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80097f0:	0912      	lsrs	r2, r2, #4
 80097f2:	0452      	lsls	r2, r2, #17
 80097f4:	430a      	orrs	r2, r1
 80097f6:	4941      	ldr	r1, [pc, #260]	; (80098fc <HAL_RCC_OscConfig+0x7c4>)
 80097f8:	4313      	orrs	r3, r2
 80097fa:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80097fc:	4b3f      	ldr	r3, [pc, #252]	; (80098fc <HAL_RCC_OscConfig+0x7c4>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a3e      	ldr	r2, [pc, #248]	; (80098fc <HAL_RCC_OscConfig+0x7c4>)
 8009802:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009806:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009808:	4b3c      	ldr	r3, [pc, #240]	; (80098fc <HAL_RCC_OscConfig+0x7c4>)
 800980a:	68db      	ldr	r3, [r3, #12]
 800980c:	4a3b      	ldr	r2, [pc, #236]	; (80098fc <HAL_RCC_OscConfig+0x7c4>)
 800980e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009812:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009814:	f7ff f860 	bl	80088d8 <HAL_GetTick>
 8009818:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800981a:	e008      	b.n	800982e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800981c:	f7ff f85c 	bl	80088d8 <HAL_GetTick>
 8009820:	4602      	mov	r2, r0
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	1ad3      	subs	r3, r2, r3
 8009826:	2b02      	cmp	r3, #2
 8009828:	d901      	bls.n	800982e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800982a:	2303      	movs	r3, #3
 800982c:	e062      	b.n	80098f4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800982e:	4b33      	ldr	r3, [pc, #204]	; (80098fc <HAL_RCC_OscConfig+0x7c4>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009836:	2b00      	cmp	r3, #0
 8009838:	d0f0      	beq.n	800981c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800983a:	e05a      	b.n	80098f2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800983c:	2301      	movs	r3, #1
 800983e:	e059      	b.n	80098f4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009840:	4b2e      	ldr	r3, [pc, #184]	; (80098fc <HAL_RCC_OscConfig+0x7c4>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009848:	2b00      	cmp	r3, #0
 800984a:	d152      	bne.n	80098f2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800984c:	4b2b      	ldr	r3, [pc, #172]	; (80098fc <HAL_RCC_OscConfig+0x7c4>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a2a      	ldr	r2, [pc, #168]	; (80098fc <HAL_RCC_OscConfig+0x7c4>)
 8009852:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009856:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009858:	4b28      	ldr	r3, [pc, #160]	; (80098fc <HAL_RCC_OscConfig+0x7c4>)
 800985a:	68db      	ldr	r3, [r3, #12]
 800985c:	4a27      	ldr	r2, [pc, #156]	; (80098fc <HAL_RCC_OscConfig+0x7c4>)
 800985e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009862:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009864:	f7ff f838 	bl	80088d8 <HAL_GetTick>
 8009868:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800986a:	e008      	b.n	800987e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800986c:	f7ff f834 	bl	80088d8 <HAL_GetTick>
 8009870:	4602      	mov	r2, r0
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	1ad3      	subs	r3, r2, r3
 8009876:	2b02      	cmp	r3, #2
 8009878:	d901      	bls.n	800987e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800987a:	2303      	movs	r3, #3
 800987c:	e03a      	b.n	80098f4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800987e:	4b1f      	ldr	r3, [pc, #124]	; (80098fc <HAL_RCC_OscConfig+0x7c4>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009886:	2b00      	cmp	r3, #0
 8009888:	d0f0      	beq.n	800986c <HAL_RCC_OscConfig+0x734>
 800988a:	e032      	b.n	80098f2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800988c:	69bb      	ldr	r3, [r7, #24]
 800988e:	2b0c      	cmp	r3, #12
 8009890:	d02d      	beq.n	80098ee <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009892:	4b1a      	ldr	r3, [pc, #104]	; (80098fc <HAL_RCC_OscConfig+0x7c4>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	4a19      	ldr	r2, [pc, #100]	; (80098fc <HAL_RCC_OscConfig+0x7c4>)
 8009898:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800989c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800989e:	4b17      	ldr	r3, [pc, #92]	; (80098fc <HAL_RCC_OscConfig+0x7c4>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d105      	bne.n	80098b6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80098aa:	4b14      	ldr	r3, [pc, #80]	; (80098fc <HAL_RCC_OscConfig+0x7c4>)
 80098ac:	68db      	ldr	r3, [r3, #12]
 80098ae:	4a13      	ldr	r2, [pc, #76]	; (80098fc <HAL_RCC_OscConfig+0x7c4>)
 80098b0:	f023 0303 	bic.w	r3, r3, #3
 80098b4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80098b6:	4b11      	ldr	r3, [pc, #68]	; (80098fc <HAL_RCC_OscConfig+0x7c4>)
 80098b8:	68db      	ldr	r3, [r3, #12]
 80098ba:	4a10      	ldr	r2, [pc, #64]	; (80098fc <HAL_RCC_OscConfig+0x7c4>)
 80098bc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80098c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80098c4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098c6:	f7ff f807 	bl	80088d8 <HAL_GetTick>
 80098ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80098cc:	e008      	b.n	80098e0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80098ce:	f7ff f803 	bl	80088d8 <HAL_GetTick>
 80098d2:	4602      	mov	r2, r0
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	1ad3      	subs	r3, r2, r3
 80098d8:	2b02      	cmp	r3, #2
 80098da:	d901      	bls.n	80098e0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80098dc:	2303      	movs	r3, #3
 80098de:	e009      	b.n	80098f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80098e0:	4b06      	ldr	r3, [pc, #24]	; (80098fc <HAL_RCC_OscConfig+0x7c4>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d1f0      	bne.n	80098ce <HAL_RCC_OscConfig+0x796>
 80098ec:	e001      	b.n	80098f2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80098ee:	2301      	movs	r3, #1
 80098f0:	e000      	b.n	80098f4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80098f2:	2300      	movs	r3, #0
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3720      	adds	r7, #32
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}
 80098fc:	40021000 	.word	0x40021000
 8009900:	f99d808c 	.word	0xf99d808c

08009904 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b084      	sub	sp, #16
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d101      	bne.n	8009918 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009914:	2301      	movs	r3, #1
 8009916:	e0c8      	b.n	8009aaa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009918:	4b66      	ldr	r3, [pc, #408]	; (8009ab4 <HAL_RCC_ClockConfig+0x1b0>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f003 0307 	and.w	r3, r3, #7
 8009920:	683a      	ldr	r2, [r7, #0]
 8009922:	429a      	cmp	r2, r3
 8009924:	d910      	bls.n	8009948 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009926:	4b63      	ldr	r3, [pc, #396]	; (8009ab4 <HAL_RCC_ClockConfig+0x1b0>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f023 0207 	bic.w	r2, r3, #7
 800992e:	4961      	ldr	r1, [pc, #388]	; (8009ab4 <HAL_RCC_ClockConfig+0x1b0>)
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	4313      	orrs	r3, r2
 8009934:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009936:	4b5f      	ldr	r3, [pc, #380]	; (8009ab4 <HAL_RCC_ClockConfig+0x1b0>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f003 0307 	and.w	r3, r3, #7
 800993e:	683a      	ldr	r2, [r7, #0]
 8009940:	429a      	cmp	r2, r3
 8009942:	d001      	beq.n	8009948 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009944:	2301      	movs	r3, #1
 8009946:	e0b0      	b.n	8009aaa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f003 0301 	and.w	r3, r3, #1
 8009950:	2b00      	cmp	r3, #0
 8009952:	d04c      	beq.n	80099ee <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	685b      	ldr	r3, [r3, #4]
 8009958:	2b03      	cmp	r3, #3
 800995a:	d107      	bne.n	800996c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800995c:	4b56      	ldr	r3, [pc, #344]	; (8009ab8 <HAL_RCC_ClockConfig+0x1b4>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009964:	2b00      	cmp	r3, #0
 8009966:	d121      	bne.n	80099ac <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8009968:	2301      	movs	r3, #1
 800996a:	e09e      	b.n	8009aaa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	685b      	ldr	r3, [r3, #4]
 8009970:	2b02      	cmp	r3, #2
 8009972:	d107      	bne.n	8009984 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009974:	4b50      	ldr	r3, [pc, #320]	; (8009ab8 <HAL_RCC_ClockConfig+0x1b4>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800997c:	2b00      	cmp	r3, #0
 800997e:	d115      	bne.n	80099ac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8009980:	2301      	movs	r3, #1
 8009982:	e092      	b.n	8009aaa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d107      	bne.n	800999c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800998c:	4b4a      	ldr	r3, [pc, #296]	; (8009ab8 <HAL_RCC_ClockConfig+0x1b4>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f003 0302 	and.w	r3, r3, #2
 8009994:	2b00      	cmp	r3, #0
 8009996:	d109      	bne.n	80099ac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8009998:	2301      	movs	r3, #1
 800999a:	e086      	b.n	8009aaa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800999c:	4b46      	ldr	r3, [pc, #280]	; (8009ab8 <HAL_RCC_ClockConfig+0x1b4>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d101      	bne.n	80099ac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80099a8:	2301      	movs	r3, #1
 80099aa:	e07e      	b.n	8009aaa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80099ac:	4b42      	ldr	r3, [pc, #264]	; (8009ab8 <HAL_RCC_ClockConfig+0x1b4>)
 80099ae:	689b      	ldr	r3, [r3, #8]
 80099b0:	f023 0203 	bic.w	r2, r3, #3
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	685b      	ldr	r3, [r3, #4]
 80099b8:	493f      	ldr	r1, [pc, #252]	; (8009ab8 <HAL_RCC_ClockConfig+0x1b4>)
 80099ba:	4313      	orrs	r3, r2
 80099bc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099be:	f7fe ff8b 	bl	80088d8 <HAL_GetTick>
 80099c2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80099c4:	e00a      	b.n	80099dc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80099c6:	f7fe ff87 	bl	80088d8 <HAL_GetTick>
 80099ca:	4602      	mov	r2, r0
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	1ad3      	subs	r3, r2, r3
 80099d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d901      	bls.n	80099dc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80099d8:	2303      	movs	r3, #3
 80099da:	e066      	b.n	8009aaa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80099dc:	4b36      	ldr	r3, [pc, #216]	; (8009ab8 <HAL_RCC_ClockConfig+0x1b4>)
 80099de:	689b      	ldr	r3, [r3, #8]
 80099e0:	f003 020c 	and.w	r2, r3, #12
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	009b      	lsls	r3, r3, #2
 80099ea:	429a      	cmp	r2, r3
 80099ec:	d1eb      	bne.n	80099c6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f003 0302 	and.w	r3, r3, #2
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d008      	beq.n	8009a0c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80099fa:	4b2f      	ldr	r3, [pc, #188]	; (8009ab8 <HAL_RCC_ClockConfig+0x1b4>)
 80099fc:	689b      	ldr	r3, [r3, #8]
 80099fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	689b      	ldr	r3, [r3, #8]
 8009a06:	492c      	ldr	r1, [pc, #176]	; (8009ab8 <HAL_RCC_ClockConfig+0x1b4>)
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009a0c:	4b29      	ldr	r3, [pc, #164]	; (8009ab4 <HAL_RCC_ClockConfig+0x1b0>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f003 0307 	and.w	r3, r3, #7
 8009a14:	683a      	ldr	r2, [r7, #0]
 8009a16:	429a      	cmp	r2, r3
 8009a18:	d210      	bcs.n	8009a3c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009a1a:	4b26      	ldr	r3, [pc, #152]	; (8009ab4 <HAL_RCC_ClockConfig+0x1b0>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f023 0207 	bic.w	r2, r3, #7
 8009a22:	4924      	ldr	r1, [pc, #144]	; (8009ab4 <HAL_RCC_ClockConfig+0x1b0>)
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	4313      	orrs	r3, r2
 8009a28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009a2a:	4b22      	ldr	r3, [pc, #136]	; (8009ab4 <HAL_RCC_ClockConfig+0x1b0>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f003 0307 	and.w	r3, r3, #7
 8009a32:	683a      	ldr	r2, [r7, #0]
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d001      	beq.n	8009a3c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8009a38:	2301      	movs	r3, #1
 8009a3a:	e036      	b.n	8009aaa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f003 0304 	and.w	r3, r3, #4
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d008      	beq.n	8009a5a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009a48:	4b1b      	ldr	r3, [pc, #108]	; (8009ab8 <HAL_RCC_ClockConfig+0x1b4>)
 8009a4a:	689b      	ldr	r3, [r3, #8]
 8009a4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	68db      	ldr	r3, [r3, #12]
 8009a54:	4918      	ldr	r1, [pc, #96]	; (8009ab8 <HAL_RCC_ClockConfig+0x1b4>)
 8009a56:	4313      	orrs	r3, r2
 8009a58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f003 0308 	and.w	r3, r3, #8
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d009      	beq.n	8009a7a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009a66:	4b14      	ldr	r3, [pc, #80]	; (8009ab8 <HAL_RCC_ClockConfig+0x1b4>)
 8009a68:	689b      	ldr	r3, [r3, #8]
 8009a6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	691b      	ldr	r3, [r3, #16]
 8009a72:	00db      	lsls	r3, r3, #3
 8009a74:	4910      	ldr	r1, [pc, #64]	; (8009ab8 <HAL_RCC_ClockConfig+0x1b4>)
 8009a76:	4313      	orrs	r3, r2
 8009a78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009a7a:	f000 f825 	bl	8009ac8 <HAL_RCC_GetSysClockFreq>
 8009a7e:	4601      	mov	r1, r0
 8009a80:	4b0d      	ldr	r3, [pc, #52]	; (8009ab8 <HAL_RCC_ClockConfig+0x1b4>)
 8009a82:	689b      	ldr	r3, [r3, #8]
 8009a84:	091b      	lsrs	r3, r3, #4
 8009a86:	f003 030f 	and.w	r3, r3, #15
 8009a8a:	4a0c      	ldr	r2, [pc, #48]	; (8009abc <HAL_RCC_ClockConfig+0x1b8>)
 8009a8c:	5cd3      	ldrb	r3, [r2, r3]
 8009a8e:	f003 031f 	and.w	r3, r3, #31
 8009a92:	fa21 f303 	lsr.w	r3, r1, r3
 8009a96:	4a0a      	ldr	r2, [pc, #40]	; (8009ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8009a98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009a9a:	4b0a      	ldr	r3, [pc, #40]	; (8009ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f7fe fece 	bl	8008840 <HAL_InitTick>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	72fb      	strb	r3, [r7, #11]

  return status;
 8009aa8:	7afb      	ldrb	r3, [r7, #11]
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3710      	adds	r7, #16
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}
 8009ab2:	bf00      	nop
 8009ab4:	40022000 	.word	0x40022000
 8009ab8:	40021000 	.word	0x40021000
 8009abc:	08015c98 	.word	0x08015c98
 8009ac0:	20000008 	.word	0x20000008
 8009ac4:	2000000c 	.word	0x2000000c

08009ac8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b089      	sub	sp, #36	; 0x24
 8009acc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	61fb      	str	r3, [r7, #28]
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009ad6:	4b3d      	ldr	r3, [pc, #244]	; (8009bcc <HAL_RCC_GetSysClockFreq+0x104>)
 8009ad8:	689b      	ldr	r3, [r3, #8]
 8009ada:	f003 030c 	and.w	r3, r3, #12
 8009ade:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009ae0:	4b3a      	ldr	r3, [pc, #232]	; (8009bcc <HAL_RCC_GetSysClockFreq+0x104>)
 8009ae2:	68db      	ldr	r3, [r3, #12]
 8009ae4:	f003 0303 	and.w	r3, r3, #3
 8009ae8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d005      	beq.n	8009afc <HAL_RCC_GetSysClockFreq+0x34>
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	2b0c      	cmp	r3, #12
 8009af4:	d121      	bne.n	8009b3a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d11e      	bne.n	8009b3a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009afc:	4b33      	ldr	r3, [pc, #204]	; (8009bcc <HAL_RCC_GetSysClockFreq+0x104>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f003 0308 	and.w	r3, r3, #8
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d107      	bne.n	8009b18 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009b08:	4b30      	ldr	r3, [pc, #192]	; (8009bcc <HAL_RCC_GetSysClockFreq+0x104>)
 8009b0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009b0e:	0a1b      	lsrs	r3, r3, #8
 8009b10:	f003 030f 	and.w	r3, r3, #15
 8009b14:	61fb      	str	r3, [r7, #28]
 8009b16:	e005      	b.n	8009b24 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009b18:	4b2c      	ldr	r3, [pc, #176]	; (8009bcc <HAL_RCC_GetSysClockFreq+0x104>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	091b      	lsrs	r3, r3, #4
 8009b1e:	f003 030f 	and.w	r3, r3, #15
 8009b22:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009b24:	4a2a      	ldr	r2, [pc, #168]	; (8009bd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8009b26:	69fb      	ldr	r3, [r7, #28]
 8009b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b2c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d10d      	bne.n	8009b50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009b34:	69fb      	ldr	r3, [r7, #28]
 8009b36:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009b38:	e00a      	b.n	8009b50 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	2b04      	cmp	r3, #4
 8009b3e:	d102      	bne.n	8009b46 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009b40:	4b24      	ldr	r3, [pc, #144]	; (8009bd4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8009b42:	61bb      	str	r3, [r7, #24]
 8009b44:	e004      	b.n	8009b50 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	2b08      	cmp	r3, #8
 8009b4a:	d101      	bne.n	8009b50 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009b4c:	4b22      	ldr	r3, [pc, #136]	; (8009bd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8009b4e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	2b0c      	cmp	r3, #12
 8009b54:	d133      	bne.n	8009bbe <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009b56:	4b1d      	ldr	r3, [pc, #116]	; (8009bcc <HAL_RCC_GetSysClockFreq+0x104>)
 8009b58:	68db      	ldr	r3, [r3, #12]
 8009b5a:	f003 0303 	and.w	r3, r3, #3
 8009b5e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	2b02      	cmp	r3, #2
 8009b64:	d002      	beq.n	8009b6c <HAL_RCC_GetSysClockFreq+0xa4>
 8009b66:	2b03      	cmp	r3, #3
 8009b68:	d003      	beq.n	8009b72 <HAL_RCC_GetSysClockFreq+0xaa>
 8009b6a:	e005      	b.n	8009b78 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8009b6c:	4b19      	ldr	r3, [pc, #100]	; (8009bd4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8009b6e:	617b      	str	r3, [r7, #20]
      break;
 8009b70:	e005      	b.n	8009b7e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8009b72:	4b19      	ldr	r3, [pc, #100]	; (8009bd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8009b74:	617b      	str	r3, [r7, #20]
      break;
 8009b76:	e002      	b.n	8009b7e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8009b78:	69fb      	ldr	r3, [r7, #28]
 8009b7a:	617b      	str	r3, [r7, #20]
      break;
 8009b7c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009b7e:	4b13      	ldr	r3, [pc, #76]	; (8009bcc <HAL_RCC_GetSysClockFreq+0x104>)
 8009b80:	68db      	ldr	r3, [r3, #12]
 8009b82:	091b      	lsrs	r3, r3, #4
 8009b84:	f003 0307 	and.w	r3, r3, #7
 8009b88:	3301      	adds	r3, #1
 8009b8a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009b8c:	4b0f      	ldr	r3, [pc, #60]	; (8009bcc <HAL_RCC_GetSysClockFreq+0x104>)
 8009b8e:	68db      	ldr	r3, [r3, #12]
 8009b90:	0a1b      	lsrs	r3, r3, #8
 8009b92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b96:	697a      	ldr	r2, [r7, #20]
 8009b98:	fb02 f203 	mul.w	r2, r2, r3
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ba2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009ba4:	4b09      	ldr	r3, [pc, #36]	; (8009bcc <HAL_RCC_GetSysClockFreq+0x104>)
 8009ba6:	68db      	ldr	r3, [r3, #12]
 8009ba8:	0e5b      	lsrs	r3, r3, #25
 8009baa:	f003 0303 	and.w	r3, r3, #3
 8009bae:	3301      	adds	r3, #1
 8009bb0:	005b      	lsls	r3, r3, #1
 8009bb2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8009bb4:	697a      	ldr	r2, [r7, #20]
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bbc:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8009bbe:	69bb      	ldr	r3, [r7, #24]
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3724      	adds	r7, #36	; 0x24
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr
 8009bcc:	40021000 	.word	0x40021000
 8009bd0:	08015cb0 	.word	0x08015cb0
 8009bd4:	00f42400 	.word	0x00f42400
 8009bd8:	007a1200 	.word	0x007a1200

08009bdc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009be0:	4b03      	ldr	r3, [pc, #12]	; (8009bf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8009be2:	681b      	ldr	r3, [r3, #0]
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	46bd      	mov	sp, r7
 8009be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bec:	4770      	bx	lr
 8009bee:	bf00      	nop
 8009bf0:	20000008 	.word	0x20000008

08009bf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009bf8:	f7ff fff0 	bl	8009bdc <HAL_RCC_GetHCLKFreq>
 8009bfc:	4601      	mov	r1, r0
 8009bfe:	4b06      	ldr	r3, [pc, #24]	; (8009c18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009c00:	689b      	ldr	r3, [r3, #8]
 8009c02:	0a1b      	lsrs	r3, r3, #8
 8009c04:	f003 0307 	and.w	r3, r3, #7
 8009c08:	4a04      	ldr	r2, [pc, #16]	; (8009c1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8009c0a:	5cd3      	ldrb	r3, [r2, r3]
 8009c0c:	f003 031f 	and.w	r3, r3, #31
 8009c10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	bd80      	pop	{r7, pc}
 8009c18:	40021000 	.word	0x40021000
 8009c1c:	08015ca8 	.word	0x08015ca8

08009c20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009c24:	f7ff ffda 	bl	8009bdc <HAL_RCC_GetHCLKFreq>
 8009c28:	4601      	mov	r1, r0
 8009c2a:	4b06      	ldr	r3, [pc, #24]	; (8009c44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009c2c:	689b      	ldr	r3, [r3, #8]
 8009c2e:	0adb      	lsrs	r3, r3, #11
 8009c30:	f003 0307 	and.w	r3, r3, #7
 8009c34:	4a04      	ldr	r2, [pc, #16]	; (8009c48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009c36:	5cd3      	ldrb	r3, [r2, r3]
 8009c38:	f003 031f 	and.w	r3, r3, #31
 8009c3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	bd80      	pop	{r7, pc}
 8009c44:	40021000 	.word	0x40021000
 8009c48:	08015ca8 	.word	0x08015ca8

08009c4c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b086      	sub	sp, #24
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009c54:	2300      	movs	r3, #0
 8009c56:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009c58:	4b2a      	ldr	r3, [pc, #168]	; (8009d04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d003      	beq.n	8009c6c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009c64:	f7ff fa04 	bl	8009070 <HAL_PWREx_GetVoltageRange>
 8009c68:	6178      	str	r0, [r7, #20]
 8009c6a:	e014      	b.n	8009c96 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009c6c:	4b25      	ldr	r3, [pc, #148]	; (8009d04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c70:	4a24      	ldr	r2, [pc, #144]	; (8009d04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009c72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c76:	6593      	str	r3, [r2, #88]	; 0x58
 8009c78:	4b22      	ldr	r3, [pc, #136]	; (8009d04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c80:	60fb      	str	r3, [r7, #12]
 8009c82:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8009c84:	f7ff f9f4 	bl	8009070 <HAL_PWREx_GetVoltageRange>
 8009c88:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8009c8a:	4b1e      	ldr	r3, [pc, #120]	; (8009d04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c8e:	4a1d      	ldr	r2, [pc, #116]	; (8009d04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009c90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c94:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c9c:	d10b      	bne.n	8009cb6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2b80      	cmp	r3, #128	; 0x80
 8009ca2:	d919      	bls.n	8009cd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2ba0      	cmp	r3, #160	; 0xa0
 8009ca8:	d902      	bls.n	8009cb0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009caa:	2302      	movs	r3, #2
 8009cac:	613b      	str	r3, [r7, #16]
 8009cae:	e013      	b.n	8009cd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	613b      	str	r3, [r7, #16]
 8009cb4:	e010      	b.n	8009cd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2b80      	cmp	r3, #128	; 0x80
 8009cba:	d902      	bls.n	8009cc2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8009cbc:	2303      	movs	r3, #3
 8009cbe:	613b      	str	r3, [r7, #16]
 8009cc0:	e00a      	b.n	8009cd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2b80      	cmp	r3, #128	; 0x80
 8009cc6:	d102      	bne.n	8009cce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009cc8:	2302      	movs	r3, #2
 8009cca:	613b      	str	r3, [r7, #16]
 8009ccc:	e004      	b.n	8009cd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2b70      	cmp	r3, #112	; 0x70
 8009cd2:	d101      	bne.n	8009cd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009cd8:	4b0b      	ldr	r3, [pc, #44]	; (8009d08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f023 0207 	bic.w	r2, r3, #7
 8009ce0:	4909      	ldr	r1, [pc, #36]	; (8009d08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009ce8:	4b07      	ldr	r3, [pc, #28]	; (8009d08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f003 0307 	and.w	r3, r3, #7
 8009cf0:	693a      	ldr	r2, [r7, #16]
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	d001      	beq.n	8009cfa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	e000      	b.n	8009cfc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8009cfa:	2300      	movs	r3, #0
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3718      	adds	r7, #24
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}
 8009d04:	40021000 	.word	0x40021000
 8009d08:	40022000 	.word	0x40022000

08009d0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b086      	sub	sp, #24
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009d14:	2300      	movs	r3, #0
 8009d16:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009d18:	2300      	movs	r3, #0
 8009d1a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d03f      	beq.n	8009da8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d30:	d01c      	beq.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8009d32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d36:	d802      	bhi.n	8009d3e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d00e      	beq.n	8009d5a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8009d3c:	e01f      	b.n	8009d7e <HAL_RCCEx_PeriphCLKConfig+0x72>
 8009d3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009d42:	d003      	beq.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8009d44:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009d48:	d01c      	beq.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8009d4a:	e018      	b.n	8009d7e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009d4c:	4b85      	ldr	r3, [pc, #532]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009d4e:	68db      	ldr	r3, [r3, #12]
 8009d50:	4a84      	ldr	r2, [pc, #528]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009d52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d56:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009d58:	e015      	b.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	3304      	adds	r3, #4
 8009d5e:	2100      	movs	r1, #0
 8009d60:	4618      	mov	r0, r3
 8009d62:	f000 fab9 	bl	800a2d8 <RCCEx_PLLSAI1_Config>
 8009d66:	4603      	mov	r3, r0
 8009d68:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009d6a:	e00c      	b.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	3320      	adds	r3, #32
 8009d70:	2100      	movs	r1, #0
 8009d72:	4618      	mov	r0, r3
 8009d74:	f000 fba0 	bl	800a4b8 <RCCEx_PLLSAI2_Config>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009d7c:	e003      	b.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d7e:	2301      	movs	r3, #1
 8009d80:	74fb      	strb	r3, [r7, #19]
      break;
 8009d82:	e000      	b.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8009d84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d86:	7cfb      	ldrb	r3, [r7, #19]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d10b      	bne.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009d8c:	4b75      	ldr	r3, [pc, #468]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d92:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d9a:	4972      	ldr	r1, [pc, #456]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009d9c:	4313      	orrs	r3, r2
 8009d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8009da2:	e001      	b.n	8009da8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009da4:	7cfb      	ldrb	r3, [r7, #19]
 8009da6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d03f      	beq.n	8009e34 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009db8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009dbc:	d01c      	beq.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8009dbe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009dc2:	d802      	bhi.n	8009dca <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d00e      	beq.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8009dc8:	e01f      	b.n	8009e0a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009dca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009dce:	d003      	beq.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8009dd0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009dd4:	d01c      	beq.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8009dd6:	e018      	b.n	8009e0a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009dd8:	4b62      	ldr	r3, [pc, #392]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009dda:	68db      	ldr	r3, [r3, #12]
 8009ddc:	4a61      	ldr	r2, [pc, #388]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009dde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009de2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009de4:	e015      	b.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	3304      	adds	r3, #4
 8009dea:	2100      	movs	r1, #0
 8009dec:	4618      	mov	r0, r3
 8009dee:	f000 fa73 	bl	800a2d8 <RCCEx_PLLSAI1_Config>
 8009df2:	4603      	mov	r3, r0
 8009df4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009df6:	e00c      	b.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	3320      	adds	r3, #32
 8009dfc:	2100      	movs	r1, #0
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f000 fb5a 	bl	800a4b8 <RCCEx_PLLSAI2_Config>
 8009e04:	4603      	mov	r3, r0
 8009e06:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009e08:	e003      	b.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	74fb      	strb	r3, [r7, #19]
      break;
 8009e0e:	e000      	b.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009e10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e12:	7cfb      	ldrb	r3, [r7, #19]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d10b      	bne.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009e18:	4b52      	ldr	r3, [pc, #328]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e1e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e26:	494f      	ldr	r1, [pc, #316]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009e28:	4313      	orrs	r3, r2
 8009e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8009e2e:	e001      	b.n	8009e34 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e30:	7cfb      	ldrb	r3, [r7, #19]
 8009e32:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	f000 80a0 	beq.w	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009e42:	2300      	movs	r3, #0
 8009e44:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009e46:	4b47      	ldr	r3, [pc, #284]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d101      	bne.n	8009e56 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8009e52:	2301      	movs	r3, #1
 8009e54:	e000      	b.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8009e56:	2300      	movs	r3, #0
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d00d      	beq.n	8009e78 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009e5c:	4b41      	ldr	r3, [pc, #260]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e60:	4a40      	ldr	r2, [pc, #256]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009e62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e66:	6593      	str	r3, [r2, #88]	; 0x58
 8009e68:	4b3e      	ldr	r3, [pc, #248]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e70:	60bb      	str	r3, [r7, #8]
 8009e72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009e74:	2301      	movs	r3, #1
 8009e76:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009e78:	4b3b      	ldr	r3, [pc, #236]	; (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4a3a      	ldr	r2, [pc, #232]	; (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8009e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009e84:	f7fe fd28 	bl	80088d8 <HAL_GetTick>
 8009e88:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009e8a:	e009      	b.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009e8c:	f7fe fd24 	bl	80088d8 <HAL_GetTick>
 8009e90:	4602      	mov	r2, r0
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	1ad3      	subs	r3, r2, r3
 8009e96:	2b02      	cmp	r3, #2
 8009e98:	d902      	bls.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8009e9a:	2303      	movs	r3, #3
 8009e9c:	74fb      	strb	r3, [r7, #19]
        break;
 8009e9e:	e005      	b.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009ea0:	4b31      	ldr	r3, [pc, #196]	; (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d0ef      	beq.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8009eac:	7cfb      	ldrb	r3, [r7, #19]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d15c      	bne.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009eb2:	4b2c      	ldr	r3, [pc, #176]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009eb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ebc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d01f      	beq.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009eca:	697a      	ldr	r2, [r7, #20]
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	d019      	beq.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009ed0:	4b24      	ldr	r3, [pc, #144]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ed6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009eda:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009edc:	4b21      	ldr	r3, [pc, #132]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ee2:	4a20      	ldr	r2, [pc, #128]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ee8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009eec:	4b1d      	ldr	r3, [pc, #116]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ef2:	4a1c      	ldr	r2, [pc, #112]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009ef4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ef8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009efc:	4a19      	ldr	r2, [pc, #100]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	f003 0301 	and.w	r3, r3, #1
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d016      	beq.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f0e:	f7fe fce3 	bl	80088d8 <HAL_GetTick>
 8009f12:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009f14:	e00b      	b.n	8009f2e <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f16:	f7fe fcdf 	bl	80088d8 <HAL_GetTick>
 8009f1a:	4602      	mov	r2, r0
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	1ad3      	subs	r3, r2, r3
 8009f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d902      	bls.n	8009f2e <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8009f28:	2303      	movs	r3, #3
 8009f2a:	74fb      	strb	r3, [r7, #19]
            break;
 8009f2c:	e006      	b.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009f2e:	4b0d      	ldr	r3, [pc, #52]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f34:	f003 0302 	and.w	r3, r3, #2
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d0ec      	beq.n	8009f16 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8009f3c:	7cfb      	ldrb	r3, [r7, #19]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d10c      	bne.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009f42:	4b08      	ldr	r3, [pc, #32]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f52:	4904      	ldr	r1, [pc, #16]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009f54:	4313      	orrs	r3, r2
 8009f56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009f5a:	e009      	b.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009f5c:	7cfb      	ldrb	r3, [r7, #19]
 8009f5e:	74bb      	strb	r3, [r7, #18]
 8009f60:	e006      	b.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8009f62:	bf00      	nop
 8009f64:	40021000 	.word	0x40021000
 8009f68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f6c:	7cfb      	ldrb	r3, [r7, #19]
 8009f6e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009f70:	7c7b      	ldrb	r3, [r7, #17]
 8009f72:	2b01      	cmp	r3, #1
 8009f74:	d105      	bne.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009f76:	4b9e      	ldr	r3, [pc, #632]	; (800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f7a:	4a9d      	ldr	r2, [pc, #628]	; (800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009f7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f80:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f003 0301 	and.w	r3, r3, #1
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d00a      	beq.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009f8e:	4b98      	ldr	r3, [pc, #608]	; (800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f94:	f023 0203 	bic.w	r2, r3, #3
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f9c:	4994      	ldr	r1, [pc, #592]	; (800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f003 0302 	and.w	r3, r3, #2
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d00a      	beq.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009fb0:	4b8f      	ldr	r3, [pc, #572]	; (800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fb6:	f023 020c 	bic.w	r2, r3, #12
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fbe:	498c      	ldr	r1, [pc, #560]	; (800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009fc0:	4313      	orrs	r3, r2
 8009fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f003 0304 	and.w	r3, r3, #4
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d00a      	beq.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009fd2:	4b87      	ldr	r3, [pc, #540]	; (800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fd8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fe0:	4983      	ldr	r1, [pc, #524]	; (800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009fe2:	4313      	orrs	r3, r2
 8009fe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f003 0308 	and.w	r3, r3, #8
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d00a      	beq.n	800a00a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009ff4:	4b7e      	ldr	r3, [pc, #504]	; (800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ffa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a002:	497b      	ldr	r1, [pc, #492]	; (800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800a004:	4313      	orrs	r3, r2
 800a006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f003 0310 	and.w	r3, r3, #16
 800a012:	2b00      	cmp	r3, #0
 800a014:	d00a      	beq.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a016:	4b76      	ldr	r3, [pc, #472]	; (800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800a018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a01c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a024:	4972      	ldr	r1, [pc, #456]	; (800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800a026:	4313      	orrs	r3, r2
 800a028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f003 0320 	and.w	r3, r3, #32
 800a034:	2b00      	cmp	r3, #0
 800a036:	d00a      	beq.n	800a04e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a038:	4b6d      	ldr	r3, [pc, #436]	; (800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800a03a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a03e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a046:	496a      	ldr	r1, [pc, #424]	; (800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800a048:	4313      	orrs	r3, r2
 800a04a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a056:	2b00      	cmp	r3, #0
 800a058:	d00a      	beq.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a05a:	4b65      	ldr	r3, [pc, #404]	; (800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800a05c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a060:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a068:	4961      	ldr	r1, [pc, #388]	; (800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800a06a:	4313      	orrs	r3, r2
 800a06c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d00a      	beq.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a07c:	4b5c      	ldr	r3, [pc, #368]	; (800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800a07e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a082:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a08a:	4959      	ldr	r1, [pc, #356]	; (800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800a08c:	4313      	orrs	r3, r2
 800a08e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d00a      	beq.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a09e:	4b54      	ldr	r3, [pc, #336]	; (800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800a0a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0a4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0ac:	4950      	ldr	r1, [pc, #320]	; (800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d00a      	beq.n	800a0d6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a0c0:	4b4b      	ldr	r3, [pc, #300]	; (800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800a0c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0ce:	4948      	ldr	r1, [pc, #288]	; (800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d00a      	beq.n	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a0e2:	4b43      	ldr	r3, [pc, #268]	; (800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800a0e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0f0:	493f      	ldr	r1, [pc, #252]	; (800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800a0f2:	4313      	orrs	r3, r2
 800a0f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a100:	2b00      	cmp	r3, #0
 800a102:	d028      	beq.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a104:	4b3a      	ldr	r3, [pc, #232]	; (800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800a106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a10a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a112:	4937      	ldr	r1, [pc, #220]	; (800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800a114:	4313      	orrs	r3, r2
 800a116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a11e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a122:	d106      	bne.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a124:	4b32      	ldr	r3, [pc, #200]	; (800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800a126:	68db      	ldr	r3, [r3, #12]
 800a128:	4a31      	ldr	r2, [pc, #196]	; (800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800a12a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a12e:	60d3      	str	r3, [r2, #12]
 800a130:	e011      	b.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a136:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a13a:	d10c      	bne.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	3304      	adds	r3, #4
 800a140:	2101      	movs	r1, #1
 800a142:	4618      	mov	r0, r3
 800a144:	f000 f8c8 	bl	800a2d8 <RCCEx_PLLSAI1_Config>
 800a148:	4603      	mov	r3, r0
 800a14a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800a14c:	7cfb      	ldrb	r3, [r7, #19]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d001      	beq.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800a152:	7cfb      	ldrb	r3, [r7, #19]
 800a154:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d028      	beq.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a162:	4b23      	ldr	r3, [pc, #140]	; (800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800a164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a168:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a170:	491f      	ldr	r1, [pc, #124]	; (800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800a172:	4313      	orrs	r3, r2
 800a174:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a17c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a180:	d106      	bne.n	800a190 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a182:	4b1b      	ldr	r3, [pc, #108]	; (800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800a184:	68db      	ldr	r3, [r3, #12]
 800a186:	4a1a      	ldr	r2, [pc, #104]	; (800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800a188:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a18c:	60d3      	str	r3, [r2, #12]
 800a18e:	e011      	b.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a194:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a198:	d10c      	bne.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	3304      	adds	r3, #4
 800a19e:	2101      	movs	r1, #1
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f000 f899 	bl	800a2d8 <RCCEx_PLLSAI1_Config>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a1aa:	7cfb      	ldrb	r3, [r7, #19]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d001      	beq.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 800a1b0:	7cfb      	ldrb	r3, [r7, #19]
 800a1b2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d02b      	beq.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a1c0:	4b0b      	ldr	r3, [pc, #44]	; (800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800a1c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1ce:	4908      	ldr	r1, [pc, #32]	; (800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800a1d0:	4313      	orrs	r3, r2
 800a1d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a1de:	d109      	bne.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a1e0:	4b03      	ldr	r3, [pc, #12]	; (800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800a1e2:	68db      	ldr	r3, [r3, #12]
 800a1e4:	4a02      	ldr	r2, [pc, #8]	; (800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800a1e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a1ea:	60d3      	str	r3, [r2, #12]
 800a1ec:	e014      	b.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800a1ee:	bf00      	nop
 800a1f0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a1fc:	d10c      	bne.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	3304      	adds	r3, #4
 800a202:	2101      	movs	r1, #1
 800a204:	4618      	mov	r0, r3
 800a206:	f000 f867 	bl	800a2d8 <RCCEx_PLLSAI1_Config>
 800a20a:	4603      	mov	r3, r0
 800a20c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a20e:	7cfb      	ldrb	r3, [r7, #19]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d001      	beq.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 800a214:	7cfb      	ldrb	r3, [r7, #19]
 800a216:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a220:	2b00      	cmp	r3, #0
 800a222:	d02f      	beq.n	800a284 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a224:	4b2b      	ldr	r3, [pc, #172]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a22a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a232:	4928      	ldr	r1, [pc, #160]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a234:	4313      	orrs	r3, r2
 800a236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a23e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a242:	d10d      	bne.n	800a260 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	3304      	adds	r3, #4
 800a248:	2102      	movs	r1, #2
 800a24a:	4618      	mov	r0, r3
 800a24c:	f000 f844 	bl	800a2d8 <RCCEx_PLLSAI1_Config>
 800a250:	4603      	mov	r3, r0
 800a252:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a254:	7cfb      	ldrb	r3, [r7, #19]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d014      	beq.n	800a284 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800a25a:	7cfb      	ldrb	r3, [r7, #19]
 800a25c:	74bb      	strb	r3, [r7, #18]
 800a25e:	e011      	b.n	800a284 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a264:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a268:	d10c      	bne.n	800a284 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	3320      	adds	r3, #32
 800a26e:	2102      	movs	r1, #2
 800a270:	4618      	mov	r0, r3
 800a272:	f000 f921 	bl	800a4b8 <RCCEx_PLLSAI2_Config>
 800a276:	4603      	mov	r3, r0
 800a278:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a27a:	7cfb      	ldrb	r3, [r7, #19]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d001      	beq.n	800a284 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800a280:	7cfb      	ldrb	r3, [r7, #19]
 800a282:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d00a      	beq.n	800a2a6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a290:	4b10      	ldr	r3, [pc, #64]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a296:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a29e:	490d      	ldr	r1, [pc, #52]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a2a0:	4313      	orrs	r3, r2
 800a2a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d00b      	beq.n	800a2ca <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a2b2:	4b08      	ldr	r3, [pc, #32]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a2b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a2c2:	4904      	ldr	r1, [pc, #16]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800a2ca:	7cbb      	ldrb	r3, [r7, #18]
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3718      	adds	r7, #24
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}
 800a2d4:	40021000 	.word	0x40021000

0800a2d8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b084      	sub	sp, #16
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a2e6:	4b73      	ldr	r3, [pc, #460]	; (800a4b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a2e8:	68db      	ldr	r3, [r3, #12]
 800a2ea:	f003 0303 	and.w	r3, r3, #3
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d018      	beq.n	800a324 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800a2f2:	4b70      	ldr	r3, [pc, #448]	; (800a4b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a2f4:	68db      	ldr	r3, [r3, #12]
 800a2f6:	f003 0203 	and.w	r2, r3, #3
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	429a      	cmp	r2, r3
 800a300:	d10d      	bne.n	800a31e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
       ||
 800a306:	2b00      	cmp	r3, #0
 800a308:	d009      	beq.n	800a31e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800a30a:	4b6a      	ldr	r3, [pc, #424]	; (800a4b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a30c:	68db      	ldr	r3, [r3, #12]
 800a30e:	091b      	lsrs	r3, r3, #4
 800a310:	f003 0307 	and.w	r3, r3, #7
 800a314:	1c5a      	adds	r2, r3, #1
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	685b      	ldr	r3, [r3, #4]
       ||
 800a31a:	429a      	cmp	r2, r3
 800a31c:	d044      	beq.n	800a3a8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800a31e:	2301      	movs	r3, #1
 800a320:	73fb      	strb	r3, [r7, #15]
 800a322:	e041      	b.n	800a3a8 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	2b02      	cmp	r3, #2
 800a32a:	d00c      	beq.n	800a346 <RCCEx_PLLSAI1_Config+0x6e>
 800a32c:	2b03      	cmp	r3, #3
 800a32e:	d013      	beq.n	800a358 <RCCEx_PLLSAI1_Config+0x80>
 800a330:	2b01      	cmp	r3, #1
 800a332:	d120      	bne.n	800a376 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a334:	4b5f      	ldr	r3, [pc, #380]	; (800a4b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f003 0302 	and.w	r3, r3, #2
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d11d      	bne.n	800a37c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800a340:	2301      	movs	r3, #1
 800a342:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a344:	e01a      	b.n	800a37c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a346:	4b5b      	ldr	r3, [pc, #364]	; (800a4b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d116      	bne.n	800a380 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800a352:	2301      	movs	r3, #1
 800a354:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a356:	e013      	b.n	800a380 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a358:	4b56      	ldr	r3, [pc, #344]	; (800a4b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a360:	2b00      	cmp	r3, #0
 800a362:	d10f      	bne.n	800a384 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a364:	4b53      	ldr	r3, [pc, #332]	; (800a4b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d109      	bne.n	800a384 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800a370:	2301      	movs	r3, #1
 800a372:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a374:	e006      	b.n	800a384 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800a376:	2301      	movs	r3, #1
 800a378:	73fb      	strb	r3, [r7, #15]
      break;
 800a37a:	e004      	b.n	800a386 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800a37c:	bf00      	nop
 800a37e:	e002      	b.n	800a386 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800a380:	bf00      	nop
 800a382:	e000      	b.n	800a386 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800a384:	bf00      	nop
    }

    if(status == HAL_OK)
 800a386:	7bfb      	ldrb	r3, [r7, #15]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d10d      	bne.n	800a3a8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a38c:	4b49      	ldr	r3, [pc, #292]	; (800a4b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a38e:	68db      	ldr	r3, [r3, #12]
 800a390:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6819      	ldr	r1, [r3, #0]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	685b      	ldr	r3, [r3, #4]
 800a39c:	3b01      	subs	r3, #1
 800a39e:	011b      	lsls	r3, r3, #4
 800a3a0:	430b      	orrs	r3, r1
 800a3a2:	4944      	ldr	r1, [pc, #272]	; (800a4b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a3a4:	4313      	orrs	r3, r2
 800a3a6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a3a8:	7bfb      	ldrb	r3, [r7, #15]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d17d      	bne.n	800a4aa <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800a3ae:	4b41      	ldr	r3, [pc, #260]	; (800a4b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	4a40      	ldr	r2, [pc, #256]	; (800a4b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a3b4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a3b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a3ba:	f7fe fa8d 	bl	80088d8 <HAL_GetTick>
 800a3be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a3c0:	e009      	b.n	800a3d6 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a3c2:	f7fe fa89 	bl	80088d8 <HAL_GetTick>
 800a3c6:	4602      	mov	r2, r0
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	1ad3      	subs	r3, r2, r3
 800a3cc:	2b02      	cmp	r3, #2
 800a3ce:	d902      	bls.n	800a3d6 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800a3d0:	2303      	movs	r3, #3
 800a3d2:	73fb      	strb	r3, [r7, #15]
        break;
 800a3d4:	e005      	b.n	800a3e2 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a3d6:	4b37      	ldr	r3, [pc, #220]	; (800a4b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d1ef      	bne.n	800a3c2 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800a3e2:	7bfb      	ldrb	r3, [r7, #15]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d160      	bne.n	800a4aa <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d111      	bne.n	800a412 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a3ee:	4b31      	ldr	r3, [pc, #196]	; (800a4b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a3f0:	691b      	ldr	r3, [r3, #16]
 800a3f2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800a3f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3fa:	687a      	ldr	r2, [r7, #4]
 800a3fc:	6892      	ldr	r2, [r2, #8]
 800a3fe:	0211      	lsls	r1, r2, #8
 800a400:	687a      	ldr	r2, [r7, #4]
 800a402:	68d2      	ldr	r2, [r2, #12]
 800a404:	0912      	lsrs	r2, r2, #4
 800a406:	0452      	lsls	r2, r2, #17
 800a408:	430a      	orrs	r2, r1
 800a40a:	492a      	ldr	r1, [pc, #168]	; (800a4b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a40c:	4313      	orrs	r3, r2
 800a40e:	610b      	str	r3, [r1, #16]
 800a410:	e027      	b.n	800a462 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	2b01      	cmp	r3, #1
 800a416:	d112      	bne.n	800a43e <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a418:	4b26      	ldr	r3, [pc, #152]	; (800a4b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a41a:	691b      	ldr	r3, [r3, #16]
 800a41c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800a420:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a424:	687a      	ldr	r2, [r7, #4]
 800a426:	6892      	ldr	r2, [r2, #8]
 800a428:	0211      	lsls	r1, r2, #8
 800a42a:	687a      	ldr	r2, [r7, #4]
 800a42c:	6912      	ldr	r2, [r2, #16]
 800a42e:	0852      	lsrs	r2, r2, #1
 800a430:	3a01      	subs	r2, #1
 800a432:	0552      	lsls	r2, r2, #21
 800a434:	430a      	orrs	r2, r1
 800a436:	491f      	ldr	r1, [pc, #124]	; (800a4b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a438:	4313      	orrs	r3, r2
 800a43a:	610b      	str	r3, [r1, #16]
 800a43c:	e011      	b.n	800a462 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a43e:	4b1d      	ldr	r3, [pc, #116]	; (800a4b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a440:	691b      	ldr	r3, [r3, #16]
 800a442:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a446:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a44a:	687a      	ldr	r2, [r7, #4]
 800a44c:	6892      	ldr	r2, [r2, #8]
 800a44e:	0211      	lsls	r1, r2, #8
 800a450:	687a      	ldr	r2, [r7, #4]
 800a452:	6952      	ldr	r2, [r2, #20]
 800a454:	0852      	lsrs	r2, r2, #1
 800a456:	3a01      	subs	r2, #1
 800a458:	0652      	lsls	r2, r2, #25
 800a45a:	430a      	orrs	r2, r1
 800a45c:	4915      	ldr	r1, [pc, #84]	; (800a4b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a45e:	4313      	orrs	r3, r2
 800a460:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800a462:	4b14      	ldr	r3, [pc, #80]	; (800a4b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	4a13      	ldr	r2, [pc, #76]	; (800a4b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a468:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a46c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a46e:	f7fe fa33 	bl	80088d8 <HAL_GetTick>
 800a472:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a474:	e009      	b.n	800a48a <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a476:	f7fe fa2f 	bl	80088d8 <HAL_GetTick>
 800a47a:	4602      	mov	r2, r0
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	1ad3      	subs	r3, r2, r3
 800a480:	2b02      	cmp	r3, #2
 800a482:	d902      	bls.n	800a48a <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 800a484:	2303      	movs	r3, #3
 800a486:	73fb      	strb	r3, [r7, #15]
          break;
 800a488:	e005      	b.n	800a496 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a48a:	4b0a      	ldr	r3, [pc, #40]	; (800a4b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a492:	2b00      	cmp	r3, #0
 800a494:	d0ef      	beq.n	800a476 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800a496:	7bfb      	ldrb	r3, [r7, #15]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d106      	bne.n	800a4aa <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800a49c:	4b05      	ldr	r3, [pc, #20]	; (800a4b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a49e:	691a      	ldr	r2, [r3, #16]
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	699b      	ldr	r3, [r3, #24]
 800a4a4:	4903      	ldr	r1, [pc, #12]	; (800a4b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a4a6:	4313      	orrs	r3, r2
 800a4a8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800a4aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3710      	adds	r7, #16
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}
 800a4b4:	40021000 	.word	0x40021000

0800a4b8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b084      	sub	sp, #16
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
 800a4c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a4c6:	4b68      	ldr	r3, [pc, #416]	; (800a668 <RCCEx_PLLSAI2_Config+0x1b0>)
 800a4c8:	68db      	ldr	r3, [r3, #12]
 800a4ca:	f003 0303 	and.w	r3, r3, #3
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d018      	beq.n	800a504 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800a4d2:	4b65      	ldr	r3, [pc, #404]	; (800a668 <RCCEx_PLLSAI2_Config+0x1b0>)
 800a4d4:	68db      	ldr	r3, [r3, #12]
 800a4d6:	f003 0203 	and.w	r2, r3, #3
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	429a      	cmp	r2, r3
 800a4e0:	d10d      	bne.n	800a4fe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
       ||
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d009      	beq.n	800a4fe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800a4ea:	4b5f      	ldr	r3, [pc, #380]	; (800a668 <RCCEx_PLLSAI2_Config+0x1b0>)
 800a4ec:	68db      	ldr	r3, [r3, #12]
 800a4ee:	091b      	lsrs	r3, r3, #4
 800a4f0:	f003 0307 	and.w	r3, r3, #7
 800a4f4:	1c5a      	adds	r2, r3, #1
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	685b      	ldr	r3, [r3, #4]
       ||
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d044      	beq.n	800a588 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800a4fe:	2301      	movs	r3, #1
 800a500:	73fb      	strb	r3, [r7, #15]
 800a502:	e041      	b.n	800a588 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	2b02      	cmp	r3, #2
 800a50a:	d00c      	beq.n	800a526 <RCCEx_PLLSAI2_Config+0x6e>
 800a50c:	2b03      	cmp	r3, #3
 800a50e:	d013      	beq.n	800a538 <RCCEx_PLLSAI2_Config+0x80>
 800a510:	2b01      	cmp	r3, #1
 800a512:	d120      	bne.n	800a556 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a514:	4b54      	ldr	r3, [pc, #336]	; (800a668 <RCCEx_PLLSAI2_Config+0x1b0>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f003 0302 	and.w	r3, r3, #2
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d11d      	bne.n	800a55c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 800a520:	2301      	movs	r3, #1
 800a522:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a524:	e01a      	b.n	800a55c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a526:	4b50      	ldr	r3, [pc, #320]	; (800a668 <RCCEx_PLLSAI2_Config+0x1b0>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d116      	bne.n	800a560 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800a532:	2301      	movs	r3, #1
 800a534:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a536:	e013      	b.n	800a560 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a538:	4b4b      	ldr	r3, [pc, #300]	; (800a668 <RCCEx_PLLSAI2_Config+0x1b0>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a540:	2b00      	cmp	r3, #0
 800a542:	d10f      	bne.n	800a564 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a544:	4b48      	ldr	r3, [pc, #288]	; (800a668 <RCCEx_PLLSAI2_Config+0x1b0>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d109      	bne.n	800a564 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 800a550:	2301      	movs	r3, #1
 800a552:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a554:	e006      	b.n	800a564 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800a556:	2301      	movs	r3, #1
 800a558:	73fb      	strb	r3, [r7, #15]
      break;
 800a55a:	e004      	b.n	800a566 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800a55c:	bf00      	nop
 800a55e:	e002      	b.n	800a566 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800a560:	bf00      	nop
 800a562:	e000      	b.n	800a566 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800a564:	bf00      	nop
    }

    if(status == HAL_OK)
 800a566:	7bfb      	ldrb	r3, [r7, #15]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d10d      	bne.n	800a588 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a56c:	4b3e      	ldr	r3, [pc, #248]	; (800a668 <RCCEx_PLLSAI2_Config+0x1b0>)
 800a56e:	68db      	ldr	r3, [r3, #12]
 800a570:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	6819      	ldr	r1, [r3, #0]
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	685b      	ldr	r3, [r3, #4]
 800a57c:	3b01      	subs	r3, #1
 800a57e:	011b      	lsls	r3, r3, #4
 800a580:	430b      	orrs	r3, r1
 800a582:	4939      	ldr	r1, [pc, #228]	; (800a668 <RCCEx_PLLSAI2_Config+0x1b0>)
 800a584:	4313      	orrs	r3, r2
 800a586:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a588:	7bfb      	ldrb	r3, [r7, #15]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d167      	bne.n	800a65e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800a58e:	4b36      	ldr	r3, [pc, #216]	; (800a668 <RCCEx_PLLSAI2_Config+0x1b0>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	4a35      	ldr	r2, [pc, #212]	; (800a668 <RCCEx_PLLSAI2_Config+0x1b0>)
 800a594:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a598:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a59a:	f7fe f99d 	bl	80088d8 <HAL_GetTick>
 800a59e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a5a0:	e009      	b.n	800a5b6 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a5a2:	f7fe f999 	bl	80088d8 <HAL_GetTick>
 800a5a6:	4602      	mov	r2, r0
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	1ad3      	subs	r3, r2, r3
 800a5ac:	2b02      	cmp	r3, #2
 800a5ae:	d902      	bls.n	800a5b6 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800a5b0:	2303      	movs	r3, #3
 800a5b2:	73fb      	strb	r3, [r7, #15]
        break;
 800a5b4:	e005      	b.n	800a5c2 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a5b6:	4b2c      	ldr	r3, [pc, #176]	; (800a668 <RCCEx_PLLSAI2_Config+0x1b0>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d1ef      	bne.n	800a5a2 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800a5c2:	7bfb      	ldrb	r3, [r7, #15]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d14a      	bne.n	800a65e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d111      	bne.n	800a5f2 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a5ce:	4b26      	ldr	r3, [pc, #152]	; (800a668 <RCCEx_PLLSAI2_Config+0x1b0>)
 800a5d0:	695b      	ldr	r3, [r3, #20]
 800a5d2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800a5d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a5da:	687a      	ldr	r2, [r7, #4]
 800a5dc:	6892      	ldr	r2, [r2, #8]
 800a5de:	0211      	lsls	r1, r2, #8
 800a5e0:	687a      	ldr	r2, [r7, #4]
 800a5e2:	68d2      	ldr	r2, [r2, #12]
 800a5e4:	0912      	lsrs	r2, r2, #4
 800a5e6:	0452      	lsls	r2, r2, #17
 800a5e8:	430a      	orrs	r2, r1
 800a5ea:	491f      	ldr	r1, [pc, #124]	; (800a668 <RCCEx_PLLSAI2_Config+0x1b0>)
 800a5ec:	4313      	orrs	r3, r2
 800a5ee:	614b      	str	r3, [r1, #20]
 800a5f0:	e011      	b.n	800a616 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a5f2:	4b1d      	ldr	r3, [pc, #116]	; (800a668 <RCCEx_PLLSAI2_Config+0x1b0>)
 800a5f4:	695b      	ldr	r3, [r3, #20]
 800a5f6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a5fa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a5fe:	687a      	ldr	r2, [r7, #4]
 800a600:	6892      	ldr	r2, [r2, #8]
 800a602:	0211      	lsls	r1, r2, #8
 800a604:	687a      	ldr	r2, [r7, #4]
 800a606:	6912      	ldr	r2, [r2, #16]
 800a608:	0852      	lsrs	r2, r2, #1
 800a60a:	3a01      	subs	r2, #1
 800a60c:	0652      	lsls	r2, r2, #25
 800a60e:	430a      	orrs	r2, r1
 800a610:	4915      	ldr	r1, [pc, #84]	; (800a668 <RCCEx_PLLSAI2_Config+0x1b0>)
 800a612:	4313      	orrs	r3, r2
 800a614:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800a616:	4b14      	ldr	r3, [pc, #80]	; (800a668 <RCCEx_PLLSAI2_Config+0x1b0>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	4a13      	ldr	r2, [pc, #76]	; (800a668 <RCCEx_PLLSAI2_Config+0x1b0>)
 800a61c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a620:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a622:	f7fe f959 	bl	80088d8 <HAL_GetTick>
 800a626:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a628:	e009      	b.n	800a63e <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a62a:	f7fe f955 	bl	80088d8 <HAL_GetTick>
 800a62e:	4602      	mov	r2, r0
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	1ad3      	subs	r3, r2, r3
 800a634:	2b02      	cmp	r3, #2
 800a636:	d902      	bls.n	800a63e <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800a638:	2303      	movs	r3, #3
 800a63a:	73fb      	strb	r3, [r7, #15]
          break;
 800a63c:	e005      	b.n	800a64a <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a63e:	4b0a      	ldr	r3, [pc, #40]	; (800a668 <RCCEx_PLLSAI2_Config+0x1b0>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a646:	2b00      	cmp	r3, #0
 800a648:	d0ef      	beq.n	800a62a <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800a64a:	7bfb      	ldrb	r3, [r7, #15]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d106      	bne.n	800a65e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800a650:	4b05      	ldr	r3, [pc, #20]	; (800a668 <RCCEx_PLLSAI2_Config+0x1b0>)
 800a652:	695a      	ldr	r2, [r3, #20]
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	695b      	ldr	r3, [r3, #20]
 800a658:	4903      	ldr	r1, [pc, #12]	; (800a668 <RCCEx_PLLSAI2_Config+0x1b0>)
 800a65a:	4313      	orrs	r3, r2
 800a65c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800a65e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a660:	4618      	mov	r0, r3
 800a662:	3710      	adds	r7, #16
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}
 800a668:	40021000 	.word	0x40021000

0800a66c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b082      	sub	sp, #8
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d101      	bne.n	800a67e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a67a:	2301      	movs	r3, #1
 800a67c:	e040      	b.n	800a700 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a682:	2b00      	cmp	r3, #0
 800a684:	d106      	bne.n	800a694 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2200      	movs	r2, #0
 800a68a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f7fd ff6e 	bl	8008570 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2224      	movs	r2, #36	; 0x24
 800a698:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	681a      	ldr	r2, [r3, #0]
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f022 0201 	bic.w	r2, r2, #1
 800a6a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f000 f98c 	bl	800a9c8 <UART_SetConfig>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	d101      	bne.n	800a6ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	e022      	b.n	800a700 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d002      	beq.n	800a6c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f000 fcf2 	bl	800b0ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	685a      	ldr	r2, [r3, #4]
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a6d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	689a      	ldr	r2, [r3, #8]
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a6e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	681a      	ldr	r2, [r3, #0]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f042 0201 	orr.w	r2, r2, #1
 800a6f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f000 fd79 	bl	800b1f0 <UART_CheckIdleState>
 800a6fe:	4603      	mov	r3, r0
}
 800a700:	4618      	mov	r0, r3
 800a702:	3708      	adds	r7, #8
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}

0800a708 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b08a      	sub	sp, #40	; 0x28
 800a70c:	af02      	add	r7, sp, #8
 800a70e:	60f8      	str	r0, [r7, #12]
 800a710:	60b9      	str	r1, [r7, #8]
 800a712:	603b      	str	r3, [r7, #0]
 800a714:	4613      	mov	r3, r2
 800a716:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a71c:	2b20      	cmp	r3, #32
 800a71e:	f040 8081 	bne.w	800a824 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d002      	beq.n	800a72e <HAL_UART_Transmit+0x26>
 800a728:	88fb      	ldrh	r3, [r7, #6]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d101      	bne.n	800a732 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a72e:	2301      	movs	r3, #1
 800a730:	e079      	b.n	800a826 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800a738:	2b01      	cmp	r3, #1
 800a73a:	d101      	bne.n	800a740 <HAL_UART_Transmit+0x38>
 800a73c:	2302      	movs	r3, #2
 800a73e:	e072      	b.n	800a826 <HAL_UART_Transmit+0x11e>
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	2201      	movs	r2, #1
 800a744:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2200      	movs	r2, #0
 800a74c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	2221      	movs	r2, #33	; 0x21
 800a752:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800a754:	f7fe f8c0 	bl	80088d8 <HAL_GetTick>
 800a758:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	88fa      	ldrh	r2, [r7, #6]
 800a75e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	88fa      	ldrh	r2, [r7, #6]
 800a766:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	689b      	ldr	r3, [r3, #8]
 800a76e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a772:	d108      	bne.n	800a786 <HAL_UART_Transmit+0x7e>
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	691b      	ldr	r3, [r3, #16]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d104      	bne.n	800a786 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800a77c:	2300      	movs	r3, #0
 800a77e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	61bb      	str	r3, [r7, #24]
 800a784:	e003      	b.n	800a78e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a78a:	2300      	movs	r3, #0
 800a78c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	2200      	movs	r2, #0
 800a792:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800a796:	e02d      	b.n	800a7f4 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	9300      	str	r3, [sp, #0]
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	2180      	movs	r1, #128	; 0x80
 800a7a2:	68f8      	ldr	r0, [r7, #12]
 800a7a4:	f000 fd69 	bl	800b27a <UART_WaitOnFlagUntilTimeout>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d001      	beq.n	800a7b2 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800a7ae:	2303      	movs	r3, #3
 800a7b0:	e039      	b.n	800a826 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800a7b2:	69fb      	ldr	r3, [r7, #28]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d10b      	bne.n	800a7d0 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a7b8:	69bb      	ldr	r3, [r7, #24]
 800a7ba:	881a      	ldrh	r2, [r3, #0]
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a7c4:	b292      	uxth	r2, r2
 800a7c6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a7c8:	69bb      	ldr	r3, [r7, #24]
 800a7ca:	3302      	adds	r3, #2
 800a7cc:	61bb      	str	r3, [r7, #24]
 800a7ce:	e008      	b.n	800a7e2 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a7d0:	69fb      	ldr	r3, [r7, #28]
 800a7d2:	781a      	ldrb	r2, [r3, #0]
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	b292      	uxth	r2, r2
 800a7da:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a7dc:	69fb      	ldr	r3, [r7, #28]
 800a7de:	3301      	adds	r3, #1
 800a7e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a7e8:	b29b      	uxth	r3, r3
 800a7ea:	3b01      	subs	r3, #1
 800a7ec:	b29a      	uxth	r2, r3
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a7fa:	b29b      	uxth	r3, r3
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d1cb      	bne.n	800a798 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	9300      	str	r3, [sp, #0]
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	2200      	movs	r2, #0
 800a808:	2140      	movs	r1, #64	; 0x40
 800a80a:	68f8      	ldr	r0, [r7, #12]
 800a80c:	f000 fd35 	bl	800b27a <UART_WaitOnFlagUntilTimeout>
 800a810:	4603      	mov	r3, r0
 800a812:	2b00      	cmp	r3, #0
 800a814:	d001      	beq.n	800a81a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800a816:	2303      	movs	r3, #3
 800a818:	e005      	b.n	800a826 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	2220      	movs	r2, #32
 800a81e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800a820:	2300      	movs	r3, #0
 800a822:	e000      	b.n	800a826 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800a824:	2302      	movs	r3, #2
  }
}
 800a826:	4618      	mov	r0, r3
 800a828:	3720      	adds	r7, #32
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}

0800a82e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a82e:	b580      	push	{r7, lr}
 800a830:	b08a      	sub	sp, #40	; 0x28
 800a832:	af02      	add	r7, sp, #8
 800a834:	60f8      	str	r0, [r7, #12]
 800a836:	60b9      	str	r1, [r7, #8]
 800a838:	603b      	str	r3, [r7, #0]
 800a83a:	4613      	mov	r3, r2
 800a83c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a842:	2b20      	cmp	r3, #32
 800a844:	f040 80bb 	bne.w	800a9be <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d002      	beq.n	800a854 <HAL_UART_Receive+0x26>
 800a84e:	88fb      	ldrh	r3, [r7, #6]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d101      	bne.n	800a858 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800a854:	2301      	movs	r3, #1
 800a856:	e0b3      	b.n	800a9c0 <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800a85e:	2b01      	cmp	r3, #1
 800a860:	d101      	bne.n	800a866 <HAL_UART_Receive+0x38>
 800a862:	2302      	movs	r3, #2
 800a864:	e0ac      	b.n	800a9c0 <HAL_UART_Receive+0x192>
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	2201      	movs	r2, #1
 800a86a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	2200      	movs	r2, #0
 800a872:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	2222      	movs	r2, #34	; 0x22
 800a878:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800a87a:	f7fe f82d 	bl	80088d8 <HAL_GetTick>
 800a87e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	88fa      	ldrh	r2, [r7, #6]
 800a884:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	88fa      	ldrh	r2, [r7, #6]
 800a88c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	689b      	ldr	r3, [r3, #8]
 800a894:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a898:	d10e      	bne.n	800a8b8 <HAL_UART_Receive+0x8a>
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	691b      	ldr	r3, [r3, #16]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d105      	bne.n	800a8ae <HAL_UART_Receive+0x80>
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a8a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a8ac:	e02d      	b.n	800a90a <HAL_UART_Receive+0xdc>
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	22ff      	movs	r2, #255	; 0xff
 800a8b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a8b6:	e028      	b.n	800a90a <HAL_UART_Receive+0xdc>
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	689b      	ldr	r3, [r3, #8]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d10d      	bne.n	800a8dc <HAL_UART_Receive+0xae>
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	691b      	ldr	r3, [r3, #16]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d104      	bne.n	800a8d2 <HAL_UART_Receive+0xa4>
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	22ff      	movs	r2, #255	; 0xff
 800a8cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a8d0:	e01b      	b.n	800a90a <HAL_UART_Receive+0xdc>
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	227f      	movs	r2, #127	; 0x7f
 800a8d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a8da:	e016      	b.n	800a90a <HAL_UART_Receive+0xdc>
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	689b      	ldr	r3, [r3, #8]
 800a8e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a8e4:	d10d      	bne.n	800a902 <HAL_UART_Receive+0xd4>
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	691b      	ldr	r3, [r3, #16]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d104      	bne.n	800a8f8 <HAL_UART_Receive+0xca>
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	227f      	movs	r2, #127	; 0x7f
 800a8f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a8f6:	e008      	b.n	800a90a <HAL_UART_Receive+0xdc>
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	223f      	movs	r2, #63	; 0x3f
 800a8fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a900:	e003      	b.n	800a90a <HAL_UART_Receive+0xdc>
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	2200      	movs	r2, #0
 800a906:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a910:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	689b      	ldr	r3, [r3, #8]
 800a916:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a91a:	d108      	bne.n	800a92e <HAL_UART_Receive+0x100>
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	691b      	ldr	r3, [r3, #16]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d104      	bne.n	800a92e <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 800a924:	2300      	movs	r3, #0
 800a926:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	61bb      	str	r3, [r7, #24]
 800a92c:	e003      	b.n	800a936 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a932:	2300      	movs	r3, #0
 800a934:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	2200      	movs	r2, #0
 800a93a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800a93e:	e033      	b.n	800a9a8 <HAL_UART_Receive+0x17a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	9300      	str	r3, [sp, #0]
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	2200      	movs	r2, #0
 800a948:	2120      	movs	r1, #32
 800a94a:	68f8      	ldr	r0, [r7, #12]
 800a94c:	f000 fc95 	bl	800b27a <UART_WaitOnFlagUntilTimeout>
 800a950:	4603      	mov	r3, r0
 800a952:	2b00      	cmp	r3, #0
 800a954:	d001      	beq.n	800a95a <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 800a956:	2303      	movs	r3, #3
 800a958:	e032      	b.n	800a9c0 <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 800a95a:	69fb      	ldr	r3, [r7, #28]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d10c      	bne.n	800a97a <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a966:	b29a      	uxth	r2, r3
 800a968:	8a7b      	ldrh	r3, [r7, #18]
 800a96a:	4013      	ands	r3, r2
 800a96c:	b29a      	uxth	r2, r3
 800a96e:	69bb      	ldr	r3, [r7, #24]
 800a970:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a972:	69bb      	ldr	r3, [r7, #24]
 800a974:	3302      	adds	r3, #2
 800a976:	61bb      	str	r3, [r7, #24]
 800a978:	e00d      	b.n	800a996 <HAL_UART_Receive+0x168>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a980:	b29b      	uxth	r3, r3
 800a982:	b2da      	uxtb	r2, r3
 800a984:	8a7b      	ldrh	r3, [r7, #18]
 800a986:	b2db      	uxtb	r3, r3
 800a988:	4013      	ands	r3, r2
 800a98a:	b2da      	uxtb	r2, r3
 800a98c:	69fb      	ldr	r3, [r7, #28]
 800a98e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800a990:	69fb      	ldr	r3, [r7, #28]
 800a992:	3301      	adds	r3, #1
 800a994:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a99c:	b29b      	uxth	r3, r3
 800a99e:	3b01      	subs	r3, #1
 800a9a0:	b29a      	uxth	r2, r3
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a9ae:	b29b      	uxth	r3, r3
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d1c5      	bne.n	800a940 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	2220      	movs	r2, #32
 800a9b8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	e000      	b.n	800a9c0 <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 800a9be:	2302      	movs	r3, #2
  }
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3720      	adds	r7, #32
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}

0800a9c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a9c8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800a9cc:	b08a      	sub	sp, #40	; 0x28
 800a9ce:	af00      	add	r7, sp, #0
 800a9d0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	689a      	ldr	r2, [r3, #8]
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	691b      	ldr	r3, [r3, #16]
 800a9e6:	431a      	orrs	r2, r3
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	695b      	ldr	r3, [r3, #20]
 800a9ec:	431a      	orrs	r2, r3
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	69db      	ldr	r3, [r3, #28]
 800a9f2:	4313      	orrs	r3, r2
 800a9f4:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	681a      	ldr	r2, [r3, #0]
 800a9fc:	4bb8      	ldr	r3, [pc, #736]	; (800ace0 <UART_SetConfig+0x318>)
 800a9fe:	4013      	ands	r3, r2
 800aa00:	687a      	ldr	r2, [r7, #4]
 800aa02:	6812      	ldr	r2, [r2, #0]
 800aa04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aa06:	430b      	orrs	r3, r1
 800aa08:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	685b      	ldr	r3, [r3, #4]
 800aa10:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	68da      	ldr	r2, [r3, #12]
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	430a      	orrs	r2, r1
 800aa1e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	699b      	ldr	r3, [r3, #24]
 800aa24:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	4aae      	ldr	r2, [pc, #696]	; (800ace4 <UART_SetConfig+0x31c>)
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	d004      	beq.n	800aa3a <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6a1b      	ldr	r3, [r3, #32]
 800aa34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa36:	4313      	orrs	r3, r2
 800aa38:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	689b      	ldr	r3, [r3, #8]
 800aa40:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa4a:	430a      	orrs	r2, r1
 800aa4c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	4aa5      	ldr	r2, [pc, #660]	; (800ace8 <UART_SetConfig+0x320>)
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d126      	bne.n	800aaa6 <UART_SetConfig+0xde>
 800aa58:	4ba4      	ldr	r3, [pc, #656]	; (800acec <UART_SetConfig+0x324>)
 800aa5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa5e:	f003 0303 	and.w	r3, r3, #3
 800aa62:	2b03      	cmp	r3, #3
 800aa64:	d81a      	bhi.n	800aa9c <UART_SetConfig+0xd4>
 800aa66:	a201      	add	r2, pc, #4	; (adr r2, 800aa6c <UART_SetConfig+0xa4>)
 800aa68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa6c:	0800aa7d 	.word	0x0800aa7d
 800aa70:	0800aa8d 	.word	0x0800aa8d
 800aa74:	0800aa85 	.word	0x0800aa85
 800aa78:	0800aa95 	.word	0x0800aa95
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa82:	e105      	b.n	800ac90 <UART_SetConfig+0x2c8>
 800aa84:	2302      	movs	r3, #2
 800aa86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa8a:	e101      	b.n	800ac90 <UART_SetConfig+0x2c8>
 800aa8c:	2304      	movs	r3, #4
 800aa8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa92:	e0fd      	b.n	800ac90 <UART_SetConfig+0x2c8>
 800aa94:	2308      	movs	r3, #8
 800aa96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa9a:	e0f9      	b.n	800ac90 <UART_SetConfig+0x2c8>
 800aa9c:	2310      	movs	r3, #16
 800aa9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aaa2:	bf00      	nop
 800aaa4:	e0f4      	b.n	800ac90 <UART_SetConfig+0x2c8>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	4a91      	ldr	r2, [pc, #580]	; (800acf0 <UART_SetConfig+0x328>)
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d138      	bne.n	800ab22 <UART_SetConfig+0x15a>
 800aab0:	4b8e      	ldr	r3, [pc, #568]	; (800acec <UART_SetConfig+0x324>)
 800aab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aab6:	f003 030c 	and.w	r3, r3, #12
 800aaba:	2b0c      	cmp	r3, #12
 800aabc:	d82c      	bhi.n	800ab18 <UART_SetConfig+0x150>
 800aabe:	a201      	add	r2, pc, #4	; (adr r2, 800aac4 <UART_SetConfig+0xfc>)
 800aac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aac4:	0800aaf9 	.word	0x0800aaf9
 800aac8:	0800ab19 	.word	0x0800ab19
 800aacc:	0800ab19 	.word	0x0800ab19
 800aad0:	0800ab19 	.word	0x0800ab19
 800aad4:	0800ab09 	.word	0x0800ab09
 800aad8:	0800ab19 	.word	0x0800ab19
 800aadc:	0800ab19 	.word	0x0800ab19
 800aae0:	0800ab19 	.word	0x0800ab19
 800aae4:	0800ab01 	.word	0x0800ab01
 800aae8:	0800ab19 	.word	0x0800ab19
 800aaec:	0800ab19 	.word	0x0800ab19
 800aaf0:	0800ab19 	.word	0x0800ab19
 800aaf4:	0800ab11 	.word	0x0800ab11
 800aaf8:	2300      	movs	r3, #0
 800aafa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aafe:	e0c7      	b.n	800ac90 <UART_SetConfig+0x2c8>
 800ab00:	2302      	movs	r3, #2
 800ab02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ab06:	e0c3      	b.n	800ac90 <UART_SetConfig+0x2c8>
 800ab08:	2304      	movs	r3, #4
 800ab0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ab0e:	e0bf      	b.n	800ac90 <UART_SetConfig+0x2c8>
 800ab10:	2308      	movs	r3, #8
 800ab12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ab16:	e0bb      	b.n	800ac90 <UART_SetConfig+0x2c8>
 800ab18:	2310      	movs	r3, #16
 800ab1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ab1e:	bf00      	nop
 800ab20:	e0b6      	b.n	800ac90 <UART_SetConfig+0x2c8>
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	4a73      	ldr	r2, [pc, #460]	; (800acf4 <UART_SetConfig+0x32c>)
 800ab28:	4293      	cmp	r3, r2
 800ab2a:	d125      	bne.n	800ab78 <UART_SetConfig+0x1b0>
 800ab2c:	4b6f      	ldr	r3, [pc, #444]	; (800acec <UART_SetConfig+0x324>)
 800ab2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab32:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ab36:	2b10      	cmp	r3, #16
 800ab38:	d011      	beq.n	800ab5e <UART_SetConfig+0x196>
 800ab3a:	2b10      	cmp	r3, #16
 800ab3c:	d802      	bhi.n	800ab44 <UART_SetConfig+0x17c>
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d005      	beq.n	800ab4e <UART_SetConfig+0x186>
 800ab42:	e014      	b.n	800ab6e <UART_SetConfig+0x1a6>
 800ab44:	2b20      	cmp	r3, #32
 800ab46:	d006      	beq.n	800ab56 <UART_SetConfig+0x18e>
 800ab48:	2b30      	cmp	r3, #48	; 0x30
 800ab4a:	d00c      	beq.n	800ab66 <UART_SetConfig+0x19e>
 800ab4c:	e00f      	b.n	800ab6e <UART_SetConfig+0x1a6>
 800ab4e:	2300      	movs	r3, #0
 800ab50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ab54:	e09c      	b.n	800ac90 <UART_SetConfig+0x2c8>
 800ab56:	2302      	movs	r3, #2
 800ab58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ab5c:	e098      	b.n	800ac90 <UART_SetConfig+0x2c8>
 800ab5e:	2304      	movs	r3, #4
 800ab60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ab64:	e094      	b.n	800ac90 <UART_SetConfig+0x2c8>
 800ab66:	2308      	movs	r3, #8
 800ab68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ab6c:	e090      	b.n	800ac90 <UART_SetConfig+0x2c8>
 800ab6e:	2310      	movs	r3, #16
 800ab70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ab74:	bf00      	nop
 800ab76:	e08b      	b.n	800ac90 <UART_SetConfig+0x2c8>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	4a5e      	ldr	r2, [pc, #376]	; (800acf8 <UART_SetConfig+0x330>)
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	d125      	bne.n	800abce <UART_SetConfig+0x206>
 800ab82:	4b5a      	ldr	r3, [pc, #360]	; (800acec <UART_SetConfig+0x324>)
 800ab84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab88:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ab8c:	2b40      	cmp	r3, #64	; 0x40
 800ab8e:	d011      	beq.n	800abb4 <UART_SetConfig+0x1ec>
 800ab90:	2b40      	cmp	r3, #64	; 0x40
 800ab92:	d802      	bhi.n	800ab9a <UART_SetConfig+0x1d2>
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d005      	beq.n	800aba4 <UART_SetConfig+0x1dc>
 800ab98:	e014      	b.n	800abc4 <UART_SetConfig+0x1fc>
 800ab9a:	2b80      	cmp	r3, #128	; 0x80
 800ab9c:	d006      	beq.n	800abac <UART_SetConfig+0x1e4>
 800ab9e:	2bc0      	cmp	r3, #192	; 0xc0
 800aba0:	d00c      	beq.n	800abbc <UART_SetConfig+0x1f4>
 800aba2:	e00f      	b.n	800abc4 <UART_SetConfig+0x1fc>
 800aba4:	2300      	movs	r3, #0
 800aba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800abaa:	e071      	b.n	800ac90 <UART_SetConfig+0x2c8>
 800abac:	2302      	movs	r3, #2
 800abae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800abb2:	e06d      	b.n	800ac90 <UART_SetConfig+0x2c8>
 800abb4:	2304      	movs	r3, #4
 800abb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800abba:	e069      	b.n	800ac90 <UART_SetConfig+0x2c8>
 800abbc:	2308      	movs	r3, #8
 800abbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800abc2:	e065      	b.n	800ac90 <UART_SetConfig+0x2c8>
 800abc4:	2310      	movs	r3, #16
 800abc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800abca:	bf00      	nop
 800abcc:	e060      	b.n	800ac90 <UART_SetConfig+0x2c8>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	4a4a      	ldr	r2, [pc, #296]	; (800acfc <UART_SetConfig+0x334>)
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d129      	bne.n	800ac2c <UART_SetConfig+0x264>
 800abd8:	4b44      	ldr	r3, [pc, #272]	; (800acec <UART_SetConfig+0x324>)
 800abda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800abe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abe6:	d014      	beq.n	800ac12 <UART_SetConfig+0x24a>
 800abe8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abec:	d802      	bhi.n	800abf4 <UART_SetConfig+0x22c>
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d007      	beq.n	800ac02 <UART_SetConfig+0x23a>
 800abf2:	e016      	b.n	800ac22 <UART_SetConfig+0x25a>
 800abf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800abf8:	d007      	beq.n	800ac0a <UART_SetConfig+0x242>
 800abfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800abfe:	d00c      	beq.n	800ac1a <UART_SetConfig+0x252>
 800ac00:	e00f      	b.n	800ac22 <UART_SetConfig+0x25a>
 800ac02:	2300      	movs	r3, #0
 800ac04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ac08:	e042      	b.n	800ac90 <UART_SetConfig+0x2c8>
 800ac0a:	2302      	movs	r3, #2
 800ac0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ac10:	e03e      	b.n	800ac90 <UART_SetConfig+0x2c8>
 800ac12:	2304      	movs	r3, #4
 800ac14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ac18:	e03a      	b.n	800ac90 <UART_SetConfig+0x2c8>
 800ac1a:	2308      	movs	r3, #8
 800ac1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ac20:	e036      	b.n	800ac90 <UART_SetConfig+0x2c8>
 800ac22:	2310      	movs	r3, #16
 800ac24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ac28:	bf00      	nop
 800ac2a:	e031      	b.n	800ac90 <UART_SetConfig+0x2c8>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	4a2c      	ldr	r2, [pc, #176]	; (800ace4 <UART_SetConfig+0x31c>)
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d129      	bne.n	800ac8a <UART_SetConfig+0x2c2>
 800ac36:	4b2d      	ldr	r3, [pc, #180]	; (800acec <UART_SetConfig+0x324>)
 800ac38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ac40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac44:	d014      	beq.n	800ac70 <UART_SetConfig+0x2a8>
 800ac46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac4a:	d802      	bhi.n	800ac52 <UART_SetConfig+0x28a>
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d007      	beq.n	800ac60 <UART_SetConfig+0x298>
 800ac50:	e016      	b.n	800ac80 <UART_SetConfig+0x2b8>
 800ac52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac56:	d007      	beq.n	800ac68 <UART_SetConfig+0x2a0>
 800ac58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ac5c:	d00c      	beq.n	800ac78 <UART_SetConfig+0x2b0>
 800ac5e:	e00f      	b.n	800ac80 <UART_SetConfig+0x2b8>
 800ac60:	2300      	movs	r3, #0
 800ac62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ac66:	e013      	b.n	800ac90 <UART_SetConfig+0x2c8>
 800ac68:	2302      	movs	r3, #2
 800ac6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ac6e:	e00f      	b.n	800ac90 <UART_SetConfig+0x2c8>
 800ac70:	2304      	movs	r3, #4
 800ac72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ac76:	e00b      	b.n	800ac90 <UART_SetConfig+0x2c8>
 800ac78:	2308      	movs	r3, #8
 800ac7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ac7e:	e007      	b.n	800ac90 <UART_SetConfig+0x2c8>
 800ac80:	2310      	movs	r3, #16
 800ac82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ac86:	bf00      	nop
 800ac88:	e002      	b.n	800ac90 <UART_SetConfig+0x2c8>
 800ac8a:	2310      	movs	r3, #16
 800ac8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	4a13      	ldr	r2, [pc, #76]	; (800ace4 <UART_SetConfig+0x31c>)
 800ac96:	4293      	cmp	r3, r2
 800ac98:	f040 80fe 	bne.w	800ae98 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ac9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aca0:	2b08      	cmp	r3, #8
 800aca2:	d837      	bhi.n	800ad14 <UART_SetConfig+0x34c>
 800aca4:	a201      	add	r2, pc, #4	; (adr r2, 800acac <UART_SetConfig+0x2e4>)
 800aca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acaa:	bf00      	nop
 800acac:	0800acd1 	.word	0x0800acd1
 800acb0:	0800ad15 	.word	0x0800ad15
 800acb4:	0800acd9 	.word	0x0800acd9
 800acb8:	0800ad15 	.word	0x0800ad15
 800acbc:	0800ad05 	.word	0x0800ad05
 800acc0:	0800ad15 	.word	0x0800ad15
 800acc4:	0800ad15 	.word	0x0800ad15
 800acc8:	0800ad15 	.word	0x0800ad15
 800accc:	0800ad0d 	.word	0x0800ad0d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800acd0:	f7fe ff90 	bl	8009bf4 <HAL_RCC_GetPCLK1Freq>
 800acd4:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800acd6:	e020      	b.n	800ad1a <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800acd8:	4b09      	ldr	r3, [pc, #36]	; (800ad00 <UART_SetConfig+0x338>)
 800acda:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800acdc:	e01d      	b.n	800ad1a <UART_SetConfig+0x352>
 800acde:	bf00      	nop
 800ace0:	efff69f3 	.word	0xefff69f3
 800ace4:	40008000 	.word	0x40008000
 800ace8:	40013800 	.word	0x40013800
 800acec:	40021000 	.word	0x40021000
 800acf0:	40004400 	.word	0x40004400
 800acf4:	40004800 	.word	0x40004800
 800acf8:	40004c00 	.word	0x40004c00
 800acfc:	40005000 	.word	0x40005000
 800ad00:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800ad04:	f7fe fee0 	bl	8009ac8 <HAL_RCC_GetSysClockFreq>
 800ad08:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800ad0a:	e006      	b.n	800ad1a <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800ad0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad10:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800ad12:	e002      	b.n	800ad1a <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 800ad14:	2301      	movs	r3, #1
 800ad16:	76fb      	strb	r3, [r7, #27]
        break;
 800ad18:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	f000 81b9 	beq.w	800b094 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	685a      	ldr	r2, [r3, #4]
 800ad26:	4613      	mov	r3, r2
 800ad28:	005b      	lsls	r3, r3, #1
 800ad2a:	4413      	add	r3, r2
 800ad2c:	697a      	ldr	r2, [r7, #20]
 800ad2e:	429a      	cmp	r2, r3
 800ad30:	d305      	bcc.n	800ad3e <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	685b      	ldr	r3, [r3, #4]
 800ad36:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ad38:	697a      	ldr	r2, [r7, #20]
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	d902      	bls.n	800ad44 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 800ad3e:	2301      	movs	r3, #1
 800ad40:	76fb      	strb	r3, [r7, #27]
 800ad42:	e1a7      	b.n	800b094 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 800ad44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ad48:	2b08      	cmp	r3, #8
 800ad4a:	f200 8092 	bhi.w	800ae72 <UART_SetConfig+0x4aa>
 800ad4e:	a201      	add	r2, pc, #4	; (adr r2, 800ad54 <UART_SetConfig+0x38c>)
 800ad50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad54:	0800ad79 	.word	0x0800ad79
 800ad58:	0800ae73 	.word	0x0800ae73
 800ad5c:	0800adc7 	.word	0x0800adc7
 800ad60:	0800ae73 	.word	0x0800ae73
 800ad64:	0800adfb 	.word	0x0800adfb
 800ad68:	0800ae73 	.word	0x0800ae73
 800ad6c:	0800ae73 	.word	0x0800ae73
 800ad70:	0800ae73 	.word	0x0800ae73
 800ad74:	0800ae49 	.word	0x0800ae49
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800ad78:	f7fe ff3c 	bl	8009bf4 <HAL_RCC_GetPCLK1Freq>
 800ad7c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	4619      	mov	r1, r3
 800ad82:	f04f 0200 	mov.w	r2, #0
 800ad86:	f04f 0300 	mov.w	r3, #0
 800ad8a:	f04f 0400 	mov.w	r4, #0
 800ad8e:	0214      	lsls	r4, r2, #8
 800ad90:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800ad94:	020b      	lsls	r3, r1, #8
 800ad96:	687a      	ldr	r2, [r7, #4]
 800ad98:	6852      	ldr	r2, [r2, #4]
 800ad9a:	0852      	lsrs	r2, r2, #1
 800ad9c:	4611      	mov	r1, r2
 800ad9e:	f04f 0200 	mov.w	r2, #0
 800ada2:	eb13 0b01 	adds.w	fp, r3, r1
 800ada6:	eb44 0c02 	adc.w	ip, r4, r2
 800adaa:	4658      	mov	r0, fp
 800adac:	4661      	mov	r1, ip
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	685b      	ldr	r3, [r3, #4]
 800adb2:	f04f 0400 	mov.w	r4, #0
 800adb6:	461a      	mov	r2, r3
 800adb8:	4623      	mov	r3, r4
 800adba:	f7fd f91d 	bl	8007ff8 <__aeabi_uldivmod>
 800adbe:	4603      	mov	r3, r0
 800adc0:	460c      	mov	r4, r1
 800adc2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800adc4:	e058      	b.n	800ae78 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	685b      	ldr	r3, [r3, #4]
 800adca:	085b      	lsrs	r3, r3, #1
 800adcc:	f04f 0400 	mov.w	r4, #0
 800add0:	49ae      	ldr	r1, [pc, #696]	; (800b08c <UART_SetConfig+0x6c4>)
 800add2:	f04f 0200 	mov.w	r2, #0
 800add6:	eb13 0b01 	adds.w	fp, r3, r1
 800adda:	eb44 0c02 	adc.w	ip, r4, r2
 800adde:	4658      	mov	r0, fp
 800ade0:	4661      	mov	r1, ip
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	685b      	ldr	r3, [r3, #4]
 800ade6:	f04f 0400 	mov.w	r4, #0
 800adea:	461a      	mov	r2, r3
 800adec:	4623      	mov	r3, r4
 800adee:	f7fd f903 	bl	8007ff8 <__aeabi_uldivmod>
 800adf2:	4603      	mov	r3, r0
 800adf4:	460c      	mov	r4, r1
 800adf6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800adf8:	e03e      	b.n	800ae78 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800adfa:	f7fe fe65 	bl	8009ac8 <HAL_RCC_GetSysClockFreq>
 800adfe:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	4619      	mov	r1, r3
 800ae04:	f04f 0200 	mov.w	r2, #0
 800ae08:	f04f 0300 	mov.w	r3, #0
 800ae0c:	f04f 0400 	mov.w	r4, #0
 800ae10:	0214      	lsls	r4, r2, #8
 800ae12:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800ae16:	020b      	lsls	r3, r1, #8
 800ae18:	687a      	ldr	r2, [r7, #4]
 800ae1a:	6852      	ldr	r2, [r2, #4]
 800ae1c:	0852      	lsrs	r2, r2, #1
 800ae1e:	4611      	mov	r1, r2
 800ae20:	f04f 0200 	mov.w	r2, #0
 800ae24:	eb13 0b01 	adds.w	fp, r3, r1
 800ae28:	eb44 0c02 	adc.w	ip, r4, r2
 800ae2c:	4658      	mov	r0, fp
 800ae2e:	4661      	mov	r1, ip
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	f04f 0400 	mov.w	r4, #0
 800ae38:	461a      	mov	r2, r3
 800ae3a:	4623      	mov	r3, r4
 800ae3c:	f7fd f8dc 	bl	8007ff8 <__aeabi_uldivmod>
 800ae40:	4603      	mov	r3, r0
 800ae42:	460c      	mov	r4, r1
 800ae44:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800ae46:	e017      	b.n	800ae78 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	685b      	ldr	r3, [r3, #4]
 800ae4c:	085b      	lsrs	r3, r3, #1
 800ae4e:	f04f 0400 	mov.w	r4, #0
 800ae52:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800ae56:	f144 0100 	adc.w	r1, r4, #0
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	f04f 0400 	mov.w	r4, #0
 800ae62:	461a      	mov	r2, r3
 800ae64:	4623      	mov	r3, r4
 800ae66:	f7fd f8c7 	bl	8007ff8 <__aeabi_uldivmod>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	460c      	mov	r4, r1
 800ae6e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800ae70:	e002      	b.n	800ae78 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 800ae72:	2301      	movs	r3, #1
 800ae74:	76fb      	strb	r3, [r7, #27]
            break;
 800ae76:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ae78:	69fb      	ldr	r3, [r7, #28]
 800ae7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ae7e:	d308      	bcc.n	800ae92 <UART_SetConfig+0x4ca>
 800ae80:	69fb      	ldr	r3, [r7, #28]
 800ae82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae86:	d204      	bcs.n	800ae92 <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	69fa      	ldr	r2, [r7, #28]
 800ae8e:	60da      	str	r2, [r3, #12]
 800ae90:	e100      	b.n	800b094 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 800ae92:	2301      	movs	r3, #1
 800ae94:	76fb      	strb	r3, [r7, #27]
 800ae96:	e0fd      	b.n	800b094 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	69db      	ldr	r3, [r3, #28]
 800ae9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aea0:	f040 8084 	bne.w	800afac <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 800aea4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aea8:	2b08      	cmp	r3, #8
 800aeaa:	d85f      	bhi.n	800af6c <UART_SetConfig+0x5a4>
 800aeac:	a201      	add	r2, pc, #4	; (adr r2, 800aeb4 <UART_SetConfig+0x4ec>)
 800aeae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeb2:	bf00      	nop
 800aeb4:	0800aed9 	.word	0x0800aed9
 800aeb8:	0800aef9 	.word	0x0800aef9
 800aebc:	0800af19 	.word	0x0800af19
 800aec0:	0800af6d 	.word	0x0800af6d
 800aec4:	0800af35 	.word	0x0800af35
 800aec8:	0800af6d 	.word	0x0800af6d
 800aecc:	0800af6d 	.word	0x0800af6d
 800aed0:	0800af6d 	.word	0x0800af6d
 800aed4:	0800af55 	.word	0x0800af55
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aed8:	f7fe fe8c 	bl	8009bf4 <HAL_RCC_GetPCLK1Freq>
 800aedc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800aede:	693b      	ldr	r3, [r7, #16]
 800aee0:	005a      	lsls	r2, r3, #1
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	685b      	ldr	r3, [r3, #4]
 800aee6:	085b      	lsrs	r3, r3, #1
 800aee8:	441a      	add	r2, r3
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	685b      	ldr	r3, [r3, #4]
 800aeee:	fbb2 f3f3 	udiv	r3, r2, r3
 800aef2:	b29b      	uxth	r3, r3
 800aef4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800aef6:	e03c      	b.n	800af72 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aef8:	f7fe fe92 	bl	8009c20 <HAL_RCC_GetPCLK2Freq>
 800aefc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	005a      	lsls	r2, r3, #1
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	685b      	ldr	r3, [r3, #4]
 800af06:	085b      	lsrs	r3, r3, #1
 800af08:	441a      	add	r2, r3
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	685b      	ldr	r3, [r3, #4]
 800af0e:	fbb2 f3f3 	udiv	r3, r2, r3
 800af12:	b29b      	uxth	r3, r3
 800af14:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800af16:	e02c      	b.n	800af72 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	685b      	ldr	r3, [r3, #4]
 800af1c:	085b      	lsrs	r3, r3, #1
 800af1e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800af22:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800af26:	687a      	ldr	r2, [r7, #4]
 800af28:	6852      	ldr	r2, [r2, #4]
 800af2a:	fbb3 f3f2 	udiv	r3, r3, r2
 800af2e:	b29b      	uxth	r3, r3
 800af30:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800af32:	e01e      	b.n	800af72 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800af34:	f7fe fdc8 	bl	8009ac8 <HAL_RCC_GetSysClockFreq>
 800af38:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	005a      	lsls	r2, r3, #1
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	685b      	ldr	r3, [r3, #4]
 800af42:	085b      	lsrs	r3, r3, #1
 800af44:	441a      	add	r2, r3
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	685b      	ldr	r3, [r3, #4]
 800af4a:	fbb2 f3f3 	udiv	r3, r2, r3
 800af4e:	b29b      	uxth	r3, r3
 800af50:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800af52:	e00e      	b.n	800af72 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	685b      	ldr	r3, [r3, #4]
 800af58:	085b      	lsrs	r3, r3, #1
 800af5a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	685b      	ldr	r3, [r3, #4]
 800af62:	fbb2 f3f3 	udiv	r3, r2, r3
 800af66:	b29b      	uxth	r3, r3
 800af68:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800af6a:	e002      	b.n	800af72 <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 800af6c:	2301      	movs	r3, #1
 800af6e:	76fb      	strb	r3, [r7, #27]
        break;
 800af70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af72:	69fb      	ldr	r3, [r7, #28]
 800af74:	2b0f      	cmp	r3, #15
 800af76:	d916      	bls.n	800afa6 <UART_SetConfig+0x5de>
 800af78:	69fb      	ldr	r3, [r7, #28]
 800af7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af7e:	d212      	bcs.n	800afa6 <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800af80:	69fb      	ldr	r3, [r7, #28]
 800af82:	b29b      	uxth	r3, r3
 800af84:	f023 030f 	bic.w	r3, r3, #15
 800af88:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800af8a:	69fb      	ldr	r3, [r7, #28]
 800af8c:	085b      	lsrs	r3, r3, #1
 800af8e:	b29b      	uxth	r3, r3
 800af90:	f003 0307 	and.w	r3, r3, #7
 800af94:	b29a      	uxth	r2, r3
 800af96:	89fb      	ldrh	r3, [r7, #14]
 800af98:	4313      	orrs	r3, r2
 800af9a:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	89fa      	ldrh	r2, [r7, #14]
 800afa2:	60da      	str	r2, [r3, #12]
 800afa4:	e076      	b.n	800b094 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 800afa6:	2301      	movs	r3, #1
 800afa8:	76fb      	strb	r3, [r7, #27]
 800afaa:	e073      	b.n	800b094 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 800afac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800afb0:	2b08      	cmp	r3, #8
 800afb2:	d85c      	bhi.n	800b06e <UART_SetConfig+0x6a6>
 800afb4:	a201      	add	r2, pc, #4	; (adr r2, 800afbc <UART_SetConfig+0x5f4>)
 800afb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afba:	bf00      	nop
 800afbc:	0800afe1 	.word	0x0800afe1
 800afc0:	0800afff 	.word	0x0800afff
 800afc4:	0800b01d 	.word	0x0800b01d
 800afc8:	0800b06f 	.word	0x0800b06f
 800afcc:	0800b039 	.word	0x0800b039
 800afd0:	0800b06f 	.word	0x0800b06f
 800afd4:	0800b06f 	.word	0x0800b06f
 800afd8:	0800b06f 	.word	0x0800b06f
 800afdc:	0800b057 	.word	0x0800b057
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800afe0:	f7fe fe08 	bl	8009bf4 <HAL_RCC_GetPCLK1Freq>
 800afe4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	685b      	ldr	r3, [r3, #4]
 800afea:	085a      	lsrs	r2, r3, #1
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	441a      	add	r2, r3
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	685b      	ldr	r3, [r3, #4]
 800aff4:	fbb2 f3f3 	udiv	r3, r2, r3
 800aff8:	b29b      	uxth	r3, r3
 800affa:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800affc:	e03a      	b.n	800b074 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800affe:	f7fe fe0f 	bl	8009c20 <HAL_RCC_GetPCLK2Freq>
 800b002:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	685b      	ldr	r3, [r3, #4]
 800b008:	085a      	lsrs	r2, r3, #1
 800b00a:	693b      	ldr	r3, [r7, #16]
 800b00c:	441a      	add	r2, r3
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	685b      	ldr	r3, [r3, #4]
 800b012:	fbb2 f3f3 	udiv	r3, r2, r3
 800b016:	b29b      	uxth	r3, r3
 800b018:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800b01a:	e02b      	b.n	800b074 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	685b      	ldr	r3, [r3, #4]
 800b020:	085b      	lsrs	r3, r3, #1
 800b022:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800b026:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800b02a:	687a      	ldr	r2, [r7, #4]
 800b02c:	6852      	ldr	r2, [r2, #4]
 800b02e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b032:	b29b      	uxth	r3, r3
 800b034:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800b036:	e01d      	b.n	800b074 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b038:	f7fe fd46 	bl	8009ac8 <HAL_RCC_GetSysClockFreq>
 800b03c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	685b      	ldr	r3, [r3, #4]
 800b042:	085a      	lsrs	r2, r3, #1
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	441a      	add	r2, r3
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	685b      	ldr	r3, [r3, #4]
 800b04c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b050:	b29b      	uxth	r3, r3
 800b052:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800b054:	e00e      	b.n	800b074 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	685b      	ldr	r3, [r3, #4]
 800b05a:	085b      	lsrs	r3, r3, #1
 800b05c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	685b      	ldr	r3, [r3, #4]
 800b064:	fbb2 f3f3 	udiv	r3, r2, r3
 800b068:	b29b      	uxth	r3, r3
 800b06a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800b06c:	e002      	b.n	800b074 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 800b06e:	2301      	movs	r3, #1
 800b070:	76fb      	strb	r3, [r7, #27]
        break;
 800b072:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b074:	69fb      	ldr	r3, [r7, #28]
 800b076:	2b0f      	cmp	r3, #15
 800b078:	d90a      	bls.n	800b090 <UART_SetConfig+0x6c8>
 800b07a:	69fb      	ldr	r3, [r7, #28]
 800b07c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b080:	d206      	bcs.n	800b090 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	69fa      	ldr	r2, [r7, #28]
 800b088:	60da      	str	r2, [r3, #12]
 800b08a:	e003      	b.n	800b094 <UART_SetConfig+0x6cc>
 800b08c:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 800b090:	2301      	movs	r3, #1
 800b092:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2200      	movs	r2, #0
 800b098:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2200      	movs	r2, #0
 800b09e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800b0a0:	7efb      	ldrb	r3, [r7, #27]
}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	3728      	adds	r7, #40	; 0x28
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800b0ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b083      	sub	sp, #12
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0b8:	f003 0301 	and.w	r3, r3, #1
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d00a      	beq.n	800b0d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	685b      	ldr	r3, [r3, #4]
 800b0c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	430a      	orrs	r2, r1
 800b0d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0da:	f003 0302 	and.w	r3, r3, #2
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d00a      	beq.n	800b0f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	685b      	ldr	r3, [r3, #4]
 800b0e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	430a      	orrs	r2, r1
 800b0f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0fc:	f003 0304 	and.w	r3, r3, #4
 800b100:	2b00      	cmp	r3, #0
 800b102:	d00a      	beq.n	800b11a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	685b      	ldr	r3, [r3, #4]
 800b10a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	430a      	orrs	r2, r1
 800b118:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b11e:	f003 0308 	and.w	r3, r3, #8
 800b122:	2b00      	cmp	r3, #0
 800b124:	d00a      	beq.n	800b13c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	685b      	ldr	r3, [r3, #4]
 800b12c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	430a      	orrs	r2, r1
 800b13a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b140:	f003 0310 	and.w	r3, r3, #16
 800b144:	2b00      	cmp	r3, #0
 800b146:	d00a      	beq.n	800b15e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	689b      	ldr	r3, [r3, #8]
 800b14e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	430a      	orrs	r2, r1
 800b15c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b162:	f003 0320 	and.w	r3, r3, #32
 800b166:	2b00      	cmp	r3, #0
 800b168:	d00a      	beq.n	800b180 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	689b      	ldr	r3, [r3, #8]
 800b170:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	430a      	orrs	r2, r1
 800b17e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d01a      	beq.n	800b1c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	685b      	ldr	r3, [r3, #4]
 800b192:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	430a      	orrs	r2, r1
 800b1a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b1aa:	d10a      	bne.n	800b1c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	685b      	ldr	r3, [r3, #4]
 800b1b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	430a      	orrs	r2, r1
 800b1c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d00a      	beq.n	800b1e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	685b      	ldr	r3, [r3, #4]
 800b1d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	430a      	orrs	r2, r1
 800b1e2:	605a      	str	r2, [r3, #4]
  }
}
 800b1e4:	bf00      	nop
 800b1e6:	370c      	adds	r7, #12
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ee:	4770      	bx	lr

0800b1f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b086      	sub	sp, #24
 800b1f4:	af02      	add	r7, sp, #8
 800b1f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b1fe:	f7fd fb6b 	bl	80088d8 <HAL_GetTick>
 800b202:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	f003 0308 	and.w	r3, r3, #8
 800b20e:	2b08      	cmp	r3, #8
 800b210:	d10e      	bne.n	800b230 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b212:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b216:	9300      	str	r3, [sp, #0]
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	2200      	movs	r2, #0
 800b21c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f000 f82a 	bl	800b27a <UART_WaitOnFlagUntilTimeout>
 800b226:	4603      	mov	r3, r0
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d001      	beq.n	800b230 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b22c:	2303      	movs	r3, #3
 800b22e:	e020      	b.n	800b272 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f003 0304 	and.w	r3, r3, #4
 800b23a:	2b04      	cmp	r3, #4
 800b23c:	d10e      	bne.n	800b25c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b23e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b242:	9300      	str	r3, [sp, #0]
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	2200      	movs	r2, #0
 800b248:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b24c:	6878      	ldr	r0, [r7, #4]
 800b24e:	f000 f814 	bl	800b27a <UART_WaitOnFlagUntilTimeout>
 800b252:	4603      	mov	r3, r0
 800b254:	2b00      	cmp	r3, #0
 800b256:	d001      	beq.n	800b25c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b258:	2303      	movs	r3, #3
 800b25a:	e00a      	b.n	800b272 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2220      	movs	r2, #32
 800b260:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2220      	movs	r2, #32
 800b266:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2200      	movs	r2, #0
 800b26c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800b270:	2300      	movs	r3, #0
}
 800b272:	4618      	mov	r0, r3
 800b274:	3710      	adds	r7, #16
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}

0800b27a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b27a:	b580      	push	{r7, lr}
 800b27c:	b084      	sub	sp, #16
 800b27e:	af00      	add	r7, sp, #0
 800b280:	60f8      	str	r0, [r7, #12]
 800b282:	60b9      	str	r1, [r7, #8]
 800b284:	603b      	str	r3, [r7, #0]
 800b286:	4613      	mov	r3, r2
 800b288:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b28a:	e05d      	b.n	800b348 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b28c:	69bb      	ldr	r3, [r7, #24]
 800b28e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b292:	d059      	beq.n	800b348 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b294:	f7fd fb20 	bl	80088d8 <HAL_GetTick>
 800b298:	4602      	mov	r2, r0
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	1ad3      	subs	r3, r2, r3
 800b29e:	69ba      	ldr	r2, [r7, #24]
 800b2a0:	429a      	cmp	r2, r3
 800b2a2:	d302      	bcc.n	800b2aa <UART_WaitOnFlagUntilTimeout+0x30>
 800b2a4:	69bb      	ldr	r3, [r7, #24]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d11b      	bne.n	800b2e2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	681a      	ldr	r2, [r3, #0]
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b2b8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	689a      	ldr	r2, [r3, #8]
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f022 0201 	bic.w	r2, r2, #1
 800b2c8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	2220      	movs	r2, #32
 800b2ce:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	2220      	movs	r2, #32
 800b2d4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800b2de:	2303      	movs	r3, #3
 800b2e0:	e042      	b.n	800b368 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f003 0304 	and.w	r3, r3, #4
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d02b      	beq.n	800b348 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	69db      	ldr	r3, [r3, #28]
 800b2f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b2fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b2fe:	d123      	bne.n	800b348 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b308:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	681a      	ldr	r2, [r3, #0]
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b318:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	689a      	ldr	r2, [r3, #8]
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f022 0201 	bic.w	r2, r2, #1
 800b328:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	2220      	movs	r2, #32
 800b32e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	2220      	movs	r2, #32
 800b334:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	2220      	movs	r2, #32
 800b33a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	2200      	movs	r2, #0
 800b340:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800b344:	2303      	movs	r3, #3
 800b346:	e00f      	b.n	800b368 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	69da      	ldr	r2, [r3, #28]
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	4013      	ands	r3, r2
 800b352:	68ba      	ldr	r2, [r7, #8]
 800b354:	429a      	cmp	r2, r3
 800b356:	bf0c      	ite	eq
 800b358:	2301      	moveq	r3, #1
 800b35a:	2300      	movne	r3, #0
 800b35c:	b2db      	uxtb	r3, r3
 800b35e:	461a      	mov	r2, r3
 800b360:	79fb      	ldrb	r3, [r7, #7]
 800b362:	429a      	cmp	r2, r3
 800b364:	d092      	beq.n	800b28c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b366:	2300      	movs	r3, #0
}
 800b368:	4618      	mov	r0, r3
 800b36a:	3710      	adds	r7, #16
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}

0800b370 <aiPbMgrInit>:
    const aiPbCmdFunc *funcs;
    uint32_t  n_func;
} pbContextMgr;

void aiPbMgrInit(const aiPbCmdFunc *funcs)
{
 800b370:	b5b0      	push	{r4, r5, r7, lr}
 800b372:	b088      	sub	sp, #32
 800b374:	af00      	add	r7, sp, #0
 800b376:	6178      	str	r0, [r7, #20]
    const aiPbCmdFunc *cfunc;
    pbContextMgr.input = pb_istream_from_uart(0);
 800b378:	4c1a      	ldr	r4, [pc, #104]	; (800b3e4 <aiPbMgrInit+0x74>)
 800b37a:	463b      	mov	r3, r7
 800b37c:	2100      	movs	r1, #0
 800b37e:	4618      	mov	r0, r3
 800b380:	f001 fcd2 	bl	800cd28 <pb_istream_from_uart>
 800b384:	463b      	mov	r3, r7
 800b386:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b388:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    pbContextMgr.output = pb_ostream_to_uart(0);
 800b38c:	4c15      	ldr	r4, [pc, #84]	; (800b3e4 <aiPbMgrInit+0x74>)
 800b38e:	463b      	mov	r3, r7
 800b390:	2100      	movs	r1, #0
 800b392:	4618      	mov	r0, r3
 800b394:	f001 fca4 	bl	800cce0 <pb_ostream_to_uart>
 800b398:	3410      	adds	r4, #16
 800b39a:	463d      	mov	r5, r7
 800b39c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b39e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b3a0:	682b      	ldr	r3, [r5, #0]
 800b3a2:	6023      	str	r3, [r4, #0]

    pbContextMgr.n_func = 0;
 800b3a4:	4b0f      	ldr	r3, [pc, #60]	; (800b3e4 <aiPbMgrInit+0x74>)
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	629a      	str	r2, [r3, #40]	; 0x28
    pbContextMgr.funcs = NULL;
 800b3aa:	4b0e      	ldr	r3, [pc, #56]	; (800b3e4 <aiPbMgrInit+0x74>)
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	625a      	str	r2, [r3, #36]	; 0x24

    if (funcs) {
 800b3b0:	697b      	ldr	r3, [r7, #20]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d011      	beq.n	800b3da <aiPbMgrInit+0x6a>
        cfunc = funcs;
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	61fb      	str	r3, [r7, #28]
        while (cfunc->process) {
 800b3ba:	e007      	b.n	800b3cc <aiPbMgrInit+0x5c>
            pbContextMgr.n_func++;
 800b3bc:	4b09      	ldr	r3, [pc, #36]	; (800b3e4 <aiPbMgrInit+0x74>)
 800b3be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3c0:	3301      	adds	r3, #1
 800b3c2:	4a08      	ldr	r2, [pc, #32]	; (800b3e4 <aiPbMgrInit+0x74>)
 800b3c4:	6293      	str	r3, [r2, #40]	; 0x28
            cfunc++;
 800b3c6:	69fb      	ldr	r3, [r7, #28]
 800b3c8:	330c      	adds	r3, #12
 800b3ca:	61fb      	str	r3, [r7, #28]
        while (cfunc->process) {
 800b3cc:	69fb      	ldr	r3, [r7, #28]
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d1f3      	bne.n	800b3bc <aiPbMgrInit+0x4c>
        }
        pbContextMgr.funcs = funcs;
 800b3d4:	4a03      	ldr	r2, [pc, #12]	; (800b3e4 <aiPbMgrInit+0x74>)
 800b3d6:	697b      	ldr	r3, [r7, #20]
 800b3d8:	6253      	str	r3, [r2, #36]	; 0x24
    }
}
 800b3da:	bf00      	nop
 800b3dc:	3720      	adds	r7, #32
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bdb0      	pop	{r4, r5, r7, pc}
 800b3e2:	bf00      	nop
 800b3e4:	20000a84 	.word	0x20000a84

0800b3e8 <aiPbMgrWaitAndProcess>:

int aiPbMgrWaitAndProcess(void)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b084      	sub	sp, #16
 800b3ec:	af02      	add	r7, sp, #8
    uint32_t idx;
    static reqMsg  req = reqMsg_init_zero;
    static respMsg resp = respMsg_init_default;
    const aiPbCmdFunc *cfunc;

    ioFlushRead();
 800b3ee:	f001 fc05 	bl	800cbfc <ioFlushRead>
    if (pb_decode_delimited(&pbContextMgr.input, reqMsg_fields, &req)) {
 800b3f2:	4a20      	ldr	r2, [pc, #128]	; (800b474 <aiPbMgrWaitAndProcess+0x8c>)
 800b3f4:	4920      	ldr	r1, [pc, #128]	; (800b478 <aiPbMgrWaitAndProcess+0x90>)
 800b3f6:	4821      	ldr	r0, [pc, #132]	; (800b47c <aiPbMgrWaitAndProcess+0x94>)
 800b3f8:	f004 f840 	bl	800f47c <pb_decode_delimited>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d030      	beq.n	800b464 <aiPbMgrWaitAndProcess+0x7c>
        ioFlushRead();
 800b402:	f001 fbfb 	bl	800cbfc <ioFlushRead>
        for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 800b406:	2300      	movs	r3, #0
 800b408:	607b      	str	r3, [r7, #4]
 800b40a:	e019      	b.n	800b440 <aiPbMgrWaitAndProcess+0x58>
            cfunc = &pbContextMgr.funcs[idx];
 800b40c:	4b1b      	ldr	r3, [pc, #108]	; (800b47c <aiPbMgrWaitAndProcess+0x94>)
 800b40e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800b410:	687a      	ldr	r2, [r7, #4]
 800b412:	4613      	mov	r3, r2
 800b414:	005b      	lsls	r3, r3, #1
 800b416:	4413      	add	r3, r2
 800b418:	009b      	lsls	r3, r3, #2
 800b41a:	440b      	add	r3, r1
 800b41c:	603b      	str	r3, [r7, #0]
            if (cfunc->cmd == req.cmd) {
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	781a      	ldrb	r2, [r3, #0]
 800b422:	4b14      	ldr	r3, [pc, #80]	; (800b474 <aiPbMgrWaitAndProcess+0x8c>)
 800b424:	791b      	ldrb	r3, [r3, #4]
 800b426:	429a      	cmp	r2, r3
 800b428:	d107      	bne.n	800b43a <aiPbMgrWaitAndProcess+0x52>
                cfunc->process(&req, &resp, cfunc->param);
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	685b      	ldr	r3, [r3, #4]
 800b42e:	683a      	ldr	r2, [r7, #0]
 800b430:	6892      	ldr	r2, [r2, #8]
 800b432:	4913      	ldr	r1, [pc, #76]	; (800b480 <aiPbMgrWaitAndProcess+0x98>)
 800b434:	480f      	ldr	r0, [pc, #60]	; (800b474 <aiPbMgrWaitAndProcess+0x8c>)
 800b436:	4798      	blx	r3
                break;
 800b438:	e007      	b.n	800b44a <aiPbMgrWaitAndProcess+0x62>
        for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	3301      	adds	r3, #1
 800b43e:	607b      	str	r3, [r7, #4]
 800b440:	4b0e      	ldr	r3, [pc, #56]	; (800b47c <aiPbMgrWaitAndProcess+0x94>)
 800b442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b444:	687a      	ldr	r2, [r7, #4]
 800b446:	429a      	cmp	r2, r3
 800b448:	d3e0      	bcc.n	800b40c <aiPbMgrWaitAndProcess+0x24>
            }
        }
        if (idx == pbContextMgr.n_func) {
 800b44a:	4b0c      	ldr	r3, [pc, #48]	; (800b47c <aiPbMgrWaitAndProcess+0x94>)
 800b44c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b44e:	687a      	ldr	r2, [r7, #4]
 800b450:	429a      	cmp	r2, r3
 800b452:	d107      	bne.n	800b464 <aiPbMgrWaitAndProcess+0x7c>
            aiPbMgrSendAck(&req, &resp, EnumState_S_ERROR,
 800b454:	2304      	movs	r3, #4
 800b456:	9300      	str	r3, [sp, #0]
 800b458:	2304      	movs	r3, #4
 800b45a:	2204      	movs	r2, #4
 800b45c:	4908      	ldr	r1, [pc, #32]	; (800b480 <aiPbMgrWaitAndProcess+0x98>)
 800b45e:	4805      	ldr	r0, [pc, #20]	; (800b474 <aiPbMgrWaitAndProcess+0x8c>)
 800b460:	f000 f82e 	bl	800b4c0 <aiPbMgrSendAck>
                    EnumError_E_INVALID_PARAM, EnumError_E_INVALID_PARAM);
        }
    }

    ioFlushRead();
 800b464:	f001 fbca 	bl	800cbfc <ioFlushRead>

    return 0;
 800b468:	2300      	movs	r3, #0
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	3708      	adds	r7, #8
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}
 800b472:	bf00      	nop
 800b474:	20000ab0 	.word	0x20000ab0
 800b478:	080176d0 	.word	0x080176d0
 800b47c:	20000a84 	.word	0x20000a84
 800b480:	20000b00 	.word	0x20000b00

0800b484 <aiPbMgrSendResp>:

/*---------------------------------------------------------------------------*/

void aiPbMgrSendResp(const reqMsg *req, respMsg *resp,
        EnumState state)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b084      	sub	sp, #16
 800b488:	af00      	add	r7, sp, #0
 800b48a:	60f8      	str	r0, [r7, #12]
 800b48c:	60b9      	str	r1, [r7, #8]
 800b48e:	4613      	mov	r3, r2
 800b490:	71fb      	strb	r3, [r7, #7]
    resp->reqid = req->reqid;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	681a      	ldr	r2, [r3, #0]
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	601a      	str	r2, [r3, #0]
    resp->state = state;
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	79fa      	ldrb	r2, [r7, #7]
 800b49e:	711a      	strb	r2, [r3, #4]
    pb_encode(&pbContextMgr.output, respMsg_fields, resp);
 800b4a0:	68ba      	ldr	r2, [r7, #8]
 800b4a2:	4905      	ldr	r1, [pc, #20]	; (800b4b8 <aiPbMgrSendResp+0x34>)
 800b4a4:	4805      	ldr	r0, [pc, #20]	; (800b4bc <aiPbMgrSendResp+0x38>)
 800b4a6:	f005 f833 	bl	8010510 <pb_encode>
    ioFlushWrite();
 800b4aa:	f001 fb39 	bl	800cb20 <ioFlushWrite>
}
 800b4ae:	bf00      	nop
 800b4b0:	3710      	adds	r7, #16
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}
 800b4b6:	bf00      	nop
 800b4b8:	08017a94 	.word	0x08017a94
 800b4bc:	20000a94 	.word	0x20000a94

0800b4c0 <aiPbMgrSendAck>:

void aiPbMgrSendAck(const reqMsg *req, respMsg *resp,
        EnumState state, uint32_t param, EnumError error)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b084      	sub	sp, #16
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	60f8      	str	r0, [r7, #12]
 800b4c8:	60b9      	str	r1, [r7, #8]
 800b4ca:	603b      	str	r3, [r7, #0]
 800b4cc:	4613      	mov	r3, r2
 800b4ce:	71fb      	strb	r3, [r7, #7]
    resp->which_payload = respMsg_ack_tag;
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	220c      	movs	r2, #12
 800b4d4:	80da      	strh	r2, [r3, #6]
    resp->payload.ack.param = param;
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	683a      	ldr	r2, [r7, #0]
 800b4da:	609a      	str	r2, [r3, #8]
    resp->payload.ack.error = error;
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	7e3a      	ldrb	r2, [r7, #24]
 800b4e0:	731a      	strb	r2, [r3, #12]
    aiPbMgrSendResp(req, resp, state);
 800b4e2:	79fb      	ldrb	r3, [r7, #7]
 800b4e4:	461a      	mov	r2, r3
 800b4e6:	68b9      	ldr	r1, [r7, #8]
 800b4e8:	68f8      	ldr	r0, [r7, #12]
 800b4ea:	f7ff ffcb 	bl	800b484 <aiPbMgrSendResp>
}
 800b4ee:	bf00      	nop
 800b4f0:	3710      	adds	r7, #16
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}
	...

0800b4f8 <aiPbMgrWaitAck>:

bool aiPbMgrWaitAck(void)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b084      	sub	sp, #16
 800b4fc:	af00      	add	r7, sp, #0
    bool res;
    ackMsg ack = ackMsg_init_default;
 800b4fe:	2300      	movs	r3, #0
 800b500:	607b      	str	r3, [r7, #4]
 800b502:	2300      	movs	r3, #0
 800b504:	723b      	strb	r3, [r7, #8]
    res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 800b506:	1d3b      	adds	r3, r7, #4
 800b508:	461a      	mov	r2, r3
 800b50a:	4906      	ldr	r1, [pc, #24]	; (800b524 <aiPbMgrWaitAck+0x2c>)
 800b50c:	4806      	ldr	r0, [pc, #24]	; (800b528 <aiPbMgrWaitAck+0x30>)
 800b50e:	f003 ffb5 	bl	800f47c <pb_decode_delimited>
 800b512:	4603      	mov	r3, r0
 800b514:	73fb      	strb	r3, [r7, #15]
    ioFlushRead();
 800b516:	f001 fb71 	bl	800cbfc <ioFlushRead>
    return res;
 800b51a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	3710      	adds	r7, #16
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}
 800b524:	080179e8 	.word	0x080179e8
 800b528:	20000a84 	.word	0x20000a84

0800b52c <aiPbAiBufferSize>:
    uint32_t err;
    void *msg;
};

uint32_t aiPbAiBufferSize(const ai_buffer *buffer)
{
 800b52c:	b480      	push	{r7}
 800b52e:	b083      	sub	sp, #12
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
    if (!buffer)
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d101      	bne.n	800b53e <aiPbAiBufferSize+0x12>
        return 0;
 800b53a:	2300      	movs	r3, #0
 800b53c:	e00d      	b.n	800b55a <aiPbAiBufferSize+0x2e>
    else
        return buffer->channels * buffer->height
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	68db      	ldr	r3, [r3, #12]
 800b542:	687a      	ldr	r2, [r7, #4]
 800b544:	88d2      	ldrh	r2, [r2, #6]
 800b546:	fb02 f303 	mul.w	r3, r2, r3
                * buffer->width * buffer->n_batches;
 800b54a:	687a      	ldr	r2, [r7, #4]
 800b54c:	8912      	ldrh	r2, [r2, #8]
 800b54e:	fb02 f303 	mul.w	r3, r2, r3
 800b552:	687a      	ldr	r2, [r7, #4]
 800b554:	8892      	ldrh	r2, [r2, #4]
 800b556:	fb02 f303 	mul.w	r3, r2, r3
}
 800b55a:	4618      	mov	r0, r3
 800b55c:	370c      	adds	r7, #12
 800b55e:	46bd      	mov	sp, r7
 800b560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b564:	4770      	bx	lr

0800b566 <aiPbMsgFmtToAiFmt>:

static ai_buffer_format aiPbMsgFmtToAiFmt(const uint32_t msgFmt)
{
 800b566:	b480      	push	{r7}
 800b568:	b083      	sub	sp, #12
 800b56a:	af00      	add	r7, sp, #0
 800b56c:	6078      	str	r0, [r7, #4]
    return (ai_buffer_format)msgFmt;
 800b56e:	687b      	ldr	r3, [r7, #4]
}
 800b570:	4618      	mov	r0, r3
 800b572:	370c      	adds	r7, #12
 800b574:	46bd      	mov	sp, r7
 800b576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57a:	4770      	bx	lr

0800b57c <aiPbAiFmtToMsgFmt>:

static uint32_t aiPbAiFmtToMsgFmt(const ai_buffer_format aiFmt)
{
 800b57c:	b480      	push	{r7}
 800b57e:	b083      	sub	sp, #12
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
    return (uint32_t)aiFmt;
 800b584:	687b      	ldr	r3, [r7, #4]
}
 800b586:	4618      	mov	r0, r3
 800b588:	370c      	adds	r7, #12
 800b58a:	46bd      	mov	sp, r7
 800b58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b590:	4770      	bx	lr

0800b592 <aiPbBufferGetItemSize>:

static size_t aiPbBufferGetItemSize(ai_buffer_format format)
{
 800b592:	b480      	push	{r7}
 800b594:	b083      	sub	sp, #12
 800b596:	af00      	add	r7, sp, #0
 800b598:	6078      	str	r0, [r7, #4]
    return (size_t)AI_BUFFER_BYTE_SIZE(1,format);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	11db      	asrs	r3, r3, #7
 800b59e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5a2:	3304      	adds	r3, #4
 800b5a4:	10db      	asrs	r3, r3, #3
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	370c      	adds	r7, #12
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b0:	4770      	bx	lr

0800b5b2 <aiPbBuffer_read_cb3>:

static bool aiPbBuffer_read_cb3(pb_istream_t *stream, const pb_field_t *field,
        void **arg)
{
 800b5b2:	b580      	push	{r7, lr}
 800b5b4:	b08c      	sub	sp, #48	; 0x30
 800b5b6:	af00      	add	r7, sp, #0
 800b5b8:	60f8      	str	r0, [r7, #12]
 800b5ba:	60b9      	str	r1, [r7, #8]
 800b5bc:	607a      	str	r2, [r7, #4]
    struct aiPbMgrBuffer *bm = (struct aiPbMgrBuffer *)*arg;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	627b      	str	r3, [r7, #36]	; 0x24
    ai_buffer_format format;
    size_t itsize;

    UNUSED(field);

    int maxr = bm->n_max;
 800b5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c6:	685b      	ldr	r3, [r3, #4]
 800b5c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    msg = (aiBufferByteMsg *)bm->msg;
 800b5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5cc:	691b      	ldr	r3, [r3, #16]
 800b5ce:	623b      	str	r3, [r7, #32]
    format = aiPbMsgFmtToAiFmt(msg->shape.format);
 800b5d0:	6a3b      	ldr	r3, [r7, #32]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f7ff ffc6 	bl	800b566 <aiPbMsgFmtToAiFmt>
 800b5da:	61f8      	str	r0, [r7, #28]

    /* todo(jmd) - adding scale/zeropoint values */

    /* Check shape/format */
    bm->err = EnumError_E_NONE;
 800b5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5de:	2200      	movs	r2, #0
 800b5e0:	60da      	str	r2, [r3, #12]
    if ((format == AI_BUFFER_FORMAT_NONE) || (format != bm->buffer->format)) {
 800b5e2:	69fb      	ldr	r3, [r7, #28]
 800b5e4:	2b40      	cmp	r3, #64	; 0x40
 800b5e6:	d005      	beq.n	800b5f4 <aiPbBuffer_read_cb3+0x42>
 800b5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	69fa      	ldr	r2, [r7, #28]
 800b5f0:	429a      	cmp	r2, r3
 800b5f2:	d005      	beq.n	800b600 <aiPbBuffer_read_cb3+0x4e>
        maxr = 0;
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        bm->err = EnumError_E_INVALID_FORMAT;
 800b5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5fa:	2202      	movs	r2, #2
 800b5fc:	60da      	str	r2, [r3, #12]
 800b5fe:	e020      	b.n	800b642 <aiPbBuffer_read_cb3+0x90>
    } else if ((msg->shape.channels != bm->buffer->channels) ||
 800b600:	6a3b      	ldr	r3, [r7, #32]
 800b602:	691a      	ldr	r2, [r3, #16]
 800b604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	68db      	ldr	r3, [r3, #12]
 800b60a:	429a      	cmp	r2, r3
 800b60c:	d114      	bne.n	800b638 <aiPbBuffer_read_cb3+0x86>
            (msg->shape.height != bm->buffer->height) ||
 800b60e:	6a3b      	ldr	r3, [r7, #32]
 800b610:	689b      	ldr	r3, [r3, #8]
 800b612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b614:	6812      	ldr	r2, [r2, #0]
 800b616:	88d2      	ldrh	r2, [r2, #6]
    } else if ((msg->shape.channels != bm->buffer->channels) ||
 800b618:	4293      	cmp	r3, r2
 800b61a:	d10d      	bne.n	800b638 <aiPbBuffer_read_cb3+0x86>
            (msg->shape.width != bm->buffer->width) ||
 800b61c:	6a3b      	ldr	r3, [r7, #32]
 800b61e:	68db      	ldr	r3, [r3, #12]
 800b620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b622:	6812      	ldr	r2, [r2, #0]
 800b624:	8912      	ldrh	r2, [r2, #8]
            (msg->shape.height != bm->buffer->height) ||
 800b626:	4293      	cmp	r3, r2
 800b628:	d106      	bne.n	800b638 <aiPbBuffer_read_cb3+0x86>
            (msg->shape.n_batches != bm->buffer->n_batches)) {
 800b62a:	6a3b      	ldr	r3, [r7, #32]
 800b62c:	685b      	ldr	r3, [r3, #4]
 800b62e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b630:	6812      	ldr	r2, [r2, #0]
 800b632:	8892      	ldrh	r2, [r2, #4]
            (msg->shape.width != bm->buffer->width) ||
 800b634:	4293      	cmp	r3, r2
 800b636:	d004      	beq.n	800b642 <aiPbBuffer_read_cb3+0x90>
        maxr = 0;
 800b638:	2300      	movs	r3, #0
 800b63a:	62fb      	str	r3, [r7, #44]	; 0x2c
        bm->err = EnumError_E_INVALID_SHAPE;
 800b63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b63e:	2205      	movs	r2, #5
 800b640:	60da      	str	r2, [r3, #12]
    }

    itsize = aiPbBufferGetItemSize(format);
 800b642:	69f8      	ldr	r0, [r7, #28]
 800b644:	f7ff ffa5 	bl	800b592 <aiPbBufferGetItemSize>
 800b648:	61b8      	str	r0, [r7, #24]

    /* Read data */
    uint8_t *pw = (uint8_t *)bm->buffer->data;
 800b64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	691b      	ldr	r3, [r3, #16]
 800b650:	62bb      	str	r3, [r7, #40]	; 0x28
    while (stream->bytes_left) {
 800b652:	e027      	b.n	800b6a4 <aiPbBuffer_read_cb3+0xf2>
        uint64_t number;
        if (!pb_read(stream, (pb_byte_t *)&number, itsize))
 800b654:	f107 0310 	add.w	r3, r7, #16
 800b658:	69ba      	ldr	r2, [r7, #24]
 800b65a:	4619      	mov	r1, r3
 800b65c:	68f8      	ldr	r0, [r7, #12]
 800b65e:	f002 fee5 	bl	800e42c <pb_read>
 800b662:	4603      	mov	r3, r0
 800b664:	f083 0301 	eor.w	r3, r3, #1
 800b668:	b2db      	uxtb	r3, r3
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d001      	beq.n	800b672 <aiPbBuffer_read_cb3+0xc0>
            return false;
 800b66e:	2300      	movs	r3, #0
 800b670:	e02a      	b.n	800b6c8 <aiPbBuffer_read_cb3+0x116>
        if (maxr > 0) {
 800b672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b674:	2b00      	cmp	r3, #0
 800b676:	dd10      	ble.n	800b69a <aiPbBuffer_read_cb3+0xe8>
            if (pw) {
 800b678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d00a      	beq.n	800b694 <aiPbBuffer_read_cb3+0xe2>
                memcpy(pw, &number, itsize);
 800b67e:	f107 0310 	add.w	r3, r7, #16
 800b682:	69ba      	ldr	r2, [r7, #24]
 800b684:	4619      	mov	r1, r3
 800b686:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b688:	f005 fbd9 	bl	8010e3e <memcpy>
                pw += itsize;
 800b68c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b68e:	69bb      	ldr	r3, [r7, #24]
 800b690:	4413      	add	r3, r2
 800b692:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            maxr--;
 800b694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b696:	3b01      	subs	r3, #1
 800b698:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        bm->n_ops++;
 800b69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b69c:	689b      	ldr	r3, [r3, #8]
 800b69e:	1c5a      	adds	r2, r3, #1
 800b6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a2:	609a      	str	r2, [r3, #8]
    while (stream->bytes_left) {
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	689b      	ldr	r3, [r3, #8]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d1d3      	bne.n	800b654 <aiPbBuffer_read_cb3+0xa2>
    }

    /* Check nb_op */
    if ((bm->err == EnumError_E_NONE) && (bm->n_ops != bm->n_max))
 800b6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ae:	68db      	ldr	r3, [r3, #12]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d108      	bne.n	800b6c6 <aiPbBuffer_read_cb3+0x114>
 800b6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b6:	689a      	ldr	r2, [r3, #8]
 800b6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ba:	685b      	ldr	r3, [r3, #4]
 800b6bc:	429a      	cmp	r2, r3
 800b6be:	d002      	beq.n	800b6c6 <aiPbBuffer_read_cb3+0x114>
        bm->err = EnumError_E_INVALID_SIZE;
 800b6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6c2:	2201      	movs	r2, #1
 800b6c4:	60da      	str	r2, [r3, #12]

    return true;
 800b6c6:	2301      	movs	r3, #1
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	3730      	adds	r7, #48	; 0x30
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}

0800b6d0 <aiPbBuffer_write_cb3>:

static bool aiPbBuffer_write_cb3(pb_ostream_t *stream, const pb_field_t *field,
        void * const *arg)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b08a      	sub	sp, #40	; 0x28
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	60f8      	str	r0, [r7, #12]
 800b6d8:	60b9      	str	r1, [r7, #8]
 800b6da:	607a      	str	r2, [r7, #4]
    struct aiPbMgrBuffer *bm = (struct aiPbMgrBuffer *)*arg;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	627b      	str	r3, [r7, #36]	; 0x24
    size_t itsize;

    int maxw = bm->n_max;
 800b6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e4:	685b      	ldr	r3, [r3, #4]
 800b6e6:	623b      	str	r3, [r7, #32]
    ai_buffer_format format;

    if ((maxw == 0) || (!bm->buffer))
 800b6e8:	6a3b      	ldr	r3, [r7, #32]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d003      	beq.n	800b6f6 <aiPbBuffer_write_cb3+0x26>
 800b6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d101      	bne.n	800b6fa <aiPbBuffer_write_cb3+0x2a>
        return true;
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	e02c      	b.n	800b754 <aiPbBuffer_write_cb3+0x84>

    format = bm->buffer->format;
 800b6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	61fb      	str	r3, [r7, #28]

    itsize = aiPbBufferGetItemSize(format);
 800b702:	69f8      	ldr	r0, [r7, #28]
 800b704:	f7ff ff45 	bl	800b592 <aiPbBufferGetItemSize>
 800b708:	61b8      	str	r0, [r7, #24]

    /* Write data */
    pb_byte_t *pr = (pb_byte_t *)bm->buffer->data;
 800b70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	691b      	ldr	r3, [r3, #16]
 800b710:	617b      	str	r3, [r7, #20]

    if (!pb_encode_tag_for_field(stream, field))
 800b712:	68b9      	ldr	r1, [r7, #8]
 800b714:	68f8      	ldr	r0, [r7, #12]
 800b716:	f005 f86b 	bl	80107f0 <pb_encode_tag_for_field>
 800b71a:	4603      	mov	r3, r0
 800b71c:	f083 0301 	eor.w	r3, r3, #1
 800b720:	b2db      	uxtb	r3, r3
 800b722:	2b00      	cmp	r3, #0
 800b724:	d001      	beq.n	800b72a <aiPbBuffer_write_cb3+0x5a>
        return false;
 800b726:	2300      	movs	r3, #0
 800b728:	e014      	b.n	800b754 <aiPbBuffer_write_cb3+0x84>

    if (!pb_encode_string(stream, pr, itsize * maxw))
 800b72a:	6a3b      	ldr	r3, [r7, #32]
 800b72c:	69ba      	ldr	r2, [r7, #24]
 800b72e:	fb02 f303 	mul.w	r3, r2, r3
 800b732:	461a      	mov	r2, r3
 800b734:	6979      	ldr	r1, [r7, #20]
 800b736:	68f8      	ldr	r0, [r7, #12]
 800b738:	f005 f8a4 	bl	8010884 <pb_encode_string>
 800b73c:	4603      	mov	r3, r0
 800b73e:	f083 0301 	eor.w	r3, r3, #1
 800b742:	b2db      	uxtb	r3, r3
 800b744:	2b00      	cmp	r3, #0
 800b746:	d001      	beq.n	800b74c <aiPbBuffer_write_cb3+0x7c>
        return false;
 800b748:	2300      	movs	r3, #0
 800b74a:	e003      	b.n	800b754 <aiPbBuffer_write_cb3+0x84>

    bm->n_ops = maxw;
 800b74c:	6a3a      	ldr	r2, [r7, #32]
 800b74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b750:	609a      	str	r2, [r3, #8]

    return true;
 800b752:	2301      	movs	r3, #1
}
 800b754:	4618      	mov	r0, r3
 800b756:	3728      	adds	r7, #40	; 0x28
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}

0800b75c <aiPbMgrReceiveAiBuffer3>:

bool aiPbMgrReceiveAiBuffer3(const reqMsg *req, respMsg *resp,
        EnumState state, ai_buffer *buffer)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b096      	sub	sp, #88	; 0x58
 800b760:	af02      	add	r7, sp, #8
 800b762:	60f8      	str	r0, [r7, #12]
 800b764:	60b9      	str	r1, [r7, #8]
 800b766:	603b      	str	r3, [r7, #0]
 800b768:	4613      	mov	r3, r2
 800b76a:	71fb      	strb	r3, [r7, #7]
    aiBufferByteMsg msg;
    struct aiPbMgrBuffer hdlb;
    bool res = true;
 800b76c:	2301      	movs	r3, #1
 800b76e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

    hdlb.n_ops = 0;
 800b772:	2300      	movs	r3, #0
 800b774:	61fb      	str	r3, [r7, #28]
    hdlb.buffer = buffer;
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	617b      	str	r3, [r7, #20]
    hdlb.err = EnumError_E_NONE;
 800b77a:	2300      	movs	r3, #0
 800b77c:	623b      	str	r3, [r7, #32]
    hdlb.n_max = aiPbAiBufferSize(buffer);
 800b77e:	6838      	ldr	r0, [r7, #0]
 800b780:	f7ff fed4 	bl	800b52c <aiPbAiBufferSize>
 800b784:	4603      	mov	r3, r0
 800b786:	61bb      	str	r3, [r7, #24]
    hdlb.msg = &msg;
 800b788:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b78c:	627b      	str	r3, [r7, #36]	; 0x24

    msg.datas.funcs.decode = &aiPbBuffer_read_cb3;
 800b78e:	4b1b      	ldr	r3, [pc, #108]	; (800b7fc <aiPbMgrReceiveAiBuffer3+0xa0>)
 800b790:	647b      	str	r3, [r7, #68]	; 0x44
    msg.datas.arg = &hdlb;
 800b792:	f107 0314 	add.w	r3, r7, #20
 800b796:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Waiting buffer message */
    pb_decode_delimited(&pbContextMgr.input, aiBufferByteMsg_fields, &msg);
 800b798:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b79c:	461a      	mov	r2, r3
 800b79e:	4918      	ldr	r1, [pc, #96]	; (800b800 <aiPbMgrReceiveAiBuffer3+0xa4>)
 800b7a0:	4818      	ldr	r0, [pc, #96]	; (800b804 <aiPbMgrReceiveAiBuffer3+0xa8>)
 800b7a2:	f003 fe6b 	bl	800f47c <pb_decode_delimited>
    ioFlushRead();
 800b7a6:	f001 fa29 	bl	800cbfc <ioFlushRead>

    /* Send ACK and wait ACK (or send ACK only if error) */
    if (hdlb.err) {
 800b7aa:	6a3b      	ldr	r3, [r7, #32]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d00d      	beq.n	800b7cc <aiPbMgrReceiveAiBuffer3+0x70>
        aiPbMgrSendAck(req, resp, EnumState_S_ERROR, hdlb.err,
 800b7b0:	6a3a      	ldr	r2, [r7, #32]
                (EnumError)hdlb.err);
 800b7b2:	6a3b      	ldr	r3, [r7, #32]
        aiPbMgrSendAck(req, resp, EnumState_S_ERROR, hdlb.err,
 800b7b4:	b2db      	uxtb	r3, r3
 800b7b6:	9300      	str	r3, [sp, #0]
 800b7b8:	4613      	mov	r3, r2
 800b7ba:	2204      	movs	r2, #4
 800b7bc:	68b9      	ldr	r1, [r7, #8]
 800b7be:	68f8      	ldr	r0, [r7, #12]
 800b7c0:	f7ff fe7e 	bl	800b4c0 <aiPbMgrSendAck>
        res = false;
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800b7ca:	e010      	b.n	800b7ee <aiPbMgrReceiveAiBuffer3+0x92>
    } else {
        aiPbMgrSendAck(req, resp, state, hdlb.n_ops, EnumError_E_NONE);
 800b7cc:	69f9      	ldr	r1, [r7, #28]
 800b7ce:	79fa      	ldrb	r2, [r7, #7]
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	9300      	str	r3, [sp, #0]
 800b7d4:	460b      	mov	r3, r1
 800b7d6:	68b9      	ldr	r1, [r7, #8]
 800b7d8:	68f8      	ldr	r0, [r7, #12]
 800b7da:	f7ff fe71 	bl	800b4c0 <aiPbMgrSendAck>
        if ((state == EnumState_S_WAITING) ||
 800b7de:	79fb      	ldrb	r3, [r7, #7]
 800b7e0:	2b01      	cmp	r3, #1
 800b7e2:	d002      	beq.n	800b7ea <aiPbMgrReceiveAiBuffer3+0x8e>
 800b7e4:	79fb      	ldrb	r3, [r7, #7]
 800b7e6:	2b02      	cmp	r3, #2
 800b7e8:	d101      	bne.n	800b7ee <aiPbMgrReceiveAiBuffer3+0x92>
                (state == EnumState_S_PROCESSING))
            aiPbMgrWaitAck();
 800b7ea:	f7ff fe85 	bl	800b4f8 <aiPbMgrWaitAck>
    }

    return res;
 800b7ee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3750      	adds	r7, #80	; 0x50
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}
 800b7fa:	bf00      	nop
 800b7fc:	0800b5b3 	.word	0x0800b5b3
 800b800:	0801793c 	.word	0x0801793c
 800b804:	20000a84 	.word	0x20000a84

0800b808 <aiPbMgrSetMetaInfo>:

static void aiPbMgrSetMetaInfo(const ai_buffer_meta_info *meta_info, const int idx,
		aiBufferShapeMsg *shape)
{
 800b808:	b480      	push	{r7}
 800b80a:	b085      	sub	sp, #20
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	60f8      	str	r0, [r7, #12]
 800b810:	60b9      	str	r1, [r7, #8]
 800b812:	607a      	str	r2, [r7, #4]
	shape->scale = 0.0f;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f04f 0200 	mov.w	r2, #0
 800b81a:	615a      	str	r2, [r3, #20]
	shape->zeropoint = 0;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2200      	movs	r2, #0
 800b820:	619a      	str	r2, [r3, #24]
	if (AI_BUFFER_META_INFO_INTQ(meta_info)) {
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	2b00      	cmp	r3, #0
 800b826:	f000 811e 	beq.w	800ba66 <aiPbMgrSetMetaInfo+0x25e>
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	f003 0301 	and.w	r3, r3, #1
 800b832:	2b00      	cmp	r3, #0
 800b834:	f000 8117 	beq.w	800ba66 <aiPbMgrSetMetaInfo+0x25e>
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	685b      	ldr	r3, [r3, #4]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	f000 8112 	beq.w	800ba66 <aiPbMgrSetMetaInfo+0x25e>
		shape->scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(meta_info, idx);
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d04f      	beq.n	800b8e8 <aiPbMgrSetMetaInfo+0xe0>
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f003 0301 	and.w	r3, r3, #1
 800b850:	2b00      	cmp	r3, #0
 800b852:	d049      	beq.n	800b8e8 <aiPbMgrSetMetaInfo+0xe0>
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	685b      	ldr	r3, [r3, #4]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d045      	beq.n	800b8e8 <aiPbMgrSetMetaInfo+0xe0>
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d03f      	beq.n	800b8e2 <aiPbMgrSetMetaInfo+0xda>
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	f003 0301 	and.w	r3, r3, #1
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d039      	beq.n	800b8e2 <aiPbMgrSetMetaInfo+0xda>
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	685b      	ldr	r3, [r3, #4]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d035      	beq.n	800b8e2 <aiPbMgrSetMetaInfo+0xda>
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d008      	beq.n	800b88e <aiPbMgrSetMetaInfo+0x86>
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	f003 0301 	and.w	r3, r3, #1
 800b884:	2b00      	cmp	r3, #0
 800b886:	d002      	beq.n	800b88e <aiPbMgrSetMetaInfo+0x86>
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	685b      	ldr	r3, [r3, #4]
 800b88c:	e000      	b.n	800b890 <aiPbMgrSetMetaInfo+0x88>
 800b88e:	2300      	movs	r3, #0
 800b890:	685b      	ldr	r3, [r3, #4]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d025      	beq.n	800b8e2 <aiPbMgrSetMetaInfo+0xda>
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d008      	beq.n	800b8ae <aiPbMgrSetMetaInfo+0xa6>
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f003 0301 	and.w	r3, r3, #1
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d002      	beq.n	800b8ae <aiPbMgrSetMetaInfo+0xa6>
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	685b      	ldr	r3, [r3, #4]
 800b8ac:	e000      	b.n	800b8b0 <aiPbMgrSetMetaInfo+0xa8>
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	885b      	ldrh	r3, [r3, #2]
 800b8b2:	461a      	mov	r2, r3
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	4293      	cmp	r3, r2
 800b8b8:	da13      	bge.n	800b8e2 <aiPbMgrSetMetaInfo+0xda>
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d008      	beq.n	800b8d2 <aiPbMgrSetMetaInfo+0xca>
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	f003 0301 	and.w	r3, r3, #1
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d002      	beq.n	800b8d2 <aiPbMgrSetMetaInfo+0xca>
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	685b      	ldr	r3, [r3, #4]
 800b8d0:	e000      	b.n	800b8d4 <aiPbMgrSetMetaInfo+0xcc>
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	685b      	ldr	r3, [r3, #4]
 800b8d6:	681a      	ldr	r2, [r3, #0]
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	009b      	lsls	r3, r3, #2
 800b8dc:	4413      	add	r3, r2
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	e004      	b.n	800b8ec <aiPbMgrSetMetaInfo+0xe4>
 800b8e2:	f04f 0300 	mov.w	r3, #0
 800b8e6:	e001      	b.n	800b8ec <aiPbMgrSetMetaInfo+0xe4>
 800b8e8:	f04f 0300 	mov.w	r3, #0
 800b8ec:	687a      	ldr	r2, [r7, #4]
 800b8ee:	6153      	str	r3, [r2, #20]
		shape->zeropoint = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(meta_info, idx);
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	f000 80b4 	beq.w	800ba60 <aiPbMgrSetMetaInfo+0x258>
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f003 0301 	and.w	r3, r3, #1
 800b900:	2b00      	cmp	r3, #0
 800b902:	f000 80ad 	beq.w	800ba60 <aiPbMgrSetMetaInfo+0x258>
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	685b      	ldr	r3, [r3, #4]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	f000 80a8 	beq.w	800ba60 <aiPbMgrSetMetaInfo+0x258>
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d05f      	beq.n	800b9d6 <aiPbMgrSetMetaInfo+0x1ce>
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	f003 0301 	and.w	r3, r3, #1
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d059      	beq.n	800b9d6 <aiPbMgrSetMetaInfo+0x1ce>
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	685b      	ldr	r3, [r3, #4]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d055      	beq.n	800b9d6 <aiPbMgrSetMetaInfo+0x1ce>
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d008      	beq.n	800b942 <aiPbMgrSetMetaInfo+0x13a>
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f003 0301 	and.w	r3, r3, #1
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d002      	beq.n	800b942 <aiPbMgrSetMetaInfo+0x13a>
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	685b      	ldr	r3, [r3, #4]
 800b940:	e000      	b.n	800b944 <aiPbMgrSetMetaInfo+0x13c>
 800b942:	2300      	movs	r3, #0
 800b944:	881b      	ldrh	r3, [r3, #0]
 800b946:	f003 0302 	and.w	r3, r3, #2
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d043      	beq.n	800b9d6 <aiPbMgrSetMetaInfo+0x1ce>
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d03e      	beq.n	800b9d2 <aiPbMgrSetMetaInfo+0x1ca>
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	f003 0301 	and.w	r3, r3, #1
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d038      	beq.n	800b9d2 <aiPbMgrSetMetaInfo+0x1ca>
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	685b      	ldr	r3, [r3, #4]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d034      	beq.n	800b9d2 <aiPbMgrSetMetaInfo+0x1ca>
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d008      	beq.n	800b980 <aiPbMgrSetMetaInfo+0x178>
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f003 0301 	and.w	r3, r3, #1
 800b976:	2b00      	cmp	r3, #0
 800b978:	d002      	beq.n	800b980 <aiPbMgrSetMetaInfo+0x178>
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	685b      	ldr	r3, [r3, #4]
 800b97e:	e000      	b.n	800b982 <aiPbMgrSetMetaInfo+0x17a>
 800b980:	2300      	movs	r3, #0
 800b982:	685b      	ldr	r3, [r3, #4]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d024      	beq.n	800b9d2 <aiPbMgrSetMetaInfo+0x1ca>
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d008      	beq.n	800b9a0 <aiPbMgrSetMetaInfo+0x198>
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	f003 0301 	and.w	r3, r3, #1
 800b996:	2b00      	cmp	r3, #0
 800b998:	d002      	beq.n	800b9a0 <aiPbMgrSetMetaInfo+0x198>
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	685b      	ldr	r3, [r3, #4]
 800b99e:	e000      	b.n	800b9a2 <aiPbMgrSetMetaInfo+0x19a>
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	885b      	ldrh	r3, [r3, #2]
 800b9a4:	461a      	mov	r2, r3
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	4293      	cmp	r3, r2
 800b9aa:	da12      	bge.n	800b9d2 <aiPbMgrSetMetaInfo+0x1ca>
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d008      	beq.n	800b9c4 <aiPbMgrSetMetaInfo+0x1bc>
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f003 0301 	and.w	r3, r3, #1
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d002      	beq.n	800b9c4 <aiPbMgrSetMetaInfo+0x1bc>
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	685b      	ldr	r3, [r3, #4]
 800b9c2:	e000      	b.n	800b9c6 <aiPbMgrSetMetaInfo+0x1be>
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	685b      	ldr	r3, [r3, #4]
 800b9c8:	685a      	ldr	r2, [r3, #4]
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	4413      	add	r3, r2
 800b9ce:	781b      	ldrb	r3, [r3, #0]
 800b9d0:	e047      	b.n	800ba62 <aiPbMgrSetMetaInfo+0x25a>
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	e045      	b.n	800ba62 <aiPbMgrSetMetaInfo+0x25a>
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d03f      	beq.n	800ba5c <aiPbMgrSetMetaInfo+0x254>
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	f003 0301 	and.w	r3, r3, #1
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d039      	beq.n	800ba5c <aiPbMgrSetMetaInfo+0x254>
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	685b      	ldr	r3, [r3, #4]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d035      	beq.n	800ba5c <aiPbMgrSetMetaInfo+0x254>
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d008      	beq.n	800ba08 <aiPbMgrSetMetaInfo+0x200>
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	f003 0301 	and.w	r3, r3, #1
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d002      	beq.n	800ba08 <aiPbMgrSetMetaInfo+0x200>
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	685b      	ldr	r3, [r3, #4]
 800ba06:	e000      	b.n	800ba0a <aiPbMgrSetMetaInfo+0x202>
 800ba08:	2300      	movs	r3, #0
 800ba0a:	685b      	ldr	r3, [r3, #4]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d025      	beq.n	800ba5c <aiPbMgrSetMetaInfo+0x254>
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d008      	beq.n	800ba28 <aiPbMgrSetMetaInfo+0x220>
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	f003 0301 	and.w	r3, r3, #1
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d002      	beq.n	800ba28 <aiPbMgrSetMetaInfo+0x220>
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	685b      	ldr	r3, [r3, #4]
 800ba26:	e000      	b.n	800ba2a <aiPbMgrSetMetaInfo+0x222>
 800ba28:	2300      	movs	r3, #0
 800ba2a:	885b      	ldrh	r3, [r3, #2]
 800ba2c:	461a      	mov	r2, r3
 800ba2e:	68bb      	ldr	r3, [r7, #8]
 800ba30:	4293      	cmp	r3, r2
 800ba32:	da13      	bge.n	800ba5c <aiPbMgrSetMetaInfo+0x254>
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d008      	beq.n	800ba4c <aiPbMgrSetMetaInfo+0x244>
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	f003 0301 	and.w	r3, r3, #1
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d002      	beq.n	800ba4c <aiPbMgrSetMetaInfo+0x244>
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	685b      	ldr	r3, [r3, #4]
 800ba4a:	e000      	b.n	800ba4e <aiPbMgrSetMetaInfo+0x246>
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	685b      	ldr	r3, [r3, #4]
 800ba50:	685a      	ldr	r2, [r3, #4]
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	4413      	add	r3, r2
 800ba56:	f993 3000 	ldrsb.w	r3, [r3]
 800ba5a:	e002      	b.n	800ba62 <aiPbMgrSetMetaInfo+0x25a>
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	e000      	b.n	800ba62 <aiPbMgrSetMetaInfo+0x25a>
 800ba60:	2300      	movs	r3, #0
 800ba62:	687a      	ldr	r2, [r7, #4]
 800ba64:	6193      	str	r3, [r2, #24]
	}
}
 800ba66:	bf00      	nop
 800ba68:	3714      	adds	r7, #20
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba70:	4770      	bx	lr
	...

0800ba74 <aiPbMgrSendAiBuffer3>:

bool aiPbMgrSendAiBuffer3(const reqMsg *req, respMsg *resp, EnumState state,
        uint32_t type, uint32_t id, ai_float dur_ms, const ai_buffer *buffer)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b08c      	sub	sp, #48	; 0x30
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6178      	str	r0, [r7, #20]
 800ba7c:	6139      	str	r1, [r7, #16]
 800ba7e:	60bb      	str	r3, [r7, #8]
 800ba80:	ed87 0a01 	vstr	s0, [r7, #4]
 800ba84:	4613      	mov	r3, r2
 800ba86:	73fb      	strb	r3, [r7, #15]
    struct aiPbMgrBuffer hdlb;
    const ai_buffer_meta_info *meta_info = AI_BUFFER_META_INFO(buffer);
 800ba88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba8a:	695b      	ldr	r3, [r3, #20]
 800ba8c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(AI_PB_FULL_IO) && (AI_PB_FULL_IO == 1)
    const int is_io = AI_BUFFER_FMT_FLAG_IS_IO & buffer->format;
#endif

    hdlb.n_ops = 0;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	623b      	str	r3, [r7, #32]
    hdlb.buffer = (ai_buffer *)buffer;
 800ba92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba94:	61bb      	str	r3, [r7, #24]
    hdlb.err = EnumError_E_NONE;
 800ba96:	2300      	movs	r3, #0
 800ba98:	627b      	str	r3, [r7, #36]	; 0x24
    hdlb.n_max = aiPbAiBufferSize(buffer);
 800ba9a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ba9c:	f7ff fd46 	bl	800b52c <aiPbAiBufferSize>
 800baa0:	4603      	mov	r3, r0
 800baa2:	61fb      	str	r3, [r7, #28]
    hdlb.msg = NULL;
 800baa4:	2300      	movs	r3, #0
 800baa6:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(AI_PB_FULL_IO) && (AI_PB_FULL_IO == 1)
    if ((type & PB_BUFFER_TYPE_SEND_WITHOUT_DATA) && (!is_io)) {
        hdlb.n_max  = 0;
    }
#else
    if (type & PB_BUFFER_TYPE_SEND_WITHOUT_DATA) {
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	da01      	bge.n	800bab2 <aiPbMgrSendAiBuffer3+0x3e>
        hdlb.n_max  = 0;
 800baae:	2300      	movs	r3, #0
 800bab0:	61fb      	str	r3, [r7, #28]
    }
#endif
    type &= (~PB_BUFFER_TYPE_SEND_WITHOUT_DATA);
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bab8:	60bb      	str	r3, [r7, #8]

    /* Fill Node sub-message */
    resp->which_payload = respMsg_node_tag;
 800baba:	693b      	ldr	r3, [r7, #16]
 800babc:	220e      	movs	r2, #14
 800babe:	80da      	strh	r2, [r3, #6]
    resp->payload.node.type = type;
 800bac0:	693b      	ldr	r3, [r7, #16]
 800bac2:	68ba      	ldr	r2, [r7, #8]
 800bac4:	609a      	str	r2, [r3, #8]
    resp->payload.node.id = id;
 800bac6:	693b      	ldr	r3, [r7, #16]
 800bac8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800baca:	60da      	str	r2, [r3, #12]
    resp->payload.node.duration = dur_ms;
 800bacc:	693b      	ldr	r3, [r7, #16]
 800bace:	687a      	ldr	r2, [r7, #4]
 800bad0:	611a      	str	r2, [r3, #16]
    resp->payload.node.buffer.shape.format = aiPbAiFmtToMsgFmt(buffer->format);
 800bad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	4618      	mov	r0, r3
 800bad8:	f7ff fd50 	bl	800b57c <aiPbAiFmtToMsgFmt>
 800badc:	4602      	mov	r2, r0
 800bade:	693b      	ldr	r3, [r7, #16]
 800bae0:	615a      	str	r2, [r3, #20]
    resp->payload.node.buffer.shape.n_batches = buffer->n_batches;
 800bae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bae4:	889b      	ldrh	r3, [r3, #4]
 800bae6:	461a      	mov	r2, r3
 800bae8:	693b      	ldr	r3, [r7, #16]
 800baea:	619a      	str	r2, [r3, #24]
    resp->payload.node.buffer.shape.height = buffer->height;
 800baec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800baee:	88db      	ldrh	r3, [r3, #6]
 800baf0:	461a      	mov	r2, r3
 800baf2:	693b      	ldr	r3, [r7, #16]
 800baf4:	61da      	str	r2, [r3, #28]
    resp->payload.node.buffer.shape.width = buffer->width;
 800baf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800baf8:	891b      	ldrh	r3, [r3, #8]
 800bafa:	461a      	mov	r2, r3
 800bafc:	693b      	ldr	r3, [r7, #16]
 800bafe:	621a      	str	r2, [r3, #32]
    resp->payload.node.buffer.shape.channels = buffer->channels;
 800bb00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb02:	68da      	ldr	r2, [r3, #12]
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	625a      	str	r2, [r3, #36]	; 0x24
    aiPbMgrSetMetaInfo(meta_info, 0, &resp->payload.node.buffer.shape);
 800bb08:	693b      	ldr	r3, [r7, #16]
 800bb0a:	3314      	adds	r3, #20
 800bb0c:	461a      	mov	r2, r3
 800bb0e:	2100      	movs	r1, #0
 800bb10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bb12:	f7ff fe79 	bl	800b808 <aiPbMgrSetMetaInfo>

    resp->payload.node.buffer.datas.funcs.encode = &aiPbBuffer_write_cb3;
 800bb16:	693b      	ldr	r3, [r7, #16]
 800bb18:	4a0b      	ldr	r2, [pc, #44]	; (800bb48 <aiPbMgrSendAiBuffer3+0xd4>)
 800bb1a:	631a      	str	r2, [r3, #48]	; 0x30
    resp->payload.node.buffer.datas.arg = &hdlb;
 800bb1c:	693b      	ldr	r3, [r7, #16]
 800bb1e:	f107 0218 	add.w	r2, r7, #24
 800bb22:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send msg */
    aiPbMgrSendResp(req, resp, state);
 800bb24:	7bfb      	ldrb	r3, [r7, #15]
 800bb26:	461a      	mov	r2, r3
 800bb28:	6939      	ldr	r1, [r7, #16]
 800bb2a:	6978      	ldr	r0, [r7, #20]
 800bb2c:	f7ff fcaa 	bl	800b484 <aiPbMgrSendResp>

    /* Waiting ACK */
    if (state == EnumState_S_PROCESSING)
 800bb30:	7bfb      	ldrb	r3, [r7, #15]
 800bb32:	2b02      	cmp	r3, #2
 800bb34:	d103      	bne.n	800bb3e <aiPbMgrSendAiBuffer3+0xca>
        return aiPbMgrWaitAck();
 800bb36:	f7ff fcdf 	bl	800b4f8 <aiPbMgrWaitAck>
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	e000      	b.n	800bb40 <aiPbMgrSendAiBuffer3+0xcc>
    else
        return true;
 800bb3e:	2301      	movs	r3, #1
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	3730      	adds	r7, #48	; 0x30
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}
 800bb48:	0800b6d1 	.word	0x0800b6d1

0800bb4c <aiPbCmdSync>:

/*---------------------------------------------------------------------------*/

void aiPbCmdSync(const reqMsg *req, respMsg *resp, void *param)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b084      	sub	sp, #16
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	60f8      	str	r0, [r7, #12]
 800bb54:	60b9      	str	r1, [r7, #8]
 800bb56:	607a      	str	r2, [r7, #4]
    resp->which_payload = respMsg_sync_tag;
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	220a      	movs	r2, #10
 800bb5c:	80da      	strh	r2, [r3, #6]
    resp->payload.sync.version =
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	f240 2201 	movw	r2, #513	; 0x201
 800bb64:	609a      	str	r2, [r3, #8]
            EnumVersion_P_VERSION_MAJOR << 8 |
            EnumVersion_P_VERSION_MINOR;

    resp->payload.sync.capability = EnumCapability_CAP_FIXED_POINT;
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	2202      	movs	r2, #2
 800bb6a:	60da      	str	r2, [r3, #12]

#if defined(AI_PB_TEST) && (AI_PB_TEST == 1)
    resp->payload.sync.capability |= EnumCapability_CAP_SELF_TEST;
#endif

    if (param)
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d005      	beq.n	800bb7e <aiPbCmdSync+0x32>
        resp->payload.sync.capability |= (uint32_t)param;
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	68da      	ldr	r2, [r3, #12]
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	431a      	orrs	r2, r3
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	60da      	str	r2, [r3, #12]

    aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 800bb7e:	2200      	movs	r2, #0
 800bb80:	68b9      	ldr	r1, [r7, #8]
 800bb82:	68f8      	ldr	r0, [r7, #12]
 800bb84:	f7ff fc7e 	bl	800b484 <aiPbMgrSendResp>
}
 800bb88:	bf00      	nop
 800bb8a:	3710      	adds	r7, #16
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bd80      	pop	{r7, pc}

0800bb90 <aiPbCmdSysInfo>:

void aiPbCmdSysInfo(const reqMsg *req, respMsg *resp, void *param)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b084      	sub	sp, #16
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	60f8      	str	r0, [r7, #12]
 800bb98:	60b9      	str	r1, [r7, #8]
 800bb9a:	607a      	str	r2, [r7, #4]
    UNUSED(param);
    resp->which_payload = respMsg_sinfo_tag;
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	220b      	movs	r2, #11
 800bba0:	80da      	strh	r2, [r3, #6]
    resp->payload.sinfo.devid = HAL_GetDEVID();
 800bba2:	f7fc fedf 	bl	8008964 <HAL_GetDEVID>
 800bba6:	4602      	mov	r2, r0
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	609a      	str	r2, [r3, #8]
    resp->payload.sinfo.sclock = HAL_RCC_GetSysClockFreq();
 800bbac:	f7fd ff8c 	bl	8009ac8 <HAL_RCC_GetSysClockFreq>
 800bbb0:	4602      	mov	r2, r0
 800bbb2:	68bb      	ldr	r3, [r7, #8]
 800bbb4:	60da      	str	r2, [r3, #12]
    resp->payload.sinfo.hclock = HAL_RCC_GetHCLKFreq();
 800bbb6:	f7fe f811 	bl	8009bdc <HAL_RCC_GetHCLKFreq>
 800bbba:	4602      	mov	r2, r0
 800bbbc:	68bb      	ldr	r3, [r7, #8]
 800bbbe:	611a      	str	r2, [r3, #16]
    resp->payload.sinfo.cache = getFlashCacheConf();
 800bbc0:	f000 fb6e 	bl	800c2a0 <getFlashCacheConf>
 800bbc4:	4602      	mov	r2, r0
 800bbc6:	68bb      	ldr	r3, [r7, #8]
 800bbc8:	615a      	str	r2, [r3, #20]

    aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 800bbca:	2200      	movs	r2, #0
 800bbcc:	68b9      	ldr	r1, [r7, #8]
 800bbce:	68f8      	ldr	r0, [r7, #12]
 800bbd0:	f7ff fc58 	bl	800b484 <aiPbMgrSendResp>
}
 800bbd4:	bf00      	nop
 800bbd6:	3710      	adds	r7, #16
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}

0800bbdc <init_aibuffer_msg>:


static void init_aibuffer_msg(const ai_buffer *aibuffer, aiBufferShapeMsg *msg)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b084      	sub	sp, #16
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
 800bbe4:	6039      	str	r1, [r7, #0]
    if ((!aibuffer) || (!msg))
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d026      	beq.n	800bc3a <init_aibuffer_msg+0x5e>
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d023      	beq.n	800bc3a <init_aibuffer_msg+0x5e>
        return;

    const ai_buffer_meta_info *meta_info = AI_BUFFER_META_INFO(aibuffer);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	695b      	ldr	r3, [r3, #20]
 800bbf6:	60fb      	str	r3, [r7, #12]

    msg->format = aiPbAiFmtToMsgFmt(aibuffer->format);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	f7ff fcbd 	bl	800b57c <aiPbAiFmtToMsgFmt>
 800bc02:	4602      	mov	r2, r0
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	601a      	str	r2, [r3, #0]
    msg->channels = aibuffer->channels;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	68da      	ldr	r2, [r3, #12]
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	611a      	str	r2, [r3, #16]
    msg->height = aibuffer->height;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	88db      	ldrh	r3, [r3, #6]
 800bc14:	461a      	mov	r2, r3
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	609a      	str	r2, [r3, #8]
    msg->width = aibuffer->width;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	891b      	ldrh	r3, [r3, #8]
 800bc1e:	461a      	mov	r2, r3
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	60da      	str	r2, [r3, #12]
    msg->n_batches = aibuffer->n_batches;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	889b      	ldrh	r3, [r3, #4]
 800bc28:	461a      	mov	r2, r3
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	605a      	str	r2, [r3, #4]
    aiPbMgrSetMetaInfo(meta_info, 0, msg);
 800bc2e:	683a      	ldr	r2, [r7, #0]
 800bc30:	2100      	movs	r1, #0
 800bc32:	68f8      	ldr	r0, [r7, #12]
 800bc34:	f7ff fde8 	bl	800b808 <aiPbMgrSetMetaInfo>
 800bc38:	e000      	b.n	800bc3c <init_aibuffer_msg+0x60>
        return;
 800bc3a:	bf00      	nop
}
 800bc3c:	3710      	adds	r7, #16
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}
	...

0800bc44 <nn_shape_w_cb>:

static bool nn_shape_w_cb(pb_ostream_t *stream, const pb_field_t *field,
        const ai_buffer *aibuffer, int maxw)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b08c      	sub	sp, #48	; 0x30
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	60f8      	str	r0, [r7, #12]
 800bc4c:	60b9      	str	r1, [r7, #8]
 800bc4e:	607a      	str	r2, [r7, #4]
 800bc50:	603b      	str	r3, [r7, #0]
    aiBufferShapeMsg msg;

    for (int i = 0; i < maxw; i++) {
 800bc52:	2300      	movs	r3, #0
 800bc54:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc56:	e02b      	b.n	800bcb0 <nn_shape_w_cb+0x6c>
        if (!pb_encode_tag_for_field(stream, field))
 800bc58:	68b9      	ldr	r1, [r7, #8]
 800bc5a:	68f8      	ldr	r0, [r7, #12]
 800bc5c:	f004 fdc8 	bl	80107f0 <pb_encode_tag_for_field>
 800bc60:	4603      	mov	r3, r0
 800bc62:	f083 0301 	eor.w	r3, r3, #1
 800bc66:	b2db      	uxtb	r3, r3
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d001      	beq.n	800bc70 <nn_shape_w_cb+0x2c>
            return false;
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	e024      	b.n	800bcba <nn_shape_w_cb+0x76>

        init_aibuffer_msg(&aibuffer[i], &msg);
 800bc70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc72:	4613      	mov	r3, r2
 800bc74:	005b      	lsls	r3, r3, #1
 800bc76:	4413      	add	r3, r2
 800bc78:	00db      	lsls	r3, r3, #3
 800bc7a:	461a      	mov	r2, r3
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	4413      	add	r3, r2
 800bc80:	f107 0210 	add.w	r2, r7, #16
 800bc84:	4611      	mov	r1, r2
 800bc86:	4618      	mov	r0, r3
 800bc88:	f7ff ffa8 	bl	800bbdc <init_aibuffer_msg>

        if (!pb_encode_submessage(stream, aiBufferShapeMsg_fields, &msg))
 800bc8c:	f107 0310 	add.w	r3, r7, #16
 800bc90:	461a      	mov	r2, r3
 800bc92:	490c      	ldr	r1, [pc, #48]	; (800bcc4 <nn_shape_w_cb+0x80>)
 800bc94:	68f8      	ldr	r0, [r7, #12]
 800bc96:	f004 fe15 	bl	80108c4 <pb_encode_submessage>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	f083 0301 	eor.w	r3, r3, #1
 800bca0:	b2db      	uxtb	r3, r3
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d001      	beq.n	800bcaa <nn_shape_w_cb+0x66>
            return false;
 800bca6:	2300      	movs	r3, #0
 800bca8:	e007      	b.n	800bcba <nn_shape_w_cb+0x76>
    for (int i = 0; i < maxw; i++) {
 800bcaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcac:	3301      	adds	r3, #1
 800bcae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bcb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	429a      	cmp	r2, r3
 800bcb6:	dbcf      	blt.n	800bc58 <nn_shape_w_cb+0x14>
    }
    return true;
 800bcb8:	2301      	movs	r3, #1
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3730      	adds	r7, #48	; 0x30
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd80      	pop	{r7, pc}
 800bcc2:	bf00      	nop
 800bcc4:	08017788 	.word	0x08017788

0800bcc8 <nn_inputs_w_cb>:

static bool nn_inputs_w_cb(pb_ostream_t *stream, const pb_field_t *field,
        void * const *arg)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b086      	sub	sp, #24
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	60f8      	str	r0, [r7, #12]
 800bcd0:	60b9      	str	r1, [r7, #8]
 800bcd2:	607a      	str	r2, [r7, #4]
    ai_network_report *report = (ai_network_report *)*arg;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	617b      	str	r3, [r7, #20]

    if (!report)
 800bcda:	697b      	ldr	r3, [r7, #20]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d101      	bne.n	800bce4 <nn_inputs_w_cb+0x1c>
        return true;
 800bce0:	2301      	movs	r3, #1
 800bce2:	e008      	b.n	800bcf6 <nn_inputs_w_cb+0x2e>

    return nn_shape_w_cb(stream, field, &report->inputs[0], report->n_inputs);
 800bce4:	697b      	ldr	r3, [r7, #20]
 800bce6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bce8:	697b      	ldr	r3, [r7, #20]
 800bcea:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800bcec:	68b9      	ldr	r1, [r7, #8]
 800bcee:	68f8      	ldr	r0, [r7, #12]
 800bcf0:	f7ff ffa8 	bl	800bc44 <nn_shape_w_cb>
 800bcf4:	4603      	mov	r3, r0
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	3718      	adds	r7, #24
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}

0800bcfe <nn_outputs_w_cb>:

static bool nn_outputs_w_cb(pb_ostream_t *stream, const pb_field_t *field,
        void * const *arg)
{
 800bcfe:	b580      	push	{r7, lr}
 800bd00:	b086      	sub	sp, #24
 800bd02:	af00      	add	r7, sp, #0
 800bd04:	60f8      	str	r0, [r7, #12]
 800bd06:	60b9      	str	r1, [r7, #8]
 800bd08:	607a      	str	r2, [r7, #4]
    ai_network_report *report = (ai_network_report *)*arg;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	617b      	str	r3, [r7, #20]

    if (!report)
 800bd10:	697b      	ldr	r3, [r7, #20]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d101      	bne.n	800bd1a <nn_outputs_w_cb+0x1c>
        return true;
 800bd16:	2301      	movs	r3, #1
 800bd18:	e008      	b.n	800bd2c <nn_outputs_w_cb+0x2e>

    return nn_shape_w_cb(stream, field, &report->outputs[0], report->n_outputs);
 800bd1a:	697b      	ldr	r3, [r7, #20]
 800bd1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd1e:	697b      	ldr	r3, [r7, #20]
 800bd20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bd22:	68b9      	ldr	r1, [r7, #8]
 800bd24:	68f8      	ldr	r0, [r7, #12]
 800bd26:	f7ff ff8d 	bl	800bc44 <nn_shape_w_cb>
 800bd2a:	4603      	mov	r3, r0
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	3718      	adds	r7, #24
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}

0800bd34 <aiPbStrCopy>:

void aiPbStrCopy(const char *src, char *dst, uint32_t max)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b088      	sub	sp, #32
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	60f8      	str	r0, [r7, #12]
 800bd3c:	60b9      	str	r1, [r7, #8]
 800bd3e:	607a      	str	r2, [r7, #4]
    const char undef[] = "UNDEFINED";
 800bd40:	4a19      	ldr	r2, [pc, #100]	; (800bda8 <aiPbStrCopy+0x74>)
 800bd42:	f107 0310 	add.w	r3, r7, #16
 800bd46:	ca07      	ldmia	r2, {r0, r1, r2}
 800bd48:	c303      	stmia	r3!, {r0, r1}
 800bd4a:	801a      	strh	r2, [r3, #0]
    size_t l = strlen(src);
 800bd4c:	68f8      	ldr	r0, [r7, #12]
 800bd4e:	f7fb fbcc 	bl	80074ea <strlen>
 800bd52:	61f8      	str	r0, [r7, #28]

    if (l > max)
 800bd54:	69fa      	ldr	r2, [r7, #28]
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	429a      	cmp	r2, r3
 800bd5a:	d902      	bls.n	800bd62 <aiPbStrCopy+0x2e>
        l = max-1;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	3b01      	subs	r3, #1
 800bd60:	61fb      	str	r3, [r7, #28]

    if (!dst)
 800bd62:	68bb      	ldr	r3, [r7, #8]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d01b      	beq.n	800bda0 <aiPbStrCopy+0x6c>
        return;

    if (src && l)
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d00a      	beq.n	800bd84 <aiPbStrCopy+0x50>
 800bd6e:	69fb      	ldr	r3, [r7, #28]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d007      	beq.n	800bd84 <aiPbStrCopy+0x50>
        memcpy(dst, src, l+1);
 800bd74:	69fb      	ldr	r3, [r7, #28]
 800bd76:	3301      	adds	r3, #1
 800bd78:	461a      	mov	r2, r3
 800bd7a:	68f9      	ldr	r1, [r7, #12]
 800bd7c:	68b8      	ldr	r0, [r7, #8]
 800bd7e:	f005 f85e 	bl	8010e3e <memcpy>
 800bd82:	e00e      	b.n	800bda2 <aiPbStrCopy+0x6e>
    else
        memcpy(dst, undef, strlen(undef)+1);
 800bd84:	f107 0310 	add.w	r3, r7, #16
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f7fb fbae 	bl	80074ea <strlen>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	1c5a      	adds	r2, r3, #1
 800bd92:	f107 0310 	add.w	r3, r7, #16
 800bd96:	4619      	mov	r1, r3
 800bd98:	68b8      	ldr	r0, [r7, #8]
 800bd9a:	f005 f850 	bl	8010e3e <memcpy>
 800bd9e:	e000      	b.n	800bda2 <aiPbStrCopy+0x6e>
        return;
 800bda0:	bf00      	nop
}
 800bda2:	3720      	adds	r7, #32
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}
 800bda8:	08015254 	.word	0x08015254

0800bdac <aiPbVersionToUint32>:

uint32_t aiPbVersionToUint32(const ai_platform_version *ver)
{
 800bdac:	b480      	push	{r7}
 800bdae:	b083      	sub	sp, #12
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
    if (!ver)
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d101      	bne.n	800bdbe <aiPbVersionToUint32+0x12>
        return 0;
 800bdba:	2300      	movs	r3, #0
 800bdbc:	e00d      	b.n	800bdda <aiPbVersionToUint32+0x2e>

    return ver->major << 24 | ver->minor << 16
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	781b      	ldrb	r3, [r3, #0]
 800bdc2:	061a      	lsls	r2, r3, #24
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	785b      	ldrb	r3, [r3, #1]
 800bdc8:	041b      	lsls	r3, r3, #16
 800bdca:	431a      	orrs	r2, r3
            | ver->micro << 8 | ver->reserved;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	789b      	ldrb	r3, [r3, #2]
 800bdd0:	021b      	lsls	r3, r3, #8
 800bdd2:	4313      	orrs	r3, r2
 800bdd4:	687a      	ldr	r2, [r7, #4]
 800bdd6:	78d2      	ldrb	r2, [r2, #3]
 800bdd8:	4313      	orrs	r3, r2
}
 800bdda:	4618      	mov	r0, r3
 800bddc:	370c      	adds	r7, #12
 800bdde:	46bd      	mov	sp, r7
 800bde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde4:	4770      	bx	lr
	...

0800bde8 <aiPbMgrSendNNInfo>:

void aiPbMgrSendNNInfo(const reqMsg *req, respMsg *resp,
        EnumState state, const ai_network_report *nn)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b084      	sub	sp, #16
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	60f8      	str	r0, [r7, #12]
 800bdf0:	60b9      	str	r1, [r7, #8]
 800bdf2:	603b      	str	r3, [r7, #0]
 800bdf4:	4613      	mov	r3, r2
 800bdf6:	71fb      	strb	r3, [r7, #7]
    resp->which_payload = respMsg_ninfo_tag;
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	2214      	movs	r2, #20
 800bdfc:	80da      	strh	r2, [r3, #6]

    aiPbStrCopy(nn->model_name,
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	6818      	ldr	r0, [r3, #0]
 800be02:	68bb      	ldr	r3, [r7, #8]
 800be04:	3308      	adds	r3, #8
 800be06:	2240      	movs	r2, #64	; 0x40
 800be08:	4619      	mov	r1, r3
 800be0a:	f7ff ff93 	bl	800bd34 <aiPbStrCopy>
            &resp->payload.ninfo.model_name[0],
            sizeof(resp->payload.ninfo.model_name));
    aiPbStrCopy(nn->model_signature,
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	6858      	ldr	r0, [r3, #4]
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	3348      	adds	r3, #72	; 0x48
 800be16:	2240      	movs	r2, #64	; 0x40
 800be18:	4619      	mov	r1, r3
 800be1a:	f7ff ff8b 	bl	800bd34 <aiPbStrCopy>
            &resp->payload.ninfo.model_signature[0],
            sizeof(resp->payload.ninfo.model_signature));
    aiPbStrCopy(nn->model_datetime,
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	6898      	ldr	r0, [r3, #8]
 800be22:	68bb      	ldr	r3, [r7, #8]
 800be24:	3388      	adds	r3, #136	; 0x88
 800be26:	2240      	movs	r2, #64	; 0x40
 800be28:	4619      	mov	r1, r3
 800be2a:	f7ff ff83 	bl	800bd34 <aiPbStrCopy>
            &resp->payload.ninfo.model_datetime[0],
            sizeof(resp->payload.ninfo.model_datetime));
    aiPbStrCopy(nn->compile_datetime,
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	68d8      	ldr	r0, [r3, #12]
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	33c8      	adds	r3, #200	; 0xc8
 800be36:	2240      	movs	r2, #64	; 0x40
 800be38:	4619      	mov	r1, r3
 800be3a:	f7ff ff7b 	bl	800bd34 <aiPbStrCopy>
            &resp->payload.ninfo.compile_datetime[0],
            sizeof(resp->payload.ninfo.compile_datetime));
    aiPbStrCopy(nn->runtime_revision,
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	6918      	ldr	r0, [r3, #16]
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800be48:	2240      	movs	r2, #64	; 0x40
 800be4a:	4619      	mov	r1, r3
 800be4c:	f7ff ff72 	bl	800bd34 <aiPbStrCopy>
            &resp->payload.ninfo.runtime_revision[0],
            sizeof(resp->payload.ninfo.runtime_revision));
    aiPbStrCopy(nn->tool_revision,
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	6998      	ldr	r0, [r3, #24]
 800be54:	68bb      	ldr	r3, [r7, #8]
 800be56:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800be5a:	2240      	movs	r2, #64	; 0x40
 800be5c:	4619      	mov	r1, r3
 800be5e:	f7ff ff69 	bl	800bd34 <aiPbStrCopy>
            &resp->payload.ninfo.tool_revision[0],
            sizeof(resp->payload.ninfo.tool_revision));

    resp->payload.ninfo.n_inputs = nn->n_inputs;
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800be66:	461a      	mov	r2, r3
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    resp->payload.ninfo.n_outputs = nn->n_outputs;
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800be72:	461a      	mov	r2, r3
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    resp->payload.ninfo.n_nodes = nn->n_nodes;
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    resp->payload.ninfo.n_macc = nn->n_macc;
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c

    resp->payload.ninfo.signature = nn->signature;
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800be92:	68bb      	ldr	r3, [r7, #8]
 800be94:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
    resp->payload.ninfo.api_version =
            aiPbVersionToUint32(&nn->api_version);
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	3324      	adds	r3, #36	; 0x24
 800be9c:	4618      	mov	r0, r3
 800be9e:	f7ff ff85 	bl	800bdac <aiPbVersionToUint32>
 800bea2:	4602      	mov	r2, r0
    resp->payload.ninfo.api_version =
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    resp->payload.ninfo.interface_api_version =
            aiPbVersionToUint32(&nn->interface_api_version);
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	3328      	adds	r3, #40	; 0x28
 800beae:	4618      	mov	r0, r3
 800beb0:	f7ff ff7c 	bl	800bdac <aiPbVersionToUint32>
 800beb4:	4602      	mov	r2, r0
    resp->payload.ninfo.interface_api_version =
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    resp->payload.ninfo.runtime_version =
            aiPbVersionToUint32(&nn->runtime_version);
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	3314      	adds	r3, #20
 800bec0:	4618      	mov	r0, r3
 800bec2:	f7ff ff73 	bl	800bdac <aiPbVersionToUint32>
 800bec6:	4602      	mov	r2, r0
    resp->payload.ninfo.runtime_version =
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    resp->payload.ninfo.tool_version =
            aiPbVersionToUint32(&nn->tool_version);
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	331c      	adds	r3, #28
 800bed2:	4618      	mov	r0, r3
 800bed4:	f7ff ff6a 	bl	800bdac <aiPbVersionToUint32>
 800bed8:	4602      	mov	r2, r0
    resp->payload.ninfo.tool_version =
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    resp->payload.ninfo.tool_api_version =
            aiPbVersionToUint32(&nn->tool_api_version);
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	3320      	adds	r3, #32
 800bee4:	4618      	mov	r0, r3
 800bee6:	f7ff ff61 	bl	800bdac <aiPbVersionToUint32>
 800beea:	4602      	mov	r2, r0
    resp->payload.ninfo.tool_api_version =
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190

    init_aibuffer_msg(&nn->activations, &resp->payload.ninfo.activations);
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800bef8:	68bb      	ldr	r3, [r7, #8]
 800befa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800befe:	4619      	mov	r1, r3
 800bf00:	4610      	mov	r0, r2
 800bf02:	f7ff fe6b 	bl	800bbdc <init_aibuffer_msg>
    init_aibuffer_msg(&nn->params, &resp->payload.ninfo.weights);
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800bf12:	4619      	mov	r1, r3
 800bf14:	4610      	mov	r0, r2
 800bf16:	f7ff fe61 	bl	800bbdc <init_aibuffer_msg>

    resp->payload.ninfo.inputs.funcs.encode = nn_inputs_w_cb;
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	4a0c      	ldr	r2, [pc, #48]	; (800bf50 <aiPbMgrSendNNInfo+0x168>)
 800bf1e:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    resp->payload.ninfo.inputs.arg = (void *)nn;
 800bf22:	68bb      	ldr	r3, [r7, #8]
 800bf24:	683a      	ldr	r2, [r7, #0]
 800bf26:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0

    resp->payload.ninfo.outputs.funcs.encode = nn_outputs_w_cb;
 800bf2a:	68bb      	ldr	r3, [r7, #8]
 800bf2c:	4a09      	ldr	r2, [pc, #36]	; (800bf54 <aiPbMgrSendNNInfo+0x16c>)
 800bf2e:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    resp->payload.ninfo.outputs.arg = (void *)nn;
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	683a      	ldr	r2, [r7, #0]
 800bf36:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8

    aiPbMgrSendResp(req, resp, state);
 800bf3a:	79fb      	ldrb	r3, [r7, #7]
 800bf3c:	461a      	mov	r2, r3
 800bf3e:	68b9      	ldr	r1, [r7, #8]
 800bf40:	68f8      	ldr	r0, [r7, #12]
 800bf42:	f7ff fa9f 	bl	800b484 <aiPbMgrSendResp>
}
 800bf46:	bf00      	nop
 800bf48:	3710      	adds	r7, #16
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}
 800bf4e:	bf00      	nop
 800bf50:	0800bcc9 	.word	0x0800bcc9
 800bf54:	0800bcff 	.word	0x0800bcff

0800bf58 <crcIpInit>:
#error Only STM32H7, STM32F7, STM32F4, STM32L4, STM32L5 or STM32F3 device are supported
#endif
#endif

void crcIpInit(void)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b082      	sub	sp, #8
 800bf5c:	af00      	add	r7, sp, #0
#if defined(STM32H7)
    /* By default the CRC IP clock is enabled */
    __HAL_RCC_CRC_CLK_ENABLE();
#else
    if (!__HAL_RCC_CRC_IS_CLK_ENABLED())
 800bf5e:	4b0c      	ldr	r3, [pc, #48]	; (800bf90 <crcIpInit+0x38>)
 800bf60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d102      	bne.n	800bf70 <crcIpInit+0x18>
        printf("W: CRC IP clock is NOT enabled\r\n");
 800bf6a:	480a      	ldr	r0, [pc, #40]	; (800bf94 <crcIpInit+0x3c>)
 800bf6c:	f005 f896 	bl	801109c <puts>

    /* By default the CRC IP clock is enabled */
    __HAL_RCC_CRC_CLK_ENABLE();
 800bf70:	4b07      	ldr	r3, [pc, #28]	; (800bf90 <crcIpInit+0x38>)
 800bf72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf74:	4a06      	ldr	r2, [pc, #24]	; (800bf90 <crcIpInit+0x38>)
 800bf76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bf7a:	6493      	str	r3, [r2, #72]	; 0x48
 800bf7c:	4b04      	ldr	r3, [pc, #16]	; (800bf90 <crcIpInit+0x38>)
 800bf7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bf84:	607b      	str	r3, [r7, #4]
 800bf86:	687b      	ldr	r3, [r7, #4]
#endif
}
 800bf88:	bf00      	nop
 800bf8a:	3708      	adds	r7, #8
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bd80      	pop	{r7, pc}
 800bf90:	40021000 	.word	0x40021000
 800bf94:	08015260 	.word	0x08015260

0800bf98 <dwtIpInit>:

void dwtIpInit(void)
{
 800bf98:	b480      	push	{r7}
 800bf9a:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800bf9c:	4b0a      	ldr	r3, [pc, #40]	; (800bfc8 <dwtIpInit+0x30>)
 800bf9e:	68db      	ldr	r3, [r3, #12]
 800bfa0:	4a09      	ldr	r2, [pc, #36]	; (800bfc8 <dwtIpInit+0x30>)
 800bfa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bfa6:	60d3      	str	r3, [r2, #12]

#ifdef STM32F7
    DWT->LAR = 0xC5ACCE55;
#endif

    DWT->CYCCNT = 0;
 800bfa8:	4b08      	ldr	r3, [pc, #32]	; (800bfcc <dwtIpInit+0x34>)
 800bfaa:	2200      	movs	r2, #0
 800bfac:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk | DWT_CTRL_CPIEVTENA_Msk;
 800bfae:	4b07      	ldr	r3, [pc, #28]	; (800bfcc <dwtIpInit+0x34>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	4a06      	ldr	r2, [pc, #24]	; (800bfcc <dwtIpInit+0x34>)
 800bfb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bfb8:	f043 0301 	orr.w	r3, r3, #1
 800bfbc:	6013      	str	r3, [r2, #0]
}
 800bfbe:	bf00      	nop
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc6:	4770      	bx	lr
 800bfc8:	e000edf0 	.word	0xe000edf0
 800bfcc:	e0001000 	.word	0xe0001000

0800bfd0 <dwtReset>:

void dwtReset(void)
{
 800bfd0:	b480      	push	{r7}
 800bfd2:	af00      	add	r7, sp, #0
    DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 800bfd4:	4b03      	ldr	r3, [pc, #12]	; (800bfe4 <dwtReset+0x14>)
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	605a      	str	r2, [r3, #4]
}
 800bfda:	bf00      	nop
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe2:	4770      	bx	lr
 800bfe4:	e0001000 	.word	0xe0001000

0800bfe8 <dwtGetCycles>:

uint32_t dwtGetCycles(void)
{
 800bfe8:	b480      	push	{r7}
 800bfea:	af00      	add	r7, sp, #0
    return DWT->CYCCNT;
 800bfec:	4b03      	ldr	r3, [pc, #12]	; (800bffc <dwtGetCycles+0x14>)
 800bfee:	685b      	ldr	r3, [r3, #4]
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	46bd      	mov	sp, r7
 800bff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff8:	4770      	bx	lr
 800bffa:	bf00      	nop
 800bffc:	e0001000 	.word	0xe0001000

0800c000 <systemCoreClock>:

uint32_t systemCoreClock(void)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	af00      	add	r7, sp, #0
#if !defined(STM32H7)
    return HAL_RCC_GetHCLKFreq();
 800c004:	f7fd fdea 	bl	8009bdc <HAL_RCC_GetHCLKFreq>
 800c008:	4603      	mov	r3, r0
#else
    return HAL_RCC_GetSysClockFreq();
#endif
}
 800c00a:	4618      	mov	r0, r3
 800c00c:	bd80      	pop	{r7, pc}
	...

0800c010 <dwtCyclesToFloatMs>:
    return 0;
}


float dwtCyclesToFloatMs(uint64_t clks)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b084      	sub	sp, #16
 800c014:	af00      	add	r7, sp, #0
 800c016:	e9c7 0100 	strd	r0, r1, [r7]
    float res;
    float fcpu = (float)systemCoreClock();
 800c01a:	f7ff fff1 	bl	800c000 <systemCoreClock>
 800c01e:	ee07 0a90 	vmov	s15, r0
 800c022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c026:	edc7 7a03 	vstr	s15, [r7, #12]
    res = ((float)clks * (float)1000.0) / fcpu;
 800c02a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c02e:	f7fb ff9d 	bl	8007f6c <__aeabi_ul2f>
 800c032:	ee07 0a10 	vmov	s14, r0
 800c036:	eddf 7a09 	vldr	s15, [pc, #36]	; 800c05c <dwtCyclesToFloatMs+0x4c>
 800c03a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800c03e:	ed97 7a03 	vldr	s14, [r7, #12]
 800c042:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c046:	edc7 7a02 	vstr	s15, [r7, #8]
    return res;
 800c04a:	68bb      	ldr	r3, [r7, #8]
 800c04c:	ee07 3a90 	vmov	s15, r3
}
 800c050:	eeb0 0a67 	vmov.f32	s0, s15
 800c054:	3710      	adds	r7, #16
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}
 800c05a:	bf00      	nop
 800c05c:	447a0000 	.word	0x447a0000

0800c060 <devIdToStr>:


__STATIC_INLINE const char *devIdToStr(uint16_t dev_id)
{
 800c060:	b480      	push	{r7}
 800c062:	b085      	sub	sp, #20
 800c064:	af00      	add	r7, sp, #0
 800c066:	4603      	mov	r3, r0
 800c068:	80fb      	strh	r3, [r7, #6]
	/* DEV_ID field from DBGMCU register */
    const char *str;
    switch (dev_id) {
 800c06a:	88fb      	ldrh	r3, [r7, #6]
 800c06c:	f2a3 4315 	subw	r3, r3, #1045	; 0x415
 800c070:	2b5d      	cmp	r3, #93	; 0x5d
 800c072:	f200 80e0 	bhi.w	800c236 <devIdToStr+0x1d6>
 800c076:	a201      	add	r2, pc, #4	; (adr r2, 800c07c <devIdToStr+0x1c>)
 800c078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c07c:	0800c219 	.word	0x0800c219
 800c080:	0800c237 	.word	0x0800c237
 800c084:	0800c237 	.word	0x0800c237
 800c088:	0800c237 	.word	0x0800c237
 800c08c:	0800c237 	.word	0x0800c237
 800c090:	0800c237 	.word	0x0800c237
 800c094:	0800c237 	.word	0x0800c237
 800c098:	0800c237 	.word	0x0800c237
 800c09c:	0800c237 	.word	0x0800c237
 800c0a0:	0800c237 	.word	0x0800c237
 800c0a4:	0800c237 	.word	0x0800c237
 800c0a8:	0800c237 	.word	0x0800c237
 800c0ac:	0800c237 	.word	0x0800c237
 800c0b0:	0800c1f5 	.word	0x0800c1f5
 800c0b4:	0800c237 	.word	0x0800c237
 800c0b8:	0800c237 	.word	0x0800c237
 800c0bc:	0800c237 	.word	0x0800c237
 800c0c0:	0800c237 	.word	0x0800c237
 800c0c4:	0800c237 	.word	0x0800c237
 800c0c8:	0800c237 	.word	0x0800c237
 800c0cc:	0800c237 	.word	0x0800c237
 800c0d0:	0800c237 	.word	0x0800c237
 800c0d4:	0800c237 	.word	0x0800c237
 800c0d8:	0800c237 	.word	0x0800c237
 800c0dc:	0800c237 	.word	0x0800c237
 800c0e0:	0800c237 	.word	0x0800c237
 800c0e4:	0800c237 	.word	0x0800c237
 800c0e8:	0800c237 	.word	0x0800c237
 800c0ec:	0800c207 	.word	0x0800c207
 800c0f0:	0800c237 	.word	0x0800c237
 800c0f4:	0800c237 	.word	0x0800c237
 800c0f8:	0800c237 	.word	0x0800c237
 800c0fc:	0800c20d 	.word	0x0800c20d
 800c100:	0800c237 	.word	0x0800c237
 800c104:	0800c237 	.word	0x0800c237
 800c108:	0800c1fb 	.word	0x0800c1fb
 800c10c:	0800c237 	.word	0x0800c237
 800c110:	0800c237 	.word	0x0800c237
 800c114:	0800c237 	.word	0x0800c237
 800c118:	0800c237 	.word	0x0800c237
 800c11c:	0800c237 	.word	0x0800c237
 800c120:	0800c237 	.word	0x0800c237
 800c124:	0800c237 	.word	0x0800c237
 800c128:	0800c237 	.word	0x0800c237
 800c12c:	0800c237 	.word	0x0800c237
 800c130:	0800c237 	.word	0x0800c237
 800c134:	0800c237 	.word	0x0800c237
 800c138:	0800c237 	.word	0x0800c237
 800c13c:	0800c237 	.word	0x0800c237
 800c140:	0800c201 	.word	0x0800c201
 800c144:	0800c237 	.word	0x0800c237
 800c148:	0800c237 	.word	0x0800c237
 800c14c:	0800c22b 	.word	0x0800c22b
 800c150:	0800c237 	.word	0x0800c237
 800c154:	0800c237 	.word	0x0800c237
 800c158:	0800c237 	.word	0x0800c237
 800c15c:	0800c237 	.word	0x0800c237
 800c160:	0800c237 	.word	0x0800c237
 800c164:	0800c237 	.word	0x0800c237
 800c168:	0800c231 	.word	0x0800c231
 800c16c:	0800c237 	.word	0x0800c237
 800c170:	0800c237 	.word	0x0800c237
 800c174:	0800c237 	.word	0x0800c237
 800c178:	0800c237 	.word	0x0800c237
 800c17c:	0800c237 	.word	0x0800c237
 800c180:	0800c237 	.word	0x0800c237
 800c184:	0800c237 	.word	0x0800c237
 800c188:	0800c237 	.word	0x0800c237
 800c18c:	0800c237 	.word	0x0800c237
 800c190:	0800c237 	.word	0x0800c237
 800c194:	0800c237 	.word	0x0800c237
 800c198:	0800c237 	.word	0x0800c237
 800c19c:	0800c237 	.word	0x0800c237
 800c1a0:	0800c237 	.word	0x0800c237
 800c1a4:	0800c237 	.word	0x0800c237
 800c1a8:	0800c237 	.word	0x0800c237
 800c1ac:	0800c237 	.word	0x0800c237
 800c1b0:	0800c213 	.word	0x0800c213
 800c1b4:	0800c237 	.word	0x0800c237
 800c1b8:	0800c237 	.word	0x0800c237
 800c1bc:	0800c237 	.word	0x0800c237
 800c1c0:	0800c237 	.word	0x0800c237
 800c1c4:	0800c237 	.word	0x0800c237
 800c1c8:	0800c237 	.word	0x0800c237
 800c1cc:	0800c237 	.word	0x0800c237
 800c1d0:	0800c237 	.word	0x0800c237
 800c1d4:	0800c237 	.word	0x0800c237
 800c1d8:	0800c237 	.word	0x0800c237
 800c1dc:	0800c237 	.word	0x0800c237
 800c1e0:	0800c237 	.word	0x0800c237
 800c1e4:	0800c237 	.word	0x0800c237
 800c1e8:	0800c21f 	.word	0x0800c21f
 800c1ec:	0800c237 	.word	0x0800c237
 800c1f0:	0800c225 	.word	0x0800c225
    case 0x422: str = "STM32F303xB/C"; break;
 800c1f4:	4b14      	ldr	r3, [pc, #80]	; (800c248 <devIdToStr+0x1e8>)
 800c1f6:	60fb      	str	r3, [r7, #12]
 800c1f8:	e01f      	b.n	800c23a <devIdToStr+0x1da>
    case 0x438: str = "STM32F303x6/8"; break;
 800c1fa:	4b14      	ldr	r3, [pc, #80]	; (800c24c <devIdToStr+0x1ec>)
 800c1fc:	60fb      	str	r3, [r7, #12]
 800c1fe:	e01c      	b.n	800c23a <devIdToStr+0x1da>
    case 0x446: str = "STM32F303xD/E"; break;
 800c200:	4b13      	ldr	r3, [pc, #76]	; (800c250 <devIdToStr+0x1f0>)
 800c202:	60fb      	str	r3, [r7, #12]
 800c204:	e019      	b.n	800c23a <devIdToStr+0x1da>
    case 0x431: str = "STM32F411xC/E"; break;
 800c206:	4b13      	ldr	r3, [pc, #76]	; (800c254 <devIdToStr+0x1f4>)
 800c208:	60fb      	str	r3, [r7, #12]
 800c20a:	e016      	b.n	800c23a <devIdToStr+0x1da>
    case 0x435: str = "STM32L43xxx"; break;
 800c20c:	4b12      	ldr	r3, [pc, #72]	; (800c258 <devIdToStr+0x1f8>)
 800c20e:	60fb      	str	r3, [r7, #12]
 800c210:	e013      	b.n	800c23a <devIdToStr+0x1da>
    case 0x462: str = "STM32L45xxx"; break;
 800c212:	4b12      	ldr	r3, [pc, #72]	; (800c25c <devIdToStr+0x1fc>)
 800c214:	60fb      	str	r3, [r7, #12]
 800c216:	e010      	b.n	800c23a <devIdToStr+0x1da>
    case 0x415: str = "STM32L4x6xx"; break;
 800c218:	4b11      	ldr	r3, [pc, #68]	; (800c260 <devIdToStr+0x200>)
 800c21a:	60fb      	str	r3, [r7, #12]
 800c21c:	e00d      	b.n	800c23a <devIdToStr+0x1da>
    case 0x470: str = "STM32L4Rxxx"; break;
 800c21e:	4b11      	ldr	r3, [pc, #68]	; (800c264 <devIdToStr+0x204>)
 800c220:	60fb      	str	r3, [r7, #12]
 800c222:	e00a      	b.n	800c23a <devIdToStr+0x1da>
    case 0x472: str = "STM32L5[5,6]2xx"; break;
 800c224:	4b10      	ldr	r3, [pc, #64]	; (800c268 <devIdToStr+0x208>)
 800c226:	60fb      	str	r3, [r7, #12]
 800c228:	e007      	b.n	800c23a <devIdToStr+0x1da>
    case 0x449: str = "STM32F74xxx"; break;
 800c22a:	4b10      	ldr	r3, [pc, #64]	; (800c26c <devIdToStr+0x20c>)
 800c22c:	60fb      	str	r3, [r7, #12]
 800c22e:	e004      	b.n	800c23a <devIdToStr+0x1da>
    case 0x450: str = "STM32H743/753 and STM32H750"; break;
 800c230:	4b0f      	ldr	r3, [pc, #60]	; (800c270 <devIdToStr+0x210>)
 800c232:	60fb      	str	r3, [r7, #12]
 800c234:	e001      	b.n	800c23a <devIdToStr+0x1da>
    default:    str = "UNKNOWN";
 800c236:	4b0f      	ldr	r3, [pc, #60]	; (800c274 <devIdToStr+0x214>)
 800c238:	60fb      	str	r3, [r7, #12]
    }
    return str;
 800c23a:	68fb      	ldr	r3, [r7, #12]
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	3714      	adds	r7, #20
 800c240:	46bd      	mov	sp, r7
 800c242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c246:	4770      	bx	lr
 800c248:	08015280 	.word	0x08015280
 800c24c:	08015290 	.word	0x08015290
 800c250:	080152a0 	.word	0x080152a0
 800c254:	080152b0 	.word	0x080152b0
 800c258:	080152c0 	.word	0x080152c0
 800c25c:	080152cc 	.word	0x080152cc
 800c260:	080152d8 	.word	0x080152d8
 800c264:	080152e4 	.word	0x080152e4
 800c268:	080152f0 	.word	0x080152f0
 800c26c:	08015300 	.word	0x08015300
 800c270:	0801530c 	.word	0x0801530c
 800c274:	08015328 	.word	0x08015328

0800c278 <bitToStr>:

#if !defined(STM32F3)
__STATIC_INLINE const char* bitToStr(uint32_t val)
{
 800c278:	b480      	push	{r7}
 800c27a:	b083      	sub	sp, #12
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
    if (val)
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d001      	beq.n	800c28a <bitToStr+0x12>
        return "True";
 800c286:	4b04      	ldr	r3, [pc, #16]	; (800c298 <bitToStr+0x20>)
 800c288:	e000      	b.n	800c28c <bitToStr+0x14>
    else
        return "False";
 800c28a:	4b04      	ldr	r3, [pc, #16]	; (800c29c <bitToStr+0x24>)
}
 800c28c:	4618      	mov	r0, r3
 800c28e:	370c      	adds	r7, #12
 800c290:	46bd      	mov	sp, r7
 800c292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c296:	4770      	bx	lr
 800c298:	08015330 	.word	0x08015330
 800c29c:	08015338 	.word	0x08015338

0800c2a0 <getFlashCacheConf>:


static uint32_t mconf;

uint32_t getFlashCacheConf(void)
{
 800c2a0:	b480      	push	{r7}
 800c2a2:	af00      	add	r7, sp, #0
    return mconf;
 800c2a4:	4b03      	ldr	r3, [pc, #12]	; (800c2b4 <getFlashCacheConf+0x14>)
 800c2a6:	681b      	ldr	r3, [r3, #0]
}
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b0:	4770      	bx	lr
 800c2b2:	bf00      	nop
 800c2b4:	20000cf8 	.word	0x20000cf8

0800c2b8 <logDeviceConf>:

void logDeviceConf(void)
{
 800c2b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2ba:	b085      	sub	sp, #20
 800c2bc:	af02      	add	r7, sp, #8
#if !defined(STM32L5)
    uint32_t acr = FLASH->ACR ;
 800c2be:	4b47      	ldr	r3, [pc, #284]	; (800c3dc <logDeviceConf+0x124>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	607b      	str	r3, [r7, #4]
#endif
    uint32_t val;

    printf("STM32 Runtime configuration...\r\n");
 800c2c4:	4846      	ldr	r0, [pc, #280]	; (800c3e0 <logDeviceConf+0x128>)
 800c2c6:	f004 fee9 	bl	801109c <puts>

    printf(" Device       : DevID:0x%08x (%s) RevID:0x%08x\r\n",
            (int)HAL_GetDEVID(),
 800c2ca:	f7fc fb4b 	bl	8008964 <HAL_GetDEVID>
 800c2ce:	4603      	mov	r3, r0
    printf(" Device       : DevID:0x%08x (%s) RevID:0x%08x\r\n",
 800c2d0:	461c      	mov	r4, r3
            devIdToStr(HAL_GetDEVID()),
 800c2d2:	f7fc fb47 	bl	8008964 <HAL_GetDEVID>
 800c2d6:	4603      	mov	r3, r0
    printf(" Device       : DevID:0x%08x (%s) RevID:0x%08x\r\n",
 800c2d8:	b29b      	uxth	r3, r3
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f7ff fec0 	bl	800c060 <devIdToStr>
 800c2e0:	4605      	mov	r5, r0
            (int)HAL_GetREVID()
 800c2e2:	f7fc fb31 	bl	8008948 <HAL_GetREVID>
 800c2e6:	4603      	mov	r3, r0
    printf(" Device       : DevID:0x%08x (%s) RevID:0x%08x\r\n",
 800c2e8:	462a      	mov	r2, r5
 800c2ea:	4621      	mov	r1, r4
 800c2ec:	483d      	ldr	r0, [pc, #244]	; (800c3e4 <logDeviceConf+0x12c>)
 800c2ee:	f004 fe61 	bl	8010fb4 <iprintf>
    );

    printf(" Core Arch.   : M%d - %s %s\r\n",
 800c2f2:	4b3d      	ldr	r3, [pc, #244]	; (800c3e8 <logDeviceConf+0x130>)
 800c2f4:	4a3d      	ldr	r2, [pc, #244]	; (800c3ec <logDeviceConf+0x134>)
 800c2f6:	2104      	movs	r1, #4
 800c2f8:	483d      	ldr	r0, [pc, #244]	; (800c3f0 <logDeviceConf+0x138>)
 800c2fa:	f004 fe5b 	bl	8010fb4 <iprintf>
            ""
#endif
    );

#if (__FPU_PRESENT == 1) && __FPU_USED
    mconf = (1 << 16);  /* FPU present and used */
 800c2fe:	4b3d      	ldr	r3, [pc, #244]	; (800c3f4 <logDeviceConf+0x13c>)
 800c300:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c304:	601a      	str	r2, [r3, #0]
#endif

    printf(" HAL version  : 0x%08x\r\n", (int)HAL_GetHalVersion());
 800c306:	f7fc fb15 	bl	8008934 <HAL_GetHalVersion>
 800c30a:	4603      	mov	r3, r0
 800c30c:	4619      	mov	r1, r3
 800c30e:	483a      	ldr	r0, [pc, #232]	; (800c3f8 <logDeviceConf+0x140>)
 800c310:	f004 fe50 	bl	8010fb4 <iprintf>

    val = systemCoreClock()/1000000;
 800c314:	f7ff fe74 	bl	800c000 <systemCoreClock>
 800c318:	4602      	mov	r2, r0
 800c31a:	4b38      	ldr	r3, [pc, #224]	; (800c3fc <logDeviceConf+0x144>)
 800c31c:	fba3 2302 	umull	r2, r3, r3, r2
 800c320:	0c9b      	lsrs	r3, r3, #18
 800c322:	603b      	str	r3, [r7, #0]

#if !defined(STM32H7)
    printf(" system clock : %u MHz\r\n", (int)val);
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	4619      	mov	r1, r3
 800c328:	4835      	ldr	r0, [pc, #212]	; (800c400 <logDeviceConf+0x148>)
 800c32a:	f004 fe43 	bl	8010fb4 <iprintf>
            bitToStr(val & SCB_CCR_IC_Msk),
            bitToStr(val & SCB_CCR_DC_Msk));
#endif
#else
#if !defined(STM32F3) && !defined(STM32L5)
    mconf |= (1 << 24);  /* F4/L4 conf. */
 800c32e:	4b31      	ldr	r3, [pc, #196]	; (800c3f4 <logDeviceConf+0x13c>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c336:	4a2f      	ldr	r2, [pc, #188]	; (800c3f4 <logDeviceConf+0x13c>)
 800c338:	6013      	str	r3, [r2, #0]
    mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	f003 0207 	and.w	r2, r3, #7
 800c340:	4b2c      	ldr	r3, [pc, #176]	; (800c3f4 <logDeviceConf+0x13c>)
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	4313      	orrs	r3, r2
 800c346:	4a2b      	ldr	r2, [pc, #172]	; (800c3f4 <logDeviceConf+0x13c>)
 800c348:	6013      	str	r3, [r2, #0]
    if ((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos)
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c350:	2b00      	cmp	r3, #0
 800c352:	d005      	beq.n	800c360 <logDeviceConf+0xa8>
        mconf |= (1 << 8);
 800c354:	4b27      	ldr	r3, [pc, #156]	; (800c3f4 <logDeviceConf+0x13c>)
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c35c:	4a25      	ldr	r2, [pc, #148]	; (800c3f4 <logDeviceConf+0x13c>)
 800c35e:	6013      	str	r3, [r2, #0]
    if ((acr & FLASH_ACR_ICEN_Msk) >> FLASH_ACR_ICEN_Pos)
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c366:	2b00      	cmp	r3, #0
 800c368:	d005      	beq.n	800c376 <logDeviceConf+0xbe>
        mconf |= (1 << 9);
 800c36a:	4b22      	ldr	r3, [pc, #136]	; (800c3f4 <logDeviceConf+0x13c>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c372:	4a20      	ldr	r2, [pc, #128]	; (800c3f4 <logDeviceConf+0x13c>)
 800c374:	6013      	str	r3, [r2, #0]
    if ((acr & FLASH_ACR_DCEN_Msk) >> FLASH_ACR_DCEN_Pos)
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d005      	beq.n	800c38c <logDeviceConf+0xd4>
        mconf |= (1 << 10);
 800c380:	4b1c      	ldr	r3, [pc, #112]	; (800c3f4 <logDeviceConf+0x13c>)
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c388:	4a1a      	ldr	r2, [pc, #104]	; (800c3f4 <logDeviceConf+0x13c>)
 800c38a:	6013      	str	r3, [r2, #0]
    printf(" FLASH conf.  : ACR=0x%08x - Prefetch=%s $I/$D=(%s,%s) latency=%d\r\n",
 800c38c:	687c      	ldr	r4, [r7, #4]
            (int)acr,
            bitToStr((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos),
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	0a1b      	lsrs	r3, r3, #8
    printf(" FLASH conf.  : ACR=0x%08x - Prefetch=%s $I/$D=(%s,%s) latency=%d\r\n",
 800c392:	f003 0301 	and.w	r3, r3, #1
 800c396:	4618      	mov	r0, r3
 800c398:	f7ff ff6e 	bl	800c278 <bitToStr>
 800c39c:	4605      	mov	r5, r0
            bitToStr((acr & FLASH_ACR_ICEN_Msk) >> FLASH_ACR_ICEN_Pos),
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	0a5b      	lsrs	r3, r3, #9
    printf(" FLASH conf.  : ACR=0x%08x - Prefetch=%s $I/$D=(%s,%s) latency=%d\r\n",
 800c3a2:	f003 0301 	and.w	r3, r3, #1
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f7ff ff66 	bl	800c278 <bitToStr>
 800c3ac:	4606      	mov	r6, r0
            bitToStr((acr & FLASH_ACR_DCEN_Msk) >> FLASH_ACR_DCEN_Pos),
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	0a9b      	lsrs	r3, r3, #10
    printf(" FLASH conf.  : ACR=0x%08x - Prefetch=%s $I/$D=(%s,%s) latency=%d\r\n",
 800c3b2:	f003 0301 	and.w	r3, r3, #1
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f7ff ff5e 	bl	800c278 <bitToStr>
 800c3bc:	4602      	mov	r2, r0
            (int)((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos));
 800c3be:	687b      	ldr	r3, [r7, #4]
    printf(" FLASH conf.  : ACR=0x%08x - Prefetch=%s $I/$D=(%s,%s) latency=%d\r\n",
 800c3c0:	f003 0307 	and.w	r3, r3, #7
 800c3c4:	9301      	str	r3, [sp, #4]
 800c3c6:	9200      	str	r2, [sp, #0]
 800c3c8:	4633      	mov	r3, r6
 800c3ca:	462a      	mov	r2, r5
 800c3cc:	4621      	mov	r1, r4
 800c3ce:	480d      	ldr	r0, [pc, #52]	; (800c404 <logDeviceConf+0x14c>)
 800c3d0:	f004 fdf0 	bl	8010fb4 <iprintf>
#endif
#if defined(STM32L5)
    printf(" ICACHE       : %s\r\n", bitToStr(READ_BIT(ICACHE->CR, ICACHE_CR_EN)));
#endif
#endif
}
 800c3d4:	bf00      	nop
 800c3d6:	370c      	adds	r7, #12
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3dc:	40022000 	.word	0x40022000
 800c3e0:	08015340 	.word	0x08015340
 800c3e4:	08015360 	.word	0x08015360
 800c3e8:	08015394 	.word	0x08015394
 800c3ec:	080153a0 	.word	0x080153a0
 800c3f0:	080153ac 	.word	0x080153ac
 800c3f4:	20000cf8 	.word	0x20000cf8
 800c3f8:	080153cc 	.word	0x080153cc
 800c3fc:	431bde83 	.word	0x431bde83
 800c400:	080153e8 	.word	0x080153e8
 800c404:	08015404 	.word	0x08015404

0800c408 <disableInts>:

uint32_t disableInts(void)
{
 800c408:	b480      	push	{r7}
 800c40a:	b083      	sub	sp, #12
 800c40c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c40e:	f3ef 8310 	mrs	r3, PRIMASK
 800c412:	603b      	str	r3, [r7, #0]
  return(result);
 800c414:	683b      	ldr	r3, [r7, #0]
    uint32_t state;

    state = __get_PRIMASK();
 800c416:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 800c418:	b672      	cpsid	i
    __disable_irq();

    return state;
 800c41a:	687b      	ldr	r3, [r7, #4]
}
 800c41c:	4618      	mov	r0, r3
 800c41e:	370c      	adds	r7, #12
 800c420:	46bd      	mov	sp, r7
 800c422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c426:	4770      	bx	lr

0800c428 <restoreInts>:

void restoreInts(uint32_t state)
{
 800c428:	b480      	push	{r7}
 800c42a:	b085      	sub	sp, #20
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	f383 8810 	msr	PRIMASK, r3
   __set_PRIMASK(state);
}
 800c43a:	bf00      	nop
 800c43c:	3714      	adds	r7, #20
 800c43e:	46bd      	mov	sp, r7
 800c440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c444:	4770      	bx	lr
	...

0800c448 <ioDisableWrite>:
 */

bool _ioWriteAllowed = true;

void ioDisableWrite(void)
{
 800c448:	b480      	push	{r7}
 800c44a:	af00      	add	r7, sp, #0
    _ioWriteAllowed = false;
 800c44c:	4b03      	ldr	r3, [pc, #12]	; (800c45c <ioDisableWrite+0x14>)
 800c44e:	2200      	movs	r2, #0
 800c450:	701a      	strb	r2, [r3, #0]
}
 800c452:	bf00      	nop
 800c454:	46bd      	mov	sp, r7
 800c456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45a:	4770      	bx	lr
 800c45c:	20000014 	.word	0x20000014

0800c460 <_write>:
#if defined(__GNUC__)

int _write(int fd, const void *buff, int count);

int _write(int fd, const void *buff, int count)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b086      	sub	sp, #24
 800c464:	af00      	add	r7, sp, #0
 800c466:	60f8      	str	r0, [r7, #12]
 800c468:	60b9      	str	r1, [r7, #8]
 800c46a:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef status;

    if ((count < 0) && (fd != STDOUT_FILENO) && (fd != STDERR_FILENO)) {
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	da0d      	bge.n	800c48e <_write+0x2e>
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	2b01      	cmp	r3, #1
 800c476:	d00a      	beq.n	800c48e <_write+0x2e>
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	2b02      	cmp	r3, #2
 800c47c:	d007      	beq.n	800c48e <_write+0x2e>
        errno = EBADF;
 800c47e:	f004 fc95 	bl	8010dac <__errno>
 800c482:	4602      	mov	r2, r0
 800c484:	2309      	movs	r3, #9
 800c486:	6013      	str	r3, [r2, #0]
        return -1;
 800c488:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c48c:	e016      	b.n	800c4bc <_write+0x5c>
    }

    if (_ioWriteAllowed)
 800c48e:	4b0d      	ldr	r3, [pc, #52]	; (800c4c4 <_write+0x64>)
 800c490:	781b      	ldrb	r3, [r3, #0]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d00a      	beq.n	800c4ac <_write+0x4c>
        status = HAL_UART_Transmit(&UartHandle, (uint8_t *)buff, count,
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	b29a      	uxth	r2, r3
 800c49a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c49e:	68b9      	ldr	r1, [r7, #8]
 800c4a0:	4809      	ldr	r0, [pc, #36]	; (800c4c8 <_write+0x68>)
 800c4a2:	f7fe f931 	bl	800a708 <HAL_UART_Transmit>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	75fb      	strb	r3, [r7, #23]
 800c4aa:	e001      	b.n	800c4b0 <_write+0x50>
                HAL_MAX_DELAY);
    else
        status = HAL_OK;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	75fb      	strb	r3, [r7, #23]

    return (status == HAL_OK ? count : 0);
 800c4b0:	7dfb      	ldrb	r3, [r7, #23]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d101      	bne.n	800c4ba <_write+0x5a>
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	e000      	b.n	800c4bc <_write+0x5c>
 800c4ba:	2300      	movs	r3, #0
}
 800c4bc:	4618      	mov	r0, r3
 800c4be:	3718      	adds	r7, #24
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bd80      	pop	{r7, pc}
 800c4c4:	20000014 	.word	0x20000014
 800c4c8:	200121d8 	.word	0x200121d8

0800c4cc <aiLogErr>:
 * AI-related functions
 * -----------------------------------------------------------------------------
 */

void aiLogErr(const ai_error err, const char *fct)
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b082      	sub	sp, #8
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
 800c4d4:	6039      	str	r1, [r7, #0]
    if (fct)
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d009      	beq.n	800c4f0 <aiLogErr+0x24>
        printf("E: AI error (%s) - type=%d code=%d\r\n", fct,
                err.type, err.code);
 800c4dc:	793b      	ldrb	r3, [r7, #4]
        printf("E: AI error (%s) - type=%d code=%d\r\n", fct,
 800c4de:	461a      	mov	r2, r3
                err.type, err.code);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f3c3 2317 	ubfx	r3, r3, #8, #24
        printf("E: AI error (%s) - type=%d code=%d\r\n", fct,
 800c4e6:	6839      	ldr	r1, [r7, #0]
 800c4e8:	4808      	ldr	r0, [pc, #32]	; (800c50c <aiLogErr+0x40>)
 800c4ea:	f004 fd63 	bl	8010fb4 <iprintf>
    else
        printf("E: AI error - type=%d code=%d\r\n", err.type, err.code);
}
 800c4ee:	e008      	b.n	800c502 <aiLogErr+0x36>
        printf("E: AI error - type=%d code=%d\r\n", err.type, err.code);
 800c4f0:	793b      	ldrb	r3, [r7, #4]
 800c4f2:	4619      	mov	r1, r3
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800c4fa:	461a      	mov	r2, r3
 800c4fc:	4804      	ldr	r0, [pc, #16]	; (800c510 <aiLogErr+0x44>)
 800c4fe:	f004 fd59 	bl	8010fb4 <iprintf>
}
 800c502:	bf00      	nop
 800c504:	3708      	adds	r7, #8
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}
 800c50a:	bf00      	nop
 800c50c:	08015448 	.word	0x08015448
 800c510:	08015470 	.word	0x08015470

0800c514 <aiBufferSize>:

ai_u32 aiBufferSize(const ai_buffer* buffer)
{
 800c514:	b480      	push	{r7}
 800c516:	b083      	sub	sp, #12
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
    return buffer->height * buffer->width * buffer->channels;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	88db      	ldrh	r3, [r3, #6]
 800c520:	461a      	mov	r2, r3
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	891b      	ldrh	r3, [r3, #8]
 800c526:	fb03 f302 	mul.w	r3, r3, r2
 800c52a:	461a      	mov	r2, r3
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	68db      	ldr	r3, [r3, #12]
 800c530:	fb03 f302 	mul.w	r3, r3, r2
}
 800c534:	4618      	mov	r0, r3
 800c536:	370c      	adds	r7, #12
 800c538:	46bd      	mov	sp, r7
 800c53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53e:	4770      	bx	lr

0800c540 <aiPrintLayoutBuffer>:

__STATIC_INLINE void aiPrintLayoutBuffer(const char *msg, int idx,
        const ai_buffer* buffer)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b08a      	sub	sp, #40	; 0x28
 800c544:	af02      	add	r7, sp, #8
 800c546:	60f8      	str	r0, [r7, #12]
 800c548:	60b9      	str	r1, [r7, #8]
 800c54a:	607a      	str	r2, [r7, #4]
    uint32_t type_id = AI_BUFFER_FMT_GET_TYPE(buffer->format);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	145b      	asrs	r3, r3, #17
 800c552:	f003 030f 	and.w	r3, r3, #15
 800c556:	61fb      	str	r3, [r7, #28]
    printf("%s[%d] ",msg, idx);
 800c558:	68ba      	ldr	r2, [r7, #8]
 800c55a:	68f9      	ldr	r1, [r7, #12]
 800c55c:	4897      	ldr	r0, [pc, #604]	; (800c7bc <aiPrintLayoutBuffer+0x27c>)
 800c55e:	f004 fd29 	bl	8010fb4 <iprintf>
    if (type_id == AI_BUFFER_FMT_TYPE_Q) {
 800c562:	69fb      	ldr	r3, [r7, #28]
 800c564:	2b02      	cmp	r3, #2
 800c566:	f040 818d 	bne.w	800c884 <aiPrintLayoutBuffer+0x344>
        printf(" %s%d,",
        		AI_BUFFER_FMT_GET_SIGN(buffer->format)?"s":"u",
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        printf(" %s%d,",
 800c572:	2b00      	cmp	r3, #0
 800c574:	d001      	beq.n	800c57a <aiPrintLayoutBuffer+0x3a>
 800c576:	4992      	ldr	r1, [pc, #584]	; (800c7c0 <aiPrintLayoutBuffer+0x280>)
 800c578:	e000      	b.n	800c57c <aiPrintLayoutBuffer+0x3c>
 800c57a:	4992      	ldr	r1, [pc, #584]	; (800c7c4 <aiPrintLayoutBuffer+0x284>)
                (int)AI_BUFFER_FMT_GET_BITS(buffer->format));
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	11db      	asrs	r3, r3, #7
        printf(" %s%d,",
 800c582:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c586:	461a      	mov	r2, r3
 800c588:	488f      	ldr	r0, [pc, #572]	; (800c7c8 <aiPrintLayoutBuffer+0x288>)
 800c58a:	f004 fd13 	bl	8010fb4 <iprintf>
        if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	695b      	ldr	r3, [r3, #20]
 800c592:	2b00      	cmp	r3, #0
 800c594:	f000 8158 	beq.w	800c848 <aiPrintLayoutBuffer+0x308>
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	695b      	ldr	r3, [r3, #20]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	f003 0301 	and.w	r3, r3, #1
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	f000 8150 	beq.w	800c848 <aiPrintLayoutBuffer+0x308>
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	695b      	ldr	r3, [r3, #20]
 800c5ac:	685b      	ldr	r3, [r3, #4]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	f000 814a 	beq.w	800c848 <aiPrintLayoutBuffer+0x308>
    		ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, 0);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	695b      	ldr	r3, [r3, #20]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d058      	beq.n	800c66e <aiPrintLayoutBuffer+0x12e>
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	695b      	ldr	r3, [r3, #20]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	f003 0301 	and.w	r3, r3, #1
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d051      	beq.n	800c66e <aiPrintLayoutBuffer+0x12e>
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	695b      	ldr	r3, [r3, #20]
 800c5ce:	685b      	ldr	r3, [r3, #4]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d04c      	beq.n	800c66e <aiPrintLayoutBuffer+0x12e>
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	695b      	ldr	r3, [r3, #20]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d045      	beq.n	800c668 <aiPrintLayoutBuffer+0x128>
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	695b      	ldr	r3, [r3, #20]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	f003 0301 	and.w	r3, r3, #1
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d03e      	beq.n	800c668 <aiPrintLayoutBuffer+0x128>
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	695b      	ldr	r3, [r3, #20]
 800c5ee:	685b      	ldr	r3, [r3, #4]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d039      	beq.n	800c668 <aiPrintLayoutBuffer+0x128>
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	695b      	ldr	r3, [r3, #20]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d00a      	beq.n	800c612 <aiPrintLayoutBuffer+0xd2>
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	695b      	ldr	r3, [r3, #20]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	f003 0301 	and.w	r3, r3, #1
 800c606:	2b00      	cmp	r3, #0
 800c608:	d003      	beq.n	800c612 <aiPrintLayoutBuffer+0xd2>
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	695b      	ldr	r3, [r3, #20]
 800c60e:	685b      	ldr	r3, [r3, #4]
 800c610:	e000      	b.n	800c614 <aiPrintLayoutBuffer+0xd4>
 800c612:	2300      	movs	r3, #0
 800c614:	685b      	ldr	r3, [r3, #4]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d026      	beq.n	800c668 <aiPrintLayoutBuffer+0x128>
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	695b      	ldr	r3, [r3, #20]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d00a      	beq.n	800c638 <aiPrintLayoutBuffer+0xf8>
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	695b      	ldr	r3, [r3, #20]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	f003 0301 	and.w	r3, r3, #1
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d003      	beq.n	800c638 <aiPrintLayoutBuffer+0xf8>
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	695b      	ldr	r3, [r3, #20]
 800c634:	685b      	ldr	r3, [r3, #4]
 800c636:	e000      	b.n	800c63a <aiPrintLayoutBuffer+0xfa>
 800c638:	2300      	movs	r3, #0
 800c63a:	885b      	ldrh	r3, [r3, #2]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d013      	beq.n	800c668 <aiPrintLayoutBuffer+0x128>
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	695b      	ldr	r3, [r3, #20]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d00a      	beq.n	800c65e <aiPrintLayoutBuffer+0x11e>
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	695b      	ldr	r3, [r3, #20]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	f003 0301 	and.w	r3, r3, #1
 800c652:	2b00      	cmp	r3, #0
 800c654:	d003      	beq.n	800c65e <aiPrintLayoutBuffer+0x11e>
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	695b      	ldr	r3, [r3, #20]
 800c65a:	685b      	ldr	r3, [r3, #4]
 800c65c:	e000      	b.n	800c660 <aiPrintLayoutBuffer+0x120>
 800c65e:	2300      	movs	r3, #0
 800c660:	685b      	ldr	r3, [r3, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	e004      	b.n	800c672 <aiPrintLayoutBuffer+0x132>
 800c668:	f04f 0300 	mov.w	r3, #0
 800c66c:	e001      	b.n	800c672 <aiPrintLayoutBuffer+0x132>
 800c66e:	f04f 0300 	mov.w	r3, #0
 800c672:	61bb      	str	r3, [r7, #24]
    		int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, 0);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	695b      	ldr	r3, [r3, #20]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	f000 80d6 	beq.w	800c82a <aiPrintLayoutBuffer+0x2ea>
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	695b      	ldr	r3, [r3, #20]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	f003 0301 	and.w	r3, r3, #1
 800c688:	2b00      	cmp	r3, #0
 800c68a:	f000 80ce 	beq.w	800c82a <aiPrintLayoutBuffer+0x2ea>
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	695b      	ldr	r3, [r3, #20]
 800c692:	685b      	ldr	r3, [r3, #4]
 800c694:	2b00      	cmp	r3, #0
 800c696:	f000 80c8 	beq.w	800c82a <aiPrintLayoutBuffer+0x2ea>
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	695b      	ldr	r3, [r3, #20]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d06c      	beq.n	800c77c <aiPrintLayoutBuffer+0x23c>
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	695b      	ldr	r3, [r3, #20]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	f003 0301 	and.w	r3, r3, #1
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d065      	beq.n	800c77c <aiPrintLayoutBuffer+0x23c>
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	695b      	ldr	r3, [r3, #20]
 800c6b4:	685b      	ldr	r3, [r3, #4]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d060      	beq.n	800c77c <aiPrintLayoutBuffer+0x23c>
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	695b      	ldr	r3, [r3, #20]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d00a      	beq.n	800c6d8 <aiPrintLayoutBuffer+0x198>
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	695b      	ldr	r3, [r3, #20]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	f003 0301 	and.w	r3, r3, #1
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d003      	beq.n	800c6d8 <aiPrintLayoutBuffer+0x198>
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	695b      	ldr	r3, [r3, #20]
 800c6d4:	685b      	ldr	r3, [r3, #4]
 800c6d6:	e000      	b.n	800c6da <aiPrintLayoutBuffer+0x19a>
 800c6d8:	2300      	movs	r3, #0
 800c6da:	881b      	ldrh	r3, [r3, #0]
 800c6dc:	f003 0302 	and.w	r3, r3, #2
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d04b      	beq.n	800c77c <aiPrintLayoutBuffer+0x23c>
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	695b      	ldr	r3, [r3, #20]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d045      	beq.n	800c778 <aiPrintLayoutBuffer+0x238>
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	695b      	ldr	r3, [r3, #20]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	f003 0301 	and.w	r3, r3, #1
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d03e      	beq.n	800c778 <aiPrintLayoutBuffer+0x238>
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	695b      	ldr	r3, [r3, #20]
 800c6fe:	685b      	ldr	r3, [r3, #4]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d039      	beq.n	800c778 <aiPrintLayoutBuffer+0x238>
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	695b      	ldr	r3, [r3, #20]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d00a      	beq.n	800c722 <aiPrintLayoutBuffer+0x1e2>
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	695b      	ldr	r3, [r3, #20]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	f003 0301 	and.w	r3, r3, #1
 800c716:	2b00      	cmp	r3, #0
 800c718:	d003      	beq.n	800c722 <aiPrintLayoutBuffer+0x1e2>
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	695b      	ldr	r3, [r3, #20]
 800c71e:	685b      	ldr	r3, [r3, #4]
 800c720:	e000      	b.n	800c724 <aiPrintLayoutBuffer+0x1e4>
 800c722:	2300      	movs	r3, #0
 800c724:	685b      	ldr	r3, [r3, #4]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d026      	beq.n	800c778 <aiPrintLayoutBuffer+0x238>
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	695b      	ldr	r3, [r3, #20]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d00a      	beq.n	800c748 <aiPrintLayoutBuffer+0x208>
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	695b      	ldr	r3, [r3, #20]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	f003 0301 	and.w	r3, r3, #1
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d003      	beq.n	800c748 <aiPrintLayoutBuffer+0x208>
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	695b      	ldr	r3, [r3, #20]
 800c744:	685b      	ldr	r3, [r3, #4]
 800c746:	e000      	b.n	800c74a <aiPrintLayoutBuffer+0x20a>
 800c748:	2300      	movs	r3, #0
 800c74a:	885b      	ldrh	r3, [r3, #2]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d013      	beq.n	800c778 <aiPrintLayoutBuffer+0x238>
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	695b      	ldr	r3, [r3, #20]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d00a      	beq.n	800c76e <aiPrintLayoutBuffer+0x22e>
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	695b      	ldr	r3, [r3, #20]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	f003 0301 	and.w	r3, r3, #1
 800c762:	2b00      	cmp	r3, #0
 800c764:	d003      	beq.n	800c76e <aiPrintLayoutBuffer+0x22e>
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	695b      	ldr	r3, [r3, #20]
 800c76a:	685b      	ldr	r3, [r3, #4]
 800c76c:	e000      	b.n	800c770 <aiPrintLayoutBuffer+0x230>
 800c76e:	2300      	movs	r3, #0
 800c770:	685b      	ldr	r3, [r3, #4]
 800c772:	685b      	ldr	r3, [r3, #4]
 800c774:	781b      	ldrb	r3, [r3, #0]
 800c776:	e057      	b.n	800c828 <aiPrintLayoutBuffer+0x2e8>
 800c778:	2300      	movs	r3, #0
 800c77a:	e055      	b.n	800c828 <aiPrintLayoutBuffer+0x2e8>
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	695b      	ldr	r3, [r3, #20]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d04f      	beq.n	800c824 <aiPrintLayoutBuffer+0x2e4>
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	695b      	ldr	r3, [r3, #20]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	f003 0301 	and.w	r3, r3, #1
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d048      	beq.n	800c824 <aiPrintLayoutBuffer+0x2e4>
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	695b      	ldr	r3, [r3, #20]
 800c796:	685b      	ldr	r3, [r3, #4]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d043      	beq.n	800c824 <aiPrintLayoutBuffer+0x2e4>
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	695b      	ldr	r3, [r3, #20]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d013      	beq.n	800c7cc <aiPrintLayoutBuffer+0x28c>
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	695b      	ldr	r3, [r3, #20]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	f003 0301 	and.w	r3, r3, #1
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d00c      	beq.n	800c7cc <aiPrintLayoutBuffer+0x28c>
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	695b      	ldr	r3, [r3, #20]
 800c7b6:	685b      	ldr	r3, [r3, #4]
 800c7b8:	e009      	b.n	800c7ce <aiPrintLayoutBuffer+0x28e>
 800c7ba:	bf00      	nop
 800c7bc:	08015490 	.word	0x08015490
 800c7c0:	08015498 	.word	0x08015498
 800c7c4:	0801549c 	.word	0x0801549c
 800c7c8:	080154a0 	.word	0x080154a0
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	685b      	ldr	r3, [r3, #4]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d027      	beq.n	800c824 <aiPrintLayoutBuffer+0x2e4>
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	695b      	ldr	r3, [r3, #20]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d00a      	beq.n	800c7f2 <aiPrintLayoutBuffer+0x2b2>
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	695b      	ldr	r3, [r3, #20]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	f003 0301 	and.w	r3, r3, #1
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d003      	beq.n	800c7f2 <aiPrintLayoutBuffer+0x2b2>
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	695b      	ldr	r3, [r3, #20]
 800c7ee:	685b      	ldr	r3, [r3, #4]
 800c7f0:	e000      	b.n	800c7f4 <aiPrintLayoutBuffer+0x2b4>
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	885b      	ldrh	r3, [r3, #2]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d014      	beq.n	800c824 <aiPrintLayoutBuffer+0x2e4>
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	695b      	ldr	r3, [r3, #20]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d00a      	beq.n	800c818 <aiPrintLayoutBuffer+0x2d8>
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	695b      	ldr	r3, [r3, #20]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	f003 0301 	and.w	r3, r3, #1
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d003      	beq.n	800c818 <aiPrintLayoutBuffer+0x2d8>
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	695b      	ldr	r3, [r3, #20]
 800c814:	685b      	ldr	r3, [r3, #4]
 800c816:	e000      	b.n	800c81a <aiPrintLayoutBuffer+0x2da>
 800c818:	2300      	movs	r3, #0
 800c81a:	685b      	ldr	r3, [r3, #4]
 800c81c:	685b      	ldr	r3, [r3, #4]
 800c81e:	f993 3000 	ldrsb.w	r3, [r3]
 800c822:	e001      	b.n	800c828 <aiPrintLayoutBuffer+0x2e8>
 800c824:	2300      	movs	r3, #0
 800c826:	e001      	b.n	800c82c <aiPrintLayoutBuffer+0x2ec>
 800c828:	e000      	b.n	800c82c <aiPrintLayoutBuffer+0x2ec>
 800c82a:	2300      	movs	r3, #0
 800c82c:	617b      	str	r3, [r7, #20]
    		printf(" scale=%f, zero=%d,", (float)scale, (int)zero_point);
 800c82e:	69b8      	ldr	r0, [r7, #24]
 800c830:	f7fb f81a 	bl	8007868 <__aeabi_f2d>
 800c834:	460a      	mov	r2, r1
 800c836:	4601      	mov	r1, r0
 800c838:	697b      	ldr	r3, [r7, #20]
 800c83a:	9300      	str	r3, [sp, #0]
 800c83c:	4613      	mov	r3, r2
 800c83e:	460a      	mov	r2, r1
 800c840:	4832      	ldr	r0, [pc, #200]	; (800c90c <aiPrintLayoutBuffer+0x3cc>)
 800c842:	f004 fbb7 	bl	8010fb4 <iprintf>
        if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 800c846:	e02d      	b.n	800c8a4 <aiPrintLayoutBuffer+0x364>
    	} else {
    		printf("Q%d.%d,",
    				(int)AI_BUFFER_FMT_GET_BITS(buffer->format)
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	11db      	asrs	r3, r3, #7
 800c84e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
					- ((int)AI_BUFFER_FMT_GET_FBITS(buffer->format) +
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	b2db      	uxtb	r3, r3
 800c858:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c85c:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
					(int)AI_BUFFER_FMT_GET_SIGN(buffer->format)),
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	15db      	asrs	r3, r3, #23
 800c866:	f003 0301 	and.w	r3, r3, #1
					- ((int)AI_BUFFER_FMT_GET_FBITS(buffer->format) +
 800c86a:	440b      	add	r3, r1
    		printf("Q%d.%d,",
 800c86c:	1ad1      	subs	r1, r2, r3
					AI_BUFFER_FMT_GET_FBITS(buffer->format));
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	b2db      	uxtb	r3, r3
 800c874:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    		printf("Q%d.%d,",
 800c878:	3b40      	subs	r3, #64	; 0x40
 800c87a:	461a      	mov	r2, r3
 800c87c:	4824      	ldr	r0, [pc, #144]	; (800c910 <aiPrintLayoutBuffer+0x3d0>)
 800c87e:	f004 fb99 	bl	8010fb4 <iprintf>
 800c882:	e00f      	b.n	800c8a4 <aiPrintLayoutBuffer+0x364>
    	}
    }
    else if (type_id == AI_BUFFER_FMT_TYPE_FLOAT)
 800c884:	69fb      	ldr	r3, [r7, #28]
 800c886:	2b01      	cmp	r3, #1
 800c888:	d109      	bne.n	800c89e <aiPrintLayoutBuffer+0x35e>
        printf(" float%d,",
                (int)AI_BUFFER_FMT_GET_BITS(buffer->format));
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	11db      	asrs	r3, r3, #7
        printf(" float%d,",
 800c890:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c894:	4619      	mov	r1, r3
 800c896:	481f      	ldr	r0, [pc, #124]	; (800c914 <aiPrintLayoutBuffer+0x3d4>)
 800c898:	f004 fb8c 	bl	8010fb4 <iprintf>
 800c89c:	e002      	b.n	800c8a4 <aiPrintLayoutBuffer+0x364>
    else
        printf("NONE");
 800c89e:	481e      	ldr	r0, [pc, #120]	; (800c918 <aiPrintLayoutBuffer+0x3d8>)
 800c8a0:	f004 fb88 	bl	8010fb4 <iprintf>
    printf(" %ld bytes, shape=(%d,%d,%ld)",
    		AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer), buffer->format),
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	891b      	ldrh	r3, [r3, #8]
 800c8a8:	461a      	mov	r2, r3
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	88db      	ldrh	r3, [r3, #6]
 800c8ae:	fb03 f302 	mul.w	r3, r3, r2
 800c8b2:	461a      	mov	r2, r3
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	68db      	ldr	r3, [r3, #12]
 800c8b8:	fb03 f302 	mul.w	r3, r3, r2
 800c8bc:	687a      	ldr	r2, [r7, #4]
 800c8be:	6812      	ldr	r2, [r2, #0]
 800c8c0:	11d2      	asrs	r2, r2, #7
 800c8c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c8c6:	fb02 f303 	mul.w	r3, r2, r3
 800c8ca:	3304      	adds	r3, #4
    printf(" %ld bytes, shape=(%d,%d,%ld)",
 800c8cc:	08d9      	lsrs	r1, r3, #3
			buffer->height, buffer->width, buffer->channels);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	88db      	ldrh	r3, [r3, #6]
    printf(" %ld bytes, shape=(%d,%d,%ld)",
 800c8d2:	461a      	mov	r2, r3
			buffer->height, buffer->width, buffer->channels);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	891b      	ldrh	r3, [r3, #8]
    printf(" %ld bytes, shape=(%d,%d,%ld)",
 800c8d8:	4618      	mov	r0, r3
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	68db      	ldr	r3, [r3, #12]
 800c8de:	9300      	str	r3, [sp, #0]
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	480e      	ldr	r0, [pc, #56]	; (800c91c <aiPrintLayoutBuffer+0x3dc>)
 800c8e4:	f004 fb66 	bl	8010fb4 <iprintf>
    if (buffer->data)
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	691b      	ldr	r3, [r3, #16]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d006      	beq.n	800c8fe <aiPrintLayoutBuffer+0x3be>
    	printf(" (@0x%08x)\r\n", (int)buffer->data);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	691b      	ldr	r3, [r3, #16]
 800c8f4:	4619      	mov	r1, r3
 800c8f6:	480a      	ldr	r0, [pc, #40]	; (800c920 <aiPrintLayoutBuffer+0x3e0>)
 800c8f8:	f004 fb5c 	bl	8010fb4 <iprintf>
    else
    	printf("\r\n");
}
 800c8fc:	e002      	b.n	800c904 <aiPrintLayoutBuffer+0x3c4>
    	printf("\r\n");
 800c8fe:	4809      	ldr	r0, [pc, #36]	; (800c924 <aiPrintLayoutBuffer+0x3e4>)
 800c900:	f004 fbcc 	bl	801109c <puts>
}
 800c904:	bf00      	nop
 800c906:	3720      	adds	r7, #32
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}
 800c90c:	080154a8 	.word	0x080154a8
 800c910:	080154bc 	.word	0x080154bc
 800c914:	080154c4 	.word	0x080154c4
 800c918:	080154d0 	.word	0x080154d0
 800c91c:	080154d8 	.word	0x080154d8
 800c920:	080154f8 	.word	0x080154f8
 800c924:	08015508 	.word	0x08015508

0800c928 <aiPrintNetworkInfo>:

void aiPrintNetworkInfo(const ai_network_report* report)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b086      	sub	sp, #24
 800c92c:	af02      	add	r7, sp, #8
 800c92e:	6078      	str	r0, [r7, #4]
    int i;
    printf("Network configuration...\r\n");
 800c930:	484d      	ldr	r0, [pc, #308]	; (800ca68 <aiPrintNetworkInfo+0x140>)
 800c932:	f004 fbb3 	bl	801109c <puts>
    printf(" Model name         : %s\r\n", report->model_name);
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	4619      	mov	r1, r3
 800c93c:	484b      	ldr	r0, [pc, #300]	; (800ca6c <aiPrintNetworkInfo+0x144>)
 800c93e:	f004 fb39 	bl	8010fb4 <iprintf>
    printf(" Model signature    : %s\r\n", report->model_signature);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	685b      	ldr	r3, [r3, #4]
 800c946:	4619      	mov	r1, r3
 800c948:	4849      	ldr	r0, [pc, #292]	; (800ca70 <aiPrintNetworkInfo+0x148>)
 800c94a:	f004 fb33 	bl	8010fb4 <iprintf>
    printf(" Model datetime     : %s\r\n", report->model_datetime);
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	689b      	ldr	r3, [r3, #8]
 800c952:	4619      	mov	r1, r3
 800c954:	4847      	ldr	r0, [pc, #284]	; (800ca74 <aiPrintNetworkInfo+0x14c>)
 800c956:	f004 fb2d 	bl	8010fb4 <iprintf>
    printf(" Compile datetime   : %s\r\n", report->compile_datetime);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	68db      	ldr	r3, [r3, #12]
 800c95e:	4619      	mov	r1, r3
 800c960:	4845      	ldr	r0, [pc, #276]	; (800ca78 <aiPrintNetworkInfo+0x150>)
 800c962:	f004 fb27 	bl	8010fb4 <iprintf>
    printf(" Runtime revision   : %s (%d.%d.%d)\r\n", report->runtime_revision,
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	6919      	ldr	r1, [r3, #16]
            report->runtime_version.major,
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	7d1b      	ldrb	r3, [r3, #20]
    printf(" Runtime revision   : %s (%d.%d.%d)\r\n", report->runtime_revision,
 800c96e:	461a      	mov	r2, r3
            report->runtime_version.minor,
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	7d5b      	ldrb	r3, [r3, #21]
    printf(" Runtime revision   : %s (%d.%d.%d)\r\n", report->runtime_revision,
 800c974:	4618      	mov	r0, r3
            report->runtime_version.micro);
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	7d9b      	ldrb	r3, [r3, #22]
    printf(" Runtime revision   : %s (%d.%d.%d)\r\n", report->runtime_revision,
 800c97a:	9300      	str	r3, [sp, #0]
 800c97c:	4603      	mov	r3, r0
 800c97e:	483f      	ldr	r0, [pc, #252]	; (800ca7c <aiPrintNetworkInfo+0x154>)
 800c980:	f004 fb18 	bl	8010fb4 <iprintf>
    printf(" Tool revision      : %s (%d.%d.%d)\r\n", report->tool_revision,
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	6999      	ldr	r1, [r3, #24]
            report->tool_version.major,
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	7f1b      	ldrb	r3, [r3, #28]
    printf(" Tool revision      : %s (%d.%d.%d)\r\n", report->tool_revision,
 800c98c:	461a      	mov	r2, r3
            report->tool_version.minor,
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	7f5b      	ldrb	r3, [r3, #29]
    printf(" Tool revision      : %s (%d.%d.%d)\r\n", report->tool_revision,
 800c992:	4618      	mov	r0, r3
            report->tool_version.micro);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	7f9b      	ldrb	r3, [r3, #30]
    printf(" Tool revision      : %s (%d.%d.%d)\r\n", report->tool_revision,
 800c998:	9300      	str	r3, [sp, #0]
 800c99a:	4603      	mov	r3, r0
 800c99c:	4838      	ldr	r0, [pc, #224]	; (800ca80 <aiPrintNetworkInfo+0x158>)
 800c99e:	f004 fb09 	bl	8010fb4 <iprintf>
    printf("Network info...\r\n");
 800c9a2:	4838      	ldr	r0, [pc, #224]	; (800ca84 <aiPrintNetworkInfo+0x15c>)
 800c9a4:	f004 fb7a 	bl	801109c <puts>
    printf("  nodes             : %ld\r\n", report->n_nodes);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9ac:	4619      	mov	r1, r3
 800c9ae:	4836      	ldr	r0, [pc, #216]	; (800ca88 <aiPrintNetworkInfo+0x160>)
 800c9b0:	f004 fb00 	bl	8010fb4 <iprintf>
    printf("  complexity        : %ld MACC\r\n", report->n_macc);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9b8:	4619      	mov	r1, r3
 800c9ba:	4834      	ldr	r0, [pc, #208]	; (800ca8c <aiPrintNetworkInfo+0x164>)
 800c9bc:	f004 fafa 	bl	8010fb4 <iprintf>
    printf("  activation        : %ld bytes\r\n",
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	333c      	adds	r3, #60	; 0x3c
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f7ff fda5 	bl	800c514 <aiBufferSize>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	4619      	mov	r1, r3
 800c9ce:	4830      	ldr	r0, [pc, #192]	; (800ca90 <aiPrintNetworkInfo+0x168>)
 800c9d0:	f004 faf0 	bl	8010fb4 <iprintf>
            aiBufferSize(&report->activations));
    printf("  params            : %ld bytes\r\n",
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	3354      	adds	r3, #84	; 0x54
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f7ff fd9b 	bl	800c514 <aiBufferSize>
 800c9de:	4603      	mov	r3, r0
 800c9e0:	4619      	mov	r1, r3
 800c9e2:	482c      	ldr	r0, [pc, #176]	; (800ca94 <aiPrintNetworkInfo+0x16c>)
 800c9e4:	f004 fae6 	bl	8010fb4 <iprintf>
            aiBufferSize(&report->params));
    printf("  inputs/outputs    : %u/%u\r\n",
            report->n_inputs, report->n_outputs);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    printf("  inputs/outputs    : %u/%u\r\n",
 800c9ec:	4619      	mov	r1, r3
            report->n_inputs, report->n_outputs);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    printf("  inputs/outputs    : %u/%u\r\n",
 800c9f2:	461a      	mov	r2, r3
 800c9f4:	4828      	ldr	r0, [pc, #160]	; (800ca98 <aiPrintNetworkInfo+0x170>)
 800c9f6:	f004 fadd 	bl	8010fb4 <iprintf>
    for (i=0; i<report->n_inputs; i++)
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	60fb      	str	r3, [r7, #12]
 800c9fe:	e00f      	b.n	800ca20 <aiPrintNetworkInfo+0xf8>
        aiPrintLayoutBuffer("   I", i, &report->inputs[i]);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800ca04:	68fa      	ldr	r2, [r7, #12]
 800ca06:	4613      	mov	r3, r2
 800ca08:	005b      	lsls	r3, r3, #1
 800ca0a:	4413      	add	r3, r2
 800ca0c:	00db      	lsls	r3, r3, #3
 800ca0e:	440b      	add	r3, r1
 800ca10:	461a      	mov	r2, r3
 800ca12:	68f9      	ldr	r1, [r7, #12]
 800ca14:	4821      	ldr	r0, [pc, #132]	; (800ca9c <aiPrintNetworkInfo+0x174>)
 800ca16:	f7ff fd93 	bl	800c540 <aiPrintLayoutBuffer>
    for (i=0; i<report->n_inputs; i++)
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	3301      	adds	r3, #1
 800ca1e:	60fb      	str	r3, [r7, #12]
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800ca24:	461a      	mov	r2, r3
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	4293      	cmp	r3, r2
 800ca2a:	dbe9      	blt.n	800ca00 <aiPrintNetworkInfo+0xd8>
    for (i=0; i<report->n_outputs; i++)
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	60fb      	str	r3, [r7, #12]
 800ca30:	e00f      	b.n	800ca52 <aiPrintNetworkInfo+0x12a>
        aiPrintLayoutBuffer("   O", i, &report->outputs[i]);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800ca36:	68fa      	ldr	r2, [r7, #12]
 800ca38:	4613      	mov	r3, r2
 800ca3a:	005b      	lsls	r3, r3, #1
 800ca3c:	4413      	add	r3, r2
 800ca3e:	00db      	lsls	r3, r3, #3
 800ca40:	440b      	add	r3, r1
 800ca42:	461a      	mov	r2, r3
 800ca44:	68f9      	ldr	r1, [r7, #12]
 800ca46:	4816      	ldr	r0, [pc, #88]	; (800caa0 <aiPrintNetworkInfo+0x178>)
 800ca48:	f7ff fd7a 	bl	800c540 <aiPrintLayoutBuffer>
    for (i=0; i<report->n_outputs; i++)
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	3301      	adds	r3, #1
 800ca50:	60fb      	str	r3, [r7, #12]
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ca56:	461a      	mov	r2, r3
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	4293      	cmp	r3, r2
 800ca5c:	dbe9      	blt.n	800ca32 <aiPrintNetworkInfo+0x10a>
}
 800ca5e:	bf00      	nop
 800ca60:	3710      	adds	r7, #16
 800ca62:	46bd      	mov	sp, r7
 800ca64:	bd80      	pop	{r7, pc}
 800ca66:	bf00      	nop
 800ca68:	0801550c 	.word	0x0801550c
 800ca6c:	08015528 	.word	0x08015528
 800ca70:	08015544 	.word	0x08015544
 800ca74:	08015560 	.word	0x08015560
 800ca78:	0801557c 	.word	0x0801557c
 800ca7c:	08015598 	.word	0x08015598
 800ca80:	080155c0 	.word	0x080155c0
 800ca84:	080155e8 	.word	0x080155e8
 800ca88:	080155fc 	.word	0x080155fc
 800ca8c:	08015618 	.word	0x08015618
 800ca90:	0801563c 	.word	0x0801563c
 800ca94:	08015660 	.word	0x08015660
 800ca98:	08015684 	.word	0x08015684
 800ca9c:	080156a4 	.word	0x080156a4
 800caa0:	080156ac 	.word	0x080156ac

0800caa4 <aiTestHeader>:
 * Test-related functions
 * -----------------------------------------------------------------------------
 */

void aiTestHeader(const char* tname, int major, int minor)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b084      	sub	sp, #16
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	60f8      	str	r0, [r7, #12]
 800caac:	60b9      	str	r1, [r7, #8]
 800caae:	607a      	str	r2, [r7, #4]
    printf("\r\n#\r\n");
 800cab0:	480a      	ldr	r0, [pc, #40]	; (800cadc <aiTestHeader+0x38>)
 800cab2:	f004 faf3 	bl	801109c <puts>
    printf("# %s %d.%d\r\n", tname , major, minor);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	68ba      	ldr	r2, [r7, #8]
 800caba:	68f9      	ldr	r1, [r7, #12]
 800cabc:	4808      	ldr	r0, [pc, #32]	; (800cae0 <aiTestHeader+0x3c>)
 800cabe:	f004 fa79 	bl	8010fb4 <iprintf>
    printf("#\r\n");
 800cac2:	4808      	ldr	r0, [pc, #32]	; (800cae4 <aiTestHeader+0x40>)
 800cac4:	f004 faea 	bl	801109c <puts>

#if defined(__GNUC__)
    printf("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 800cac8:	2301      	movs	r3, #1
 800caca:	2203      	movs	r2, #3
 800cacc:	2107      	movs	r1, #7
 800cace:	4806      	ldr	r0, [pc, #24]	; (800cae8 <aiTestHeader+0x44>)
 800cad0:	f004 fa70 	bl	8010fb4 <iprintf>
            __BUILD_NUMBER__
    );
#elif defined (__CC_ARM)
    printf("Compiled with MDK-ARM Keil %d\r\n", __ARMCC_VERSION);
#endif
}
 800cad4:	bf00      	nop
 800cad6:	3710      	adds	r7, #16
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd80      	pop	{r7, pc}
 800cadc:	080156b4 	.word	0x080156b4
 800cae0:	080156bc 	.word	0x080156bc
 800cae4:	080156cc 	.word	0x080156cc
 800cae8:	080156d0 	.word	0x080156d0

0800caec <write_packet>:
static struct o_packet {
    uint8_t pw;
    uint8_t payload[_PACKET_PAYLOAD_IN_SIZE];
} o_packet;

static bool write_packet(void) {
 800caec:	b580      	push	{r7, lr}
 800caee:	b082      	sub	sp, #8
 800caf0:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef status;

    status = HAL_UART_Transmit(&UartHandle, (uint8_t *)&o_packet,
 800caf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800caf6:	2221      	movs	r2, #33	; 0x21
 800caf8:	4907      	ldr	r1, [pc, #28]	; (800cb18 <write_packet+0x2c>)
 800cafa:	4808      	ldr	r0, [pc, #32]	; (800cb1c <write_packet+0x30>)
 800cafc:	f7fd fe04 	bl	800a708 <HAL_UART_Transmit>
 800cb00:	4603      	mov	r3, r0
 800cb02:	71fb      	strb	r3, [r7, #7]
            _PACKET_PAYLOAD_IN_SIZE + 1,
            HAL_MAX_DELAY);

    return (status == HAL_OK);
 800cb04:	79fb      	ldrb	r3, [r7, #7]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	bf0c      	ite	eq
 800cb0a:	2301      	moveq	r3, #1
 800cb0c:	2300      	movne	r3, #0
 800cb0e:	b2db      	uxtb	r3, r3
}
 800cb10:	4618      	mov	r0, r3
 800cb12:	3708      	adds	r7, #8
 800cb14:	46bd      	mov	sp, r7
 800cb16:	bd80      	pop	{r7, pc}
 800cb18:	20000cfc 	.word	0x20000cfc
 800cb1c:	200121d8 	.word	0x200121d8

0800cb20 <ioFlushWrite>:

void ioFlushWrite(void)
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	af00      	add	r7, sp, #0
    o_packet.pw |= (1 << 7); /* Indicate last packet */
 800cb24:	4b06      	ldr	r3, [pc, #24]	; (800cb40 <ioFlushWrite+0x20>)
 800cb26:	781b      	ldrb	r3, [r3, #0]
 800cb28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cb2c:	b2da      	uxtb	r2, r3
 800cb2e:	4b04      	ldr	r3, [pc, #16]	; (800cb40 <ioFlushWrite+0x20>)
 800cb30:	701a      	strb	r2, [r3, #0]
    write_packet();
 800cb32:	f7ff ffdb 	bl	800caec <write_packet>
    o_packet.pw = 0;
 800cb36:	4b02      	ldr	r3, [pc, #8]	; (800cb40 <ioFlushWrite+0x20>)
 800cb38:	2200      	movs	r2, #0
 800cb3a:	701a      	strb	r2, [r3, #0]
}
 800cb3c:	bf00      	nop
 800cb3e:	bd80      	pop	{r7, pc}
 800cb40:	20000cfc 	.word	0x20000cfc

0800cb44 <write_callback>:

static bool write_callback(pb_ostream_t *stream, const uint8_t *buf,
        size_t count)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b086      	sub	sp, #24
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	60f8      	str	r0, [r7, #12]
 800cb4c:	60b9      	str	r1, [r7, #8]
 800cb4e:	607a      	str	r2, [r7, #4]
    bool res = true;
 800cb50:	2301      	movs	r3, #1
 800cb52:	75fb      	strb	r3, [r7, #23]
    uint8_t *pr = (uint8_t *)buf;
 800cb54:	68bb      	ldr	r3, [r7, #8]
 800cb56:	613b      	str	r3, [r7, #16]

    UNUSED(stream);

    while (count) {
 800cb58:	e025      	b.n	800cba6 <write_callback+0x62>
        for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
            o_packet.payload[o_packet.pw] = *pr;
 800cb5a:	4b17      	ldr	r3, [pc, #92]	; (800cbb8 <write_callback+0x74>)
 800cb5c:	781b      	ldrb	r3, [r3, #0]
 800cb5e:	4619      	mov	r1, r3
 800cb60:	693b      	ldr	r3, [r7, #16]
 800cb62:	781a      	ldrb	r2, [r3, #0]
 800cb64:	4b14      	ldr	r3, [pc, #80]	; (800cbb8 <write_callback+0x74>)
 800cb66:	440b      	add	r3, r1
 800cb68:	705a      	strb	r2, [r3, #1]
            pr++;
 800cb6a:	693b      	ldr	r3, [r7, #16]
 800cb6c:	3301      	adds	r3, #1
 800cb6e:	613b      	str	r3, [r7, #16]
            count--;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	3b01      	subs	r3, #1
 800cb74:	607b      	str	r3, [r7, #4]
        for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 800cb76:	4b10      	ldr	r3, [pc, #64]	; (800cbb8 <write_callback+0x74>)
 800cb78:	781b      	ldrb	r3, [r3, #0]
 800cb7a:	3301      	adds	r3, #1
 800cb7c:	b2da      	uxtb	r2, r3
 800cb7e:	4b0e      	ldr	r3, [pc, #56]	; (800cbb8 <write_callback+0x74>)
 800cb80:	701a      	strb	r2, [r3, #0]
 800cb82:	4b0d      	ldr	r3, [pc, #52]	; (800cbb8 <write_callback+0x74>)
 800cb84:	781b      	ldrb	r3, [r3, #0]
 800cb86:	2b1f      	cmp	r3, #31
 800cb88:	d802      	bhi.n	800cb90 <write_callback+0x4c>
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d1e4      	bne.n	800cb5a <write_callback+0x16>
        }
        if (o_packet.pw == _PACKET_PAYLOAD_IN_SIZE) {
 800cb90:	4b09      	ldr	r3, [pc, #36]	; (800cbb8 <write_callback+0x74>)
 800cb92:	781b      	ldrb	r3, [r3, #0]
 800cb94:	2b20      	cmp	r3, #32
 800cb96:	d106      	bne.n	800cba6 <write_callback+0x62>
                res = write_packet();
 800cb98:	f7ff ffa8 	bl	800caec <write_packet>
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	75fb      	strb	r3, [r7, #23]
                o_packet.pw = 0;
 800cba0:	4b05      	ldr	r3, [pc, #20]	; (800cbb8 <write_callback+0x74>)
 800cba2:	2200      	movs	r2, #0
 800cba4:	701a      	strb	r2, [r3, #0]
    while (count) {
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d1ea      	bne.n	800cb82 <write_callback+0x3e>
        }
    }
    return res;
 800cbac:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbae:	4618      	mov	r0, r3
 800cbb0:	3718      	adds	r7, #24
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd80      	pop	{r7, pc}
 800cbb6:	bf00      	nop
 800cbb8:	20000cfc 	.word	0x20000cfc

0800cbbc <read_packet>:
    uint8_t payload[_PACKET_PAYLOAD_OUT_SIZE];
} i_packet;

static int i_ridx = 0;

static bool read_packet(void) {
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b082      	sub	sp, #8
 800cbc0:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef status;

    status = HAL_UART_Receive(&UartHandle, (uint8_t *)&i_packet,
 800cbc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cbc6:	2221      	movs	r2, #33	; 0x21
 800cbc8:	4909      	ldr	r1, [pc, #36]	; (800cbf0 <read_packet+0x34>)
 800cbca:	480a      	ldr	r0, [pc, #40]	; (800cbf4 <read_packet+0x38>)
 800cbcc:	f7fd fe2f 	bl	800a82e <HAL_UART_Receive>
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	71fb      	strb	r3, [r7, #7]
            _PACKET_PAYLOAD_OUT_SIZE + 1,
            HAL_MAX_DELAY);

    i_ridx = 0;
 800cbd4:	4b08      	ldr	r3, [pc, #32]	; (800cbf8 <read_packet+0x3c>)
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	601a      	str	r2, [r3, #0]

    return (status == HAL_OK);
 800cbda:	79fb      	ldrb	r3, [r7, #7]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	bf0c      	ite	eq
 800cbe0:	2301      	moveq	r3, #1
 800cbe2:	2300      	movne	r3, #0
 800cbe4:	b2db      	uxtb	r3, r3
}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	3708      	adds	r7, #8
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}
 800cbee:	bf00      	nop
 800cbf0:	20000d20 	.word	0x20000d20
 800cbf4:	200121d8 	.word	0x200121d8
 800cbf8:	20000d44 	.word	0x20000d44

0800cbfc <ioFlushRead>:

void ioFlushRead(void)
{
 800cbfc:	b480      	push	{r7}
 800cbfe:	af00      	add	r7, sp, #0
    i_packet.pr = 0xFF;
 800cc00:	4b05      	ldr	r3, [pc, #20]	; (800cc18 <ioFlushRead+0x1c>)
 800cc02:	22ff      	movs	r2, #255	; 0xff
 800cc04:	701a      	strb	r2, [r3, #0]
    i_ridx = 0;
 800cc06:	4b05      	ldr	r3, [pc, #20]	; (800cc1c <ioFlushRead+0x20>)
 800cc08:	2200      	movs	r2, #0
 800cc0a:	601a      	str	r2, [r3, #0]
}
 800cc0c:	bf00      	nop
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc14:	4770      	bx	lr
 800cc16:	bf00      	nop
 800cc18:	20000d20 	.word	0x20000d20
 800cc1c:	20000d44 	.word	0x20000d44

0800cc20 <read_callback>:

static bool read_callback(pb_istream_t *stream, uint8_t *buf, size_t count)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b088      	sub	sp, #32
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	60f8      	str	r0, [r7, #12]
 800cc28:	60b9      	str	r1, [r7, #8]
 800cc2a:	607a      	str	r2, [r7, #4]
    bool res = true;
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	77fb      	strb	r3, [r7, #31]
    uint8_t *pw = (uint8_t *)buf;
 800cc30:	68bb      	ldr	r3, [r7, #8]
 800cc32:	61bb      	str	r3, [r7, #24]

    UNUSED(stream);

    if (count == 0)
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d101      	bne.n	800cc3e <read_callback+0x1e>
        return true;
 800cc3a:	2301      	movs	r3, #1
 800cc3c:	e045      	b.n	800ccca <read_callback+0xaa>

    if (i_packet.pr == 0xFF)
 800cc3e:	4b25      	ldr	r3, [pc, #148]	; (800ccd4 <read_callback+0xb4>)
 800cc40:	781b      	ldrb	r3, [r3, #0]
 800cc42:	2bff      	cmp	r3, #255	; 0xff
 800cc44:	d103      	bne.n	800cc4e <read_callback+0x2e>
        res = read_packet();
 800cc46:	f7ff ffb9 	bl	800cbbc <read_packet>
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	77fb      	strb	r3, [r7, #31]

    if (res == false)
 800cc4e:	7ffb      	ldrb	r3, [r7, #31]
 800cc50:	f083 0301 	eor.w	r3, r3, #1
 800cc54:	b2db      	uxtb	r3, r3
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d033      	beq.n	800ccc2 <read_callback+0xa2>
        return res;
 800cc5a:	7ffb      	ldrb	r3, [r7, #31]
 800cc5c:	e035      	b.n	800ccca <read_callback+0xaa>

    while (count) {
        for (; i_packet.pr > 0 && count; i_packet.pr--) {
            *pw = i_packet.payload[i_ridx];
 800cc5e:	4b1e      	ldr	r3, [pc, #120]	; (800ccd8 <read_callback+0xb8>)
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	4a1c      	ldr	r2, [pc, #112]	; (800ccd4 <read_callback+0xb4>)
 800cc64:	4413      	add	r3, r2
 800cc66:	785a      	ldrb	r2, [r3, #1]
 800cc68:	69bb      	ldr	r3, [r7, #24]
 800cc6a:	701a      	strb	r2, [r3, #0]
            pw++;
 800cc6c:	69bb      	ldr	r3, [r7, #24]
 800cc6e:	3301      	adds	r3, #1
 800cc70:	61bb      	str	r3, [r7, #24]
            count--;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	3b01      	subs	r3, #1
 800cc76:	607b      	str	r3, [r7, #4]
            i_ridx++;
 800cc78:	4b17      	ldr	r3, [pc, #92]	; (800ccd8 <read_callback+0xb8>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	3301      	adds	r3, #1
 800cc7e:	4a16      	ldr	r2, [pc, #88]	; (800ccd8 <read_callback+0xb8>)
 800cc80:	6013      	str	r3, [r2, #0]
        for (; i_packet.pr > 0 && count; i_packet.pr--) {
 800cc82:	4b14      	ldr	r3, [pc, #80]	; (800ccd4 <read_callback+0xb4>)
 800cc84:	781b      	ldrb	r3, [r3, #0]
 800cc86:	3b01      	subs	r3, #1
 800cc88:	b2da      	uxtb	r2, r3
 800cc8a:	4b12      	ldr	r3, [pc, #72]	; (800ccd4 <read_callback+0xb4>)
 800cc8c:	701a      	strb	r2, [r3, #0]
 800cc8e:	4b11      	ldr	r3, [pc, #68]	; (800ccd4 <read_callback+0xb4>)
 800cc90:	781b      	ldrb	r3, [r3, #0]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d002      	beq.n	800cc9c <read_callback+0x7c>
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d1e0      	bne.n	800cc5e <read_callback+0x3e>
        }
        if (count && i_packet.pr == 0) {
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d00f      	beq.n	800ccc2 <read_callback+0xa2>
 800cca2:	4b0c      	ldr	r3, [pc, #48]	; (800ccd4 <read_callback+0xb4>)
 800cca4:	781b      	ldrb	r3, [r3, #0]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d10b      	bne.n	800ccc2 <read_callback+0xa2>
            uint8_t sync = 0xAA;
 800ccaa:	23aa      	movs	r3, #170	; 0xaa
 800ccac:	75fb      	strb	r3, [r7, #23]
            HAL_UART_Transmit(&UartHandle, &sync, 1,
 800ccae:	f107 0117 	add.w	r1, r7, #23
 800ccb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ccb6:	2201      	movs	r2, #1
 800ccb8:	4808      	ldr	r0, [pc, #32]	; (800ccdc <read_callback+0xbc>)
 800ccba:	f7fd fd25 	bl	800a708 <HAL_UART_Transmit>
                        HAL_MAX_DELAY);
            read_packet();
 800ccbe:	f7ff ff7d 	bl	800cbbc <read_packet>
    while (count) {
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d1e2      	bne.n	800cc8e <read_callback+0x6e>
        }
    }

    return res;
 800ccc8:	7ffb      	ldrb	r3, [r7, #31]
}
 800ccca:	4618      	mov	r0, r3
 800cccc:	3720      	adds	r7, #32
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	bd80      	pop	{r7, pc}
 800ccd2:	bf00      	nop
 800ccd4:	20000d20 	.word	0x20000d20
 800ccd8:	20000d44 	.word	0x20000d44
 800ccdc:	200121d8 	.word	0x200121d8

0800cce0 <pb_ostream_to_uart>:
}
#endif


pb_ostream_t pb_ostream_to_uart(int fd)
{
 800cce0:	b4b0      	push	{r4, r5, r7}
 800cce2:	b089      	sub	sp, #36	; 0x24
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
 800cce8:	6039      	str	r1, [r7, #0]
    pb_ostream_t stream = {&write_callback, (void*)(intptr_t)fd, SIZE_MAX, 0};
 800ccea:	f107 030c 	add.w	r3, r7, #12
 800ccee:	2200      	movs	r2, #0
 800ccf0:	601a      	str	r2, [r3, #0]
 800ccf2:	605a      	str	r2, [r3, #4]
 800ccf4:	609a      	str	r2, [r3, #8]
 800ccf6:	60da      	str	r2, [r3, #12]
 800ccf8:	611a      	str	r2, [r3, #16]
 800ccfa:	4b0a      	ldr	r3, [pc, #40]	; (800cd24 <pb_ostream_to_uart+0x44>)
 800ccfc:	60fb      	str	r3, [r7, #12]
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	613b      	str	r3, [r7, #16]
 800cd02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cd06:	617b      	str	r3, [r7, #20]
    return stream;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	461d      	mov	r5, r3
 800cd0c:	f107 040c 	add.w	r4, r7, #12
 800cd10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cd12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cd14:	6823      	ldr	r3, [r4, #0]
 800cd16:	602b      	str	r3, [r5, #0]
}
 800cd18:	6878      	ldr	r0, [r7, #4]
 800cd1a:	3724      	adds	r7, #36	; 0x24
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bcb0      	pop	{r4, r5, r7}
 800cd20:	4770      	bx	lr
 800cd22:	bf00      	nop
 800cd24:	0800cb45 	.word	0x0800cb45

0800cd28 <pb_istream_from_uart>:

pb_istream_t pb_istream_from_uart(int fd)
{
 800cd28:	b490      	push	{r4, r7}
 800cd2a:	b086      	sub	sp, #24
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
 800cd30:	6039      	str	r1, [r7, #0]
    pb_istream_t stream = {&read_callback, (void*)(intptr_t)fd, SIZE_MAX};
 800cd32:	f107 0308 	add.w	r3, r7, #8
 800cd36:	2200      	movs	r2, #0
 800cd38:	601a      	str	r2, [r3, #0]
 800cd3a:	605a      	str	r2, [r3, #4]
 800cd3c:	609a      	str	r2, [r3, #8]
 800cd3e:	60da      	str	r2, [r3, #12]
 800cd40:	4b09      	ldr	r3, [pc, #36]	; (800cd68 <pb_istream_from_uart+0x40>)
 800cd42:	60bb      	str	r3, [r7, #8]
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	60fb      	str	r3, [r7, #12]
 800cd48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cd4c:	613b      	str	r3, [r7, #16]
    return stream;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	461c      	mov	r4, r3
 800cd52:	f107 0308 	add.w	r3, r7, #8
 800cd56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cd58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800cd5c:	6878      	ldr	r0, [r7, #4]
 800cd5e:	3718      	adds	r7, #24
 800cd60:	46bd      	mov	sp, r7
 800cd62:	bc90      	pop	{r4, r7}
 800cd64:	4770      	bx	lr
 800cd66:	bf00      	nop
 800cd68:	0800cc21 	.word	0x0800cc21

0800cd6c <aiOnExecNode_cb>:
DEF_DATA_OUT;

#ifdef HAS_INSPECTOR
static void aiOnExecNode_cb(const ai_handle cookie,
        const ai_inspect_node_info* node_info,
        ai_node_exec_stage stage) {
 800cd6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd70:	b08a      	sub	sp, #40	; 0x28
 800cd72:	af02      	add	r7, sp, #8
 800cd74:	60f8      	str	r0, [r7, #12]
 800cd76:	60b9      	str	r1, [r7, #8]
 800cd78:	4613      	mov	r3, r2
 800cd7a:	71fb      	strb	r3, [r7, #7]

    struct ai_network_exec_ctx *ctx = (struct ai_network_exec_ctx*)cookie;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	61bb      	str	r3, [r7, #24]

    if (stage == AI_NODE_EXEC_PRE_FORWARD_STAGE) {
 800cd80:	79fb      	ldrb	r3, [r7, #7]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d117      	bne.n	800cdb6 <aiOnExecNode_cb+0x4a>
        ctx->n_cb_in++;
 800cd86:	69bb      	ldr	r3, [r7, #24]
 800cd88:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800cd8c:	1c5a      	adds	r2, r3, #1
 800cd8e:	69bb      	ldr	r3, [r7, #24]
 800cd90:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
        ctx->tcom += dwtGetCycles();
 800cd94:	f7ff f928 	bl	800bfe8 <dwtGetCycles>
 800cd98:	69bb      	ldr	r3, [r7, #24]
 800cd9a:	e9d3 123a 	ldrd	r1, r2, [r3, #232]	; 0xe8
 800cd9e:	4605      	mov	r5, r0
 800cda0:	f04f 0600 	mov.w	r6, #0
 800cda4:	186b      	adds	r3, r5, r1
 800cda6:	eb46 0402 	adc.w	r4, r6, r2
 800cdaa:	69ba      	ldr	r2, [r7, #24]
 800cdac:	e9c2 343a 	strd	r3, r4, [r2, #232]	; 0xe8
        dwtReset();
 800cdb0:	f7ff f90e 	bl	800bfd0 <dwtReset>
                type | node_info->type,
                node_info->id,
                dwtCyclesToFloatMs(dur),
                &node_info->out[0]);
    }
}
 800cdb4:	e058      	b.n	800ce68 <aiOnExecNode_cb+0xfc>
    } else if (stage == AI_NODE_EXEC_POST_FORWARD_STAGE) {
 800cdb6:	79fb      	ldrb	r3, [r7, #7]
 800cdb8:	2b01      	cmp	r3, #1
 800cdba:	d155      	bne.n	800ce68 <aiOnExecNode_cb+0xfc>
        uint32_t dur = dwtGetCycles();
 800cdbc:	f7ff f914 	bl	800bfe8 <dwtGetCycles>
 800cdc0:	6178      	str	r0, [r7, #20]
        dwtReset();
 800cdc2:	f7ff f905 	bl	800bfd0 <dwtReset>
        ctx->tnodes += dur;
 800cdc6:	69bb      	ldr	r3, [r7, #24]
 800cdc8:	e9d3 123c 	ldrd	r1, r2, [r3, #240]	; 0xf0
 800cdcc:	697b      	ldr	r3, [r7, #20]
 800cdce:	461d      	mov	r5, r3
 800cdd0:	f04f 0600 	mov.w	r6, #0
 800cdd4:	186b      	adds	r3, r5, r1
 800cdd6:	eb46 0402 	adc.w	r4, r6, r2
 800cdda:	69ba      	ldr	r2, [r7, #24]
 800cddc:	e9c2 343c 	strd	r3, r4, [r2, #240]	; 0xf0
        ctx->n_cb_out++;
 800cde0:	69bb      	ldr	r3, [r7, #24]
 800cde2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800cde6:	1c5a      	adds	r2, r3, #1
 800cde8:	69bb      	ldr	r3, [r7, #24]
 800cdea:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        if (ctx->n_cb_out == ctx->report.n_nodes)
 800cdee:	69bb      	ldr	r3, [r7, #24]
 800cdf0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800cdf4:	69bb      	ldr	r3, [r7, #24]
 800cdf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdf8:	429a      	cmp	r2, r3
 800cdfa:	d102      	bne.n	800ce02 <aiOnExecNode_cb+0x96>
            type = EnumLayerType_LAYER_TYPE_INTERNAL_LAST;
 800cdfc:	2302      	movs	r3, #2
 800cdfe:	61fb      	str	r3, [r7, #28]
 800ce00:	e001      	b.n	800ce06 <aiOnExecNode_cb+0x9a>
            type = EnumLayerType_LAYER_TYPE_INTERNAL;
 800ce02:	2301      	movs	r3, #1
 800ce04:	61fb      	str	r3, [r7, #28]
        type = type << 16;
 800ce06:	69fb      	ldr	r3, [r7, #28]
 800ce08:	041b      	lsls	r3, r3, #16
 800ce0a:	61fb      	str	r3, [r7, #28]
        if (ctx->no_data)
 800ce0c:	69bb      	ldr	r3, [r7, #24]
 800ce0e:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d003      	beq.n	800ce1e <aiOnExecNode_cb+0xb2>
            type |= PB_BUFFER_TYPE_SEND_WITHOUT_DATA;
 800ce16:	69fb      	ldr	r3, [r7, #28]
 800ce18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ce1c:	61fb      	str	r3, [r7, #28]
        aiPbMgrSendAiBuffer3(ctx->creq, ctx->cresp, EnumState_S_PROCESSING,
 800ce1e:	69bb      	ldr	r3, [r7, #24]
 800ce20:	f8d3 50d8 	ldr.w	r5, [r3, #216]	; 0xd8
 800ce24:	69bb      	ldr	r3, [r7, #24]
 800ce26:	f8d3 60dc 	ldr.w	r6, [r3, #220]	; 0xdc
                type | node_info->type,
 800ce2a:	68bb      	ldr	r3, [r7, #8]
 800ce2c:	881b      	ldrh	r3, [r3, #0]
 800ce2e:	461a      	mov	r2, r3
        aiPbMgrSendAiBuffer3(ctx->creq, ctx->cresp, EnumState_S_PROCESSING,
 800ce30:	69fb      	ldr	r3, [r7, #28]
 800ce32:	ea42 0803 	orr.w	r8, r2, r3
                node_info->id,
 800ce36:	68bb      	ldr	r3, [r7, #8]
 800ce38:	885b      	ldrh	r3, [r3, #2]
        aiPbMgrSendAiBuffer3(ctx->creq, ctx->cresp, EnumState_S_PROCESSING,
 800ce3a:	603b      	str	r3, [r7, #0]
 800ce3c:	697b      	ldr	r3, [r7, #20]
 800ce3e:	f04f 0400 	mov.w	r4, #0
 800ce42:	4618      	mov	r0, r3
 800ce44:	4621      	mov	r1, r4
 800ce46:	f7ff f8e3 	bl	800c010 <dwtCyclesToFloatMs>
 800ce4a:	eef0 7a40 	vmov.f32	s15, s0
                &node_info->out[0]);
 800ce4e:	68bb      	ldr	r3, [r7, #8]
 800ce50:	695b      	ldr	r3, [r3, #20]
        aiPbMgrSendAiBuffer3(ctx->creq, ctx->cresp, EnumState_S_PROCESSING,
 800ce52:	9301      	str	r3, [sp, #4]
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	9300      	str	r3, [sp, #0]
 800ce58:	eeb0 0a67 	vmov.f32	s0, s15
 800ce5c:	4643      	mov	r3, r8
 800ce5e:	2202      	movs	r2, #2
 800ce60:	4631      	mov	r1, r6
 800ce62:	4628      	mov	r0, r5
 800ce64:	f7fe fe06 	bl	800ba74 <aiPbMgrSendAiBuffer3>
}
 800ce68:	bf00      	nop
 800ce6a:	3720      	adds	r7, #32
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800ce74 <aiExecCtx>:
#endif


static struct ai_network_exec_ctx *aiExecCtx(const char *nn_name, int pos)
{
 800ce74:	b590      	push	{r4, r7, lr}
 800ce76:	b085      	sub	sp, #20
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
 800ce7c:	6039      	str	r1, [r7, #0]
    struct ai_network_exec_ctx *cur = NULL;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	60fb      	str	r3, [r7, #12]

    if (!nn_name)
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d101      	bne.n	800ce8c <aiExecCtx+0x18>
        return NULL;
 800ce88:	2300      	movs	r3, #0
 800ce8a:	e048      	b.n	800cf1e <aiExecCtx+0xaa>

    if (!nn_name[0]) {
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	781b      	ldrb	r3, [r3, #0]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d10e      	bne.n	800ceb2 <aiExecCtx+0x3e>
        if ((pos >= 0) && (pos < AI_MNETWORK_NUMBER))
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	db40      	blt.n	800cf1c <aiExecCtx+0xa8>
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	dc3d      	bgt.n	800cf1c <aiExecCtx+0xa8>
            cur = &net_exec_ctx[pos];
 800cea0:	683a      	ldr	r2, [r7, #0]
 800cea2:	4613      	mov	r3, r2
 800cea4:	015b      	lsls	r3, r3, #5
 800cea6:	1a9b      	subs	r3, r3, r2
 800cea8:	00db      	lsls	r3, r3, #3
 800ceaa:	4a1f      	ldr	r2, [pc, #124]	; (800cf28 <aiExecCtx+0xb4>)
 800ceac:	4413      	add	r3, r2
 800ceae:	60fb      	str	r3, [r7, #12]
 800ceb0:	e034      	b.n	800cf1c <aiExecCtx+0xa8>
    } else {
        int idx;
        for (idx=0; idx < AI_MNETWORK_NUMBER; idx++) {
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	60bb      	str	r3, [r7, #8]
 800ceb6:	e02c      	b.n	800cf12 <aiExecCtx+0x9e>
            cur = &net_exec_ctx[idx];
 800ceb8:	68ba      	ldr	r2, [r7, #8]
 800ceba:	4613      	mov	r3, r2
 800cebc:	015b      	lsls	r3, r3, #5
 800cebe:	1a9b      	subs	r3, r3, r2
 800cec0:	00db      	lsls	r3, r3, #3
 800cec2:	4a19      	ldr	r2, [pc, #100]	; (800cf28 <aiExecCtx+0xb4>)
 800cec4:	4413      	add	r3, r2
 800cec6:	60fb      	str	r3, [r7, #12]
            if (cur->network &&
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d01b      	beq.n	800cf08 <aiExecCtx+0x94>
                    (strlen(cur->report.model_name) == strlen(nn_name)) &&
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	685b      	ldr	r3, [r3, #4]
 800ced4:	4618      	mov	r0, r3
 800ced6:	f7fa fb08 	bl	80074ea <strlen>
 800ceda:	4604      	mov	r4, r0
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	f7fa fb04 	bl	80074ea <strlen>
 800cee2:	4603      	mov	r3, r0
            if (cur->network &&
 800cee4:	429c      	cmp	r4, r3
 800cee6:	d10f      	bne.n	800cf08 <aiExecCtx+0x94>
                    (strncmp(cur->report.model_name, nn_name,
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	685c      	ldr	r4, [r3, #4]
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	685b      	ldr	r3, [r3, #4]
 800cef0:	4618      	mov	r0, r3
 800cef2:	f7fa fafa 	bl	80074ea <strlen>
 800cef6:	4603      	mov	r3, r0
 800cef8:	461a      	mov	r2, r3
 800cefa:	6879      	ldr	r1, [r7, #4]
 800cefc:	4620      	mov	r0, r4
 800cefe:	f004 f8ed 	bl	80110dc <strncmp>
 800cf02:	4603      	mov	r3, r0
                    (strlen(cur->report.model_name) == strlen(nn_name)) &&
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d008      	beq.n	800cf1a <aiExecCtx+0xa6>
                            strlen(cur->report.model_name)) == 0)) {
                break;
            }
            cur = NULL;
 800cf08:	2300      	movs	r3, #0
 800cf0a:	60fb      	str	r3, [r7, #12]
        for (idx=0; idx < AI_MNETWORK_NUMBER; idx++) {
 800cf0c:	68bb      	ldr	r3, [r7, #8]
 800cf0e:	3301      	adds	r3, #1
 800cf10:	60bb      	str	r3, [r7, #8]
 800cf12:	68bb      	ldr	r3, [r7, #8]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	ddcf      	ble.n	800ceb8 <aiExecCtx+0x44>
 800cf18:	e000      	b.n	800cf1c <aiExecCtx+0xa8>
                break;
 800cf1a:	bf00      	nop
        }
    }
    return cur;
 800cf1c:	68fb      	ldr	r3, [r7, #12]
}
 800cf1e:	4618      	mov	r0, r3
 800cf20:	3714      	adds	r7, #20
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd90      	pop	{r4, r7, pc}
 800cf26:	bf00      	nop
 800cf28:	20000d48 	.word	0x20000d48

0800cf2c <aiSetPbContext>:

__STATIC_INLINE
void aiSetPbContext(struct ai_network_exec_ctx *ctx,
        const reqMsg *creq, respMsg *cresp)
{
 800cf2c:	b480      	push	{r7}
 800cf2e:	b085      	sub	sp, #20
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	60f8      	str	r0, [r7, #12]
 800cf34:	60b9      	str	r1, [r7, #8]
 800cf36:	607a      	str	r2, [r7, #4]
#ifdef HAS_INSPECTOR
    if (!ctx)
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d008      	beq.n	800cf50 <aiSetPbContext+0x24>
        return;

    ctx->creq = creq;
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	68ba      	ldr	r2, [r7, #8]
 800cf42:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    ctx->cresp = cresp;
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	687a      	ldr	r2, [r7, #4]
 800cf4a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800cf4e:	e000      	b.n	800cf52 <aiSetPbContext+0x26>
        return;
 800cf50:	bf00      	nop
#endif
}
 800cf52:	3714      	adds	r7, #20
 800cf54:	46bd      	mov	sp, r7
 800cf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5a:	4770      	bx	lr

0800cf5c <aiBootstrap>:

static int aiBootstrap(const char *nn_name, const int idx)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b092      	sub	sp, #72	; 0x48
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
 800cf64:	6039      	str	r1, [r7, #0]
    ai_error err;
    ai_u32 ext_addr, sz;

    /* Creating the network */
    printf("Creating the network \"%s\"..\r\n", nn_name);
 800cf66:	6879      	ldr	r1, [r7, #4]
 800cf68:	4879      	ldr	r0, [pc, #484]	; (800d150 <aiBootstrap+0x1f4>)
 800cf6a:	f004 f823 	bl	8010fb4 <iprintf>
    err = ai_mnetwork_create(nn_name, &net_exec_ctx[idx].network, NULL);
 800cf6e:	683a      	ldr	r2, [r7, #0]
 800cf70:	4613      	mov	r3, r2
 800cf72:	015b      	lsls	r3, r3, #5
 800cf74:	1a9b      	subs	r3, r3, r2
 800cf76:	00db      	lsls	r3, r3, #3
 800cf78:	4a76      	ldr	r2, [pc, #472]	; (800d154 <aiBootstrap+0x1f8>)
 800cf7a:	4413      	add	r3, r2
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	4619      	mov	r1, r3
 800cf80:	6878      	ldr	r0, [r7, #4]
 800cf82:	f000 fda5 	bl	800dad0 <ai_mnetwork_create>
 800cf86:	4603      	mov	r3, r0
 800cf88:	647b      	str	r3, [r7, #68]	; 0x44
    if (err.type) {
 800cf8a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d006      	beq.n	800cfa0 <aiBootstrap+0x44>
        aiLogErr(err, "ai_mnetwork_create");
 800cf92:	4971      	ldr	r1, [pc, #452]	; (800d158 <aiBootstrap+0x1fc>)
 800cf94:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800cf96:	f7ff fa99 	bl	800c4cc <aiLogErr>
        return -1;
 800cf9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cf9e:	e0d2      	b.n	800d146 <aiBootstrap+0x1ea>
    }

    /* Initialize the instance */
    printf("Initializing the network\r\n");
 800cfa0:	486e      	ldr	r0, [pc, #440]	; (800d15c <aiBootstrap+0x200>)
 800cfa2:	f004 f87b 	bl	801109c <puts>
#if !defined(AI_MNETWORK_DATA_ACTIVATIONS_INT_SIZE)
    const ai_network_params params = {
            AI_BUFFER_NULL(NULL),
            AI_BUFFER_NULL(activations) };
#else
    ai_network_params params = {
 800cfa6:	f107 030c 	add.w	r3, r7, #12
 800cfaa:	2230      	movs	r2, #48	; 0x30
 800cfac:	2100      	movs	r1, #0
 800cfae:	4618      	mov	r0, r3
 800cfb0:	f003 ff50 	bl	8010e54 <memset>
 800cfb4:	4b6a      	ldr	r3, [pc, #424]	; (800d160 <aiBootstrap+0x204>)
 800cfb6:	60fb      	str	r3, [r7, #12]
 800cfb8:	4b69      	ldr	r3, [pc, #420]	; (800d160 <aiBootstrap+0x204>)
 800cfba:	627b      	str	r3, [r7, #36]	; 0x24
                AI_BUFFER_NULL(NULL),
                AI_BUFFER_NULL(NULL) };

    if (ai_mnetwork_get_ext_data_activations(net_exec_ctx[idx].network, &ext_addr, &sz) == 0) {
 800cfbc:	4965      	ldr	r1, [pc, #404]	; (800d154 <aiBootstrap+0x1f8>)
 800cfbe:	683a      	ldr	r2, [r7, #0]
 800cfc0:	4613      	mov	r3, r2
 800cfc2:	015b      	lsls	r3, r3, #5
 800cfc4:	1a9b      	subs	r3, r3, r2
 800cfc6:	00db      	lsls	r3, r3, #3
 800cfc8:	440b      	add	r3, r1
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800cfd0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	f000 fedd 	bl	800dd94 <ai_mnetwork_get_ext_data_activations>
 800cfda:	4603      	mov	r3, r0
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d12c      	bne.n	800d03a <aiBootstrap+0xde>
    	if (ext_addr == 0xFFFFFFFF) {
 800cfe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfe2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cfe6:	d126      	bne.n	800d036 <aiBootstrap+0xda>
    		params.activations.data = (ai_handle)activations;
 800cfe8:	4b5e      	ldr	r3, [pc, #376]	; (800d164 <aiBootstrap+0x208>)
 800cfea:	637b      	str	r3, [r7, #52]	; 0x34
    		ext_addr = (ai_u32)activations;
 800cfec:	4b5d      	ldr	r3, [pc, #372]	; (800d164 <aiBootstrap+0x208>)
 800cfee:	643b      	str	r3, [r7, #64]	; 0x40
    		sz = (ai_u32)AI_BUFFER_SIZE(&net_exec_ctx[idx].report.activations);
 800cff0:	4958      	ldr	r1, [pc, #352]	; (800d154 <aiBootstrap+0x1f8>)
 800cff2:	683a      	ldr	r2, [r7, #0]
 800cff4:	4613      	mov	r3, r2
 800cff6:	015b      	lsls	r3, r3, #5
 800cff8:	1a9b      	subs	r3, r3, r2
 800cffa:	00db      	lsls	r3, r3, #3
 800cffc:	440b      	add	r3, r1
 800cffe:	3348      	adds	r3, #72	; 0x48
 800d000:	881b      	ldrh	r3, [r3, #0]
 800d002:	4618      	mov	r0, r3
 800d004:	4953      	ldr	r1, [pc, #332]	; (800d154 <aiBootstrap+0x1f8>)
 800d006:	683a      	ldr	r2, [r7, #0]
 800d008:	4613      	mov	r3, r2
 800d00a:	015b      	lsls	r3, r3, #5
 800d00c:	1a9b      	subs	r3, r3, r2
 800d00e:	00db      	lsls	r3, r3, #3
 800d010:	440b      	add	r3, r1
 800d012:	3346      	adds	r3, #70	; 0x46
 800d014:	881b      	ldrh	r3, [r3, #0]
 800d016:	fb03 f300 	mul.w	r3, r3, r0
 800d01a:	4618      	mov	r0, r3
 800d01c:	494d      	ldr	r1, [pc, #308]	; (800d154 <aiBootstrap+0x1f8>)
 800d01e:	683a      	ldr	r2, [r7, #0]
 800d020:	4613      	mov	r3, r2
 800d022:	015b      	lsls	r3, r3, #5
 800d024:	1a9b      	subs	r3, r3, r2
 800d026:	00db      	lsls	r3, r3, #3
 800d028:	440b      	add	r3, r1
 800d02a:	334c      	adds	r3, #76	; 0x4c
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	fb03 f300 	mul.w	r3, r3, r0
 800d032:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d034:	e001      	b.n	800d03a <aiBootstrap+0xde>
    	}
    	else {
    		params.activations.data = (ai_handle)ext_addr;
 800d036:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d038:	637b      	str	r3, [r7, #52]	; 0x34
    	}
    }
#endif

    if (!ai_mnetwork_init(net_exec_ctx[idx].network, &params)) {
 800d03a:	4946      	ldr	r1, [pc, #280]	; (800d154 <aiBootstrap+0x1f8>)
 800d03c:	683a      	ldr	r2, [r7, #0]
 800d03e:	4613      	mov	r3, r2
 800d040:	015b      	lsls	r3, r3, #5
 800d042:	1a9b      	subs	r3, r3, r2
 800d044:	00db      	lsls	r3, r3, #3
 800d046:	440b      	add	r3, r1
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	f107 020c 	add.w	r2, r7, #12
 800d04e:	4611      	mov	r1, r2
 800d050:	4618      	mov	r0, r3
 800d052:	f000 fe06 	bl	800dc62 <ai_mnetwork_init>
 800d056:	4603      	mov	r3, r0
 800d058:	f083 0301 	eor.w	r3, r3, #1
 800d05c:	b2db      	uxtb	r3, r3
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d027      	beq.n	800d0b2 <aiBootstrap+0x156>
        err = ai_mnetwork_get_error(net_exec_ctx[idx].network);
 800d062:	493c      	ldr	r1, [pc, #240]	; (800d154 <aiBootstrap+0x1f8>)
 800d064:	683a      	ldr	r2, [r7, #0]
 800d066:	4613      	mov	r3, r2
 800d068:	015b      	lsls	r3, r3, #5
 800d06a:	1a9b      	subs	r3, r3, r2
 800d06c:	00db      	lsls	r3, r3, #3
 800d06e:	440b      	add	r3, r1
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	4618      	mov	r0, r3
 800d074:	f000 fdd5 	bl	800dc22 <ai_mnetwork_get_error>
 800d078:	4603      	mov	r3, r0
 800d07a:	647b      	str	r3, [r7, #68]	; 0x44
        aiLogErr(err, "ai_mnetwork_init");
 800d07c:	493a      	ldr	r1, [pc, #232]	; (800d168 <aiBootstrap+0x20c>)
 800d07e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d080:	f7ff fa24 	bl	800c4cc <aiLogErr>
        ai_mnetwork_destroy(net_exec_ctx[idx].network);
 800d084:	4933      	ldr	r1, [pc, #204]	; (800d154 <aiBootstrap+0x1f8>)
 800d086:	683a      	ldr	r2, [r7, #0]
 800d088:	4613      	mov	r3, r2
 800d08a:	015b      	lsls	r3, r3, #5
 800d08c:	1a9b      	subs	r3, r3, r2
 800d08e:	00db      	lsls	r3, r3, #3
 800d090:	440b      	add	r3, r1
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	4618      	mov	r0, r3
 800d096:	f000 fd87 	bl	800dba8 <ai_mnetwork_destroy>
        net_exec_ctx[idx].network = AI_HANDLE_NULL;
 800d09a:	492e      	ldr	r1, [pc, #184]	; (800d154 <aiBootstrap+0x1f8>)
 800d09c:	683a      	ldr	r2, [r7, #0]
 800d09e:	4613      	mov	r3, r2
 800d0a0:	015b      	lsls	r3, r3, #5
 800d0a2:	1a9b      	subs	r3, r3, r2
 800d0a4:	00db      	lsls	r3, r3, #3
 800d0a6:	440b      	add	r3, r1
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	601a      	str	r2, [r3, #0]
        return -4;
 800d0ac:	f06f 0303 	mvn.w	r3, #3
 800d0b0:	e049      	b.n	800d146 <aiBootstrap+0x1ea>
    }

    /* Query the created network to get relevant info from it */
    if (ai_mnetwork_get_info(net_exec_ctx[idx].network,
 800d0b2:	4928      	ldr	r1, [pc, #160]	; (800d154 <aiBootstrap+0x1f8>)
 800d0b4:	683a      	ldr	r2, [r7, #0]
 800d0b6:	4613      	mov	r3, r2
 800d0b8:	015b      	lsls	r3, r3, #5
 800d0ba:	1a9b      	subs	r3, r3, r2
 800d0bc:	00db      	lsls	r3, r3, #3
 800d0be:	440b      	add	r3, r1
 800d0c0:	6818      	ldr	r0, [r3, #0]
 800d0c2:	683a      	ldr	r2, [r7, #0]
 800d0c4:	4613      	mov	r3, r2
 800d0c6:	015b      	lsls	r3, r3, #5
 800d0c8:	1a9b      	subs	r3, r3, r2
 800d0ca:	00db      	lsls	r3, r3, #3
 800d0cc:	4a21      	ldr	r2, [pc, #132]	; (800d154 <aiBootstrap+0x1f8>)
 800d0ce:	4413      	add	r3, r2
 800d0d0:	3304      	adds	r3, #4
 800d0d2:	4619      	mov	r1, r3
 800d0d4:	f000 fd8a 	bl	800dbec <ai_mnetwork_get_info>
 800d0d8:	4603      	mov	r3, r0
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d00c      	beq.n	800d0f8 <aiBootstrap+0x19c>
            &net_exec_ctx[idx].report)) {
        aiPrintNetworkInfo(&net_exec_ctx[idx].report);
 800d0de:	683a      	ldr	r2, [r7, #0]
 800d0e0:	4613      	mov	r3, r2
 800d0e2:	015b      	lsls	r3, r3, #5
 800d0e4:	1a9b      	subs	r3, r3, r2
 800d0e6:	00db      	lsls	r3, r3, #3
 800d0e8:	4a1a      	ldr	r2, [pc, #104]	; (800d154 <aiBootstrap+0x1f8>)
 800d0ea:	4413      	add	r3, r2
 800d0ec:	3304      	adds	r3, #4
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	f7ff fc1a 	bl	800c928 <aiPrintNetworkInfo>
        ai_mnetwork_destroy(net_exec_ctx[idx].network);
        net_exec_ctx[idx].network = AI_HANDLE_NULL;
        return -2;
    }

    return 0;
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	e026      	b.n	800d146 <aiBootstrap+0x1ea>
        err = ai_mnetwork_get_error(net_exec_ctx[idx].network);
 800d0f8:	4916      	ldr	r1, [pc, #88]	; (800d154 <aiBootstrap+0x1f8>)
 800d0fa:	683a      	ldr	r2, [r7, #0]
 800d0fc:	4613      	mov	r3, r2
 800d0fe:	015b      	lsls	r3, r3, #5
 800d100:	1a9b      	subs	r3, r3, r2
 800d102:	00db      	lsls	r3, r3, #3
 800d104:	440b      	add	r3, r1
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	4618      	mov	r0, r3
 800d10a:	f000 fd8a 	bl	800dc22 <ai_mnetwork_get_error>
 800d10e:	4603      	mov	r3, r0
 800d110:	647b      	str	r3, [r7, #68]	; 0x44
        aiLogErr(err, "ai_mnetwork_get_info");
 800d112:	4916      	ldr	r1, [pc, #88]	; (800d16c <aiBootstrap+0x210>)
 800d114:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d116:	f7ff f9d9 	bl	800c4cc <aiLogErr>
        ai_mnetwork_destroy(net_exec_ctx[idx].network);
 800d11a:	490e      	ldr	r1, [pc, #56]	; (800d154 <aiBootstrap+0x1f8>)
 800d11c:	683a      	ldr	r2, [r7, #0]
 800d11e:	4613      	mov	r3, r2
 800d120:	015b      	lsls	r3, r3, #5
 800d122:	1a9b      	subs	r3, r3, r2
 800d124:	00db      	lsls	r3, r3, #3
 800d126:	440b      	add	r3, r1
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	4618      	mov	r0, r3
 800d12c:	f000 fd3c 	bl	800dba8 <ai_mnetwork_destroy>
        net_exec_ctx[idx].network = AI_HANDLE_NULL;
 800d130:	4908      	ldr	r1, [pc, #32]	; (800d154 <aiBootstrap+0x1f8>)
 800d132:	683a      	ldr	r2, [r7, #0]
 800d134:	4613      	mov	r3, r2
 800d136:	015b      	lsls	r3, r3, #5
 800d138:	1a9b      	subs	r3, r3, r2
 800d13a:	00db      	lsls	r3, r3, #3
 800d13c:	440b      	add	r3, r1
 800d13e:	2200      	movs	r2, #0
 800d140:	601a      	str	r2, [r3, #0]
        return -2;
 800d142:	f06f 0301 	mvn.w	r3, #1
}
 800d146:	4618      	mov	r0, r3
 800d148:	3748      	adds	r7, #72	; 0x48
 800d14a:	46bd      	mov	sp, r7
 800d14c:	bd80      	pop	{r7, pc}
 800d14e:	bf00      	nop
 800d150:	080156f0 	.word	0x080156f0
 800d154:	20000d48 	.word	0x20000d48
 800d158:	08015710 	.word	0x08015710
 800d15c:	08015724 	.word	0x08015724
 800d160:	40000040 	.word	0x40000040
 800d164:	20000e40 	.word	0x20000e40
 800d168:	08015740 	.word	0x08015740
 800d16c:	08015754 	.word	0x08015754

0800d170 <aiInspectorGetReport>:

#ifdef HAS_INSPECTOR
static int aiInspectorGetReport(struct ai_network_exec_ctx *ctx)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b084      	sub	sp, #16
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
    int res = 0;
 800d178:	2300      	movs	r3, #0
 800d17a:	60fb      	str	r3, [r7, #12]
    if (!ctx)
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d102      	bne.n	800d188 <aiInspectorGetReport+0x18>
        return -1;
 800d182:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d186:	e01c      	b.n	800d1c2 <aiInspectorGetReport+0x52>

    if ((ctx->inspector != AI_HANDLE_NULL) &&
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d017      	beq.n	800d1c0 <aiInspectorGetReport+0x50>
            (ctx->net_id != AI_INSPECTOR_NETWORK_BIND_FAILED))
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
    if ((ctx->inspector != AI_HANDLE_NULL) &&
 800d196:	2b00      	cmp	r3, #0
 800d198:	d012      	beq.n	800d1c0 <aiInspectorGetReport+0x50>
    {
        if (ai_inspector_get_report(ctx->inspector,
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	f8b3 107c 	ldrh.w	r1, [r3, #124]	; 0x7c
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	3380      	adds	r3, #128	; 0x80
 800d1a8:	461a      	mov	r2, r3
 800d1aa:	f7f3 f90a 	bl	80003c2 <ai_inspector_get_report>
 800d1ae:	4603      	mov	r3, r0
                ctx->net_id, &ctx->inspector_report) != true)
 800d1b0:	f083 0301 	eor.w	r3, r3, #1
 800d1b4:	b2db      	uxtb	r3, r3
        if (ai_inspector_get_report(ctx->inspector,
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d002      	beq.n	800d1c0 <aiInspectorGetReport+0x50>
            res = -2;
 800d1ba:	f06f 0301 	mvn.w	r3, #1
 800d1be:	60fb      	str	r3, [r7, #12]
    }
    return res;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
}
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	3710      	adds	r7, #16
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	bd80      	pop	{r7, pc}

0800d1ca <aiInspectorSendReport>:


static void aiInspectorSendReport(const reqMsg *req, respMsg *resp,
        EnumState state, struct ai_network_exec_ctx *ctx,
        const ai_float dur_ms)
{
 800d1ca:	b580      	push	{r7, lr}
 800d1cc:	b088      	sub	sp, #32
 800d1ce:	af02      	add	r7, sp, #8
 800d1d0:	6178      	str	r0, [r7, #20]
 800d1d2:	6139      	str	r1, [r7, #16]
 800d1d4:	60bb      	str	r3, [r7, #8]
 800d1d6:	ed87 0a01 	vstr	s0, [r7, #4]
 800d1da:	4613      	mov	r3, r2
 800d1dc:	73fb      	strb	r3, [r7, #15]
#ifdef HAS_INSPECTOR
    if (aiInspectorGetReport(ctx) == 0) {
 800d1de:	68b8      	ldr	r0, [r7, #8]
 800d1e0:	f7ff ffc6 	bl	800d170 <aiInspectorGetReport>
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d122      	bne.n	800d230 <aiInspectorSendReport+0x66>
        resp->which_payload = respMsg_report_tag;
 800d1ea:	693b      	ldr	r3, [r7, #16]
 800d1ec:	2215      	movs	r2, #21
 800d1ee:	80da      	strh	r2, [r3, #6]
        resp->payload.report.id = ctx->inspector_report.id;
 800d1f0:	68bb      	ldr	r3, [r7, #8]
 800d1f2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800d1f6:	693b      	ldr	r3, [r7, #16]
 800d1f8:	609a      	str	r2, [r3, #8]
        resp->payload.report.elapsed_ms = dur_ms;
 800d1fa:	693b      	ldr	r3, [r7, #16]
 800d1fc:	687a      	ldr	r2, [r7, #4]
 800d1fe:	619a      	str	r2, [r3, #24]
        resp->payload.report.n_nodes = ctx->inspector_report.n_nodes;
 800d200:	68bb      	ldr	r3, [r7, #8]
 800d202:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800d206:	693b      	ldr	r3, [r7, #16]
 800d208:	615a      	str	r2, [r3, #20]
        resp->payload.report.signature = ctx->inspector_report.signature;
 800d20a:	68bb      	ldr	r3, [r7, #8]
 800d20c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800d210:	693b      	ldr	r3, [r7, #16]
 800d212:	60da      	str	r2, [r3, #12]
        resp->payload.report.num_inferences = ctx->inspector_report.num_inferences;
 800d214:	68bb      	ldr	r3, [r7, #8]
 800d216:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800d21a:	693b      	ldr	r3, [r7, #16]
 800d21c:	611a      	str	r2, [r3, #16]
        aiPbMgrSendResp(req, resp, state);
 800d21e:	7bfb      	ldrb	r3, [r7, #15]
 800d220:	461a      	mov	r2, r3
 800d222:	6939      	ldr	r1, [r7, #16]
 800d224:	6978      	ldr	r0, [r7, #20]
 800d226:	f7fe f92d 	bl	800b484 <aiPbMgrSendResp>
        aiPbMgrWaitAck();
 800d22a:	f7fe f965 	bl	800b4f8 <aiPbMgrWaitAck>
    } else {
        aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
                EnumError_E_GENERIC, EnumError_E_GENERIC);
    }
#endif
}
 800d22e:	e007      	b.n	800d240 <aiInspectorSendReport+0x76>
        aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 800d230:	230a      	movs	r3, #10
 800d232:	9300      	str	r3, [sp, #0]
 800d234:	230a      	movs	r3, #10
 800d236:	2204      	movs	r2, #4
 800d238:	6939      	ldr	r1, [r7, #16]
 800d23a:	6978      	ldr	r0, [r7, #20]
 800d23c:	f7fe f940 	bl	800b4c0 <aiPbMgrSendAck>
}
 800d240:	bf00      	nop
 800d242:	3718      	adds	r7, #24
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}

0800d248 <aiInspectorUnBind>:


static void aiInspectorUnBind(struct ai_network_exec_ctx *ctx)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b082      	sub	sp, #8
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
#ifdef HAS_INSPECTOR
    if (!ctx)
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d016      	beq.n	800d284 <aiInspectorUnBind+0x3c>
        return;

    if ((ctx->inspector != AI_HANDLE_NULL) &&
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d00d      	beq.n	800d27a <aiInspectorUnBind+0x32>
            (ctx->net_id != AI_INSPECTOR_NETWORK_BIND_FAILED))
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
    if ((ctx->inspector != AI_HANDLE_NULL) &&
 800d264:	2b00      	cmp	r3, #0
 800d266:	d008      	beq.n	800d27a <aiInspectorUnBind+0x32>
        ai_inspector_unbind_network(ctx->inspector,
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800d272:	4619      	mov	r1, r3
 800d274:	4610      	mov	r0, r2
 800d276:	f7f3 f85c 	bl	8000332 <ai_inspector_unbind_network>
                ctx->net_id);

    ctx->net_id = AI_INSPECTOR_NETWORK_BIND_FAILED;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	2200      	movs	r2, #0
 800d27e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 800d282:	e000      	b.n	800d286 <aiInspectorUnBind+0x3e>
        return;
 800d284:	bf00      	nop
#endif
}
 800d286:	3708      	adds	r7, #8
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd80      	pop	{r7, pc}

0800d28c <aiInspectorBind>:

static int aiInspectorBind(struct ai_network_exec_ctx *ctx)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b084      	sub	sp, #16
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
    int res = 0;
 800d294:	2300      	movs	r3, #0
 800d296:	60fb      	str	r3, [r7, #12]
#ifdef HAS_INSPECTOR
    if (!ctx)
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d101      	bne.n	800d2a2 <aiInspectorBind+0x16>
        return 0;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	e024      	b.n	800d2ec <aiInspectorBind+0x60>

    aiInspectorUnBind(ctx);
 800d2a2:	6878      	ldr	r0, [r7, #4]
 800d2a4:	f7ff ffd0 	bl	800d248 <aiInspectorUnBind>

    ctx->n_cb_in  = 0;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    ctx->n_cb_out = 0;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

    if (ctx->inspector) {
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d014      	beq.n	800d2ea <aiInspectorBind+0x5e>
        ctx->net_id = ai_inspector_bind_network(
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	6f9a      	ldr	r2, [r3, #120]	; 0x78
                ctx->inspector,
                &ctx->entry);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	3398      	adds	r3, #152	; 0x98
        ctx->net_id = ai_inspector_bind_network(
 800d2c8:	4619      	mov	r1, r3
 800d2ca:	4610      	mov	r0, r2
 800d2cc:	f7f2 fff1 	bl	80002b2 <ai_inspector_bind_network>
 800d2d0:	4603      	mov	r3, r0
 800d2d2:	461a      	mov	r2, r3
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c

        if (ctx->net_id == AI_INSPECTOR_NETWORK_BIND_FAILED)
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d102      	bne.n	800d2ea <aiInspectorBind+0x5e>
            res = -1;
 800d2e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d2e8:	60fb      	str	r3, [r7, #12]
    }

#endif
    return res;
 800d2ea:	68fb      	ldr	r3, [r7, #12]
}
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	3710      	adds	r7, #16
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}

0800d2f4 <aiInspectorInitAndBind>:

static int aiInspectorInitAndBind(struct ai_network_exec_ctx *ctx)
{
 800d2f4:	b5b0      	push	{r4, r5, r7, lr}
 800d2f6:	b094      	sub	sp, #80	; 0x50
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
#ifdef HAS_INSPECTOR
    ctx->n_cb_in  = 0;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2200      	movs	r2, #0
 800d300:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    ctx->n_cb_out = 0;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	2200      	movs	r2, #0
 800d308:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

    ai_inspector_config cfg = ai_inspector_default_config();
 800d30c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d310:	4618      	mov	r0, r3
 800d312:	f7f2 ff5d 	bl	80001d0 <ai_inspector_default_config>

    cfg.log_level = LOG_SUDO;
 800d316:	2300      	movs	r3, #0
 800d318:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
    cfg.log_quiet = false;
 800d31c:	2300      	movs	r3, #0
 800d31e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
    cfg.on_report_destroy = NULL;
 800d322:	2300      	movs	r3, #0
 800d324:	647b      	str	r3, [r7, #68]	; 0x44
    cfg.on_exec_node = &aiOnExecNode_cb;
 800d326:	4b1d      	ldr	r3, [pc, #116]	; (800d39c <aiInspectorInitAndBind+0xa8>)
 800d328:	64bb      	str	r3, [r7, #72]	; 0x48
    cfg.cookie = NULL;
 800d32a:	2300      	movs	r3, #0
 800d32c:	64fb      	str	r3, [r7, #76]	; 0x4c
#endif

    ai_handle phandle;
    ai_network_params pparams;

    if (ctx->network == AI_HANDLE_NULL)
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d102      	bne.n	800d33c <aiInspectorInitAndBind+0x48>
        return -1;
 800d336:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d33a:	e02a      	b.n	800d392 <aiInspectorInitAndBind+0x9e>

    ai_mnetwork_get_private_handle(ctx->network,
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	f107 020c 	add.w	r2, r7, #12
 800d344:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800d348:	4618      	mov	r0, r3
 800d34a:	f000 fcf7 	bl	800dd3c <ai_mnetwork_get_private_handle>
            &phandle,
            &pparams);

    cfg.cookie = (ai_handle)ctx;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	64fb      	str	r3, [r7, #76]	; 0x4c

    if (ai_inspector_create(&ctx->inspector, &cfg) )
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	3378      	adds	r3, #120	; 0x78
 800d356:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800d35a:	4611      	mov	r1, r2
 800d35c:	4618      	mov	r0, r3
 800d35e:	f7f2 ff4d 	bl	80001fc <ai_inspector_create>
 800d362:	4603      	mov	r3, r0
 800d364:	2b00      	cmp	r3, #0
 800d366:	d013      	beq.n	800d390 <aiInspectorInitAndBind+0x9c>
    {
        ctx->entry.handle = phandle;
 800d368:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        ctx->entry.params = pparams;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 800d376:	f107 050c 	add.w	r5, r7, #12
 800d37a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d37c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d37e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d380:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d382:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800d386:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        aiInspectorBind(ctx);
 800d38a:	6878      	ldr	r0, [r7, #4]
 800d38c:	f7ff ff7e 	bl	800d28c <aiInspectorBind>
    }


#endif
    return 0;
 800d390:	2300      	movs	r3, #0
}
 800d392:	4618      	mov	r0, r3
 800d394:	3750      	adds	r7, #80	; 0x50
 800d396:	46bd      	mov	sp, r7
 800d398:	bdb0      	pop	{r4, r5, r7, pc}
 800d39a:	bf00      	nop
 800d39c:	0800cd6d 	.word	0x0800cd6d

0800d3a0 <aiInspectorUnbindAndDestroy>:

static int aiInspectorUnbindAndDestroy(struct ai_network_exec_ctx *ctx)
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b082      	sub	sp, #8
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
#ifdef HAS_INSPECTOR
    aiInspectorUnBind(ctx);
 800d3a8:	6878      	ldr	r0, [r7, #4]
 800d3aa:	f7ff ff4d 	bl	800d248 <aiInspectorUnBind>
    if (ctx->inspector != AI_HANDLE_NULL)
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d004      	beq.n	800d3c0 <aiInspectorUnbindAndDestroy+0x20>
        ai_inspector_destroy(ctx->inspector);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	f7f2 ff50 	bl	8000260 <ai_inspector_destroy>
    ctx->inspector = AI_HANDLE_NULL;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	679a      	str	r2, [r3, #120]	; 0x78
#endif
    return 0;
 800d3c6:	2300      	movs	r3, #0
}
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	3708      	adds	r7, #8
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	bd80      	pop	{r7, pc}

0800d3d0 <aiInit>:


static int aiInit(void)
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b088      	sub	sp, #32
 800d3d4:	af04      	add	r7, sp, #16
    int res = -1;
 800d3d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d3da:	60fb      	str	r3, [r7, #12]
    const char *nn_name;
    int idx;

    printf("\r\nAI platform (API %d.%d.%d - RUNTIME %d.%d.%d)\r\n",
 800d3dc:	2300      	movs	r3, #0
 800d3de:	9302      	str	r3, [sp, #8]
 800d3e0:	2301      	movs	r3, #1
 800d3e2:	9301      	str	r3, [sp, #4]
 800d3e4:	2304      	movs	r3, #4
 800d3e6:	9300      	str	r3, [sp, #0]
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	2201      	movs	r2, #1
 800d3ec:	2101      	movs	r1, #1
 800d3ee:	4826      	ldr	r0, [pc, #152]	; (800d488 <aiInit+0xb8>)
 800d3f0:	f003 fde0 	bl	8010fb4 <iprintf>
            AI_PLATFORM_RUNTIME_MAJOR,
            AI_PLATFORM_RUNTIME_MINOR,
            AI_PLATFORM_RUNTIME_MICRO);

    /* Clean all network exec context */
    for (idx=0; idx < AI_MNETWORK_NUMBER; idx++) {
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	607b      	str	r3, [r7, #4]
 800d3f8:	e01f      	b.n	800d43a <aiInit+0x6a>
        net_exec_ctx[idx].network = AI_HANDLE_NULL;
 800d3fa:	4924      	ldr	r1, [pc, #144]	; (800d48c <aiInit+0xbc>)
 800d3fc:	687a      	ldr	r2, [r7, #4]
 800d3fe:	4613      	mov	r3, r2
 800d400:	015b      	lsls	r3, r3, #5
 800d402:	1a9b      	subs	r3, r3, r2
 800d404:	00db      	lsls	r3, r3, #3
 800d406:	440b      	add	r3, r1
 800d408:	2200      	movs	r2, #0
 800d40a:	601a      	str	r2, [r3, #0]
#ifdef HAS_INSPECTOR
        net_exec_ctx[idx].inspector = AI_HANDLE_NULL;
 800d40c:	491f      	ldr	r1, [pc, #124]	; (800d48c <aiInit+0xbc>)
 800d40e:	687a      	ldr	r2, [r7, #4]
 800d410:	4613      	mov	r3, r2
 800d412:	015b      	lsls	r3, r3, #5
 800d414:	1a9b      	subs	r3, r3, r2
 800d416:	00db      	lsls	r3, r3, #3
 800d418:	440b      	add	r3, r1
 800d41a:	3378      	adds	r3, #120	; 0x78
 800d41c:	2200      	movs	r2, #0
 800d41e:	601a      	str	r2, [r3, #0]
        net_exec_ctx[idx].net_id = AI_INSPECTOR_NETWORK_BIND_FAILED;
 800d420:	491a      	ldr	r1, [pc, #104]	; (800d48c <aiInit+0xbc>)
 800d422:	687a      	ldr	r2, [r7, #4]
 800d424:	4613      	mov	r3, r2
 800d426:	015b      	lsls	r3, r3, #5
 800d428:	1a9b      	subs	r3, r3, r2
 800d42a:	00db      	lsls	r3, r3, #3
 800d42c:	440b      	add	r3, r1
 800d42e:	337c      	adds	r3, #124	; 0x7c
 800d430:	2200      	movs	r2, #0
 800d432:	801a      	strh	r2, [r3, #0]
    for (idx=0; idx < AI_MNETWORK_NUMBER; idx++) {
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	3301      	adds	r3, #1
 800d438:	607b      	str	r3, [r7, #4]
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	dddc      	ble.n	800d3fa <aiInit+0x2a>
#endif
    }

    /* Discover and init the embedded network */
    idx = 0;
 800d440:	2300      	movs	r3, #0
 800d442:	607b      	str	r3, [r7, #4]
    do {
        nn_name = ai_mnetwork_find(NULL, idx);
 800d444:	6879      	ldr	r1, [r7, #4]
 800d446:	2000      	movs	r0, #0
 800d448:	f000 fb12 	bl	800da70 <ai_mnetwork_find>
 800d44c:	60b8      	str	r0, [r7, #8]
        if (nn_name) {
 800d44e:	68bb      	ldr	r3, [r7, #8]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d00d      	beq.n	800d470 <aiInit+0xa0>
            printf("\r\nFound network \"%s\"\r\n", nn_name);
 800d454:	68b9      	ldr	r1, [r7, #8]
 800d456:	480e      	ldr	r0, [pc, #56]	; (800d490 <aiInit+0xc0>)
 800d458:	f003 fdac 	bl	8010fb4 <iprintf>
            res = aiBootstrap(nn_name, idx);
 800d45c:	6879      	ldr	r1, [r7, #4]
 800d45e:	68b8      	ldr	r0, [r7, #8]
 800d460:	f7ff fd7c 	bl	800cf5c <aiBootstrap>
 800d464:	60f8      	str	r0, [r7, #12]
            if (res)
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d001      	beq.n	800d470 <aiInit+0xa0>
                nn_name = NULL;
 800d46c:	2300      	movs	r3, #0
 800d46e:	60bb      	str	r3, [r7, #8]
        }
        idx++;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	3301      	adds	r3, #1
 800d474:	607b      	str	r3, [r7, #4]
    } while (nn_name);
 800d476:	68bb      	ldr	r3, [r7, #8]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d1e3      	bne.n	800d444 <aiInit+0x74>

    return res;
 800d47c:	68fb      	ldr	r3, [r7, #12]
}
 800d47e:	4618      	mov	r0, r3
 800d480:	3710      	adds	r7, #16
 800d482:	46bd      	mov	sp, r7
 800d484:	bd80      	pop	{r7, pc}
 800d486:	bf00      	nop
 800d488:	0801576c 	.word	0x0801576c
 800d48c:	20000d48 	.word	0x20000d48
 800d490:	080157a0 	.word	0x080157a0

0800d494 <aiPbCmdNNInfo>:
 * Specific APP/test functions
 * -----------------------------------------------------------------------------
 */

void aiPbCmdNNInfo(const reqMsg *req, respMsg *resp, void *param)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b088      	sub	sp, #32
 800d498:	af02      	add	r7, sp, #8
 800d49a:	60f8      	str	r0, [r7, #12]
 800d49c:	60b9      	str	r1, [r7, #8]
 800d49e:	607a      	str	r2, [r7, #4]
    struct ai_network_exec_ctx *ctx;

    UNUSED(param);

    ctx = aiExecCtx(req->name, req->param);
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	f103 020c 	add.w	r2, r3, #12
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	689b      	ldr	r3, [r3, #8]
 800d4aa:	4619      	mov	r1, r3
 800d4ac:	4610      	mov	r0, r2
 800d4ae:	f7ff fce1 	bl	800ce74 <aiExecCtx>
 800d4b2:	6178      	str	r0, [r7, #20]
    if (ctx)
 800d4b4:	697b      	ldr	r3, [r7, #20]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d007      	beq.n	800d4ca <aiPbCmdNNInfo+0x36>
        aiPbMgrSendNNInfo(req, resp, EnumState_S_IDLE,
                &ctx->report);
 800d4ba:	697b      	ldr	r3, [r7, #20]
 800d4bc:	3304      	adds	r3, #4
        aiPbMgrSendNNInfo(req, resp, EnumState_S_IDLE,
 800d4be:	2200      	movs	r2, #0
 800d4c0:	68b9      	ldr	r1, [r7, #8]
 800d4c2:	68f8      	ldr	r0, [r7, #12]
 800d4c4:	f7fe fc90 	bl	800bde8 <aiPbMgrSendNNInfo>
    else
        aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
                EnumError_E_INVALID_PARAM, EnumError_E_INVALID_PARAM);
}
 800d4c8:	e007      	b.n	800d4da <aiPbCmdNNInfo+0x46>
        aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 800d4ca:	2304      	movs	r3, #4
 800d4cc:	9300      	str	r3, [sp, #0]
 800d4ce:	2304      	movs	r3, #4
 800d4d0:	2204      	movs	r2, #4
 800d4d2:	68b9      	ldr	r1, [r7, #8]
 800d4d4:	68f8      	ldr	r0, [r7, #12]
 800d4d6:	f7fd fff3 	bl	800b4c0 <aiPbMgrSendAck>
}
 800d4da:	bf00      	nop
 800d4dc:	3718      	adds	r7, #24
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bd80      	pop	{r7, pc}
	...

0800d4e4 <aiPbCmdNNRun>:

void aiPbCmdNNRun(const reqMsg *req, respMsg *resp, void *param)
{
 800d4e4:	b5b0      	push	{r4, r5, r7, lr}
 800d4e6:	b09e      	sub	sp, #120	; 0x78
 800d4e8:	af02      	add	r7, sp, #8
 800d4ea:	60f8      	str	r0, [r7, #12]
 800d4ec:	60b9      	str	r1, [r7, #8]
 800d4ee:	607a      	str	r2, [r7, #4]
    ai_i32 batch;
    uint32_t tend;
    bool res;
    struct ai_network_exec_ctx *ctx;
    bool inspector_mode = false;
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    ai_buffer ai_input[AI_MNETWORK_IN_NUM];
    ai_buffer ai_output[AI_MNETWORK_OUT_NUM];

    UNUSED(param);

    ctx = aiExecCtx(req->name, -1);
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	330c      	adds	r3, #12
 800d4fa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800d4fe:	4618      	mov	r0, r3
 800d500:	f7ff fcb8 	bl	800ce74 <aiExecCtx>
 800d504:	6538      	str	r0, [r7, #80]	; 0x50
    if (!ctx) {
 800d506:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d108      	bne.n	800d51e <aiPbCmdNNRun+0x3a>
        aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 800d50c:	2304      	movs	r3, #4
 800d50e:	9300      	str	r3, [sp, #0]
 800d510:	2304      	movs	r3, #4
 800d512:	2204      	movs	r2, #4
 800d514:	68b9      	ldr	r1, [r7, #8]
 800d516:	68f8      	ldr	r0, [r7, #12]
 800d518:	f7fd ffd2 	bl	800b4c0 <aiPbMgrSendAck>
                EnumError_E_INVALID_PARAM, EnumError_E_INVALID_PARAM);
        return;
 800d51c:	e196      	b.n	800d84c <aiPbCmdNNRun+0x368>
    }

#ifdef HAS_INSPECTOR
    ctx->no_data = false;
 800d51e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d520:	2200      	movs	r2, #0
 800d522:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    if ((req->param & EnumRunParam_P_RUN_MODE_INSPECTOR) ==
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	689b      	ldr	r3, [r3, #8]
 800d52a:	f003 0301 	and.w	r3, r3, #1
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d002      	beq.n	800d538 <aiPbCmdNNRun+0x54>
            EnumRunParam_P_RUN_MODE_INSPECTOR)
        inspector_mode = true;
 800d532:	2301      	movs	r3, #1
 800d534:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

    if ((req->param & EnumRunParam_P_RUN_MODE_INSPECTOR_WITHOUT_DATA) ==
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	689b      	ldr	r3, [r3, #8]
 800d53c:	f003 0302 	and.w	r3, r3, #2
 800d540:	2b00      	cmp	r3, #0
 800d542:	d006      	beq.n	800d552 <aiPbCmdNNRun+0x6e>
            EnumRunParam_P_RUN_MODE_INSPECTOR_WITHOUT_DATA) {
        inspector_mode = true;
 800d544:	2301      	movs	r3, #1
 800d546:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        ctx->no_data = true;
 800d54a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d54c:	2201      	movs	r2, #1
 800d54e:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    }

    ctx->tcom = 0ULL;
 800d552:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d554:	f04f 0300 	mov.w	r3, #0
 800d558:	f04f 0400 	mov.w	r4, #0
 800d55c:	e9c2 343a 	strd	r3, r4, [r2, #232]	; 0xe8
    ctx->tnodes = 0ULL;
 800d560:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d562:	f04f 0300 	mov.w	r3, #0
 800d566:	f04f 0400 	mov.w	r4, #0
 800d56a:	e9c2 343c 	strd	r3, r4, [r2, #240]	; 0xf0
#endif

    /* Fill the input tensor descriptors */
    for (int i = 0; i < ctx->report.n_inputs; i++) {
 800d56e:	2300      	movs	r3, #0
 800d570:	66bb      	str	r3, [r7, #104]	; 0x68
 800d572:	e053      	b.n	800d61c <aiPbCmdNNRun+0x138>
        ai_input[i] = ctx->report.inputs[i];
 800d574:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d576:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800d578:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d57a:	4613      	mov	r3, r2
 800d57c:	005b      	lsls	r3, r3, #1
 800d57e:	4413      	add	r3, r2
 800d580:	00db      	lsls	r3, r3, #3
 800d582:	4419      	add	r1, r3
 800d584:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d586:	4613      	mov	r3, r2
 800d588:	005b      	lsls	r3, r3, #1
 800d58a:	4413      	add	r3, r2
 800d58c:	00db      	lsls	r3, r3, #3
 800d58e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800d592:	4413      	add	r3, r2
 800d594:	3b48      	subs	r3, #72	; 0x48
 800d596:	461c      	mov	r4, r3
 800d598:	460d      	mov	r5, r1
 800d59a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d59c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d59e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d5a2:	e884 0003 	stmia.w	r4, {r0, r1}
        ai_input[i].n_batches  = 1;
 800d5a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d5a8:	4613      	mov	r3, r2
 800d5aa:	005b      	lsls	r3, r3, #1
 800d5ac:	4413      	add	r3, r2
 800d5ae:	00db      	lsls	r3, r3, #3
 800d5b0:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800d5b4:	4413      	add	r3, r2
 800d5b6:	3b44      	subs	r3, #68	; 0x44
 800d5b8:	2201      	movs	r2, #1
 800d5ba:	801a      	strh	r2, [r3, #0]
        if (ctx->report.inputs[i].data)
 800d5bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5be:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800d5c0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d5c2:	4613      	mov	r3, r2
 800d5c4:	005b      	lsls	r3, r3, #1
 800d5c6:	4413      	add	r3, r2
 800d5c8:	00db      	lsls	r3, r3, #3
 800d5ca:	440b      	add	r3, r1
 800d5cc:	691b      	ldr	r3, [r3, #16]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d013      	beq.n	800d5fa <aiPbCmdNNRun+0x116>
        	ai_input[i].data = AI_HANDLE_PTR(ctx->report.inputs[i].data);
 800d5d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5d4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800d5d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d5d8:	4613      	mov	r3, r2
 800d5da:	005b      	lsls	r3, r3, #1
 800d5dc:	4413      	add	r3, r2
 800d5de:	00db      	lsls	r3, r3, #3
 800d5e0:	440b      	add	r3, r1
 800d5e2:	6919      	ldr	r1, [r3, #16]
 800d5e4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d5e6:	4613      	mov	r3, r2
 800d5e8:	005b      	lsls	r3, r3, #1
 800d5ea:	4413      	add	r3, r2
 800d5ec:	00db      	lsls	r3, r3, #3
 800d5ee:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800d5f2:	4413      	add	r3, r2
 800d5f4:	3b38      	subs	r3, #56	; 0x38
 800d5f6:	6019      	str	r1, [r3, #0]
 800d5f8:	e00d      	b.n	800d616 <aiPbCmdNNRun+0x132>
        else
        	ai_input[i].data = AI_HANDLE_PTR(data_ins[i]);
 800d5fa:	4a96      	ldr	r2, [pc, #600]	; (800d854 <aiPbCmdNNRun+0x370>)
 800d5fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d5fe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800d602:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d604:	4613      	mov	r3, r2
 800d606:	005b      	lsls	r3, r3, #1
 800d608:	4413      	add	r3, r2
 800d60a:	00db      	lsls	r3, r3, #3
 800d60c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800d610:	4413      	add	r3, r2
 800d612:	3b38      	subs	r3, #56	; 0x38
 800d614:	6019      	str	r1, [r3, #0]
    for (int i = 0; i < ctx->report.n_inputs; i++) {
 800d616:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d618:	3301      	adds	r3, #1
 800d61a:	66bb      	str	r3, [r7, #104]	; 0x68
 800d61c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d61e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800d620:	461a      	mov	r2, r3
 800d622:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d624:	4293      	cmp	r3, r2
 800d626:	dba5      	blt.n	800d574 <aiPbCmdNNRun+0x90>
    }

    /* Fill the output tensor descriptors */
    for (int i = 0; i < ctx->report.n_outputs; i++) {
 800d628:	2300      	movs	r3, #0
 800d62a:	667b      	str	r3, [r7, #100]	; 0x64
 800d62c:	e034      	b.n	800d698 <aiPbCmdNNRun+0x1b4>
    	ai_output[i] = ctx->report.outputs[i];
 800d62e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d630:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800d632:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d634:	4613      	mov	r3, r2
 800d636:	005b      	lsls	r3, r3, #1
 800d638:	4413      	add	r3, r2
 800d63a:	00db      	lsls	r3, r3, #3
 800d63c:	4419      	add	r1, r3
 800d63e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d640:	4613      	mov	r3, r2
 800d642:	005b      	lsls	r3, r3, #1
 800d644:	4413      	add	r3, r2
 800d646:	00db      	lsls	r3, r3, #3
 800d648:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800d64c:	4413      	add	r3, r2
 800d64e:	3b60      	subs	r3, #96	; 0x60
 800d650:	461c      	mov	r4, r3
 800d652:	460d      	mov	r5, r1
 800d654:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d656:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d658:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d65c:	e884 0003 	stmia.w	r4, {r0, r1}
        ai_output[i].n_batches = 1;
 800d660:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d662:	4613      	mov	r3, r2
 800d664:	005b      	lsls	r3, r3, #1
 800d666:	4413      	add	r3, r2
 800d668:	00db      	lsls	r3, r3, #3
 800d66a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800d66e:	4413      	add	r3, r2
 800d670:	3b5c      	subs	r3, #92	; 0x5c
 800d672:	2201      	movs	r2, #1
 800d674:	801a      	strh	r2, [r3, #0]
        ai_output[i].data = AI_HANDLE_PTR(data_outs[i]);
 800d676:	4a78      	ldr	r2, [pc, #480]	; (800d858 <aiPbCmdNNRun+0x374>)
 800d678:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d67a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800d67e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d680:	4613      	mov	r3, r2
 800d682:	005b      	lsls	r3, r3, #1
 800d684:	4413      	add	r3, r2
 800d686:	00db      	lsls	r3, r3, #3
 800d688:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800d68c:	4413      	add	r3, r2
 800d68e:	3b50      	subs	r3, #80	; 0x50
 800d690:	6019      	str	r1, [r3, #0]
    for (int i = 0; i < ctx->report.n_outputs; i++) {
 800d692:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d694:	3301      	adds	r3, #1
 800d696:	667b      	str	r3, [r7, #100]	; 0x64
 800d698:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d69a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d69c:	461a      	mov	r2, r3
 800d69e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d6a0:	4293      	cmp	r3, r2
 800d6a2:	dbc4      	blt.n	800d62e <aiPbCmdNNRun+0x14a>
    }

    /* 1 - Send a ACK (ready to receive a buffer) */
    aiPbMgrSendAck(req, resp, EnumState_S_WAITING,
 800d6a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	f7fd ff3f 	bl	800b52c <aiPbAiBufferSize>
 800d6ae:	4602      	mov	r2, r0
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	9300      	str	r3, [sp, #0]
 800d6b4:	4613      	mov	r3, r2
 800d6b6:	2201      	movs	r2, #1
 800d6b8:	68b9      	ldr	r1, [r7, #8]
 800d6ba:	68f8      	ldr	r0, [r7, #12]
 800d6bc:	f7fd ff00 	bl	800b4c0 <aiPbMgrSendAck>
            aiPbAiBufferSize(&ai_input[0]), EnumError_E_NONE);

    /* 2 - Receive all input tensors */
    for (int i = 0; i < ctx->report.n_inputs; i++) {
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	663b      	str	r3, [r7, #96]	; 0x60
 800d6c4:	e027      	b.n	800d716 <aiPbCmdNNRun+0x232>
    	/* upload a buffer */
    	EnumState state = EnumState_S_WAITING;
 800d6c6:	2301      	movs	r3, #1
 800d6c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    	if ((i + 1) == ctx->report.n_inputs)
 800d6cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d6ce:	3301      	adds	r3, #1
 800d6d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d6d2:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 800d6d4:	4293      	cmp	r3, r2
 800d6d6:	d102      	bne.n	800d6de <aiPbCmdNNRun+0x1fa>
    		state = EnumState_S_PROCESSING;
 800d6d8:	2302      	movs	r3, #2
 800d6da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        res = aiPbMgrReceiveAiBuffer3(req, resp, state, &ai_input[i]);
 800d6de:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800d6e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d6e4:	4613      	mov	r3, r2
 800d6e6:	005b      	lsls	r3, r3, #1
 800d6e8:	4413      	add	r3, r2
 800d6ea:	00db      	lsls	r3, r3, #3
 800d6ec:	440b      	add	r3, r1
 800d6ee:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800d6f2:	68b9      	ldr	r1, [r7, #8]
 800d6f4:	68f8      	ldr	r0, [r7, #12]
 800d6f6:	f7fe f831 	bl	800b75c <aiPbMgrReceiveAiBuffer3>
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
        if (res != true)
 800d700:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d704:	f083 0301 	eor.w	r3, r3, #1
 800d708:	b2db      	uxtb	r3, r3
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	f040 809d 	bne.w	800d84a <aiPbCmdNNRun+0x366>
    for (int i = 0; i < ctx->report.n_inputs; i++) {
 800d710:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d712:	3301      	adds	r3, #1
 800d714:	663b      	str	r3, [r7, #96]	; 0x60
 800d716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d718:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800d71a:	461a      	mov	r2, r3
 800d71c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d71e:	4293      	cmp	r3, r2
 800d720:	dbd1      	blt.n	800d6c6 <aiPbCmdNNRun+0x1e2>
            return;
    }

    ints = disableInts();
 800d722:	f7fe fe71 	bl	800c408 <disableInts>
 800d726:	64f8      	str	r0, [r7, #76]	; 0x4c

    /* Update the PN context for inspector callbacks */
    aiSetPbContext(ctx, req, resp);
 800d728:	68ba      	ldr	r2, [r7, #8]
 800d72a:	68f9      	ldr	r1, [r7, #12]
 800d72c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d72e:	f7ff fbfd 	bl	800cf2c <aiSetPbContext>

    if (inspector_mode)
 800d732:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d736:	2b00      	cmp	r3, #0
 800d738:	d002      	beq.n	800d740 <aiPbCmdNNRun+0x25c>
        aiInspectorInitAndBind(ctx);
 800d73a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d73c:	f7ff fdda 	bl	800d2f4 <aiInspectorInitAndBind>

    /* Processing */
    dwtReset();
 800d740:	f7fe fc46 	bl	800bfd0 <dwtReset>

    batch = ai_mnetwork_run(ctx->network, ai_input, ai_output);
 800d744:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	f107 0210 	add.w	r2, r7, #16
 800d74c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800d750:	4618      	mov	r0, r3
 800d752:	f000 fad7 	bl	800dd04 <ai_mnetwork_run>
 800d756:	64b8      	str	r0, [r7, #72]	; 0x48
    if (batch != 1) {
 800d758:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d75a:	2b01      	cmp	r3, #1
 800d75c:	d012      	beq.n	800d784 <aiPbCmdNNRun+0x2a0>
        aiLogErr(ai_mnetwork_get_error(ctx->network),
 800d75e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	4618      	mov	r0, r3
 800d764:	f000 fa5d 	bl	800dc22 <ai_mnetwork_get_error>
 800d768:	4603      	mov	r3, r0
 800d76a:	493c      	ldr	r1, [pc, #240]	; (800d85c <aiPbCmdNNRun+0x378>)
 800d76c:	4618      	mov	r0, r3
 800d76e:	f7fe fead 	bl	800c4cc <aiLogErr>
                "ai_mnetwork_run");
        aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 800d772:	230a      	movs	r3, #10
 800d774:	9300      	str	r3, [sp, #0]
 800d776:	230a      	movs	r3, #10
 800d778:	2204      	movs	r2, #4
 800d77a:	68b9      	ldr	r1, [r7, #8]
 800d77c:	68f8      	ldr	r0, [r7, #12]
 800d77e:	f7fd fe9f 	bl	800b4c0 <aiPbMgrSendAck>
                EnumError_E_GENERIC, EnumError_E_GENERIC);
        return;
 800d782:	e063      	b.n	800d84c <aiPbCmdNNRun+0x368>
    }
    tend = dwtGetCycles();
 800d784:	f7fe fc30 	bl	800bfe8 <dwtGetCycles>
 800d788:	6478      	str	r0, [r7, #68]	; 0x44

#ifdef HAS_INSPECTOR
    tend = ctx->tcom + ctx->tnodes + tend;
 800d78a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d78c:	e9d3 343a 	ldrd	r3, r4, [r3, #232]	; 0xe8
 800d790:	461a      	mov	r2, r3
 800d792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d794:	e9d3 343c 	ldrd	r3, r4, [r3, #240]	; 0xf0
 800d798:	4413      	add	r3, r2
 800d79a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d79c:	4413      	add	r3, r2
 800d79e:	647b      	str	r3, [r7, #68]	; 0x44
#endif

    if (inspector_mode)
 800d7a0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d010      	beq.n	800d7ca <aiPbCmdNNRun+0x2e6>
        aiInspectorSendReport(req, resp, EnumState_S_PROCESSING, ctx,
 800d7a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d7aa:	f04f 0400 	mov.w	r4, #0
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	4621      	mov	r1, r4
 800d7b2:	f7fe fc2d 	bl	800c010 <dwtCyclesToFloatMs>
 800d7b6:	eef0 7a40 	vmov.f32	s15, s0
 800d7ba:	eeb0 0a67 	vmov.f32	s0, s15
 800d7be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d7c0:	2202      	movs	r2, #2
 800d7c2:	68b9      	ldr	r1, [r7, #8]
 800d7c4:	68f8      	ldr	r0, [r7, #12]
 800d7c6:	f7ff fd00 	bl	800d1ca <aiInspectorSendReport>
                dwtCyclesToFloatMs(tend));

    /* 3 - Send all output tensors */
    for (int i = 0; i < ctx->report.n_outputs; i++) {
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	65bb      	str	r3, [r7, #88]	; 0x58
 800d7ce:	e02b      	b.n	800d828 <aiPbCmdNNRun+0x344>
    	/* download a buffer */
    	EnumState state = EnumState_S_PROCESSING;
 800d7d0:	2302      	movs	r3, #2
 800d7d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    	if ((i + 1) == ctx->report.n_outputs)
 800d7d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d7d8:	3301      	adds	r3, #1
 800d7da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d7dc:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 800d7de:	4293      	cmp	r3, r2
 800d7e0:	d102      	bne.n	800d7e8 <aiPbCmdNNRun+0x304>
    		state = EnumState_S_DONE;
 800d7e2:	2303      	movs	r3, #3
 800d7e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        aiPbMgrSendAiBuffer3(req, resp, state,
 800d7e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d7ea:	f04f 0400 	mov.w	r4, #0
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	4621      	mov	r1, r4
 800d7f2:	f7fe fc0d 	bl	800c010 <dwtCyclesToFloatMs>
 800d7f6:	eef0 7a40 	vmov.f32	s15, s0
                EnumLayerType_LAYER_TYPE_OUTPUT << 16 | 0,
                0, dwtCyclesToFloatMs(tend),
                &ai_output[i]);
 800d7fa:	f107 0110 	add.w	r1, r7, #16
 800d7fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d800:	4613      	mov	r3, r2
 800d802:	005b      	lsls	r3, r3, #1
 800d804:	4413      	add	r3, r2
 800d806:	00db      	lsls	r3, r3, #3
 800d808:	440b      	add	r3, r1
        aiPbMgrSendAiBuffer3(req, resp, state,
 800d80a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d80e:	9301      	str	r3, [sp, #4]
 800d810:	2300      	movs	r3, #0
 800d812:	9300      	str	r3, [sp, #0]
 800d814:	eeb0 0a67 	vmov.f32	s0, s15
 800d818:	2300      	movs	r3, #0
 800d81a:	68b9      	ldr	r1, [r7, #8]
 800d81c:	68f8      	ldr	r0, [r7, #12]
 800d81e:	f7fe f929 	bl	800ba74 <aiPbMgrSendAiBuffer3>
    for (int i = 0; i < ctx->report.n_outputs; i++) {
 800d822:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d824:	3301      	adds	r3, #1
 800d826:	65bb      	str	r3, [r7, #88]	; 0x58
 800d828:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d82a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d82c:	461a      	mov	r2, r3
 800d82e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d830:	4293      	cmp	r3, r2
 800d832:	dbcd      	blt.n	800d7d0 <aiPbCmdNNRun+0x2ec>
    }

    if (inspector_mode)
 800d834:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d002      	beq.n	800d842 <aiPbCmdNNRun+0x35e>
        aiInspectorUnbindAndDestroy(ctx);
 800d83c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d83e:	f7ff fdaf 	bl	800d3a0 <aiInspectorUnbindAndDestroy>

    restoreInts(ints);
 800d842:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d844:	f7fe fdf0 	bl	800c428 <restoreInts>
 800d848:	e000      	b.n	800d84c <aiPbCmdNNRun+0x368>
            return;
 800d84a:	bf00      	nop
}
 800d84c:	3770      	adds	r7, #112	; 0x70
 800d84e:	46bd      	mov	sp, r7
 800d850:	bdb0      	pop	{r4, r5, r7, pc}
 800d852:	bf00      	nop
 800d854:	20000018 	.word	0x20000018
 800d858:	2000001c 	.word	0x2000001c
 800d85c:	080157ec 	.word	0x080157ec

0800d860 <aiValidationCore>:

static int aiValidationCore(void)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	af00      	add	r7, sp, #0
    return aiPbMgrWaitAndProcess();
 800d864:	f7fd fdc0 	bl	800b3e8 <aiPbMgrWaitAndProcess>
 800d868:	4603      	mov	r3, r0
}
 800d86a:	4618      	mov	r0, r3
 800d86c:	bd80      	pop	{r7, pc}
	...

0800d870 <aiValidationInit>:
#endif
        AI_PB_CMD_END,
};

int aiValidationInit(void)
{
 800d870:	b580      	push	{r7, lr}
 800d872:	af00      	add	r7, sp, #0
    aiPbMgrInit(pbCmdFuncTab);
 800d874:	4808      	ldr	r0, [pc, #32]	; (800d898 <aiValidationInit+0x28>)
 800d876:	f7fd fd7b 	bl	800b370 <aiPbMgrInit>

    aiTestHeader(_APP_NAME_, _APP_VERSION_MAJOR_, _APP_VERSION_MINOR_);
 800d87a:	2202      	movs	r2, #2
 800d87c:	2103      	movs	r1, #3
 800d87e:	4807      	ldr	r0, [pc, #28]	; (800d89c <aiValidationInit+0x2c>)
 800d880:	f7ff f910 	bl	800caa4 <aiTestHeader>

    dwtIpInit();
 800d884:	f7fe fb88 	bl	800bf98 <dwtIpInit>
    crcIpInit();
 800d888:	f7fe fb66 	bl	800bf58 <crcIpInit>
    logDeviceConf();
 800d88c:	f7fe fd14 	bl	800c2b8 <logDeviceConf>

    return 0;
 800d890:	2300      	movs	r3, #0
}
 800d892:	4618      	mov	r0, r3
 800d894:	bd80      	pop	{r7, pc}
 800d896:	bf00      	nop
 800d898:	20000020 	.word	0x20000020
 800d89c:	080157fc 	.word	0x080157fc

0800d8a0 <aiValidationProcess>:

int aiValidationProcess(void)
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b082      	sub	sp, #8
 800d8a4:	af00      	add	r7, sp, #0
    int r;

    r = aiInit();
 800d8a6:	f7ff fd93 	bl	800d3d0 <aiInit>
 800d8aa:	6078      	str	r0, [r7, #4]
    if (r) {
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d009      	beq.n	800d8c6 <aiValidationProcess+0x26>
        printf("\r\nE:  aiInit() r=%d\r\n", r);
 800d8b2:	6879      	ldr	r1, [r7, #4]
 800d8b4:	4817      	ldr	r0, [pc, #92]	; (800d914 <aiValidationProcess+0x74>)
 800d8b6:	f003 fb7d 	bl	8010fb4 <iprintf>
        HAL_Delay(2000);
 800d8ba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800d8be:	f7fb f817 	bl	80088f0 <HAL_Delay>
        return r;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	e022      	b.n	800d90c <aiValidationProcess+0x6c>
    } else {
        printf("\r\n");
 800d8c6:	4814      	ldr	r0, [pc, #80]	; (800d918 <aiValidationProcess+0x78>)
 800d8c8:	f003 fbe8 	bl	801109c <puts>
        printf("-------------------------------------------\r\n");
 800d8cc:	4813      	ldr	r0, [pc, #76]	; (800d91c <aiValidationProcess+0x7c>)
 800d8ce:	f003 fbe5 	bl	801109c <puts>
        printf("| READY to receive a CMD from the HOST... |\r\n");
 800d8d2:	4813      	ldr	r0, [pc, #76]	; (800d920 <aiValidationProcess+0x80>)
 800d8d4:	f003 fbe2 	bl	801109c <puts>
        printf("-------------------------------------------\r\n");
 800d8d8:	4810      	ldr	r0, [pc, #64]	; (800d91c <aiValidationProcess+0x7c>)
 800d8da:	f003 fbdf 	bl	801109c <puts>
        printf("\r\n");
 800d8de:	480e      	ldr	r0, [pc, #56]	; (800d918 <aiValidationProcess+0x78>)
 800d8e0:	f003 fbdc 	bl	801109c <puts>
        printf("# Note: At this point, default ASCII-base terminal should be closed\r\n");
 800d8e4:	480f      	ldr	r0, [pc, #60]	; (800d924 <aiValidationProcess+0x84>)
 800d8e6:	f003 fbd9 	bl	801109c <puts>
        printf("# and a stm32com-base interface should be used\r\n");
 800d8ea:	480f      	ldr	r0, [pc, #60]	; (800d928 <aiValidationProcess+0x88>)
 800d8ec:	f003 fbd6 	bl	801109c <puts>
        printf("# (i.e. Python stm32com module). Protocol version = %d.%d\r\n",
 800d8f0:	2201      	movs	r2, #1
 800d8f2:	2102      	movs	r1, #2
 800d8f4:	480d      	ldr	r0, [pc, #52]	; (800d92c <aiValidationProcess+0x8c>)
 800d8f6:	f003 fb5d 	bl	8010fb4 <iprintf>
                EnumVersion_P_VERSION_MAJOR,
                EnumVersion_P_VERSION_MINOR);
    }

    ioDisableWrite();
 800d8fa:	f7fe fda5 	bl	800c448 <ioDisableWrite>

    do {
        r = aiValidationCore();
 800d8fe:	f7ff ffaf 	bl	800d860 <aiValidationCore>
 800d902:	6078      	str	r0, [r7, #4]
    } while (r==0);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d0f9      	beq.n	800d8fe <aiValidationProcess+0x5e>

    return r;
 800d90a:	687b      	ldr	r3, [r7, #4]
}
 800d90c:	4618      	mov	r0, r3
 800d90e:	3708      	adds	r7, #8
 800d910:	46bd      	mov	sp, r7
 800d912:	bd80      	pop	{r7, pc}
 800d914:	0801580c 	.word	0x0801580c
 800d918:	08015824 	.word	0x08015824
 800d91c:	08015828 	.word	0x08015828
 800d920:	08015858 	.word	0x08015858
 800d924:	08015888 	.word	0x08015888
 800d928:	080158d0 	.word	0x080158d0
 800d92c:	08015900 	.word	0x08015900

0800d930 <MX_X_CUBE_AI_Init>:

/*************************************************************************
  *
  */
void MX_X_CUBE_AI_Init(void)
{
 800d930:	b580      	push	{r7, lr}
 800d932:	af00      	add	r7, sp, #0
    MX_UARTx_Init();
 800d934:	f7fa fd88 	bl	8008448 <MX_USART1_UART_Init>
    aiValidationInit();
 800d938:	f7ff ff9a 	bl	800d870 <aiValidationInit>
    /* USER CODE BEGIN 0 */
    /* USER CODE END 0 */
}
 800d93c:	bf00      	nop
 800d93e:	bd80      	pop	{r7, pc}

0800d940 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 800d940:	b580      	push	{r7, lr}
 800d942:	af00      	add	r7, sp, #0
    aiValidationProcess();
 800d944:	f7ff ffac 	bl	800d8a0 <aiValidationProcess>
    /* USER CODE BEGIN 1 */
    /* USER CODE END 1 */
}
 800d948:	bf00      	nop
 800d94a:	bd80      	pop	{r7, pc}

0800d94c <ai_mnetwork_is_valid>:
AI_STATIC struct network_instance gnetworks[AI_MNETWORK_NUMBER] = {0};

AI_DECLARE_STATIC
ai_bool ai_mnetwork_is_valid(const char* name,
        const ai_network_entry_t *entry)
{
 800d94c:	b590      	push	{r4, r7, lr}
 800d94e:	b083      	sub	sp, #12
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
 800d954:	6039      	str	r1, [r7, #0]
    if (name && (strlen(entry->name) == strlen(name)) &&
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d01d      	beq.n	800d998 <ai_mnetwork_is_valid+0x4c>
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	4618      	mov	r0, r3
 800d962:	f7f9 fdc2 	bl	80074ea <strlen>
 800d966:	4604      	mov	r4, r0
 800d968:	6878      	ldr	r0, [r7, #4]
 800d96a:	f7f9 fdbe 	bl	80074ea <strlen>
 800d96e:	4603      	mov	r3, r0
 800d970:	429c      	cmp	r4, r3
 800d972:	d111      	bne.n	800d998 <ai_mnetwork_is_valid+0x4c>
            (strncmp(entry->name, name, strlen(entry->name)) == 0))
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	681c      	ldr	r4, [r3, #0]
 800d978:	683b      	ldr	r3, [r7, #0]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	4618      	mov	r0, r3
 800d97e:	f7f9 fdb4 	bl	80074ea <strlen>
 800d982:	4603      	mov	r3, r0
 800d984:	461a      	mov	r2, r3
 800d986:	6879      	ldr	r1, [r7, #4]
 800d988:	4620      	mov	r0, r4
 800d98a:	f003 fba7 	bl	80110dc <strncmp>
 800d98e:	4603      	mov	r3, r0
    if (name && (strlen(entry->name) == strlen(name)) &&
 800d990:	2b00      	cmp	r3, #0
 800d992:	d101      	bne.n	800d998 <ai_mnetwork_is_valid+0x4c>
        return true;
 800d994:	2301      	movs	r3, #1
 800d996:	e000      	b.n	800d99a <ai_mnetwork_is_valid+0x4e>
    return false;
 800d998:	2300      	movs	r3, #0
}
 800d99a:	4618      	mov	r0, r3
 800d99c:	370c      	adds	r7, #12
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd90      	pop	{r4, r7, pc}
	...

0800d9a4 <ai_mnetwork_handle>:

AI_DECLARE_STATIC
struct network_instance *ai_mnetwork_handle(struct network_instance *inst)
{
 800d9a4:	b480      	push	{r7}
 800d9a6:	b085      	sub	sp, #20
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	60fb      	str	r3, [r7, #12]
 800d9b0:	e026      	b.n	800da00 <ai_mnetwork_handle+0x5c>
        if ((inst) && (&gnetworks[i] == inst))
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d00b      	beq.n	800d9d0 <ai_mnetwork_handle+0x2c>
 800d9b8:	68fa      	ldr	r2, [r7, #12]
 800d9ba:	4613      	mov	r3, r2
 800d9bc:	00db      	lsls	r3, r3, #3
 800d9be:	1a9b      	subs	r3, r3, r2
 800d9c0:	00db      	lsls	r3, r3, #3
 800d9c2:	4a14      	ldr	r2, [pc, #80]	; (800da14 <ai_mnetwork_handle+0x70>)
 800d9c4:	4413      	add	r3, r2
 800d9c6:	687a      	ldr	r2, [r7, #4]
 800d9c8:	429a      	cmp	r2, r3
 800d9ca:	d101      	bne.n	800d9d0 <ai_mnetwork_handle+0x2c>
            return inst;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	e01b      	b.n	800da08 <ai_mnetwork_handle+0x64>
        else if ((!inst) && (gnetworks[i].entry == NULL))
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d111      	bne.n	800d9fa <ai_mnetwork_handle+0x56>
 800d9d6:	490f      	ldr	r1, [pc, #60]	; (800da14 <ai_mnetwork_handle+0x70>)
 800d9d8:	68fa      	ldr	r2, [r7, #12]
 800d9da:	4613      	mov	r3, r2
 800d9dc:	00db      	lsls	r3, r3, #3
 800d9de:	1a9b      	subs	r3, r3, r2
 800d9e0:	00db      	lsls	r3, r3, #3
 800d9e2:	440b      	add	r3, r1
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d107      	bne.n	800d9fa <ai_mnetwork_handle+0x56>
            return &gnetworks[i];
 800d9ea:	68fa      	ldr	r2, [r7, #12]
 800d9ec:	4613      	mov	r3, r2
 800d9ee:	00db      	lsls	r3, r3, #3
 800d9f0:	1a9b      	subs	r3, r3, r2
 800d9f2:	00db      	lsls	r3, r3, #3
 800d9f4:	4a07      	ldr	r2, [pc, #28]	; (800da14 <ai_mnetwork_handle+0x70>)
 800d9f6:	4413      	add	r3, r2
 800d9f8:	e006      	b.n	800da08 <ai_mnetwork_handle+0x64>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	3301      	adds	r3, #1
 800d9fe:	60fb      	str	r3, [r7, #12]
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	2b00      	cmp	r3, #0
 800da04:	ddd5      	ble.n	800d9b2 <ai_mnetwork_handle+0xe>
    }
    return NULL;
 800da06:	2300      	movs	r3, #0
}
 800da08:	4618      	mov	r0, r3
 800da0a:	3714      	adds	r7, #20
 800da0c:	46bd      	mov	sp, r7
 800da0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da12:	4770      	bx	lr
 800da14:	200120c0 	.word	0x200120c0

0800da18 <ai_mnetwork_release_handle>:

AI_DECLARE_STATIC
void ai_mnetwork_release_handle(struct network_instance *inst)
{
 800da18:	b480      	push	{r7}
 800da1a:	b085      	sub	sp, #20
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 800da20:	2300      	movs	r3, #0
 800da22:	60fb      	str	r3, [r7, #12]
 800da24:	e019      	b.n	800da5a <ai_mnetwork_release_handle+0x42>
        if ((inst) && (&gnetworks[i] == inst)) {
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d013      	beq.n	800da54 <ai_mnetwork_release_handle+0x3c>
 800da2c:	68fa      	ldr	r2, [r7, #12]
 800da2e:	4613      	mov	r3, r2
 800da30:	00db      	lsls	r3, r3, #3
 800da32:	1a9b      	subs	r3, r3, r2
 800da34:	00db      	lsls	r3, r3, #3
 800da36:	4a0d      	ldr	r2, [pc, #52]	; (800da6c <ai_mnetwork_release_handle+0x54>)
 800da38:	4413      	add	r3, r2
 800da3a:	687a      	ldr	r2, [r7, #4]
 800da3c:	429a      	cmp	r2, r3
 800da3e:	d109      	bne.n	800da54 <ai_mnetwork_release_handle+0x3c>
            gnetworks[i].entry = NULL;
 800da40:	490a      	ldr	r1, [pc, #40]	; (800da6c <ai_mnetwork_release_handle+0x54>)
 800da42:	68fa      	ldr	r2, [r7, #12]
 800da44:	4613      	mov	r3, r2
 800da46:	00db      	lsls	r3, r3, #3
 800da48:	1a9b      	subs	r3, r3, r2
 800da4a:	00db      	lsls	r3, r3, #3
 800da4c:	440b      	add	r3, r1
 800da4e:	2200      	movs	r2, #0
 800da50:	601a      	str	r2, [r3, #0]
            return;
 800da52:	e005      	b.n	800da60 <ai_mnetwork_release_handle+0x48>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	3301      	adds	r3, #1
 800da58:	60fb      	str	r3, [r7, #12]
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	dde2      	ble.n	800da26 <ai_mnetwork_release_handle+0xe>
        }
    }
}
 800da60:	3714      	adds	r7, #20
 800da62:	46bd      	mov	sp, r7
 800da64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da68:	4770      	bx	lr
 800da6a:	bf00      	nop
 800da6c:	200120c0 	.word	0x200120c0

0800da70 <ai_mnetwork_find>:

AI_API_ENTRY
const char* ai_mnetwork_find(const char *name, ai_int idx)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b084      	sub	sp, #16
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
 800da78:	6039      	str	r1, [r7, #0]
    const ai_network_entry_t *entry;

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 800da7a:	2300      	movs	r3, #0
 800da7c:	60fb      	str	r3, [r7, #12]
 800da7e:	e01c      	b.n	800daba <ai_mnetwork_find+0x4a>
        entry = &networks[i];
 800da80:	68fa      	ldr	r2, [r7, #12]
 800da82:	4613      	mov	r3, r2
 800da84:	005b      	lsls	r3, r3, #1
 800da86:	4413      	add	r3, r2
 800da88:	015b      	lsls	r3, r3, #5
 800da8a:	4a10      	ldr	r2, [pc, #64]	; (800dacc <ai_mnetwork_find+0x5c>)
 800da8c:	4413      	add	r3, r2
 800da8e:	60bb      	str	r3, [r7, #8]
        if (ai_mnetwork_is_valid(name, entry))
 800da90:	68b9      	ldr	r1, [r7, #8]
 800da92:	6878      	ldr	r0, [r7, #4]
 800da94:	f7ff ff5a 	bl	800d94c <ai_mnetwork_is_valid>
 800da98:	4603      	mov	r3, r0
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d002      	beq.n	800daa4 <ai_mnetwork_find+0x34>
            return entry->name;
 800da9e:	68bb      	ldr	r3, [r7, #8]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	e00e      	b.n	800dac2 <ai_mnetwork_find+0x52>
        else {
            if (!idx--)
 800daa4:	683b      	ldr	r3, [r7, #0]
 800daa6:	1e5a      	subs	r2, r3, #1
 800daa8:	603a      	str	r2, [r7, #0]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d102      	bne.n	800dab4 <ai_mnetwork_find+0x44>
                return entry->name;
 800daae:	68bb      	ldr	r3, [r7, #8]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	e006      	b.n	800dac2 <ai_mnetwork_find+0x52>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	3301      	adds	r3, #1
 800dab8:	60fb      	str	r3, [r7, #12]
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	dddf      	ble.n	800da80 <ai_mnetwork_find+0x10>
        }
    }
    return NULL;
 800dac0:	2300      	movs	r3, #0
}
 800dac2:	4618      	mov	r0, r3
 800dac4:	3710      	adds	r7, #16
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}
 800daca:	bf00      	nop
 800dacc:	08015ce0 	.word	0x08015ce0

0800dad0 <ai_mnetwork_create>:

AI_API_ENTRY
ai_error ai_mnetwork_create(const char *name, ai_handle* network,
        const ai_buffer* network_config)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b08a      	sub	sp, #40	; 0x28
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	60f8      	str	r0, [r7, #12]
 800dad8:	60b9      	str	r1, [r7, #8]
 800dada:	607a      	str	r2, [r7, #4]
    const ai_network_entry_t *entry;
    const ai_network_entry_t *found = NULL;
 800dadc:	2300      	movs	r3, #0
 800dade:	627b      	str	r3, [r7, #36]	; 0x24
    ai_error err;
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 800dae0:	2000      	movs	r0, #0
 800dae2:	f7ff ff5f 	bl	800d9a4 <ai_mnetwork_handle>
 800dae6:	61f8      	str	r0, [r7, #28]

    if (!inst) {
 800dae8:	69fb      	ldr	r3, [r7, #28]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d108      	bne.n	800db00 <ai_mnetwork_create+0x30>
        err.type = AI_ERROR_ALLOCATION_FAILED;
 800daee:	2331      	movs	r3, #49	; 0x31
 800daf0:	753b      	strb	r3, [r7, #20]
        err.code = AI_ERROR_CODE_NETWORK;
 800daf2:	697b      	ldr	r3, [r7, #20]
 800daf4:	2210      	movs	r2, #16
 800daf6:	f362 231f 	bfi	r3, r2, #8, #24
 800dafa:	617b      	str	r3, [r7, #20]
        return err;
 800dafc:	697b      	ldr	r3, [r7, #20]
 800dafe:	e04d      	b.n	800db9c <ai_mnetwork_create+0xcc>
    }

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 800db00:	2300      	movs	r3, #0
 800db02:	623b      	str	r3, [r7, #32]
 800db04:	e014      	b.n	800db30 <ai_mnetwork_create+0x60>
        entry = &networks[i];
 800db06:	6a3a      	ldr	r2, [r7, #32]
 800db08:	4613      	mov	r3, r2
 800db0a:	005b      	lsls	r3, r3, #1
 800db0c:	4413      	add	r3, r2
 800db0e:	015b      	lsls	r3, r3, #5
 800db10:	4a24      	ldr	r2, [pc, #144]	; (800dba4 <ai_mnetwork_create+0xd4>)
 800db12:	4413      	add	r3, r2
 800db14:	61bb      	str	r3, [r7, #24]
        if (ai_mnetwork_is_valid(name, entry)) {
 800db16:	69b9      	ldr	r1, [r7, #24]
 800db18:	68f8      	ldr	r0, [r7, #12]
 800db1a:	f7ff ff17 	bl	800d94c <ai_mnetwork_is_valid>
 800db1e:	4603      	mov	r3, r0
 800db20:	2b00      	cmp	r3, #0
 800db22:	d002      	beq.n	800db2a <ai_mnetwork_create+0x5a>
            found = entry;
 800db24:	69bb      	ldr	r3, [r7, #24]
 800db26:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800db28:	e005      	b.n	800db36 <ai_mnetwork_create+0x66>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 800db2a:	6a3b      	ldr	r3, [r7, #32]
 800db2c:	3301      	adds	r3, #1
 800db2e:	623b      	str	r3, [r7, #32]
 800db30:	6a3b      	ldr	r3, [r7, #32]
 800db32:	2b00      	cmp	r3, #0
 800db34:	dde7      	ble.n	800db06 <ai_mnetwork_create+0x36>
        }
    }

    if (!found) {
 800db36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d108      	bne.n	800db4e <ai_mnetwork_create+0x7e>
        err.type = AI_ERROR_INVALID_PARAM;
 800db3c:	2314      	movs	r3, #20
 800db3e:	753b      	strb	r3, [r7, #20]
        err.code = AI_ERROR_CODE_NETWORK;
 800db40:	697b      	ldr	r3, [r7, #20]
 800db42:	2210      	movs	r2, #16
 800db44:	f362 231f 	bfi	r3, r2, #8, #24
 800db48:	617b      	str	r3, [r7, #20]
        return err;
 800db4a:	697b      	ldr	r3, [r7, #20]
 800db4c:	e026      	b.n	800db9c <ai_mnetwork_create+0xcc>
    }

    if (network_config == NULL)
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d109      	bne.n	800db68 <ai_mnetwork_create+0x98>
        err = found->ai_create(network, found->config);
 800db54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db5a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800db5c:	4611      	mov	r1, r2
 800db5e:	68b8      	ldr	r0, [r7, #8]
 800db60:	4798      	blx	r3
 800db62:	4603      	mov	r3, r0
 800db64:	617b      	str	r3, [r7, #20]
 800db66:	e006      	b.n	800db76 <ai_mnetwork_create+0xa6>
    else
        err = found->ai_create(network, network_config);
 800db68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db6c:	6879      	ldr	r1, [r7, #4]
 800db6e:	68b8      	ldr	r0, [r7, #8]
 800db70:	4798      	blx	r3
 800db72:	4603      	mov	r3, r0
 800db74:	617b      	str	r3, [r7, #20]
    if ((err.code == AI_ERROR_CODE_NONE) && (err.type == AI_ERROR_NONE)) {
 800db76:	697b      	ldr	r3, [r7, #20]
 800db78:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d10c      	bne.n	800db9a <ai_mnetwork_create+0xca>
 800db80:	7d3b      	ldrb	r3, [r7, #20]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d109      	bne.n	800db9a <ai_mnetwork_create+0xca>
        inst->entry = found;
 800db86:	69fb      	ldr	r3, [r7, #28]
 800db88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db8a:	601a      	str	r2, [r3, #0]
        inst->handle = *network;
 800db8c:	68bb      	ldr	r3, [r7, #8]
 800db8e:	681a      	ldr	r2, [r3, #0]
 800db90:	69fb      	ldr	r3, [r7, #28]
 800db92:	605a      	str	r2, [r3, #4]
        *network = (ai_handle*)inst;
 800db94:	68bb      	ldr	r3, [r7, #8]
 800db96:	69fa      	ldr	r2, [r7, #28]
 800db98:	601a      	str	r2, [r3, #0]
    }

    return err;
 800db9a:	697b      	ldr	r3, [r7, #20]
}
 800db9c:	4618      	mov	r0, r3
 800db9e:	3728      	adds	r7, #40	; 0x28
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}
 800dba4:	08015ce0 	.word	0x08015ce0

0800dba8 <ai_mnetwork_destroy>:

AI_API_ENTRY
ai_handle ai_mnetwork_destroy(ai_handle network)
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b084      	sub	sp, #16
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 800dbb0:	6878      	ldr	r0, [r7, #4]
 800dbb2:	f7ff fef7 	bl	800d9a4 <ai_mnetwork_handle>
 800dbb6:	60f8      	str	r0, [r7, #12]
    if (inn) {
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d011      	beq.n	800dbe2 <ai_mnetwork_destroy+0x3a>
        ai_handle hdl = inn->entry->ai_destroy(inn->handle);
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dbc4:	68fa      	ldr	r2, [r7, #12]
 800dbc6:	6852      	ldr	r2, [r2, #4]
 800dbc8:	4610      	mov	r0, r2
 800dbca:	4798      	blx	r3
 800dbcc:	60b8      	str	r0, [r7, #8]
        if (hdl != inn->handle) {
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	685b      	ldr	r3, [r3, #4]
 800dbd2:	68ba      	ldr	r2, [r7, #8]
 800dbd4:	429a      	cmp	r2, r3
 800dbd6:	d004      	beq.n	800dbe2 <ai_mnetwork_destroy+0x3a>
            ai_mnetwork_release_handle(inn);
 800dbd8:	68f8      	ldr	r0, [r7, #12]
 800dbda:	f7ff ff1d 	bl	800da18 <ai_mnetwork_release_handle>
            network = AI_HANDLE_NULL;
 800dbde:	2300      	movs	r3, #0
 800dbe0:	607b      	str	r3, [r7, #4]
        }
    }
    return network;
 800dbe2:	687b      	ldr	r3, [r7, #4]
}
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	3710      	adds	r7, #16
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	bd80      	pop	{r7, pc}

0800dbec <ai_mnetwork_get_info>:

AI_API_ENTRY
ai_bool ai_mnetwork_get_info(ai_handle network, ai_network_report* report)
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b084      	sub	sp, #16
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
 800dbf4:	6039      	str	r1, [r7, #0]
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 800dbf6:	6878      	ldr	r0, [r7, #4]
 800dbf8:	f7ff fed4 	bl	800d9a4 <ai_mnetwork_handle>
 800dbfc:	60f8      	str	r0, [r7, #12]
    if (inn)
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d009      	beq.n	800dc18 <ai_mnetwork_get_info+0x2c>
        return inn->entry->ai_get_info(inn->handle, report);
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc0a:	68fa      	ldr	r2, [r7, #12]
 800dc0c:	6852      	ldr	r2, [r2, #4]
 800dc0e:	6839      	ldr	r1, [r7, #0]
 800dc10:	4610      	mov	r0, r2
 800dc12:	4798      	blx	r3
 800dc14:	4603      	mov	r3, r0
 800dc16:	e000      	b.n	800dc1a <ai_mnetwork_get_info+0x2e>
    else
        return false;
 800dc18:	2300      	movs	r3, #0
}
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	3710      	adds	r7, #16
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	bd80      	pop	{r7, pc}

0800dc22 <ai_mnetwork_get_error>:

AI_API_ENTRY
ai_error ai_mnetwork_get_error(ai_handle network)
{
 800dc22:	b580      	push	{r7, lr}
 800dc24:	b084      	sub	sp, #16
 800dc26:	af00      	add	r7, sp, #0
 800dc28:	6078      	str	r0, [r7, #4]
    struct network_instance *inn;
    ai_error err;
    err.type = AI_ERROR_INVALID_PARAM;
 800dc2a:	2314      	movs	r3, #20
 800dc2c:	723b      	strb	r3, [r7, #8]
    err.code = AI_ERROR_CODE_NETWORK;
 800dc2e:	68bb      	ldr	r3, [r7, #8]
 800dc30:	2210      	movs	r2, #16
 800dc32:	f362 231f 	bfi	r3, r2, #8, #24
 800dc36:	60bb      	str	r3, [r7, #8]

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 800dc38:	6878      	ldr	r0, [r7, #4]
 800dc3a:	f7ff feb3 	bl	800d9a4 <ai_mnetwork_handle>
 800dc3e:	60f8      	str	r0, [r7, #12]
    if (inn)
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d008      	beq.n	800dc58 <ai_mnetwork_get_error+0x36>
        return inn->entry->ai_get_error(inn->handle);
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc4c:	68fa      	ldr	r2, [r7, #12]
 800dc4e:	6852      	ldr	r2, [r2, #4]
 800dc50:	4610      	mov	r0, r2
 800dc52:	4798      	blx	r3
 800dc54:	4603      	mov	r3, r0
 800dc56:	e000      	b.n	800dc5a <ai_mnetwork_get_error+0x38>
    else
        return err;
 800dc58:	68bb      	ldr	r3, [r7, #8]
}
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	3710      	adds	r7, #16
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	bd80      	pop	{r7, pc}

0800dc62 <ai_mnetwork_init>:

AI_API_ENTRY
ai_bool ai_mnetwork_init(ai_handle network, const ai_network_params* params)
{
 800dc62:	b5b0      	push	{r4, r5, r7, lr}
 800dc64:	b090      	sub	sp, #64	; 0x40
 800dc66:	af00      	add	r7, sp, #0
 800dc68:	6078      	str	r0, [r7, #4]
 800dc6a:	6039      	str	r1, [r7, #0]
    struct network_instance *inn;
    ai_network_params par;

    /* TODO: adding check ai_buffer activations/weights shape coherence */

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 800dc6c:	6878      	ldr	r0, [r7, #4]
 800dc6e:	f7ff fe99 	bl	800d9a4 <ai_mnetwork_handle>
 800dc72:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (inn) {
 800dc74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d03f      	beq.n	800dcfa <ai_mnetwork_init+0x98>
        par = inn->entry->params;
 800dc7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	f107 040c 	add.w	r4, r7, #12
 800dc82:	1d1d      	adds	r5, r3, #4
 800dc84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dc86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dc88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dc8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dc8c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800dc90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (params->activations.n_batches)
 800dc94:	683b      	ldr	r3, [r7, #0]
 800dc96:	8b9b      	ldrh	r3, [r3, #28]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d00b      	beq.n	800dcb4 <ai_mnetwork_init+0x52>
            par.activations = params->activations;
 800dc9c:	683b      	ldr	r3, [r7, #0]
 800dc9e:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800dca2:	f103 0518 	add.w	r5, r3, #24
 800dca6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dca8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dcaa:	e895 0003 	ldmia.w	r5, {r0, r1}
 800dcae:	e884 0003 	stmia.w	r4, {r0, r1}
 800dcb2:	e002      	b.n	800dcba <ai_mnetwork_init+0x58>
        else
            par.activations.data = params->activations.data;
 800dcb4:	683b      	ldr	r3, [r7, #0]
 800dcb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcb8:	637b      	str	r3, [r7, #52]	; 0x34
        if (params->params.n_batches)
 800dcba:	683b      	ldr	r3, [r7, #0]
 800dcbc:	889b      	ldrh	r3, [r3, #4]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d00a      	beq.n	800dcd8 <ai_mnetwork_init+0x76>
            par.params = params->params;
 800dcc2:	683b      	ldr	r3, [r7, #0]
 800dcc4:	f107 040c 	add.w	r4, r7, #12
 800dcc8:	461d      	mov	r5, r3
 800dcca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dccc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dcce:	e895 0003 	ldmia.w	r5, {r0, r1}
 800dcd2:	e884 0003 	stmia.w	r4, {r0, r1}
 800dcd6:	e005      	b.n	800dce4 <ai_mnetwork_init+0x82>
        else
            par.params.data = inn->entry->ai_data_weights_get_default();
 800dcd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcde:	4798      	blx	r3
 800dce0:	4603      	mov	r3, r0
 800dce2:	61fb      	str	r3, [r7, #28]
        return inn->entry->ai_init(inn->handle, &par);
 800dce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dcea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dcec:	6852      	ldr	r2, [r2, #4]
 800dcee:	f107 010c 	add.w	r1, r7, #12
 800dcf2:	4610      	mov	r0, r2
 800dcf4:	4798      	blx	r3
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	e000      	b.n	800dcfc <ai_mnetwork_init+0x9a>
    }
    else
        return false;
 800dcfa:	2300      	movs	r3, #0
}
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	3740      	adds	r7, #64	; 0x40
 800dd00:	46bd      	mov	sp, r7
 800dd02:	bdb0      	pop	{r4, r5, r7, pc}

0800dd04 <ai_mnetwork_run>:

AI_API_ENTRY
ai_i32 ai_mnetwork_run(ai_handle network, const ai_buffer* input,
        ai_buffer* output)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b086      	sub	sp, #24
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	60f8      	str	r0, [r7, #12]
 800dd0c:	60b9      	str	r1, [r7, #8]
 800dd0e:	607a      	str	r2, [r7, #4]
    struct network_instance* inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 800dd10:	68f8      	ldr	r0, [r7, #12]
 800dd12:	f7ff fe47 	bl	800d9a4 <ai_mnetwork_handle>
 800dd16:	6178      	str	r0, [r7, #20]
    if (inn)
 800dd18:	697b      	ldr	r3, [r7, #20]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d009      	beq.n	800dd32 <ai_mnetwork_run+0x2e>
        return inn->entry->ai_run(inn->handle, input, output);
 800dd1e:	697b      	ldr	r3, [r7, #20]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd24:	697a      	ldr	r2, [r7, #20]
 800dd26:	6850      	ldr	r0, [r2, #4]
 800dd28:	687a      	ldr	r2, [r7, #4]
 800dd2a:	68b9      	ldr	r1, [r7, #8]
 800dd2c:	4798      	blx	r3
 800dd2e:	4603      	mov	r3, r0
 800dd30:	e000      	b.n	800dd34 <ai_mnetwork_run+0x30>
    else
        return 0;
 800dd32:	2300      	movs	r3, #0
}
 800dd34:	4618      	mov	r0, r3
 800dd36:	3718      	adds	r7, #24
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	bd80      	pop	{r7, pc}

0800dd3c <ai_mnetwork_get_private_handle>:

AI_API_ENTRY
 int ai_mnetwork_get_private_handle(ai_handle network,
         ai_handle *phandle,
         ai_network_params *pparams)
 {
 800dd3c:	b5b0      	push	{r4, r5, r7, lr}
 800dd3e:	b086      	sub	sp, #24
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	60f8      	str	r0, [r7, #12]
 800dd44:	60b9      	str	r1, [r7, #8]
 800dd46:	607a      	str	r2, [r7, #4]
     struct network_instance* inn;
     inn =  ai_mnetwork_handle((struct network_instance *)network);
 800dd48:	68f8      	ldr	r0, [r7, #12]
 800dd4a:	f7ff fe2b 	bl	800d9a4 <ai_mnetwork_handle>
 800dd4e:	6178      	str	r0, [r7, #20]
     if (inn && phandle && pparams) {
 800dd50:	697b      	ldr	r3, [r7, #20]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d018      	beq.n	800dd88 <ai_mnetwork_get_private_handle+0x4c>
 800dd56:	68bb      	ldr	r3, [r7, #8]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d015      	beq.n	800dd88 <ai_mnetwork_get_private_handle+0x4c>
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d012      	beq.n	800dd88 <ai_mnetwork_get_private_handle+0x4c>
         *phandle = inn->handle;
 800dd62:	697b      	ldr	r3, [r7, #20]
 800dd64:	685a      	ldr	r2, [r3, #4]
 800dd66:	68bb      	ldr	r3, [r7, #8]
 800dd68:	601a      	str	r2, [r3, #0]
         *pparams = inn->params;
 800dd6a:	687a      	ldr	r2, [r7, #4]
 800dd6c:	697b      	ldr	r3, [r7, #20]
 800dd6e:	4615      	mov	r5, r2
 800dd70:	f103 0408 	add.w	r4, r3, #8
 800dd74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dd76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dd78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dd7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dd7c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800dd80:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
         return 0;
 800dd84:	2300      	movs	r3, #0
 800dd86:	e001      	b.n	800dd8c <ai_mnetwork_get_private_handle+0x50>
     }
     else
         return -1;
 800dd88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 }
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	3718      	adds	r7, #24
 800dd90:	46bd      	mov	sp, r7
 800dd92:	bdb0      	pop	{r4, r5, r7, pc}

0800dd94 <ai_mnetwork_get_ext_data_activations>:

 AI_API_ENTRY
int ai_mnetwork_get_ext_data_activations(ai_handle network,
         ai_u32 *add,
         ai_u32 *size)
 {
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b086      	sub	sp, #24
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	60f8      	str	r0, [r7, #12]
 800dd9c:	60b9      	str	r1, [r7, #8]
 800dd9e:	607a      	str	r2, [r7, #4]
     struct network_instance* inn;
     inn =  ai_mnetwork_handle((struct network_instance *)network);
 800dda0:	68f8      	ldr	r0, [r7, #12]
 800dda2:	f7ff fdff 	bl	800d9a4 <ai_mnetwork_handle>
 800dda6:	6178      	str	r0, [r7, #20]
     if (inn && add && size) {
 800dda8:	697b      	ldr	r3, [r7, #20]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d011      	beq.n	800ddd2 <ai_mnetwork_get_ext_data_activations+0x3e>
 800ddae:	68bb      	ldr	r3, [r7, #8]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d00e      	beq.n	800ddd2 <ai_mnetwork_get_ext_data_activations+0x3e>
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d00b      	beq.n	800ddd2 <ai_mnetwork_get_ext_data_activations+0x3e>
         *add = inn->entry->extActBufferStartAddr;
 800ddba:	697b      	ldr	r3, [r7, #20]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	601a      	str	r2, [r3, #0]
         *size = inn->entry->actBufferSize;
 800ddc4:	697b      	ldr	r3, [r7, #20]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	601a      	str	r2, [r3, #0]
         return 0;
 800ddce:	2300      	movs	r3, #0
 800ddd0:	e001      	b.n	800ddd6 <ai_mnetwork_get_ext_data_activations+0x42>
     }
     else
         return -1;
 800ddd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 }
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	3718      	adds	r7, #24
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bd80      	pop	{r7, pc}
	...

0800dde0 <network_configure_activations>:


AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 800dde0:	b480      	push	{r7}
 800dde2:	b085      	sub	sp, #20
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
 800dde8:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 800ddea:	683b      	ldr	r3, [r7, #0]
 800ddec:	691b      	ldr	r3, [r3, #16]
 800ddee:	3303      	adds	r3, #3
 800ddf0:	f023 0303 	bic.w	r3, r3, #3
 800ddf4:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    separable_conv2d_1_conv2d_scratch0_array.data = AI_PTR(activations + 1152);
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800ddfc:	4a25      	ldr	r2, [pc, #148]	; (800de94 <network_configure_activations+0xb4>)
 800ddfe:	6093      	str	r3, [r2, #8]
    separable_conv2d_1_conv2d_scratch0_array.data_start = AI_PTR(activations + 1152);
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800de06:	4a23      	ldr	r2, [pc, #140]	; (800de94 <network_configure_activations+0xb4>)
 800de08:	60d3      	str	r3, [r2, #12]
    depthwise_conv2d_1_scratch0_array.data = AI_PTR(activations + 65664);
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800de10:	3380      	adds	r3, #128	; 0x80
 800de12:	4a21      	ldr	r2, [pc, #132]	; (800de98 <network_configure_activations+0xb8>)
 800de14:	6093      	str	r3, [r2, #8]
    depthwise_conv2d_1_scratch0_array.data_start = AI_PTR(activations + 65664);
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800de1c:	3380      	adds	r3, #128	; 0x80
 800de1e:	4a1e      	ldr	r2, [pc, #120]	; (800de98 <network_configure_activations+0xb8>)
 800de20:	60d3      	str	r3, [r2, #12]
    input_1_output_array.data = AI_PTR(NULL);
 800de22:	4b1e      	ldr	r3, [pc, #120]	; (800de9c <network_configure_activations+0xbc>)
 800de24:	2200      	movs	r2, #0
 800de26:	609a      	str	r2, [r3, #8]
    input_1_output_array.data_start = AI_PTR(NULL);
 800de28:	4b1c      	ldr	r3, [pc, #112]	; (800de9c <network_configure_activations+0xbc>)
 800de2a:	2200      	movs	r2, #0
 800de2c:	60da      	str	r2, [r3, #12]
    conv2d_1_output_array.data = AI_PTR(activations + 0);
 800de2e:	4a1c      	ldr	r2, [pc, #112]	; (800dea0 <network_configure_activations+0xc0>)
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	6093      	str	r3, [r2, #8]
    conv2d_1_output_array.data_start = AI_PTR(activations + 0);
 800de34:	4a1a      	ldr	r2, [pc, #104]	; (800dea0 <network_configure_activations+0xc0>)
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	60d3      	str	r3, [r2, #12]
    depthwise_conv2d_1_output_array.data = AI_PTR(activations + 69120);
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	f503 3387 	add.w	r3, r3, #69120	; 0x10e00
 800de40:	4a18      	ldr	r2, [pc, #96]	; (800dea4 <network_configure_activations+0xc4>)
 800de42:	6093      	str	r3, [r2, #8]
    depthwise_conv2d_1_output_array.data_start = AI_PTR(activations + 69120);
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	f503 3387 	add.w	r3, r3, #69120	; 0x10e00
 800de4a:	4a16      	ldr	r2, [pc, #88]	; (800dea4 <network_configure_activations+0xc4>)
 800de4c:	60d3      	str	r3, [r2, #12]
    separable_conv2d_1_output_array.data = AI_PTR(activations + 0);
 800de4e:	4a16      	ldr	r2, [pc, #88]	; (800dea8 <network_configure_activations+0xc8>)
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	6093      	str	r3, [r2, #8]
    separable_conv2d_1_output_array.data_start = AI_PTR(activations + 0);
 800de54:	4a14      	ldr	r2, [pc, #80]	; (800dea8 <network_configure_activations+0xc8>)
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	60d3      	str	r3, [r2, #12]
    separable_conv2d_1_conv2d_output_array.data = AI_PTR(activations + 2304);
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de60:	4a12      	ldr	r2, [pc, #72]	; (800deac <network_configure_activations+0xcc>)
 800de62:	6093      	str	r3, [r2, #8]
    separable_conv2d_1_conv2d_output_array.data_start = AI_PTR(activations + 2304);
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de6a:	4a10      	ldr	r2, [pc, #64]	; (800deac <network_configure_activations+0xcc>)
 800de6c:	60d3      	str	r3, [r2, #12]
    dense_output_array.data = AI_PTR(activations + 0);
 800de6e:	4a10      	ldr	r2, [pc, #64]	; (800deb0 <network_configure_activations+0xd0>)
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	6093      	str	r3, [r2, #8]
    dense_output_array.data_start = AI_PTR(activations + 0);
 800de74:	4a0e      	ldr	r2, [pc, #56]	; (800deb0 <network_configure_activations+0xd0>)
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	60d3      	str	r3, [r2, #12]
    softmax_output_array.data = AI_PTR(NULL);
 800de7a:	4b0e      	ldr	r3, [pc, #56]	; (800deb4 <network_configure_activations+0xd4>)
 800de7c:	2200      	movs	r2, #0
 800de7e:	609a      	str	r2, [r3, #8]
    softmax_output_array.data_start = AI_PTR(NULL);
 800de80:	4b0c      	ldr	r3, [pc, #48]	; (800deb4 <network_configure_activations+0xd4>)
 800de82:	2200      	movs	r2, #0
 800de84:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 800de86:	2301      	movs	r3, #1
}
 800de88:	4618      	mov	r0, r3
 800de8a:	3714      	adds	r7, #20
 800de8c:	46bd      	mov	sp, r7
 800de8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de92:	4770      	bx	lr
 800de94:	200000b4 	.word	0x200000b4
 800de98:	200000c4 	.word	0x200000c4
 800de9c:	20000174 	.word	0x20000174
 800dea0:	20000184 	.word	0x20000184
 800dea4:	20000194 	.word	0x20000194
 800dea8:	200001a4 	.word	0x200001a4
 800deac:	200001b4 	.word	0x200001b4
 800deb0:	200001c4 	.word	0x200001c4
 800deb4:	200001d4 	.word	0x200001d4

0800deb8 <network_configure_weights>:


AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 800deb8:	b480      	push	{r7}
 800deba:	b085      	sub	sp, #20
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
 800dec0:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 800dec2:	683b      	ldr	r3, [r7, #0]
 800dec4:	691b      	ldr	r3, [r3, #16]
 800dec6:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800dec8:	4b51      	ldr	r3, [pc, #324]	; (800e010 <network_configure_weights+0x158>)
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ded0:	4a4f      	ldr	r2, [pc, #316]	; (800e010 <network_configure_weights+0x158>)
 800ded2:	6013      	str	r3, [r2, #0]
    dense_bias_array.data = AI_PTR(weights + 6336);
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 800deda:	4a4d      	ldr	r2, [pc, #308]	; (800e010 <network_configure_weights+0x158>)
 800dedc:	6093      	str	r3, [r2, #8]
    dense_bias_array.data_start = AI_PTR(weights + 6336);
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 800dee4:	4a4a      	ldr	r2, [pc, #296]	; (800e010 <network_configure_weights+0x158>)
 800dee6:	60d3      	str	r3, [r2, #12]
    dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800dee8:	4b4a      	ldr	r3, [pc, #296]	; (800e014 <network_configure_weights+0x15c>)
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800def0:	4a48      	ldr	r2, [pc, #288]	; (800e014 <network_configure_weights+0x15c>)
 800def2:	6013      	str	r3, [r2, #0]
    dense_weights_array.data = AI_PTR(weights + 6080);
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	f503 53be 	add.w	r3, r3, #6080	; 0x17c0
 800defa:	4a46      	ldr	r2, [pc, #280]	; (800e014 <network_configure_weights+0x15c>)
 800defc:	6093      	str	r3, [r2, #8]
    dense_weights_array.data_start = AI_PTR(weights + 6080);
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	f503 53be 	add.w	r3, r3, #6080	; 0x17c0
 800df04:	4a43      	ldr	r2, [pc, #268]	; (800e014 <network_configure_weights+0x15c>)
 800df06:	60d3      	str	r3, [r2, #12]
    separable_conv2d_1_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 800df08:	4b43      	ldr	r3, [pc, #268]	; (800e018 <network_configure_weights+0x160>)
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800df10:	4a41      	ldr	r2, [pc, #260]	; (800e018 <network_configure_weights+0x160>)
 800df12:	6013      	str	r3, [r2, #0]
    separable_conv2d_1_conv2d_bias_array.data = AI_PTR(weights + 6016);
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800df1a:	4a3f      	ldr	r2, [pc, #252]	; (800e018 <network_configure_weights+0x160>)
 800df1c:	6093      	str	r3, [r2, #8]
    separable_conv2d_1_conv2d_bias_array.data_start = AI_PTR(weights + 6016);
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800df24:	4a3c      	ldr	r2, [pc, #240]	; (800e018 <network_configure_weights+0x160>)
 800df26:	60d3      	str	r3, [r2, #12]
    separable_conv2d_1_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 800df28:	4b3c      	ldr	r3, [pc, #240]	; (800e01c <network_configure_weights+0x164>)
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800df30:	4a3a      	ldr	r2, [pc, #232]	; (800e01c <network_configure_weights+0x164>)
 800df32:	6013      	str	r3, [r2, #0]
    separable_conv2d_1_conv2d_weights_array.data = AI_PTR(weights + 4992);
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800df3a:	4a38      	ldr	r2, [pc, #224]	; (800e01c <network_configure_weights+0x164>)
 800df3c:	6093      	str	r3, [r2, #8]
    separable_conv2d_1_conv2d_weights_array.data_start = AI_PTR(weights + 4992);
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800df44:	4a35      	ldr	r2, [pc, #212]	; (800e01c <network_configure_weights+0x164>)
 800df46:	60d3      	str	r3, [r2, #12]
    separable_conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800df48:	4b35      	ldr	r3, [pc, #212]	; (800e020 <network_configure_weights+0x168>)
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800df50:	4a33      	ldr	r2, [pc, #204]	; (800e020 <network_configure_weights+0x168>)
 800df52:	6013      	str	r3, [r2, #0]
    separable_conv2d_1_bias_array.data = AI_PTR(weights + 4928);
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 800df5a:	4a31      	ldr	r2, [pc, #196]	; (800e020 <network_configure_weights+0x168>)
 800df5c:	6093      	str	r3, [r2, #8]
    separable_conv2d_1_bias_array.data_start = AI_PTR(weights + 4928);
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 800df64:	4a2e      	ldr	r2, [pc, #184]	; (800e020 <network_configure_weights+0x168>)
 800df66:	60d3      	str	r3, [r2, #12]
    separable_conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800df68:	4b2e      	ldr	r3, [pc, #184]	; (800e024 <network_configure_weights+0x16c>)
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800df70:	4a2c      	ldr	r2, [pc, #176]	; (800e024 <network_configure_weights+0x16c>)
 800df72:	6013      	str	r3, [r2, #0]
    separable_conv2d_1_weights_array.data = AI_PTR(weights + 3904);
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	f503 6374 	add.w	r3, r3, #3904	; 0xf40
 800df7a:	4a2a      	ldr	r2, [pc, #168]	; (800e024 <network_configure_weights+0x16c>)
 800df7c:	6093      	str	r3, [r2, #8]
    separable_conv2d_1_weights_array.data_start = AI_PTR(weights + 3904);
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	f503 6374 	add.w	r3, r3, #3904	; 0xf40
 800df84:	4a27      	ldr	r2, [pc, #156]	; (800e024 <network_configure_weights+0x16c>)
 800df86:	60d3      	str	r3, [r2, #12]
    depthwise_conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800df88:	4b27      	ldr	r3, [pc, #156]	; (800e028 <network_configure_weights+0x170>)
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800df90:	4a25      	ldr	r2, [pc, #148]	; (800e028 <network_configure_weights+0x170>)
 800df92:	6013      	str	r3, [r2, #0]
    depthwise_conv2d_1_bias_array.data = AI_PTR(weights + 3840);
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	f503 6370 	add.w	r3, r3, #3840	; 0xf00
 800df9a:	4a23      	ldr	r2, [pc, #140]	; (800e028 <network_configure_weights+0x170>)
 800df9c:	6093      	str	r3, [r2, #8]
    depthwise_conv2d_1_bias_array.data_start = AI_PTR(weights + 3840);
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	f503 6370 	add.w	r3, r3, #3840	; 0xf00
 800dfa4:	4a20      	ldr	r2, [pc, #128]	; (800e028 <network_configure_weights+0x170>)
 800dfa6:	60d3      	str	r3, [r2, #12]
    depthwise_conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800dfa8:	4b20      	ldr	r3, [pc, #128]	; (800e02c <network_configure_weights+0x174>)
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dfb0:	4a1e      	ldr	r2, [pc, #120]	; (800e02c <network_configure_weights+0x174>)
 800dfb2:	6013      	str	r3, [r2, #0]
    depthwise_conv2d_1_weights_array.data = AI_PTR(weights + 1408);
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 800dfba:	4a1c      	ldr	r2, [pc, #112]	; (800e02c <network_configure_weights+0x174>)
 800dfbc:	6093      	str	r3, [r2, #8]
    depthwise_conv2d_1_weights_array.data_start = AI_PTR(weights + 1408);
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 800dfc4:	4a19      	ldr	r2, [pc, #100]	; (800e02c <network_configure_weights+0x174>)
 800dfc6:	60d3      	str	r3, [r2, #12]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800dfc8:	4b19      	ldr	r3, [pc, #100]	; (800e030 <network_configure_weights+0x178>)
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dfd0:	4a17      	ldr	r2, [pc, #92]	; (800e030 <network_configure_weights+0x178>)
 800dfd2:	6013      	str	r3, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(weights + 1376);
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	f503 63ac 	add.w	r3, r3, #1376	; 0x560
 800dfda:	4a15      	ldr	r2, [pc, #84]	; (800e030 <network_configure_weights+0x178>)
 800dfdc:	6093      	str	r3, [r2, #8]
    conv2d_1_bias_array.data_start = AI_PTR(weights + 1376);
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	f503 63ac 	add.w	r3, r3, #1376	; 0x560
 800dfe4:	4a12      	ldr	r2, [pc, #72]	; (800e030 <network_configure_weights+0x178>)
 800dfe6:	60d3      	str	r3, [r2, #12]
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800dfe8:	4b12      	ldr	r3, [pc, #72]	; (800e034 <network_configure_weights+0x17c>)
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dff0:	4a10      	ldr	r2, [pc, #64]	; (800e034 <network_configure_weights+0x17c>)
 800dff2:	6013      	str	r3, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(weights + 0);
 800dff4:	4a0f      	ldr	r2, [pc, #60]	; (800e034 <network_configure_weights+0x17c>)
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	6093      	str	r3, [r2, #8]
    conv2d_1_weights_array.data_start = AI_PTR(weights + 0);
 800dffa:	4a0e      	ldr	r2, [pc, #56]	; (800e034 <network_configure_weights+0x17c>)
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	60d3      	str	r3, [r2, #12]
  }

  return true;
 800e000:	2301      	movs	r3, #1
}
 800e002:	4618      	mov	r0, r3
 800e004:	3714      	adds	r7, #20
 800e006:	46bd      	mov	sp, r7
 800e008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00c:	4770      	bx	lr
 800e00e:	bf00      	nop
 800e010:	200000d4 	.word	0x200000d4
 800e014:	200000e4 	.word	0x200000e4
 800e018:	200000f4 	.word	0x200000f4
 800e01c:	20000104 	.word	0x20000104
 800e020:	20000114 	.word	0x20000114
 800e024:	20000124 	.word	0x20000124
 800e028:	20000134 	.word	0x20000134
 800e02c:	20000144 	.word	0x20000144
 800e030:	20000154 	.word	0x20000154
 800e034:	20000164 	.word	0x20000164

0800e038 <ai_network_get_info>:
/**  PUBLIC APIs SECTION  *****************************************************/

AI_API_ENTRY
ai_bool ai_network_get_info(
  ai_handle network, ai_network_report* report)
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b0a0      	sub	sp, #128	; 0x80
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
 800e040:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 800e042:	6878      	ldr	r0, [r7, #4]
 800e044:	f7f2 fb0f 	bl	8000666 <ai_platform_context_acquire>
 800e048:	67f8      	str	r0, [r7, #124]	; 0x7c

  if ( report && net_ctx )
 800e04a:	683b      	ldr	r3, [r7, #0]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d046      	beq.n	800e0de <ai_network_get_info+0xa6>
 800e050:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e052:	2b00      	cmp	r3, #0
 800e054:	d043      	beq.n	800e0de <ai_network_get_info+0xa6>
  {
    ai_network_report r = {
 800e056:	f107 0308 	add.w	r3, r7, #8
 800e05a:	2274      	movs	r2, #116	; 0x74
 800e05c:	2100      	movs	r1, #0
 800e05e:	4618      	mov	r0, r3
 800e060:	f002 fef8 	bl	8010e54 <memset>
 800e064:	4b20      	ldr	r3, [pc, #128]	; (800e0e8 <ai_network_get_info+0xb0>)
 800e066:	60bb      	str	r3, [r7, #8]
 800e068:	4b20      	ldr	r3, [pc, #128]	; (800e0ec <ai_network_get_info+0xb4>)
 800e06a:	60fb      	str	r3, [r7, #12]
 800e06c:	4b20      	ldr	r3, [pc, #128]	; (800e0f0 <ai_network_get_info+0xb8>)
 800e06e:	613b      	str	r3, [r7, #16]
 800e070:	4b20      	ldr	r3, [pc, #128]	; (800e0f4 <ai_network_get_info+0xbc>)
 800e072:	617b      	str	r3, [r7, #20]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 800e074:	f7f2 fa91 	bl	800059a <ai_platform_runtime_get_revision>
 800e078:	4603      	mov	r3, r0
    ai_network_report r = {
 800e07a:	61bb      	str	r3, [r7, #24]
 800e07c:	f7f2 faa5 	bl	80005ca <ai_platform_runtime_get_version>
 800e080:	4603      	mov	r3, r0
 800e082:	61fb      	str	r3, [r7, #28]
 800e084:	4b1c      	ldr	r3, [pc, #112]	; (800e0f8 <ai_network_get_info+0xc0>)
 800e086:	623b      	str	r3, [r7, #32]
 800e088:	2305      	movs	r3, #5
 800e08a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800e08e:	2301      	movs	r3, #1
 800e090:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800e094:	2303      	movs	r3, #3
 800e096:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800e09a:	f7f2 fab0 	bl	80005fe <ai_platform_api_get_version>
 800e09e:	4603      	mov	r3, r0
 800e0a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e0a2:	f7f2 fac6 	bl	8000632 <ai_platform_interface_api_get_version>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	633b      	str	r3, [r7, #48]	; 0x30
 800e0aa:	4b14      	ldr	r3, [pc, #80]	; (800e0fc <ai_network_get_info+0xc4>)
 800e0ac:	637b      	str	r3, [r7, #52]	; 0x34
      .params            = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if ( !ai_platform_api_get_network_report(network, &r) ) return false;
 800e0ae:	f107 0308 	add.w	r3, r7, #8
 800e0b2:	4619      	mov	r1, r3
 800e0b4:	6878      	ldr	r0, [r7, #4]
 800e0b6:	f7f2 fb24 	bl	8000702 <ai_platform_api_get_network_report>
 800e0ba:	4603      	mov	r3, r0
 800e0bc:	f083 0301 	eor.w	r3, r3, #1
 800e0c0:	b2db      	uxtb	r3, r3
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d001      	beq.n	800e0ca <ai_network_get_info+0x92>
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	e00a      	b.n	800e0e0 <ai_network_get_info+0xa8>

    *report = r;
 800e0ca:	683b      	ldr	r3, [r7, #0]
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	f107 0308 	add.w	r3, r7, #8
 800e0d2:	2274      	movs	r2, #116	; 0x74
 800e0d4:	4619      	mov	r1, r3
 800e0d6:	f002 feb2 	bl	8010e3e <memcpy>
    return true;
 800e0da:	2301      	movs	r3, #1
 800e0dc:	e000      	b.n	800e0e0 <ai_network_get_info+0xa8>
  }

  return false;
 800e0de:	2300      	movs	r3, #0
}
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	3780      	adds	r7, #128	; 0x80
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	bd80      	pop	{r7, pc}
 800e0e8:	08015954 	.word	0x08015954
 800e0ec:	0801595c 	.word	0x0801595c
 800e0f0:	08015980 	.word	0x08015980
 800e0f4:	0801599c 	.word	0x0801599c
 800e0f8:	080159b4 	.word	0x080159b4
 800e0fc:	000ba006 	.word	0x000ba006

0800e100 <ai_network_get_error>:

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b082      	sub	sp, #8
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800e108:	6878      	ldr	r0, [r7, #4]
 800e10a:	f7f2 face 	bl	80006aa <ai_platform_network_get_error>
 800e10e:	4603      	mov	r3, r0
}
 800e110:	4618      	mov	r0, r3
 800e112:	3708      	adds	r7, #8
 800e114:	46bd      	mov	sp, r7
 800e116:	bd80      	pop	{r7, pc}

0800e118 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800e118:	b580      	push	{r7, lr}
 800e11a:	b084      	sub	sp, #16
 800e11c:	af02      	add	r7, sp, #8
 800e11e:	6078      	str	r0, [r7, #4]
 800e120:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800e122:	2300      	movs	r3, #0
 800e124:	9301      	str	r3, [sp, #4]
 800e126:	2303      	movs	r3, #3
 800e128:	9300      	str	r3, [sp, #0]
 800e12a:	2301      	movs	r3, #1
 800e12c:	4a04      	ldr	r2, [pc, #16]	; (800e140 <ai_network_create+0x28>)
 800e12e:	6839      	ldr	r1, [r7, #0]
 800e130:	6878      	ldr	r0, [r7, #4]
 800e132:	f7f2 fba5 	bl	8000880 <ai_platform_network_create>
 800e136:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800e138:	4618      	mov	r0, r3
 800e13a:	3708      	adds	r7, #8
 800e13c:	46bd      	mov	sp, r7
 800e13e:	bd80      	pop	{r7, pc}
 800e140:	2000005c 	.word	0x2000005c

0800e144 <ai_network_destroy>:

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
 800e144:	b580      	push	{r7, lr}
 800e146:	b082      	sub	sp, #8
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
  return ai_platform_network_destroy(network);
 800e14c:	6878      	ldr	r0, [r7, #4]
 800e14e:	f7f2 fbdc 	bl	800090a <ai_platform_network_destroy>
 800e152:	4603      	mov	r3, r0
}
 800e154:	4618      	mov	r0, r3
 800e156:	3708      	adds	r7, #8
 800e158:	46bd      	mov	sp, r7
 800e15a:	bd80      	pop	{r7, pc}

0800e15c <ai_network_init>:

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b084      	sub	sp, #16
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
 800e164:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800e166:	6839      	ldr	r1, [r7, #0]
 800e168:	6878      	ldr	r0, [r7, #4]
 800e16a:	f7f2 fbf1 	bl	8000950 <ai_platform_network_init>
 800e16e:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d101      	bne.n	800e17a <ai_network_init+0x1e>
 800e176:	2300      	movs	r3, #0
 800e178:	e01f      	b.n	800e1ba <ai_network_init+0x5e>

  ai_bool ok = true;
 800e17a:	2301      	movs	r3, #1
 800e17c:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, &params->params);
 800e17e:	683b      	ldr	r3, [r7, #0]
 800e180:	4619      	mov	r1, r3
 800e182:	68f8      	ldr	r0, [r7, #12]
 800e184:	f7ff fe98 	bl	800deb8 <network_configure_weights>
 800e188:	4603      	mov	r3, r0
 800e18a:	461a      	mov	r2, r3
 800e18c:	7afb      	ldrb	r3, [r7, #11]
 800e18e:	4013      	ands	r3, r2
 800e190:	2b00      	cmp	r3, #0
 800e192:	bf14      	ite	ne
 800e194:	2301      	movne	r3, #1
 800e196:	2300      	moveq	r3, #0
 800e198:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, &params->activations);
 800e19a:	683b      	ldr	r3, [r7, #0]
 800e19c:	3318      	adds	r3, #24
 800e19e:	4619      	mov	r1, r3
 800e1a0:	68f8      	ldr	r0, [r7, #12]
 800e1a2:	f7ff fe1d 	bl	800dde0 <network_configure_activations>
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	461a      	mov	r2, r3
 800e1aa:	7afb      	ldrb	r3, [r7, #11]
 800e1ac:	4013      	ands	r3, r2
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	bf14      	ite	ne
 800e1b2:	2301      	movne	r3, #1
 800e1b4:	2300      	moveq	r3, #0
 800e1b6:	72fb      	strb	r3, [r7, #11]

  return ok;
 800e1b8:	7afb      	ldrb	r3, [r7, #11]
}
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	3710      	adds	r7, #16
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	bd80      	pop	{r7, pc}

0800e1c2 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800e1c2:	b580      	push	{r7, lr}
 800e1c4:	b084      	sub	sp, #16
 800e1c6:	af00      	add	r7, sp, #0
 800e1c8:	60f8      	str	r0, [r7, #12]
 800e1ca:	60b9      	str	r1, [r7, #8]
 800e1cc:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800e1ce:	687a      	ldr	r2, [r7, #4]
 800e1d0:	68b9      	ldr	r1, [r7, #8]
 800e1d2:	68f8      	ldr	r0, [r7, #12]
 800e1d4:	f7f2 fc18 	bl	8000a08 <ai_platform_network_process>
 800e1d8:	4603      	mov	r3, r0
}
 800e1da:	4618      	mov	r0, r3
 800e1dc:	3710      	adds	r7, #16
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	bd80      	pop	{r7, pc}

0800e1e2 <ai_network_forward>:

AI_API_ENTRY
ai_i32 ai_network_forward(ai_handle network, const ai_buffer* input)
{
 800e1e2:	b580      	push	{r7, lr}
 800e1e4:	b082      	sub	sp, #8
 800e1e6:	af00      	add	r7, sp, #0
 800e1e8:	6078      	str	r0, [r7, #4]
 800e1ea:	6039      	str	r1, [r7, #0]
  return ai_platform_network_process(network, input, NULL);
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	6839      	ldr	r1, [r7, #0]
 800e1f0:	6878      	ldr	r0, [r7, #4]
 800e1f2:	f7f2 fc09 	bl	8000a08 <ai_platform_network_process>
 800e1f6:	4603      	mov	r3, r0
}
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	3708      	adds	r7, #8
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	bd80      	pop	{r7, pc}

0800e200 <ai_network_data_weights_get>:
#include "network_data.h"

ai_handle ai_network_data_weights_get(void)
{
 800e200:	b480      	push	{r7}
 800e202:	af00      	add	r7, sp, #0
    0xbb, 0x23, 0xbd, 0x50, 0x1c, 0x35, 0xbd, 0xdc, 0x37,
    0x25, 0x3d, 0x20, 0x2b, 0xbe, 0xbb, 0x4f, 0x21, 0x44,
    0xbd, 0x03, 0x87, 0x66, 0xbd, 0xb5, 0x88, 0x66, 0x3d
  };

  return AI_HANDLE_PTR(s_network_weights);
 800e204:	4b02      	ldr	r3, [pc, #8]	; (800e210 <ai_network_data_weights_get+0x10>)

}
 800e206:	4618      	mov	r0, r3
 800e208:	46bd      	mov	sp, r7
 800e20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20e:	4770      	bx	lr
 800e210:	08015d98 	.word	0x08015d98

0800e214 <pb_field_iter_begin>:
 */

#include "pb_common.h"

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_field_t *fields, void *dest_struct)
{
 800e214:	b480      	push	{r7}
 800e216:	b085      	sub	sp, #20
 800e218:	af00      	add	r7, sp, #0
 800e21a:	60f8      	str	r0, [r7, #12]
 800e21c:	60b9      	str	r1, [r7, #8]
 800e21e:	607a      	str	r2, [r7, #4]
    iter->start = fields;
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	68ba      	ldr	r2, [r7, #8]
 800e224:	601a      	str	r2, [r3, #0]
    iter->pos = fields;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	68ba      	ldr	r2, [r7, #8]
 800e22a:	605a      	str	r2, [r3, #4]
    iter->required_field_index = 0;
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	2200      	movs	r2, #0
 800e230:	609a      	str	r2, [r3, #8]
    iter->dest_struct = dest_struct;
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	687a      	ldr	r2, [r7, #4]
 800e236:	60da      	str	r2, [r3, #12]
    iter->pData = (char*)dest_struct + iter->pos->data_offset;
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	685b      	ldr	r3, [r3, #4]
 800e23c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800e240:	b29b      	uxth	r3, r3
 800e242:	461a      	mov	r2, r3
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	441a      	add	r2, r3
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	611a      	str	r2, [r3, #16]
    iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	691b      	ldr	r3, [r3, #16]
 800e250:	68fa      	ldr	r2, [r7, #12]
 800e252:	6852      	ldr	r2, [r2, #4]
 800e254:	f9b2 2005 	ldrsh.w	r2, [r2, #5]
 800e258:	b212      	sxth	r2, r2
 800e25a:	441a      	add	r2, r3
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	615a      	str	r2, [r3, #20]
    
    return (iter->pos->tag != 0);
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	685b      	ldr	r3, [r3, #4]
 800e264:	881b      	ldrh	r3, [r3, #0]
 800e266:	b29b      	uxth	r3, r3
 800e268:	2b00      	cmp	r3, #0
 800e26a:	bf14      	ite	ne
 800e26c:	2301      	movne	r3, #1
 800e26e:	2300      	moveq	r3, #0
 800e270:	b2db      	uxtb	r3, r3
}
 800e272:	4618      	mov	r0, r3
 800e274:	3714      	adds	r7, #20
 800e276:	46bd      	mov	sp, r7
 800e278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27c:	4770      	bx	lr

0800e27e <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
 800e27e:	b580      	push	{r7, lr}
 800e280:	b084      	sub	sp, #16
 800e282:	af00      	add	r7, sp, #0
 800e284:	6078      	str	r0, [r7, #4]
    const pb_field_t *prev_field = iter->pos;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	685b      	ldr	r3, [r3, #4]
 800e28a:	60bb      	str	r3, [r7, #8]

    if (prev_field->tag == 0)
 800e28c:	68bb      	ldr	r3, [r7, #8]
 800e28e:	881b      	ldrh	r3, [r3, #0]
 800e290:	b29b      	uxth	r3, r3
 800e292:	2b00      	cmp	r3, #0
 800e294:	d101      	bne.n	800e29a <pb_field_iter_next+0x1c>
    {
        /* Handle empty message types, where the first field is already the terminator.
         * In other cases, the iter->pos never points to the terminator. */
        return false;
 800e296:	2300      	movs	r3, #0
 800e298:	e073      	b.n	800e382 <pb_field_iter_next+0x104>
    }
    
    iter->pos++;
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	685b      	ldr	r3, [r3, #4]
 800e29e:	f103 020f 	add.w	r2, r3, #15
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	605a      	str	r2, [r3, #4]
    
    if (iter->pos->tag == 0)
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	685b      	ldr	r3, [r3, #4]
 800e2aa:	881b      	ldrh	r3, [r3, #0]
 800e2ac:	b29b      	uxth	r3, r3
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d109      	bne.n	800e2c6 <pb_field_iter_next+0x48>
    {
        /* Wrapped back to beginning, reinitialize */
        (void)pb_field_iter_begin(iter, iter->start, iter->dest_struct);
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	6819      	ldr	r1, [r3, #0]
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	68db      	ldr	r3, [r3, #12]
 800e2ba:	461a      	mov	r2, r3
 800e2bc:	6878      	ldr	r0, [r7, #4]
 800e2be:	f7ff ffa9 	bl	800e214 <pb_field_iter_begin>
        return false;
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	e05d      	b.n	800e382 <pb_field_iter_next+0x104>
    }
    else
    {
        /* Increment the pointers based on previous field size */
        size_t prev_size = prev_field->data_size;
 800e2c6:	68bb      	ldr	r3, [r7, #8]
 800e2c8:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800e2cc:	b29b      	uxth	r3, r3
 800e2ce:	60fb      	str	r3, [r7, #12]
    
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 800e2d0:	68bb      	ldr	r3, [r7, #8]
 800e2d2:	789b      	ldrb	r3, [r3, #2]
 800e2d4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e2d8:	2b30      	cmp	r3, #48	; 0x30
 800e2da:	d111      	bne.n	800e300 <pb_field_iter_next+0x82>
            PB_HTYPE(iter->pos->type) == PB_HTYPE_ONEOF &&
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	685b      	ldr	r3, [r3, #4]
 800e2e0:	789b      	ldrb	r3, [r3, #2]
 800e2e2:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 800e2e6:	2b30      	cmp	r3, #48	; 0x30
 800e2e8:	d10a      	bne.n	800e300 <pb_field_iter_next+0x82>
            iter->pos->data_offset == PB_SIZE_MAX)
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	685b      	ldr	r3, [r3, #4]
 800e2ee:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800e2f2:	b29b      	uxth	r3, r3
            PB_HTYPE(iter->pos->type) == PB_HTYPE_ONEOF &&
 800e2f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e2f8:	4293      	cmp	r3, r2
 800e2fa:	d101      	bne.n	800e300 <pb_field_iter_next+0x82>
        {
            /* Don't advance pointers inside unions */
            return true;
 800e2fc:	2301      	movs	r3, #1
 800e2fe:	e040      	b.n	800e382 <pb_field_iter_next+0x104>
        }
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_STATIC &&
 800e300:	68bb      	ldr	r3, [r7, #8]
 800e302:	789b      	ldrb	r3, [r3, #2]
 800e304:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d10f      	bne.n	800e32c <pb_field_iter_next+0xae>
                 PB_HTYPE(prev_field->type) == PB_HTYPE_REPEATED)
 800e30c:	68bb      	ldr	r3, [r7, #8]
 800e30e:	789b      	ldrb	r3, [r3, #2]
 800e310:	f003 0330 	and.w	r3, r3, #48	; 0x30
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_STATIC &&
 800e314:	2b20      	cmp	r3, #32
 800e316:	d109      	bne.n	800e32c <pb_field_iter_next+0xae>
        {
            /* In static arrays, the data_size tells the size of a single entry and
             * array_size is the number of entries */
            prev_size *= prev_field->array_size;
 800e318:	68bb      	ldr	r3, [r7, #8]
 800e31a:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800e31e:	b29b      	uxth	r3, r3
 800e320:	461a      	mov	r2, r3
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	fb02 f303 	mul.w	r3, r2, r3
 800e328:	60fb      	str	r3, [r7, #12]
 800e32a:	e007      	b.n	800e33c <pb_field_iter_next+0xbe>
        }
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_POINTER)
 800e32c:	68bb      	ldr	r3, [r7, #8]
 800e32e:	789b      	ldrb	r3, [r3, #2]
 800e330:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e334:	2b80      	cmp	r3, #128	; 0x80
 800e336:	d101      	bne.n	800e33c <pb_field_iter_next+0xbe>
        {
            /* Pointer fields always have a constant size in the main structure.
             * The data_size only applies to the dynamically allocated area. */
            prev_size = sizeof(void*);
 800e338:	2304      	movs	r3, #4
 800e33a:	60fb      	str	r3, [r7, #12]
        }

        if (PB_HTYPE(prev_field->type) == PB_HTYPE_REQUIRED)
 800e33c:	68bb      	ldr	r3, [r7, #8]
 800e33e:	789b      	ldrb	r3, [r3, #2]
 800e340:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e344:	2b00      	cmp	r3, #0
 800e346:	d104      	bne.n	800e352 <pb_field_iter_next+0xd4>
        {
            /* Count the required fields, in order to check their presence in the
             * decoder. */
            iter->required_field_index++;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	689b      	ldr	r3, [r3, #8]
 800e34c:	1c5a      	adds	r2, r3, #1
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	609a      	str	r2, [r3, #8]
        }
    
        iter->pData = (char*)iter->pData + prev_size + iter->pos->data_offset;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	691a      	ldr	r2, [r3, #16]
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	685b      	ldr	r3, [r3, #4]
 800e35a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800e35e:	b29b      	uxth	r3, r3
 800e360:	4619      	mov	r1, r3
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	440b      	add	r3, r1
 800e366:	441a      	add	r2, r3
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	611a      	str	r2, [r3, #16]
        iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	691b      	ldr	r3, [r3, #16]
 800e370:	687a      	ldr	r2, [r7, #4]
 800e372:	6852      	ldr	r2, [r2, #4]
 800e374:	f9b2 2005 	ldrsh.w	r2, [r2, #5]
 800e378:	b212      	sxth	r2, r2
 800e37a:	441a      	add	r2, r3
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	615a      	str	r2, [r3, #20]
        return true;
 800e380:	2301      	movs	r3, #1
    }
}
 800e382:	4618      	mov	r0, r3
 800e384:	3710      	adds	r7, #16
 800e386:	46bd      	mov	sp, r7
 800e388:	bd80      	pop	{r7, pc}

0800e38a <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 800e38a:	b580      	push	{r7, lr}
 800e38c:	b084      	sub	sp, #16
 800e38e:	af00      	add	r7, sp, #0
 800e390:	6078      	str	r0, [r7, #4]
 800e392:	6039      	str	r1, [r7, #0]
    const pb_field_t *start = iter->pos;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	685b      	ldr	r3, [r3, #4]
 800e398:	60fb      	str	r3, [r7, #12]
    
    do {
        if (iter->pos->tag == tag &&
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	685b      	ldr	r3, [r3, #4]
 800e39e:	881b      	ldrh	r3, [r3, #0]
 800e3a0:	b29b      	uxth	r3, r3
 800e3a2:	461a      	mov	r2, r3
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	4293      	cmp	r3, r2
 800e3a8:	d108      	bne.n	800e3bc <pb_field_iter_find+0x32>
            PB_LTYPE(iter->pos->type) != PB_LTYPE_EXTENSION)
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	685b      	ldr	r3, [r3, #4]
 800e3ae:	789b      	ldrb	r3, [r3, #2]
 800e3b0:	f003 030f 	and.w	r3, r3, #15
        if (iter->pos->tag == tag &&
 800e3b4:	2b08      	cmp	r3, #8
 800e3b6:	d001      	beq.n	800e3bc <pb_field_iter_find+0x32>
        {
            /* Found the wanted field */
            return true;
 800e3b8:	2301      	movs	r3, #1
 800e3ba:	e008      	b.n	800e3ce <pb_field_iter_find+0x44>
        }
        
        (void)pb_field_iter_next(iter);
 800e3bc:	6878      	ldr	r0, [r7, #4]
 800e3be:	f7ff ff5e 	bl	800e27e <pb_field_iter_next>
    } while (iter->pos != start);
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	685b      	ldr	r3, [r3, #4]
 800e3c6:	68fa      	ldr	r2, [r7, #12]
 800e3c8:	429a      	cmp	r2, r3
 800e3ca:	d1e6      	bne.n	800e39a <pb_field_iter_find+0x10>
    
    /* Searched all the way back to start, and found nothing. */
    return false;
 800e3cc:	2300      	movs	r3, #0
}
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	3710      	adds	r7, #16
 800e3d2:	46bd      	mov	sp, r7
 800e3d4:	bd80      	pop	{r7, pc}

0800e3d6 <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 800e3d6:	b480      	push	{r7}
 800e3d8:	b087      	sub	sp, #28
 800e3da:	af00      	add	r7, sp, #0
 800e3dc:	60f8      	str	r0, [r7, #12]
 800e3de:	60b9      	str	r1, [r7, #8]
 800e3e0:	607a      	str	r2, [r7, #4]
    size_t i;
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	685b      	ldr	r3, [r3, #4]
 800e3e6:	613b      	str	r3, [r7, #16]
    stream->state = (pb_byte_t*)stream->state + count;
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	685a      	ldr	r2, [r3, #4]
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	441a      	add	r2, r3
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	605a      	str	r2, [r3, #4]
    
    if (buf != NULL)
 800e3f4:	68bb      	ldr	r3, [r7, #8]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d011      	beq.n	800e41e <buf_read+0x48>
    {
        for (i = 0; i < count; i++)
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	617b      	str	r3, [r7, #20]
 800e3fe:	e00a      	b.n	800e416 <buf_read+0x40>
            buf[i] = source[i];
 800e400:	693a      	ldr	r2, [r7, #16]
 800e402:	697b      	ldr	r3, [r7, #20]
 800e404:	441a      	add	r2, r3
 800e406:	68b9      	ldr	r1, [r7, #8]
 800e408:	697b      	ldr	r3, [r7, #20]
 800e40a:	440b      	add	r3, r1
 800e40c:	7812      	ldrb	r2, [r2, #0]
 800e40e:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < count; i++)
 800e410:	697b      	ldr	r3, [r7, #20]
 800e412:	3301      	adds	r3, #1
 800e414:	617b      	str	r3, [r7, #20]
 800e416:	697a      	ldr	r2, [r7, #20]
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	429a      	cmp	r2, r3
 800e41c:	d3f0      	bcc.n	800e400 <buf_read+0x2a>
    }
    
    return true;
 800e41e:	2301      	movs	r3, #1
}
 800e420:	4618      	mov	r0, r3
 800e422:	371c      	adds	r7, #28
 800e424:	46bd      	mov	sp, r7
 800e426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42a:	4770      	bx	lr

0800e42c <pb_read>:

bool checkreturn pb_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 800e42c:	b580      	push	{r7, lr}
 800e42e:	b088      	sub	sp, #32
 800e430:	af00      	add	r7, sp, #0
 800e432:	60f8      	str	r0, [r7, #12]
 800e434:	60b9      	str	r1, [r7, #8]
 800e436:	607a      	str	r2, [r7, #4]
#ifndef PB_BUFFER_ONLY
	if (buf == NULL && stream->callback != buf_read)
 800e438:	68bb      	ldr	r3, [r7, #8]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d123      	bne.n	800e486 <pb_read+0x5a>
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	4a2b      	ldr	r2, [pc, #172]	; (800e4f0 <pb_read+0xc4>)
 800e444:	4293      	cmp	r3, r2
 800e446:	d01e      	beq.n	800e486 <pb_read+0x5a>
	{
		/* Skip input bytes */
		pb_byte_t tmp[16];
		while (count > 16)
 800e448:	e011      	b.n	800e46e <pb_read+0x42>
		{
			if (!pb_read(stream, tmp, 16))
 800e44a:	f107 0310 	add.w	r3, r7, #16
 800e44e:	2210      	movs	r2, #16
 800e450:	4619      	mov	r1, r3
 800e452:	68f8      	ldr	r0, [r7, #12]
 800e454:	f7ff ffea 	bl	800e42c <pb_read>
 800e458:	4603      	mov	r3, r0
 800e45a:	f083 0301 	eor.w	r3, r3, #1
 800e45e:	b2db      	uxtb	r3, r3
 800e460:	2b00      	cmp	r3, #0
 800e462:	d001      	beq.n	800e468 <pb_read+0x3c>
				return false;
 800e464:	2300      	movs	r3, #0
 800e466:	e03e      	b.n	800e4e6 <pb_read+0xba>
			
			count -= 16;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	3b10      	subs	r3, #16
 800e46c:	607b      	str	r3, [r7, #4]
		while (count > 16)
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	2b10      	cmp	r3, #16
 800e472:	d8ea      	bhi.n	800e44a <pb_read+0x1e>
		}
		
		return pb_read(stream, tmp, count);
 800e474:	f107 0310 	add.w	r3, r7, #16
 800e478:	687a      	ldr	r2, [r7, #4]
 800e47a:	4619      	mov	r1, r3
 800e47c:	68f8      	ldr	r0, [r7, #12]
 800e47e:	f7ff ffd5 	bl	800e42c <pb_read>
 800e482:	4603      	mov	r3, r0
 800e484:	e02f      	b.n	800e4e6 <pb_read+0xba>
	}
#endif

    if (stream->bytes_left < count)
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	689b      	ldr	r3, [r3, #8]
 800e48a:	687a      	ldr	r2, [r7, #4]
 800e48c:	429a      	cmp	r2, r3
 800e48e:	d90b      	bls.n	800e4a8 <pb_read+0x7c>
        PB_RETURN_ERROR(stream, "end-of-stream");
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	68db      	ldr	r3, [r3, #12]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d002      	beq.n	800e49e <pb_read+0x72>
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	68db      	ldr	r3, [r3, #12]
 800e49c:	e000      	b.n	800e4a0 <pb_read+0x74>
 800e49e:	4b15      	ldr	r3, [pc, #84]	; (800e4f4 <pb_read+0xc8>)
 800e4a0:	68fa      	ldr	r2, [r7, #12]
 800e4a2:	60d3      	str	r3, [r2, #12]
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	e01e      	b.n	800e4e6 <pb_read+0xba>
    
#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, count))
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	687a      	ldr	r2, [r7, #4]
 800e4ae:	68b9      	ldr	r1, [r7, #8]
 800e4b0:	68f8      	ldr	r0, [r7, #12]
 800e4b2:	4798      	blx	r3
 800e4b4:	4603      	mov	r3, r0
 800e4b6:	f083 0301 	eor.w	r3, r3, #1
 800e4ba:	b2db      	uxtb	r3, r3
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d00b      	beq.n	800e4d8 <pb_read+0xac>
        PB_RETURN_ERROR(stream, "io error");
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	68db      	ldr	r3, [r3, #12]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d002      	beq.n	800e4ce <pb_read+0xa2>
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	68db      	ldr	r3, [r3, #12]
 800e4cc:	e000      	b.n	800e4d0 <pb_read+0xa4>
 800e4ce:	4b0a      	ldr	r3, [pc, #40]	; (800e4f8 <pb_read+0xcc>)
 800e4d0:	68fa      	ldr	r2, [r7, #12]
 800e4d2:	60d3      	str	r3, [r2, #12]
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	e006      	b.n	800e4e6 <pb_read+0xba>
#else
    if (!buf_read(stream, buf, count))
        return false;
#endif
    
    stream->bytes_left -= count;
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	689a      	ldr	r2, [r3, #8]
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	1ad2      	subs	r2, r2, r3
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	609a      	str	r2, [r3, #8]
    return true;
 800e4e4:	2301      	movs	r3, #1
}
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	3720      	adds	r7, #32
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	bd80      	pop	{r7, pc}
 800e4ee:	bf00      	nop
 800e4f0:	0800e3d7 	.word	0x0800e3d7
 800e4f4:	080159c0 	.word	0x080159c0
 800e4f8:	080159d0 	.word	0x080159d0

0800e4fc <pb_readbyte>:

/* Read a single byte from input stream. buf may not be NULL.
 * This is an optimization for the varint decoding. */
static bool checkreturn pb_readbyte(pb_istream_t *stream, pb_byte_t *buf)
{
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b082      	sub	sp, #8
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
 800e504:	6039      	str	r1, [r7, #0]
    if (stream->bytes_left == 0)
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	689b      	ldr	r3, [r3, #8]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d10b      	bne.n	800e526 <pb_readbyte+0x2a>
        PB_RETURN_ERROR(stream, "end-of-stream");
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	68db      	ldr	r3, [r3, #12]
 800e512:	2b00      	cmp	r3, #0
 800e514:	d002      	beq.n	800e51c <pb_readbyte+0x20>
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	68db      	ldr	r3, [r3, #12]
 800e51a:	e000      	b.n	800e51e <pb_readbyte+0x22>
 800e51c:	4b13      	ldr	r3, [pc, #76]	; (800e56c <pb_readbyte+0x70>)
 800e51e:	687a      	ldr	r2, [r7, #4]
 800e520:	60d3      	str	r3, [r2, #12]
 800e522:	2300      	movs	r3, #0
 800e524:	e01d      	b.n	800e562 <pb_readbyte+0x66>

#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, 1))
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	2201      	movs	r2, #1
 800e52c:	6839      	ldr	r1, [r7, #0]
 800e52e:	6878      	ldr	r0, [r7, #4]
 800e530:	4798      	blx	r3
 800e532:	4603      	mov	r3, r0
 800e534:	f083 0301 	eor.w	r3, r3, #1
 800e538:	b2db      	uxtb	r3, r3
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d00b      	beq.n	800e556 <pb_readbyte+0x5a>
        PB_RETURN_ERROR(stream, "io error");
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	68db      	ldr	r3, [r3, #12]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d002      	beq.n	800e54c <pb_readbyte+0x50>
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	68db      	ldr	r3, [r3, #12]
 800e54a:	e000      	b.n	800e54e <pb_readbyte+0x52>
 800e54c:	4b08      	ldr	r3, [pc, #32]	; (800e570 <pb_readbyte+0x74>)
 800e54e:	687a      	ldr	r2, [r7, #4]
 800e550:	60d3      	str	r3, [r2, #12]
 800e552:	2300      	movs	r3, #0
 800e554:	e005      	b.n	800e562 <pb_readbyte+0x66>
#else
    *buf = *(const pb_byte_t*)stream->state;
    stream->state = (pb_byte_t*)stream->state + 1;
#endif

    stream->bytes_left--;
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	689b      	ldr	r3, [r3, #8]
 800e55a:	1e5a      	subs	r2, r3, #1
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	609a      	str	r2, [r3, #8]
    
    return true;    
 800e560:	2301      	movs	r3, #1
}
 800e562:	4618      	mov	r0, r3
 800e564:	3708      	adds	r7, #8
 800e566:	46bd      	mov	sp, r7
 800e568:	bd80      	pop	{r7, pc}
 800e56a:	bf00      	nop
 800e56c:	080159c0 	.word	0x080159c0
 800e570:	080159d0 	.word	0x080159d0

0800e574 <pb_istream_from_buffer>:

pb_istream_t pb_istream_from_buffer(const pb_byte_t *buf, size_t bufsize)
{
 800e574:	b490      	push	{r4, r7}
 800e576:	b08a      	sub	sp, #40	; 0x28
 800e578:	af00      	add	r7, sp, #0
 800e57a:	60f8      	str	r0, [r7, #12]
 800e57c:	60b9      	str	r1, [r7, #8]
 800e57e:	607a      	str	r2, [r7, #4]
        const void *c_state;
    } state;
#ifdef PB_BUFFER_ONLY
    stream.callback = NULL;
#else
    stream.callback = &buf_read;
 800e580:	4b0a      	ldr	r3, [pc, #40]	; (800e5ac <pb_istream_from_buffer+0x38>)
 800e582:	61bb      	str	r3, [r7, #24]
#endif
    state.c_state = buf;
 800e584:	68bb      	ldr	r3, [r7, #8]
 800e586:	617b      	str	r3, [r7, #20]
    stream.state = state.state;
 800e588:	697b      	ldr	r3, [r7, #20]
 800e58a:	61fb      	str	r3, [r7, #28]
    stream.bytes_left = bufsize;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 800e590:	2300      	movs	r3, #0
 800e592:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    return stream;
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	461c      	mov	r4, r3
 800e598:	f107 0318 	add.w	r3, r7, #24
 800e59c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e59e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800e5a2:	68f8      	ldr	r0, [r7, #12]
 800e5a4:	3728      	adds	r7, #40	; 0x28
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	bc90      	pop	{r4, r7}
 800e5aa:	4770      	bx	lr
 800e5ac:	0800e3d7 	.word	0x0800e3d7

0800e5b0 <pb_decode_varint32_eof>:
/********************
 * Helper functions *
 ********************/

static bool checkreturn pb_decode_varint32_eof(pb_istream_t *stream, uint32_t *dest, bool *eof)
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b088      	sub	sp, #32
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	60f8      	str	r0, [r7, #12]
 800e5b8:	60b9      	str	r1, [r7, #8]
 800e5ba:	607a      	str	r2, [r7, #4]
    pb_byte_t byte;
    uint32_t result;
    
    if (!pb_readbyte(stream, &byte))
 800e5bc:	f107 0316 	add.w	r3, r7, #22
 800e5c0:	4619      	mov	r1, r3
 800e5c2:	68f8      	ldr	r0, [r7, #12]
 800e5c4:	f7ff ff9a 	bl	800e4fc <pb_readbyte>
 800e5c8:	4603      	mov	r3, r0
 800e5ca:	f083 0301 	eor.w	r3, r3, #1
 800e5ce:	b2db      	uxtb	r3, r3
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d00b      	beq.n	800e5ec <pb_decode_varint32_eof+0x3c>
    {
        if (stream->bytes_left == 0)
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	689b      	ldr	r3, [r3, #8]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d105      	bne.n	800e5e8 <pb_decode_varint32_eof+0x38>
        {
            if (eof)
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d002      	beq.n	800e5e8 <pb_decode_varint32_eof+0x38>
            {
                *eof = true;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	2201      	movs	r2, #1
 800e5e6:	701a      	strb	r2, [r3, #0]
            }
        }

        return false;
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	e064      	b.n	800e6b6 <pb_decode_varint32_eof+0x106>
    }
    
    if ((byte & 0x80) == 0)
 800e5ec:	7dbb      	ldrb	r3, [r7, #22]
 800e5ee:	b25b      	sxtb	r3, r3
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	db02      	blt.n	800e5fa <pb_decode_varint32_eof+0x4a>
    {
        /* Quick case, 1 byte value */
        result = byte;
 800e5f4:	7dbb      	ldrb	r3, [r7, #22]
 800e5f6:	61fb      	str	r3, [r7, #28]
 800e5f8:	e059      	b.n	800e6ae <pb_decode_varint32_eof+0xfe>
    }
    else
    {
        /* Multibyte case */
        uint_fast8_t bitpos = 7;
 800e5fa:	2307      	movs	r3, #7
 800e5fc:	61bb      	str	r3, [r7, #24]
        result = byte & 0x7F;
 800e5fe:	7dbb      	ldrb	r3, [r7, #22]
 800e600:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e604:	61fb      	str	r3, [r7, #28]
        
        do
        {
            if (!pb_readbyte(stream, &byte))
 800e606:	f107 0316 	add.w	r3, r7, #22
 800e60a:	4619      	mov	r1, r3
 800e60c:	68f8      	ldr	r0, [r7, #12]
 800e60e:	f7ff ff75 	bl	800e4fc <pb_readbyte>
 800e612:	4603      	mov	r3, r0
 800e614:	f083 0301 	eor.w	r3, r3, #1
 800e618:	b2db      	uxtb	r3, r3
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d001      	beq.n	800e622 <pb_decode_varint32_eof+0x72>
                return false;
 800e61e:	2300      	movs	r3, #0
 800e620:	e049      	b.n	800e6b6 <pb_decode_varint32_eof+0x106>
            
            if (bitpos >= 32)
 800e622:	69bb      	ldr	r3, [r7, #24]
 800e624:	2b1f      	cmp	r3, #31
 800e626:	d91e      	bls.n	800e666 <pb_decode_varint32_eof+0xb6>
            {
                /* Note: The varint could have trailing 0x80 bytes, or 0xFF for negative. */
                uint8_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 800e628:	69bb      	ldr	r3, [r7, #24]
 800e62a:	2b3e      	cmp	r3, #62	; 0x3e
 800e62c:	d801      	bhi.n	800e632 <pb_decode_varint32_eof+0x82>
 800e62e:	23ff      	movs	r3, #255	; 0xff
 800e630:	e000      	b.n	800e634 <pb_decode_varint32_eof+0x84>
 800e632:	2301      	movs	r3, #1
 800e634:	75fb      	strb	r3, [r7, #23]
                
                if ((byte & 0x7F) != 0x00 && ((result >> 31) == 0 || byte != sign_extension))
 800e636:	7dbb      	ldrb	r3, [r7, #22]
 800e638:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d01b      	beq.n	800e678 <pb_decode_varint32_eof+0xc8>
 800e640:	69fb      	ldr	r3, [r7, #28]
 800e642:	2b00      	cmp	r3, #0
 800e644:	da03      	bge.n	800e64e <pb_decode_varint32_eof+0x9e>
 800e646:	7dbb      	ldrb	r3, [r7, #22]
 800e648:	7dfa      	ldrb	r2, [r7, #23]
 800e64a:	429a      	cmp	r2, r3
 800e64c:	d014      	beq.n	800e678 <pb_decode_varint32_eof+0xc8>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	68db      	ldr	r3, [r3, #12]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d002      	beq.n	800e65c <pb_decode_varint32_eof+0xac>
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	68db      	ldr	r3, [r3, #12]
 800e65a:	e000      	b.n	800e65e <pb_decode_varint32_eof+0xae>
 800e65c:	4b18      	ldr	r3, [pc, #96]	; (800e6c0 <pb_decode_varint32_eof+0x110>)
 800e65e:	68fa      	ldr	r2, [r7, #12]
 800e660:	60d3      	str	r3, [r2, #12]
 800e662:	2300      	movs	r3, #0
 800e664:	e027      	b.n	800e6b6 <pb_decode_varint32_eof+0x106>
                }
            }
            else
            {
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 800e666:	7dbb      	ldrb	r3, [r7, #22]
 800e668:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e66c:	69bb      	ldr	r3, [r7, #24]
 800e66e:	fa02 f303 	lsl.w	r3, r2, r3
 800e672:	69fa      	ldr	r2, [r7, #28]
 800e674:	4313      	orrs	r3, r2
 800e676:	61fb      	str	r3, [r7, #28]
            }
            bitpos = (uint_fast8_t)(bitpos + 7);
 800e678:	69bb      	ldr	r3, [r7, #24]
 800e67a:	3307      	adds	r3, #7
 800e67c:	61bb      	str	r3, [r7, #24]
        } while (byte & 0x80);
 800e67e:	7dbb      	ldrb	r3, [r7, #22]
 800e680:	b25b      	sxtb	r3, r3
 800e682:	2b00      	cmp	r3, #0
 800e684:	dbbf      	blt.n	800e606 <pb_decode_varint32_eof+0x56>
        
        if (bitpos == 35 && (byte & 0x70) != 0)
 800e686:	69bb      	ldr	r3, [r7, #24]
 800e688:	2b23      	cmp	r3, #35	; 0x23
 800e68a:	d110      	bne.n	800e6ae <pb_decode_varint32_eof+0xfe>
 800e68c:	7dbb      	ldrb	r3, [r7, #22]
 800e68e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e692:	2b00      	cmp	r3, #0
 800e694:	d00b      	beq.n	800e6ae <pb_decode_varint32_eof+0xfe>
        {
            /* The last byte was at bitpos=28, so only bottom 4 bits fit. */
            PB_RETURN_ERROR(stream, "varint overflow");
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	68db      	ldr	r3, [r3, #12]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d002      	beq.n	800e6a4 <pb_decode_varint32_eof+0xf4>
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	68db      	ldr	r3, [r3, #12]
 800e6a2:	e000      	b.n	800e6a6 <pb_decode_varint32_eof+0xf6>
 800e6a4:	4b06      	ldr	r3, [pc, #24]	; (800e6c0 <pb_decode_varint32_eof+0x110>)
 800e6a6:	68fa      	ldr	r2, [r7, #12]
 800e6a8:	60d3      	str	r3, [r2, #12]
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	e003      	b.n	800e6b6 <pb_decode_varint32_eof+0x106>
        }
   }
   
   *dest = result;
 800e6ae:	68bb      	ldr	r3, [r7, #8]
 800e6b0:	69fa      	ldr	r2, [r7, #28]
 800e6b2:	601a      	str	r2, [r3, #0]
   return true;
 800e6b4:	2301      	movs	r3, #1
}
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	3720      	adds	r7, #32
 800e6ba:	46bd      	mov	sp, r7
 800e6bc:	bd80      	pop	{r7, pc}
 800e6be:	bf00      	nop
 800e6c0:	080159dc 	.word	0x080159dc

0800e6c4 <pb_decode_varint32>:

bool checkreturn pb_decode_varint32(pb_istream_t *stream, uint32_t *dest)
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b082      	sub	sp, #8
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
 800e6cc:	6039      	str	r1, [r7, #0]
    return pb_decode_varint32_eof(stream, dest, NULL);
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	6839      	ldr	r1, [r7, #0]
 800e6d2:	6878      	ldr	r0, [r7, #4]
 800e6d4:	f7ff ff6c 	bl	800e5b0 <pb_decode_varint32_eof>
 800e6d8:	4603      	mov	r3, r0
}
 800e6da:	4618      	mov	r0, r3
 800e6dc:	3708      	adds	r7, #8
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	bd80      	pop	{r7, pc}
	...

0800e6e4 <pb_decode_varint>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_decode_varint(pb_istream_t *stream, uint64_t *dest)
{
 800e6e4:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800e6e8:	b088      	sub	sp, #32
 800e6ea:	af00      	add	r7, sp, #0
 800e6ec:	6078      	str	r0, [r7, #4]
 800e6ee:	6039      	str	r1, [r7, #0]
    pb_byte_t byte;
    uint_fast8_t bitpos = 0;
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	61fb      	str	r3, [r7, #28]
    uint64_t result = 0;
 800e6f4:	f04f 0200 	mov.w	r2, #0
 800e6f8:	f04f 0300 	mov.w	r3, #0
 800e6fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    
    do
    {
        if (bitpos >= 64)
 800e700:	69fb      	ldr	r3, [r7, #28]
 800e702:	2b3f      	cmp	r3, #63	; 0x3f
 800e704:	d90b      	bls.n	800e71e <pb_decode_varint+0x3a>
            PB_RETURN_ERROR(stream, "varint overflow");
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	68db      	ldr	r3, [r3, #12]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d002      	beq.n	800e714 <pb_decode_varint+0x30>
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	68db      	ldr	r3, [r3, #12]
 800e712:	e000      	b.n	800e716 <pb_decode_varint+0x32>
 800e714:	4b23      	ldr	r3, [pc, #140]	; (800e7a4 <pb_decode_varint+0xc0>)
 800e716:	687a      	ldr	r2, [r7, #4]
 800e718:	60d3      	str	r3, [r2, #12]
 800e71a:	2300      	movs	r3, #0
 800e71c:	e03d      	b.n	800e79a <pb_decode_varint+0xb6>
        
        if (!pb_readbyte(stream, &byte))
 800e71e:	f107 030f 	add.w	r3, r7, #15
 800e722:	4619      	mov	r1, r3
 800e724:	6878      	ldr	r0, [r7, #4]
 800e726:	f7ff fee9 	bl	800e4fc <pb_readbyte>
 800e72a:	4603      	mov	r3, r0
 800e72c:	f083 0301 	eor.w	r3, r3, #1
 800e730:	b2db      	uxtb	r3, r3
 800e732:	2b00      	cmp	r3, #0
 800e734:	d001      	beq.n	800e73a <pb_decode_varint+0x56>
            return false;
 800e736:	2300      	movs	r3, #0
 800e738:	e02f      	b.n	800e79a <pb_decode_varint+0xb6>

        result |= (uint64_t)(byte & 0x7F) << bitpos;
 800e73a:	7bfb      	ldrb	r3, [r7, #15]
 800e73c:	b2da      	uxtb	r2, r3
 800e73e:	f04f 0300 	mov.w	r3, #0
 800e742:	f04f 007f 	mov.w	r0, #127	; 0x7f
 800e746:	f04f 0100 	mov.w	r1, #0
 800e74a:	ea02 0b00 	and.w	fp, r2, r0
 800e74e:	ea03 0c01 	and.w	ip, r3, r1
 800e752:	69f9      	ldr	r1, [r7, #28]
 800e754:	f1a1 0620 	sub.w	r6, r1, #32
 800e758:	f1c1 0020 	rsb	r0, r1, #32
 800e75c:	fa0c f501 	lsl.w	r5, ip, r1
 800e760:	fa0b f606 	lsl.w	r6, fp, r6
 800e764:	4335      	orrs	r5, r6
 800e766:	fa2b f000 	lsr.w	r0, fp, r0
 800e76a:	4305      	orrs	r5, r0
 800e76c:	fa0b f401 	lsl.w	r4, fp, r1
 800e770:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e774:	ea42 0004 	orr.w	r0, r2, r4
 800e778:	ea43 0105 	orr.w	r1, r3, r5
 800e77c:	e9c7 0104 	strd	r0, r1, [r7, #16]
        bitpos = (uint_fast8_t)(bitpos + 7);
 800e780:	69fb      	ldr	r3, [r7, #28]
 800e782:	3307      	adds	r3, #7
 800e784:	61fb      	str	r3, [r7, #28]
    } while (byte & 0x80);
 800e786:	7bfb      	ldrb	r3, [r7, #15]
 800e788:	b25b      	sxtb	r3, r3
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	dbb8      	blt.n	800e700 <pb_decode_varint+0x1c>
    
    *dest = result;
 800e78e:	683a      	ldr	r2, [r7, #0]
 800e790:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800e794:	e9c2 3400 	strd	r3, r4, [r2]
    return true;
 800e798:	2301      	movs	r3, #1
}
 800e79a:	4618      	mov	r0, r3
 800e79c:	3720      	adds	r7, #32
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800e7a4:	080159dc 	.word	0x080159dc

0800e7a8 <pb_skip_varint>:
#endif

bool checkreturn pb_skip_varint(pb_istream_t *stream)
{
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b084      	sub	sp, #16
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
    pb_byte_t byte;
    do
    {
        if (!pb_read(stream, &byte, 1))
 800e7b0:	f107 030f 	add.w	r3, r7, #15
 800e7b4:	2201      	movs	r2, #1
 800e7b6:	4619      	mov	r1, r3
 800e7b8:	6878      	ldr	r0, [r7, #4]
 800e7ba:	f7ff fe37 	bl	800e42c <pb_read>
 800e7be:	4603      	mov	r3, r0
 800e7c0:	f083 0301 	eor.w	r3, r3, #1
 800e7c4:	b2db      	uxtb	r3, r3
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d001      	beq.n	800e7ce <pb_skip_varint+0x26>
            return false;
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	e004      	b.n	800e7d8 <pb_skip_varint+0x30>
    } while (byte & 0x80);
 800e7ce:	7bfb      	ldrb	r3, [r7, #15]
 800e7d0:	b25b      	sxtb	r3, r3
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	dbec      	blt.n	800e7b0 <pb_skip_varint+0x8>
    return true;
 800e7d6:	2301      	movs	r3, #1
}
 800e7d8:	4618      	mov	r0, r3
 800e7da:	3710      	adds	r7, #16
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	bd80      	pop	{r7, pc}

0800e7e0 <pb_skip_string>:

bool checkreturn pb_skip_string(pb_istream_t *stream)
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b084      	sub	sp, #16
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
    uint32_t length;
    if (!pb_decode_varint32(stream, &length))
 800e7e8:	f107 030c 	add.w	r3, r7, #12
 800e7ec:	4619      	mov	r1, r3
 800e7ee:	6878      	ldr	r0, [r7, #4]
 800e7f0:	f7ff ff68 	bl	800e6c4 <pb_decode_varint32>
 800e7f4:	4603      	mov	r3, r0
 800e7f6:	f083 0301 	eor.w	r3, r3, #1
 800e7fa:	b2db      	uxtb	r3, r3
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d001      	beq.n	800e804 <pb_skip_string+0x24>
        return false;
 800e800:	2300      	movs	r3, #0
 800e802:	e006      	b.n	800e812 <pb_skip_string+0x32>
    
    return pb_read(stream, NULL, length);
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	461a      	mov	r2, r3
 800e808:	2100      	movs	r1, #0
 800e80a:	6878      	ldr	r0, [r7, #4]
 800e80c:	f7ff fe0e 	bl	800e42c <pb_read>
 800e810:	4603      	mov	r3, r0
}
 800e812:	4618      	mov	r0, r3
 800e814:	3710      	adds	r7, #16
 800e816:	46bd      	mov	sp, r7
 800e818:	bd80      	pop	{r7, pc}

0800e81a <pb_decode_tag>:

bool checkreturn pb_decode_tag(pb_istream_t *stream, pb_wire_type_t *wire_type, uint32_t *tag, bool *eof)
{
 800e81a:	b580      	push	{r7, lr}
 800e81c:	b086      	sub	sp, #24
 800e81e:	af00      	add	r7, sp, #0
 800e820:	60f8      	str	r0, [r7, #12]
 800e822:	60b9      	str	r1, [r7, #8]
 800e824:	607a      	str	r2, [r7, #4]
 800e826:	603b      	str	r3, [r7, #0]
    uint32_t temp;
    *eof = false;
 800e828:	683b      	ldr	r3, [r7, #0]
 800e82a:	2200      	movs	r2, #0
 800e82c:	701a      	strb	r2, [r3, #0]
    *wire_type = (pb_wire_type_t) 0;
 800e82e:	68bb      	ldr	r3, [r7, #8]
 800e830:	2200      	movs	r2, #0
 800e832:	701a      	strb	r2, [r3, #0]
    *tag = 0;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	2200      	movs	r2, #0
 800e838:	601a      	str	r2, [r3, #0]
    
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 800e83a:	f107 0314 	add.w	r3, r7, #20
 800e83e:	683a      	ldr	r2, [r7, #0]
 800e840:	4619      	mov	r1, r3
 800e842:	68f8      	ldr	r0, [r7, #12]
 800e844:	f7ff feb4 	bl	800e5b0 <pb_decode_varint32_eof>
 800e848:	4603      	mov	r3, r0
 800e84a:	f083 0301 	eor.w	r3, r3, #1
 800e84e:	b2db      	uxtb	r3, r3
 800e850:	2b00      	cmp	r3, #0
 800e852:	d001      	beq.n	800e858 <pb_decode_tag+0x3e>
    {
        return false;
 800e854:	2300      	movs	r3, #0
 800e856:	e013      	b.n	800e880 <pb_decode_tag+0x66>
    }
    
    if (temp == 0)
 800e858:	697b      	ldr	r3, [r7, #20]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d104      	bne.n	800e868 <pb_decode_tag+0x4e>
    {
        *eof = true; /* Special feature: allow 0-terminated messages. */
 800e85e:	683b      	ldr	r3, [r7, #0]
 800e860:	2201      	movs	r2, #1
 800e862:	701a      	strb	r2, [r3, #0]
        return false;
 800e864:	2300      	movs	r3, #0
 800e866:	e00b      	b.n	800e880 <pb_decode_tag+0x66>
    }
    
    *tag = temp >> 3;
 800e868:	697b      	ldr	r3, [r7, #20]
 800e86a:	08da      	lsrs	r2, r3, #3
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	601a      	str	r2, [r3, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 800e870:	697b      	ldr	r3, [r7, #20]
 800e872:	b2db      	uxtb	r3, r3
 800e874:	f003 0307 	and.w	r3, r3, #7
 800e878:	b2da      	uxtb	r2, r3
 800e87a:	68bb      	ldr	r3, [r7, #8]
 800e87c:	701a      	strb	r2, [r3, #0]
    return true;
 800e87e:	2301      	movs	r3, #1
}
 800e880:	4618      	mov	r0, r3
 800e882:	3718      	adds	r7, #24
 800e884:	46bd      	mov	sp, r7
 800e886:	bd80      	pop	{r7, pc}

0800e888 <pb_skip_field>:

bool checkreturn pb_skip_field(pb_istream_t *stream, pb_wire_type_t wire_type)
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b082      	sub	sp, #8
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
 800e890:	460b      	mov	r3, r1
 800e892:	70fb      	strb	r3, [r7, #3]
    switch (wire_type)
 800e894:	78fb      	ldrb	r3, [r7, #3]
 800e896:	2b05      	cmp	r3, #5
 800e898:	d826      	bhi.n	800e8e8 <pb_skip_field+0x60>
 800e89a:	a201      	add	r2, pc, #4	; (adr r2, 800e8a0 <pb_skip_field+0x18>)
 800e89c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8a0:	0800e8b9 	.word	0x0800e8b9
 800e8a4:	0800e8c3 	.word	0x0800e8c3
 800e8a8:	0800e8d1 	.word	0x0800e8d1
 800e8ac:	0800e8e9 	.word	0x0800e8e9
 800e8b0:	0800e8e9 	.word	0x0800e8e9
 800e8b4:	0800e8db 	.word	0x0800e8db
    {
        case PB_WT_VARINT: return pb_skip_varint(stream);
 800e8b8:	6878      	ldr	r0, [r7, #4]
 800e8ba:	f7ff ff75 	bl	800e7a8 <pb_skip_varint>
 800e8be:	4603      	mov	r3, r0
 800e8c0:	e01d      	b.n	800e8fe <pb_skip_field+0x76>
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 800e8c2:	2208      	movs	r2, #8
 800e8c4:	2100      	movs	r1, #0
 800e8c6:	6878      	ldr	r0, [r7, #4]
 800e8c8:	f7ff fdb0 	bl	800e42c <pb_read>
 800e8cc:	4603      	mov	r3, r0
 800e8ce:	e016      	b.n	800e8fe <pb_skip_field+0x76>
        case PB_WT_STRING: return pb_skip_string(stream);
 800e8d0:	6878      	ldr	r0, [r7, #4]
 800e8d2:	f7ff ff85 	bl	800e7e0 <pb_skip_string>
 800e8d6:	4603      	mov	r3, r0
 800e8d8:	e011      	b.n	800e8fe <pb_skip_field+0x76>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 800e8da:	2204      	movs	r2, #4
 800e8dc:	2100      	movs	r1, #0
 800e8de:	6878      	ldr	r0, [r7, #4]
 800e8e0:	f7ff fda4 	bl	800e42c <pb_read>
 800e8e4:	4603      	mov	r3, r0
 800e8e6:	e00a      	b.n	800e8fe <pb_skip_field+0x76>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	68db      	ldr	r3, [r3, #12]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d002      	beq.n	800e8f6 <pb_skip_field+0x6e>
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	68db      	ldr	r3, [r3, #12]
 800e8f4:	e000      	b.n	800e8f8 <pb_skip_field+0x70>
 800e8f6:	4b04      	ldr	r3, [pc, #16]	; (800e908 <pb_skip_field+0x80>)
 800e8f8:	687a      	ldr	r2, [r7, #4]
 800e8fa:	60d3      	str	r3, [r2, #12]
 800e8fc:	2300      	movs	r3, #0
    }
}
 800e8fe:	4618      	mov	r0, r3
 800e900:	3708      	adds	r7, #8
 800e902:	46bd      	mov	sp, r7
 800e904:	bd80      	pop	{r7, pc}
 800e906:	bf00      	nop
 800e908:	080159ec 	.word	0x080159ec

0800e90c <read_raw_value>:

/* Read a raw value to buffer, for the purpose of passing it to callback as
 * a substream. Size is maximum size on call, and actual size on return.
 */
static bool checkreturn read_raw_value(pb_istream_t *stream, pb_wire_type_t wire_type, pb_byte_t *buf, size_t *size)
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b086      	sub	sp, #24
 800e910:	af00      	add	r7, sp, #0
 800e912:	60f8      	str	r0, [r7, #12]
 800e914:	607a      	str	r2, [r7, #4]
 800e916:	603b      	str	r3, [r7, #0]
 800e918:	460b      	mov	r3, r1
 800e91a:	72fb      	strb	r3, [r7, #11]
    size_t max_size = *size;
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	617b      	str	r3, [r7, #20]
    switch (wire_type)
 800e922:	7afb      	ldrb	r3, [r7, #11]
 800e924:	2b01      	cmp	r3, #1
 800e926:	d028      	beq.n	800e97a <read_raw_value+0x6e>
 800e928:	2b05      	cmp	r3, #5
 800e92a:	d030      	beq.n	800e98e <read_raw_value+0x82>
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d138      	bne.n	800e9a2 <read_raw_value+0x96>
    {
        case PB_WT_VARINT:
            *size = 0;
 800e930:	683b      	ldr	r3, [r7, #0]
 800e932:	2200      	movs	r2, #0
 800e934:	601a      	str	r2, [r3, #0]
            do
            {
                (*size)++;
 800e936:	683b      	ldr	r3, [r7, #0]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	1c5a      	adds	r2, r3, #1
 800e93c:	683b      	ldr	r3, [r7, #0]
 800e93e:	601a      	str	r2, [r3, #0]
                if (*size > max_size) return false;
 800e940:	683b      	ldr	r3, [r7, #0]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	697a      	ldr	r2, [r7, #20]
 800e946:	429a      	cmp	r2, r3
 800e948:	d201      	bcs.n	800e94e <read_raw_value+0x42>
 800e94a:	2300      	movs	r3, #0
 800e94c:	e034      	b.n	800e9b8 <read_raw_value+0xac>
                if (!pb_read(stream, buf, 1)) return false;
 800e94e:	2201      	movs	r2, #1
 800e950:	6879      	ldr	r1, [r7, #4]
 800e952:	68f8      	ldr	r0, [r7, #12]
 800e954:	f7ff fd6a 	bl	800e42c <pb_read>
 800e958:	4603      	mov	r3, r0
 800e95a:	f083 0301 	eor.w	r3, r3, #1
 800e95e:	b2db      	uxtb	r3, r3
 800e960:	2b00      	cmp	r3, #0
 800e962:	d001      	beq.n	800e968 <read_raw_value+0x5c>
 800e964:	2300      	movs	r3, #0
 800e966:	e027      	b.n	800e9b8 <read_raw_value+0xac>
            } while (*buf++ & 0x80);
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	1c5a      	adds	r2, r3, #1
 800e96c:	607a      	str	r2, [r7, #4]
 800e96e:	781b      	ldrb	r3, [r3, #0]
 800e970:	b25b      	sxtb	r3, r3
 800e972:	2b00      	cmp	r3, #0
 800e974:	dbdf      	blt.n	800e936 <read_raw_value+0x2a>
            return true;
 800e976:	2301      	movs	r3, #1
 800e978:	e01e      	b.n	800e9b8 <read_raw_value+0xac>
            
        case PB_WT_64BIT:
            *size = 8;
 800e97a:	683b      	ldr	r3, [r7, #0]
 800e97c:	2208      	movs	r2, #8
 800e97e:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 8);
 800e980:	2208      	movs	r2, #8
 800e982:	6879      	ldr	r1, [r7, #4]
 800e984:	68f8      	ldr	r0, [r7, #12]
 800e986:	f7ff fd51 	bl	800e42c <pb_read>
 800e98a:	4603      	mov	r3, r0
 800e98c:	e014      	b.n	800e9b8 <read_raw_value+0xac>
        
        case PB_WT_32BIT:
            *size = 4;
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	2204      	movs	r2, #4
 800e992:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 4);
 800e994:	2204      	movs	r2, #4
 800e996:	6879      	ldr	r1, [r7, #4]
 800e998:	68f8      	ldr	r0, [r7, #12]
 800e99a:	f7ff fd47 	bl	800e42c <pb_read>
 800e99e:	4603      	mov	r3, r0
 800e9a0:	e00a      	b.n	800e9b8 <read_raw_value+0xac>
            /* Calling read_raw_value with a PB_WT_STRING is an error.
             * Explicitly handle this case and fallthrough to default to avoid
             * compiler warnings.
             */

        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	68db      	ldr	r3, [r3, #12]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d002      	beq.n	800e9b0 <read_raw_value+0xa4>
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	68db      	ldr	r3, [r3, #12]
 800e9ae:	e000      	b.n	800e9b2 <read_raw_value+0xa6>
 800e9b0:	4b03      	ldr	r3, [pc, #12]	; (800e9c0 <read_raw_value+0xb4>)
 800e9b2:	68fa      	ldr	r2, [r7, #12]
 800e9b4:	60d3      	str	r3, [r2, #12]
 800e9b6:	2300      	movs	r3, #0
    }
}
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	3718      	adds	r7, #24
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	bd80      	pop	{r7, pc}
 800e9c0:	080159ec 	.word	0x080159ec

0800e9c4 <pb_make_string_substream>:

/* Decode string length from stream and return a substream with limited length.
 * Remember to close the substream using pb_close_string_substream().
 */
bool checkreturn pb_make_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 800e9c4:	b590      	push	{r4, r7, lr}
 800e9c6:	b085      	sub	sp, #20
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	6078      	str	r0, [r7, #4]
 800e9cc:	6039      	str	r1, [r7, #0]
    uint32_t size;
    if (!pb_decode_varint32(stream, &size))
 800e9ce:	f107 030c 	add.w	r3, r7, #12
 800e9d2:	4619      	mov	r1, r3
 800e9d4:	6878      	ldr	r0, [r7, #4]
 800e9d6:	f7ff fe75 	bl	800e6c4 <pb_decode_varint32>
 800e9da:	4603      	mov	r3, r0
 800e9dc:	f083 0301 	eor.w	r3, r3, #1
 800e9e0:	b2db      	uxtb	r3, r3
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d001      	beq.n	800e9ea <pb_make_string_substream+0x26>
        return false;
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	e020      	b.n	800ea2c <pb_make_string_substream+0x68>
    
    *substream = *stream;
 800e9ea:	683a      	ldr	r2, [r7, #0]
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	4614      	mov	r4, r2
 800e9f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e9f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (substream->bytes_left < size)
 800e9f6:	683b      	ldr	r3, [r7, #0]
 800e9f8:	689a      	ldr	r2, [r3, #8]
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	429a      	cmp	r2, r3
 800e9fe:	d20b      	bcs.n	800ea18 <pb_make_string_substream+0x54>
        PB_RETURN_ERROR(stream, "parent stream too short");
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	68db      	ldr	r3, [r3, #12]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d002      	beq.n	800ea0e <pb_make_string_substream+0x4a>
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	68db      	ldr	r3, [r3, #12]
 800ea0c:	e000      	b.n	800ea10 <pb_make_string_substream+0x4c>
 800ea0e:	4b09      	ldr	r3, [pc, #36]	; (800ea34 <pb_make_string_substream+0x70>)
 800ea10:	687a      	ldr	r2, [r7, #4]
 800ea12:	60d3      	str	r3, [r2, #12]
 800ea14:	2300      	movs	r3, #0
 800ea16:	e009      	b.n	800ea2c <pb_make_string_substream+0x68>
    
    substream->bytes_left = size;
 800ea18:	68fa      	ldr	r2, [r7, #12]
 800ea1a:	683b      	ldr	r3, [r7, #0]
 800ea1c:	609a      	str	r2, [r3, #8]
    stream->bytes_left -= size;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	689a      	ldr	r2, [r3, #8]
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	1ad2      	subs	r2, r2, r3
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	609a      	str	r2, [r3, #8]
    return true;
 800ea2a:	2301      	movs	r3, #1
}
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	3714      	adds	r7, #20
 800ea30:	46bd      	mov	sp, r7
 800ea32:	bd90      	pop	{r4, r7, pc}
 800ea34:	08015a00 	.word	0x08015a00

0800ea38 <pb_close_string_substream>:

bool checkreturn pb_close_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b082      	sub	sp, #8
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
 800ea40:	6039      	str	r1, [r7, #0]
    if (substream->bytes_left) {
 800ea42:	683b      	ldr	r3, [r7, #0]
 800ea44:	689b      	ldr	r3, [r3, #8]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d00e      	beq.n	800ea68 <pb_close_string_substream+0x30>
        if (!pb_read(substream, NULL, substream->bytes_left))
 800ea4a:	683b      	ldr	r3, [r7, #0]
 800ea4c:	689b      	ldr	r3, [r3, #8]
 800ea4e:	461a      	mov	r2, r3
 800ea50:	2100      	movs	r1, #0
 800ea52:	6838      	ldr	r0, [r7, #0]
 800ea54:	f7ff fcea 	bl	800e42c <pb_read>
 800ea58:	4603      	mov	r3, r0
 800ea5a:	f083 0301 	eor.w	r3, r3, #1
 800ea5e:	b2db      	uxtb	r3, r3
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d001      	beq.n	800ea68 <pb_close_string_substream+0x30>
            return false;
 800ea64:	2300      	movs	r3, #0
 800ea66:	e008      	b.n	800ea7a <pb_close_string_substream+0x42>
    }

    stream->state = substream->state;
 800ea68:	683b      	ldr	r3, [r7, #0]
 800ea6a:	685a      	ldr	r2, [r3, #4]
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	605a      	str	r2, [r3, #4]

#ifndef PB_NO_ERRMSG
    stream->errmsg = substream->errmsg;
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	68da      	ldr	r2, [r3, #12]
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	60da      	str	r2, [r3, #12]
#endif
    return true;
 800ea78:	2301      	movs	r3, #1
}
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	3708      	adds	r7, #8
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	bd80      	pop	{r7, pc}
	...

0800ea84 <decode_static_field>:
/*************************
 * Decode a single field *
 *************************/

static bool checkreturn decode_static_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *iter)
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b08e      	sub	sp, #56	; 0x38
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	60f8      	str	r0, [r7, #12]
 800ea8c:	460b      	mov	r3, r1
 800ea8e:	607a      	str	r2, [r7, #4]
 800ea90:	72fb      	strb	r3, [r7, #11]
    pb_type_t type;
    pb_decoder_t func;
    
    type = iter->pos->type;
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	685b      	ldr	r3, [r3, #4]
 800ea96:	789b      	ldrb	r3, [r3, #2]
 800ea98:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    func = PB_DECODERS[PB_LTYPE(type)];
 800ea9c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800eaa0:	f003 030f 	and.w	r3, r3, #15
 800eaa4:	4a85      	ldr	r2, [pc, #532]	; (800ecbc <decode_static_field+0x238>)
 800eaa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eaaa:	633b      	str	r3, [r7, #48]	; 0x30

    switch (PB_HTYPE(type))
 800eaac:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800eab0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800eab4:	2b10      	cmp	r3, #16
 800eab6:	d013      	beq.n	800eae0 <decode_static_field+0x5c>
 800eab8:	2b10      	cmp	r3, #16
 800eaba:	dc02      	bgt.n	800eac2 <decode_static_field+0x3e>
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d006      	beq.n	800eace <decode_static_field+0x4a>
 800eac0:	e0ec      	b.n	800ec9c <decode_static_field+0x218>
 800eac2:	2b20      	cmp	r3, #32
 800eac4:	d01f      	beq.n	800eb06 <decode_static_field+0x82>
 800eac6:	2b30      	cmp	r3, #48	; 0x30
 800eac8:	f000 80bd 	beq.w	800ec46 <decode_static_field+0x1c2>
 800eacc:	e0e6      	b.n	800ec9c <decode_static_field+0x218>
    {
        case PB_HTYPE_REQUIRED:
            return func(stream, iter->pos, iter->pData);
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	6859      	ldr	r1, [r3, #4]
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	691a      	ldr	r2, [r3, #16]
 800ead6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ead8:	68f8      	ldr	r0, [r7, #12]
 800eada:	4798      	blx	r3
 800eadc:	4603      	mov	r3, r0
 800eade:	e0e8      	b.n	800ecb2 <decode_static_field+0x22e>
            
        case PB_HTYPE_OPTIONAL:
            if (iter->pSize != iter->pData)
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	695a      	ldr	r2, [r3, #20]
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	691b      	ldr	r3, [r3, #16]
 800eae8:	429a      	cmp	r2, r3
 800eaea:	d003      	beq.n	800eaf4 <decode_static_field+0x70>
                *(bool*)iter->pSize = true;
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	695b      	ldr	r3, [r3, #20]
 800eaf0:	2201      	movs	r2, #1
 800eaf2:	701a      	strb	r2, [r3, #0]
            return func(stream, iter->pos, iter->pData);
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	6859      	ldr	r1, [r3, #4]
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	691a      	ldr	r2, [r3, #16]
 800eafc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eafe:	68f8      	ldr	r0, [r7, #12]
 800eb00:	4798      	blx	r3
 800eb02:	4603      	mov	r3, r0
 800eb04:	e0d5      	b.n	800ecb2 <decode_static_field+0x22e>
    
        case PB_HTYPE_REPEATED:
            if (wire_type == PB_WT_STRING
 800eb06:	7afb      	ldrb	r3, [r7, #11]
 800eb08:	2b02      	cmp	r3, #2
 800eb0a:	d16a      	bne.n	800ebe2 <decode_static_field+0x15e>
                && PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
 800eb0c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800eb10:	f003 030f 	and.w	r3, r3, #15
 800eb14:	2b04      	cmp	r3, #4
 800eb16:	dc64      	bgt.n	800ebe2 <decode_static_field+0x15e>
            {
                /* Packed array */
                bool status = true;
 800eb18:	2301      	movs	r3, #1
 800eb1a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                pb_size_t *size = (pb_size_t*)iter->pSize;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	695b      	ldr	r3, [r3, #20]
 800eb22:	62fb      	str	r3, [r7, #44]	; 0x2c

                pb_istream_t substream;
                if (!pb_make_string_substream(stream, &substream))
 800eb24:	f107 0310 	add.w	r3, r7, #16
 800eb28:	4619      	mov	r1, r3
 800eb2a:	68f8      	ldr	r0, [r7, #12]
 800eb2c:	f7ff ff4a 	bl	800e9c4 <pb_make_string_substream>
 800eb30:	4603      	mov	r3, r0
 800eb32:	f083 0301 	eor.w	r3, r3, #1
 800eb36:	b2db      	uxtb	r3, r3
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d026      	beq.n	800eb8a <decode_static_field+0x106>
                    return false;
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	e0b8      	b.n	800ecb2 <decode_static_field+0x22e>

                while (substream.bytes_left > 0 && *size < iter->pos->array_size)
                {
                    void *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	691b      	ldr	r3, [r3, #16]
 800eb44:	687a      	ldr	r2, [r7, #4]
 800eb46:	6852      	ldr	r2, [r2, #4]
 800eb48:	f8b2 2007 	ldrh.w	r2, [r2, #7]
 800eb4c:	b292      	uxth	r2, r2
 800eb4e:	4611      	mov	r1, r2
 800eb50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb52:	8812      	ldrh	r2, [r2, #0]
 800eb54:	fb02 f201 	mul.w	r2, r2, r1
 800eb58:	4413      	add	r3, r2
 800eb5a:	62bb      	str	r3, [r7, #40]	; 0x28
                    if (!func(&substream, iter->pos, pItem))
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	6859      	ldr	r1, [r3, #4]
 800eb60:	f107 0010 	add.w	r0, r7, #16
 800eb64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb68:	4798      	blx	r3
 800eb6a:	4603      	mov	r3, r0
 800eb6c:	f083 0301 	eor.w	r3, r3, #1
 800eb70:	b2db      	uxtb	r3, r3
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d003      	beq.n	800eb7e <decode_static_field+0xfa>
                    {
                        status = false;
 800eb76:	2300      	movs	r3, #0
 800eb78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                        break;
 800eb7c:	e011      	b.n	800eba2 <decode_static_field+0x11e>
                    }
                    (*size)++;
 800eb7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb80:	881b      	ldrh	r3, [r3, #0]
 800eb82:	3301      	adds	r3, #1
 800eb84:	b29a      	uxth	r2, r3
 800eb86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb88:	801a      	strh	r2, [r3, #0]
                while (substream.bytes_left > 0 && *size < iter->pos->array_size)
 800eb8a:	69bb      	ldr	r3, [r7, #24]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d008      	beq.n	800eba2 <decode_static_field+0x11e>
 800eb90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb92:	881a      	ldrh	r2, [r3, #0]
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	685b      	ldr	r3, [r3, #4]
 800eb98:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800eb9c:	b29b      	uxth	r3, r3
 800eb9e:	429a      	cmp	r2, r3
 800eba0:	d3ce      	bcc.n	800eb40 <decode_static_field+0xbc>
                }

                if (substream.bytes_left != 0)
 800eba2:	69bb      	ldr	r3, [r7, #24]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d00b      	beq.n	800ebc0 <decode_static_field+0x13c>
                    PB_RETURN_ERROR(stream, "array overflow");
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	68db      	ldr	r3, [r3, #12]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d002      	beq.n	800ebb6 <decode_static_field+0x132>
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	68db      	ldr	r3, [r3, #12]
 800ebb4:	e000      	b.n	800ebb8 <decode_static_field+0x134>
 800ebb6:	4b42      	ldr	r3, [pc, #264]	; (800ecc0 <decode_static_field+0x23c>)
 800ebb8:	68fa      	ldr	r2, [r7, #12]
 800ebba:	60d3      	str	r3, [r2, #12]
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	e078      	b.n	800ecb2 <decode_static_field+0x22e>
                if (!pb_close_string_substream(stream, &substream))
 800ebc0:	f107 0310 	add.w	r3, r7, #16
 800ebc4:	4619      	mov	r1, r3
 800ebc6:	68f8      	ldr	r0, [r7, #12]
 800ebc8:	f7ff ff36 	bl	800ea38 <pb_close_string_substream>
 800ebcc:	4603      	mov	r3, r0
 800ebce:	f083 0301 	eor.w	r3, r3, #1
 800ebd2:	b2db      	uxtb	r3, r3
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d001      	beq.n	800ebdc <decode_static_field+0x158>
                    return false;
 800ebd8:	2300      	movs	r3, #0
 800ebda:	e06a      	b.n	800ecb2 <decode_static_field+0x22e>

                return status;
 800ebdc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ebe0:	e067      	b.n	800ecb2 <decode_static_field+0x22e>
            }
            else
            {
                /* Repeated field */
                pb_size_t *size = (pb_size_t*)iter->pSize;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	695b      	ldr	r3, [r3, #20]
 800ebe6:	627b      	str	r3, [r7, #36]	; 0x24
                char *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	691b      	ldr	r3, [r3, #16]
 800ebec:	687a      	ldr	r2, [r7, #4]
 800ebee:	6852      	ldr	r2, [r2, #4]
 800ebf0:	f8b2 2007 	ldrh.w	r2, [r2, #7]
 800ebf4:	b292      	uxth	r2, r2
 800ebf6:	4611      	mov	r1, r2
 800ebf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebfa:	8812      	ldrh	r2, [r2, #0]
 800ebfc:	fb02 f201 	mul.w	r2, r2, r1
 800ec00:	4413      	add	r3, r2
 800ec02:	623b      	str	r3, [r7, #32]

                if ((*size)++ >= iter->pos->array_size)
 800ec04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec06:	881b      	ldrh	r3, [r3, #0]
 800ec08:	1c5a      	adds	r2, r3, #1
 800ec0a:	b291      	uxth	r1, r2
 800ec0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec0e:	8011      	strh	r1, [r2, #0]
 800ec10:	687a      	ldr	r2, [r7, #4]
 800ec12:	6852      	ldr	r2, [r2, #4]
 800ec14:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 800ec18:	b292      	uxth	r2, r2
 800ec1a:	4293      	cmp	r3, r2
 800ec1c:	d30b      	bcc.n	800ec36 <decode_static_field+0x1b2>
                    PB_RETURN_ERROR(stream, "array overflow");
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	68db      	ldr	r3, [r3, #12]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d002      	beq.n	800ec2c <decode_static_field+0x1a8>
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	68db      	ldr	r3, [r3, #12]
 800ec2a:	e000      	b.n	800ec2e <decode_static_field+0x1aa>
 800ec2c:	4b24      	ldr	r3, [pc, #144]	; (800ecc0 <decode_static_field+0x23c>)
 800ec2e:	68fa      	ldr	r2, [r7, #12]
 800ec30:	60d3      	str	r3, [r2, #12]
 800ec32:	2300      	movs	r3, #0
 800ec34:	e03d      	b.n	800ecb2 <decode_static_field+0x22e>

                return func(stream, iter->pos, pItem);
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	6859      	ldr	r1, [r3, #4]
 800ec3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec3c:	6a3a      	ldr	r2, [r7, #32]
 800ec3e:	68f8      	ldr	r0, [r7, #12]
 800ec40:	4798      	blx	r3
 800ec42:	4603      	mov	r3, r0
 800ec44:	e035      	b.n	800ecb2 <decode_static_field+0x22e>
            }

        case PB_HTYPE_ONEOF:
            *(pb_size_t*)iter->pSize = iter->pos->tag;
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	685a      	ldr	r2, [r3, #4]
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	695b      	ldr	r3, [r3, #20]
 800ec4e:	8812      	ldrh	r2, [r2, #0]
 800ec50:	b292      	uxth	r2, r2
 800ec52:	801a      	strh	r2, [r3, #0]
            if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 800ec54:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ec58:	f003 030f 	and.w	r3, r3, #15
 800ec5c:	2b07      	cmp	r3, #7
 800ec5e:	d114      	bne.n	800ec8a <decode_static_field+0x206>
            {
                /* We memset to zero so that any callbacks are set to NULL.
                 * Then set any default values. */
                memset(iter->pData, 0, iter->pos->data_size);
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	6918      	ldr	r0, [r3, #16]
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	685b      	ldr	r3, [r3, #4]
 800ec68:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800ec6c:	b29b      	uxth	r3, r3
 800ec6e:	461a      	mov	r2, r3
 800ec70:	2100      	movs	r1, #0
 800ec72:	f002 f8ef 	bl	8010e54 <memset>
                pb_message_set_to_defaults((const pb_field_t*)iter->pos->ptr, iter->pData);
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	685b      	ldr	r3, [r3, #4]
 800ec7a:	f8d3 200b 	ldr.w	r2, [r3, #11]
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	691b      	ldr	r3, [r3, #16]
 800ec82:	4619      	mov	r1, r3
 800ec84:	4610      	mov	r0, r2
 800ec86:	f000 fa55 	bl	800f134 <pb_message_set_to_defaults>
            }
            return func(stream, iter->pos, iter->pData);
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	6859      	ldr	r1, [r3, #4]
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	691a      	ldr	r2, [r3, #16]
 800ec92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec94:	68f8      	ldr	r0, [r7, #12]
 800ec96:	4798      	blx	r3
 800ec98:	4603      	mov	r3, r0
 800ec9a:	e00a      	b.n	800ecb2 <decode_static_field+0x22e>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	68db      	ldr	r3, [r3, #12]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d002      	beq.n	800ecaa <decode_static_field+0x226>
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	68db      	ldr	r3, [r3, #12]
 800eca8:	e000      	b.n	800ecac <decode_static_field+0x228>
 800ecaa:	4b06      	ldr	r3, [pc, #24]	; (800ecc4 <decode_static_field+0x240>)
 800ecac:	68fa      	ldr	r2, [r7, #12]
 800ecae:	60d3      	str	r3, [r2, #12]
 800ecb0:	2300      	movs	r3, #0
    }
}
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	3738      	adds	r7, #56	; 0x38
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	bd80      	pop	{r7, pc}
 800ecba:	bf00      	nop
 800ecbc:	08017660 	.word	0x08017660
 800ecc0:	08015a18 	.word	0x08015a18
 800ecc4:	08015a28 	.word	0x08015a28

0800ecc8 <decode_pointer_field>:
    }
}
#endif

static bool checkreturn decode_pointer_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *iter)
{
 800ecc8:	b480      	push	{r7}
 800ecca:	b085      	sub	sp, #20
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	60f8      	str	r0, [r7, #12]
 800ecd0:	460b      	mov	r3, r1
 800ecd2:	607a      	str	r2, [r7, #4]
 800ecd4:	72fb      	strb	r3, [r7, #11]
#ifndef PB_ENABLE_MALLOC
    PB_UNUSED(wire_type);
    PB_UNUSED(iter);
    PB_RETURN_ERROR(stream, "no malloc support");
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	68db      	ldr	r3, [r3, #12]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d002      	beq.n	800ece4 <decode_pointer_field+0x1c>
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	68db      	ldr	r3, [r3, #12]
 800ece2:	e000      	b.n	800ece6 <decode_pointer_field+0x1e>
 800ece4:	4b04      	ldr	r3, [pc, #16]	; (800ecf8 <decode_pointer_field+0x30>)
 800ece6:	68fa      	ldr	r2, [r7, #12]
 800ece8:	60d3      	str	r3, [r2, #12]
 800ecea:	2300      	movs	r3, #0

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
    }
#endif
}
 800ecec:	4618      	mov	r0, r3
 800ecee:	3714      	adds	r7, #20
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf6:	4770      	bx	lr
 800ecf8:	08015a3c 	.word	0x08015a3c

0800ecfc <decode_callback_field>:

static bool checkreturn decode_callback_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *iter)
{
 800ecfc:	b590      	push	{r4, r7, lr}
 800ecfe:	b097      	sub	sp, #92	; 0x5c
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	61f8      	str	r0, [r7, #28]
 800ed04:	460b      	mov	r3, r1
 800ed06:	617a      	str	r2, [r7, #20]
 800ed08:	76fb      	strb	r3, [r7, #27]
    pb_callback_t *pCallback = (pb_callback_t*)iter->pData;
 800ed0a:	697b      	ldr	r3, [r7, #20]
 800ed0c:	691b      	ldr	r3, [r3, #16]
 800ed0e:	657b      	str	r3, [r7, #84]	; 0x54
    
#ifdef PB_OLD_CALLBACK_STYLE
    void *arg = pCallback->arg;
#else
    void **arg = &(pCallback->arg);
 800ed10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed12:	3304      	adds	r3, #4
 800ed14:	653b      	str	r3, [r7, #80]	; 0x50
#endif
    
    if (pCallback == NULL || pCallback->funcs.decode == NULL)
 800ed16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d003      	beq.n	800ed24 <decode_callback_field+0x28>
 800ed1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d106      	bne.n	800ed32 <decode_callback_field+0x36>
        return pb_skip_field(stream, wire_type);
 800ed24:	7efb      	ldrb	r3, [r7, #27]
 800ed26:	4619      	mov	r1, r3
 800ed28:	69f8      	ldr	r0, [r7, #28]
 800ed2a:	f7ff fdad 	bl	800e888 <pb_skip_field>
 800ed2e:	4603      	mov	r3, r0
 800ed30:	e065      	b.n	800edfe <decode_callback_field+0x102>
    
    if (wire_type == PB_WT_STRING)
 800ed32:	7efb      	ldrb	r3, [r7, #27]
 800ed34:	2b02      	cmp	r3, #2
 800ed36:	d13a      	bne.n	800edae <decode_callback_field+0xb2>
    {
        pb_istream_t substream;
        
        if (!pb_make_string_substream(stream, &substream))
 800ed38:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ed3c:	4619      	mov	r1, r3
 800ed3e:	69f8      	ldr	r0, [r7, #28]
 800ed40:	f7ff fe40 	bl	800e9c4 <pb_make_string_substream>
 800ed44:	4603      	mov	r3, r0
 800ed46:	f083 0301 	eor.w	r3, r3, #1
 800ed4a:	b2db      	uxtb	r3, r3
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d001      	beq.n	800ed54 <decode_callback_field+0x58>
            return false;
 800ed50:	2300      	movs	r3, #0
 800ed52:	e054      	b.n	800edfe <decode_callback_field+0x102>
        
        do
        {
            if (!pCallback->funcs.decode(&substream, iter->pos, arg))
 800ed54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	697a      	ldr	r2, [r7, #20]
 800ed5a:	6851      	ldr	r1, [r2, #4]
 800ed5c:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800ed60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ed62:	4798      	blx	r3
 800ed64:	4603      	mov	r3, r0
 800ed66:	f083 0301 	eor.w	r3, r3, #1
 800ed6a:	b2db      	uxtb	r3, r3
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d00b      	beq.n	800ed88 <decode_callback_field+0x8c>
                PB_RETURN_ERROR(stream, "callback failed");
 800ed70:	69fb      	ldr	r3, [r7, #28]
 800ed72:	68db      	ldr	r3, [r3, #12]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d002      	beq.n	800ed7e <decode_callback_field+0x82>
 800ed78:	69fb      	ldr	r3, [r7, #28]
 800ed7a:	68db      	ldr	r3, [r3, #12]
 800ed7c:	e000      	b.n	800ed80 <decode_callback_field+0x84>
 800ed7e:	4b22      	ldr	r3, [pc, #136]	; (800ee08 <decode_callback_field+0x10c>)
 800ed80:	69fa      	ldr	r2, [r7, #28]
 800ed82:	60d3      	str	r3, [r2, #12]
 800ed84:	2300      	movs	r3, #0
 800ed86:	e03a      	b.n	800edfe <decode_callback_field+0x102>
        } while (substream.bytes_left);
 800ed88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d1e2      	bne.n	800ed54 <decode_callback_field+0x58>
        
        if (!pb_close_string_substream(stream, &substream))
 800ed8e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ed92:	4619      	mov	r1, r3
 800ed94:	69f8      	ldr	r0, [r7, #28]
 800ed96:	f7ff fe4f 	bl	800ea38 <pb_close_string_substream>
 800ed9a:	4603      	mov	r3, r0
 800ed9c:	f083 0301 	eor.w	r3, r3, #1
 800eda0:	b2db      	uxtb	r3, r3
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d001      	beq.n	800edaa <decode_callback_field+0xae>
            return false;
 800eda6:	2300      	movs	r3, #0
 800eda8:	e029      	b.n	800edfe <decode_callback_field+0x102>

        return true;
 800edaa:	2301      	movs	r3, #1
 800edac:	e027      	b.n	800edfe <decode_callback_field+0x102>
         * This is required so that we can limit the stream length,
         * which in turn allows to use same callback for packed and
         * not-packed fields. */
        pb_istream_t substream;
        pb_byte_t buffer[10];
        size_t size = sizeof(buffer);
 800edae:	230a      	movs	r3, #10
 800edb0:	623b      	str	r3, [r7, #32]
        
        if (!read_raw_value(stream, wire_type, buffer, &size))
 800edb2:	f107 0320 	add.w	r3, r7, #32
 800edb6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800edba:	7ef9      	ldrb	r1, [r7, #27]
 800edbc:	69f8      	ldr	r0, [r7, #28]
 800edbe:	f7ff fda5 	bl	800e90c <read_raw_value>
 800edc2:	4603      	mov	r3, r0
 800edc4:	f083 0301 	eor.w	r3, r3, #1
 800edc8:	b2db      	uxtb	r3, r3
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d001      	beq.n	800edd2 <decode_callback_field+0xd6>
            return false;
 800edce:	2300      	movs	r3, #0
 800edd0:	e015      	b.n	800edfe <decode_callback_field+0x102>
        substream = pb_istream_from_buffer(buffer, size);
 800edd2:	6a3a      	ldr	r2, [r7, #32]
 800edd4:	463b      	mov	r3, r7
 800edd6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800edda:	4618      	mov	r0, r3
 800eddc:	f7ff fbca 	bl	800e574 <pb_istream_from_buffer>
 800ede0:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800ede4:	463b      	mov	r3, r7
 800ede6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ede8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 800edec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	697a      	ldr	r2, [r7, #20]
 800edf2:	6851      	ldr	r1, [r2, #4]
 800edf4:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800edf8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800edfa:	4798      	blx	r3
 800edfc:	4603      	mov	r3, r0
    }
}
 800edfe:	4618      	mov	r0, r3
 800ee00:	375c      	adds	r7, #92	; 0x5c
 800ee02:	46bd      	mov	sp, r7
 800ee04:	bd90      	pop	{r4, r7, pc}
 800ee06:	bf00      	nop
 800ee08:	08015a50 	.word	0x08015a50

0800ee0c <decode_field>:

static bool checkreturn decode_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *iter)
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b084      	sub	sp, #16
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	60f8      	str	r0, [r7, #12]
 800ee14:	460b      	mov	r3, r1
 800ee16:	607a      	str	r2, [r7, #4]
 800ee18:	72fb      	strb	r3, [r7, #11]
        if (!pb_release_union_field(stream, iter))
            return false;
    }
#endif

    switch (PB_ATYPE(iter->pos->type))
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	685b      	ldr	r3, [r3, #4]
 800ee1e:	789b      	ldrb	r3, [r3, #2]
 800ee20:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ee24:	2b40      	cmp	r3, #64	; 0x40
 800ee26:	d013      	beq.n	800ee50 <decode_field+0x44>
 800ee28:	2b80      	cmp	r3, #128	; 0x80
 800ee2a:	d009      	beq.n	800ee40 <decode_field+0x34>
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d117      	bne.n	800ee60 <decode_field+0x54>
    {
        case PB_ATYPE_STATIC:
            return decode_static_field(stream, wire_type, iter);
 800ee30:	7afb      	ldrb	r3, [r7, #11]
 800ee32:	687a      	ldr	r2, [r7, #4]
 800ee34:	4619      	mov	r1, r3
 800ee36:	68f8      	ldr	r0, [r7, #12]
 800ee38:	f7ff fe24 	bl	800ea84 <decode_static_field>
 800ee3c:	4603      	mov	r3, r0
 800ee3e:	e01a      	b.n	800ee76 <decode_field+0x6a>
        
        case PB_ATYPE_POINTER:
            return decode_pointer_field(stream, wire_type, iter);
 800ee40:	7afb      	ldrb	r3, [r7, #11]
 800ee42:	687a      	ldr	r2, [r7, #4]
 800ee44:	4619      	mov	r1, r3
 800ee46:	68f8      	ldr	r0, [r7, #12]
 800ee48:	f7ff ff3e 	bl	800ecc8 <decode_pointer_field>
 800ee4c:	4603      	mov	r3, r0
 800ee4e:	e012      	b.n	800ee76 <decode_field+0x6a>
        
        case PB_ATYPE_CALLBACK:
            return decode_callback_field(stream, wire_type, iter);
 800ee50:	7afb      	ldrb	r3, [r7, #11]
 800ee52:	687a      	ldr	r2, [r7, #4]
 800ee54:	4619      	mov	r1, r3
 800ee56:	68f8      	ldr	r0, [r7, #12]
 800ee58:	f7ff ff50 	bl	800ecfc <decode_callback_field>
 800ee5c:	4603      	mov	r3, r0
 800ee5e:	e00a      	b.n	800ee76 <decode_field+0x6a>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	68db      	ldr	r3, [r3, #12]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d002      	beq.n	800ee6e <decode_field+0x62>
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	68db      	ldr	r3, [r3, #12]
 800ee6c:	e000      	b.n	800ee70 <decode_field+0x64>
 800ee6e:	4b04      	ldr	r3, [pc, #16]	; (800ee80 <decode_field+0x74>)
 800ee70:	68fa      	ldr	r2, [r7, #12]
 800ee72:	60d3      	str	r3, [r2, #12]
 800ee74:	2300      	movs	r3, #0
    }
}
 800ee76:	4618      	mov	r0, r3
 800ee78:	3710      	adds	r7, #16
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	bd80      	pop	{r7, pc}
 800ee7e:	bf00      	nop
 800ee80:	08015a28 	.word	0x08015a28

0800ee84 <iter_from_extension>:

static void iter_from_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b084      	sub	sp, #16
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
 800ee8c:	6039      	str	r1, [r7, #0]
    /* Fake a field iterator for the extension field.
     * It is not actually safe to advance this iterator, but decode_field
     * will not even try to. */
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 800ee8e:	683b      	ldr	r3, [r7, #0]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	689b      	ldr	r3, [r3, #8]
 800ee94:	60fb      	str	r3, [r7, #12]
    (void)pb_field_iter_begin(iter, field, extension->dest);
 800ee96:	683b      	ldr	r3, [r7, #0]
 800ee98:	685b      	ldr	r3, [r3, #4]
 800ee9a:	461a      	mov	r2, r3
 800ee9c:	68f9      	ldr	r1, [r7, #12]
 800ee9e:	6878      	ldr	r0, [r7, #4]
 800eea0:	f7ff f9b8 	bl	800e214 <pb_field_iter_begin>
    iter->pData = extension->dest;
 800eea4:	683b      	ldr	r3, [r7, #0]
 800eea6:	685a      	ldr	r2, [r3, #4]
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	611a      	str	r2, [r3, #16]
    iter->pSize = &extension->found;
 800eeac:	683b      	ldr	r3, [r7, #0]
 800eeae:	f103 020c 	add.w	r2, r3, #12
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	615a      	str	r2, [r3, #20]
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	789b      	ldrb	r3, [r3, #2]
 800eeba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800eebe:	2b80      	cmp	r3, #128	; 0x80
 800eec0:	d103      	bne.n	800eeca <iter_from_extension+0x46>
    {
        /* For pointer extensions, the pointer is stored directly
         * in the extension structure. This avoids having an extra
         * indirection. */
        iter->pData = &extension->dest;
 800eec2:	683b      	ldr	r3, [r7, #0]
 800eec4:	1d1a      	adds	r2, r3, #4
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	611a      	str	r2, [r3, #16]
    }
}
 800eeca:	bf00      	nop
 800eecc:	3710      	adds	r7, #16
 800eece:	46bd      	mov	sp, r7
 800eed0:	bd80      	pop	{r7, pc}

0800eed2 <default_extension_decoder>:

/* Default handler for extension fields. Expects a pb_field_t structure
 * in extension->type->arg. */
static bool checkreturn default_extension_decoder(pb_istream_t *stream,
    pb_extension_t *extension, uint32_t tag, pb_wire_type_t wire_type)
{
 800eed2:	b580      	push	{r7, lr}
 800eed4:	b08c      	sub	sp, #48	; 0x30
 800eed6:	af00      	add	r7, sp, #0
 800eed8:	60f8      	str	r0, [r7, #12]
 800eeda:	60b9      	str	r1, [r7, #8]
 800eedc:	607a      	str	r2, [r7, #4]
 800eede:	70fb      	strb	r3, [r7, #3]
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 800eee0:	68bb      	ldr	r3, [r7, #8]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	689b      	ldr	r3, [r3, #8]
 800eee6:	62fb      	str	r3, [r7, #44]	; 0x2c
    pb_field_iter_t iter;
    
    if (field->tag != tag)
 800eee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeea:	881b      	ldrh	r3, [r3, #0]
 800eeec:	b29b      	uxth	r3, r3
 800eeee:	461a      	mov	r2, r3
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	4293      	cmp	r3, r2
 800eef4:	d001      	beq.n	800eefa <default_extension_decoder+0x28>
        return true;
 800eef6:	2301      	movs	r3, #1
 800eef8:	e010      	b.n	800ef1c <default_extension_decoder+0x4a>
    
    iter_from_extension(&iter, extension);
 800eefa:	f107 0314 	add.w	r3, r7, #20
 800eefe:	68b9      	ldr	r1, [r7, #8]
 800ef00:	4618      	mov	r0, r3
 800ef02:	f7ff ffbf 	bl	800ee84 <iter_from_extension>
    extension->found = true;
 800ef06:	68bb      	ldr	r3, [r7, #8]
 800ef08:	2201      	movs	r2, #1
 800ef0a:	731a      	strb	r2, [r3, #12]
    return decode_field(stream, wire_type, &iter);
 800ef0c:	f107 0214 	add.w	r2, r7, #20
 800ef10:	78fb      	ldrb	r3, [r7, #3]
 800ef12:	4619      	mov	r1, r3
 800ef14:	68f8      	ldr	r0, [r7, #12]
 800ef16:	f7ff ff79 	bl	800ee0c <decode_field>
 800ef1a:	4603      	mov	r3, r0
}
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	3730      	adds	r7, #48	; 0x30
 800ef20:	46bd      	mov	sp, r7
 800ef22:	bd80      	pop	{r7, pc}

0800ef24 <decode_extension>:

/* Try to decode an unknown field as an extension field. Tries each extension
 * decoder in turn, until one of them handles the field or loop ends. */
static bool checkreturn decode_extension(pb_istream_t *stream,
    uint32_t tag, pb_wire_type_t wire_type, pb_field_iter_t *iter)
{
 800ef24:	b590      	push	{r4, r7, lr}
 800ef26:	b089      	sub	sp, #36	; 0x24
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	60f8      	str	r0, [r7, #12]
 800ef2c:	60b9      	str	r1, [r7, #8]
 800ef2e:	603b      	str	r3, [r7, #0]
 800ef30:	4613      	mov	r3, r2
 800ef32:	71fb      	strb	r3, [r7, #7]
    pb_extension_t *extension = *(pb_extension_t* const *)iter->pData;
 800ef34:	683b      	ldr	r3, [r7, #0]
 800ef36:	691b      	ldr	r3, [r3, #16]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	61fb      	str	r3, [r7, #28]
    size_t pos = stream->bytes_left;
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	689b      	ldr	r3, [r3, #8]
 800ef40:	617b      	str	r3, [r7, #20]
    
    while (extension != NULL && pos == stream->bytes_left)
 800ef42:	e022      	b.n	800ef8a <decode_extension+0x66>
    {
        bool status;
        if (extension->type->decode)
 800ef44:	69fb      	ldr	r3, [r7, #28]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d00a      	beq.n	800ef64 <decode_extension+0x40>
            status = extension->type->decode(stream, extension, tag, wire_type);
 800ef4e:	69fb      	ldr	r3, [r7, #28]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	681c      	ldr	r4, [r3, #0]
 800ef54:	79fb      	ldrb	r3, [r7, #7]
 800ef56:	68ba      	ldr	r2, [r7, #8]
 800ef58:	69f9      	ldr	r1, [r7, #28]
 800ef5a:	68f8      	ldr	r0, [r7, #12]
 800ef5c:	47a0      	blx	r4
 800ef5e:	4603      	mov	r3, r0
 800ef60:	76fb      	strb	r3, [r7, #27]
 800ef62:	e007      	b.n	800ef74 <decode_extension+0x50>
        else
            status = default_extension_decoder(stream, extension, tag, wire_type);
 800ef64:	79fb      	ldrb	r3, [r7, #7]
 800ef66:	68ba      	ldr	r2, [r7, #8]
 800ef68:	69f9      	ldr	r1, [r7, #28]
 800ef6a:	68f8      	ldr	r0, [r7, #12]
 800ef6c:	f7ff ffb1 	bl	800eed2 <default_extension_decoder>
 800ef70:	4603      	mov	r3, r0
 800ef72:	76fb      	strb	r3, [r7, #27]

        if (!status)
 800ef74:	7efb      	ldrb	r3, [r7, #27]
 800ef76:	f083 0301 	eor.w	r3, r3, #1
 800ef7a:	b2db      	uxtb	r3, r3
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d001      	beq.n	800ef84 <decode_extension+0x60>
            return false;
 800ef80:	2300      	movs	r3, #0
 800ef82:	e00b      	b.n	800ef9c <decode_extension+0x78>
        
        extension = extension->next;
 800ef84:	69fb      	ldr	r3, [r7, #28]
 800ef86:	689b      	ldr	r3, [r3, #8]
 800ef88:	61fb      	str	r3, [r7, #28]
    while (extension != NULL && pos == stream->bytes_left)
 800ef8a:	69fb      	ldr	r3, [r7, #28]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d004      	beq.n	800ef9a <decode_extension+0x76>
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	689b      	ldr	r3, [r3, #8]
 800ef94:	697a      	ldr	r2, [r7, #20]
 800ef96:	429a      	cmp	r2, r3
 800ef98:	d0d4      	beq.n	800ef44 <decode_extension+0x20>
    }
    
    return true;
 800ef9a:	2301      	movs	r3, #1
}
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	3724      	adds	r7, #36	; 0x24
 800efa0:	46bd      	mov	sp, r7
 800efa2:	bd90      	pop	{r4, r7, pc}

0800efa4 <find_extension_field>:

/* Step through the iterator until an extension field is found or until all
 * entries have been checked. There can be only one extension field per
 * message. Returns false if no extension field is found. */
static bool checkreturn find_extension_field(pb_field_iter_t *iter)
{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b084      	sub	sp, #16
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
    const pb_field_t *start = iter->pos;
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	685b      	ldr	r3, [r3, #4]
 800efb0:	60fb      	str	r3, [r7, #12]
    
    do {
        if (PB_LTYPE(iter->pos->type) == PB_LTYPE_EXTENSION)
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	685b      	ldr	r3, [r3, #4]
 800efb6:	789b      	ldrb	r3, [r3, #2]
 800efb8:	f003 030f 	and.w	r3, r3, #15
 800efbc:	2b08      	cmp	r3, #8
 800efbe:	d101      	bne.n	800efc4 <find_extension_field+0x20>
            return true;
 800efc0:	2301      	movs	r3, #1
 800efc2:	e008      	b.n	800efd6 <find_extension_field+0x32>
        (void)pb_field_iter_next(iter);
 800efc4:	6878      	ldr	r0, [r7, #4]
 800efc6:	f7ff f95a 	bl	800e27e <pb_field_iter_next>
    } while (iter->pos != start);
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	685b      	ldr	r3, [r3, #4]
 800efce:	68fa      	ldr	r2, [r7, #12]
 800efd0:	429a      	cmp	r2, r3
 800efd2:	d1ee      	bne.n	800efb2 <find_extension_field+0xe>
    
    return false;
 800efd4:	2300      	movs	r3, #0
}
 800efd6:	4618      	mov	r0, r3
 800efd8:	3710      	adds	r7, #16
 800efda:	46bd      	mov	sp, r7
 800efdc:	bd80      	pop	{r7, pc}

0800efde <pb_field_set_to_default>:

/* Initialize message fields to default values, recursively */
static void pb_field_set_to_default(pb_field_iter_t *iter)
{
 800efde:	b580      	push	{r7, lr}
 800efe0:	b08a      	sub	sp, #40	; 0x28
 800efe2:	af00      	add	r7, sp, #0
 800efe4:	6078      	str	r0, [r7, #4]
    pb_type_t type;
    type = iter->pos->type;
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	685b      	ldr	r3, [r3, #4]
 800efea:	789b      	ldrb	r3, [r3, #2]
 800efec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    
    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 800eff0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800eff4:	f003 030f 	and.w	r3, r3, #15
 800eff8:	2b08      	cmp	r3, #8
 800effa:	d119      	bne.n	800f030 <pb_field_set_to_default+0x52>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)iter->pData;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	691b      	ldr	r3, [r3, #16]
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	627b      	str	r3, [r7, #36]	; 0x24
        while (ext != NULL)
 800f004:	e010      	b.n	800f028 <pb_field_set_to_default+0x4a>
        {
            pb_field_iter_t ext_iter;
            ext->found = false;
 800f006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f008:	2200      	movs	r2, #0
 800f00a:	731a      	strb	r2, [r3, #12]
            iter_from_extension(&ext_iter, ext);
 800f00c:	f107 0308 	add.w	r3, r7, #8
 800f010:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f012:	4618      	mov	r0, r3
 800f014:	f7ff ff36 	bl	800ee84 <iter_from_extension>
            pb_field_set_to_default(&ext_iter);
 800f018:	f107 0308 	add.w	r3, r7, #8
 800f01c:	4618      	mov	r0, r3
 800f01e:	f7ff ffde 	bl	800efde <pb_field_set_to_default>
            ext = ext->next;
 800f022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f024:	689b      	ldr	r3, [r3, #8]
 800f026:	627b      	str	r3, [r7, #36]	; 0x24
        while (ext != NULL)
 800f028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d1eb      	bne.n	800f006 <pb_field_set_to_default+0x28>
    }
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }
}
 800f02e:	e07d      	b.n	800f12c <pb_field_set_to_default+0x14e>
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 800f030:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f034:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d15d      	bne.n	800f0f8 <pb_field_set_to_default+0x11a>
        bool init_data = true;
 800f03c:	2301      	movs	r3, #1
 800f03e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && iter->pSize != iter->pData)
 800f042:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f046:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f04a:	2b10      	cmp	r3, #16
 800f04c:	d10a      	bne.n	800f064 <pb_field_set_to_default+0x86>
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	695a      	ldr	r2, [r3, #20]
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	691b      	ldr	r3, [r3, #16]
 800f056:	429a      	cmp	r2, r3
 800f058:	d004      	beq.n	800f064 <pb_field_set_to_default+0x86>
            *(bool*)iter->pSize = false;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	695b      	ldr	r3, [r3, #20]
 800f05e:	2200      	movs	r2, #0
 800f060:	701a      	strb	r2, [r3, #0]
 800f062:	e012      	b.n	800f08a <pb_field_set_to_default+0xac>
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 800f064:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f068:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f06c:	2b20      	cmp	r3, #32
 800f06e:	d005      	beq.n	800f07c <pb_field_set_to_default+0x9e>
                 PB_HTYPE(type) == PB_HTYPE_ONEOF)
 800f070:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f074:	f003 0330 	and.w	r3, r3, #48	; 0x30
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 800f078:	2b30      	cmp	r3, #48	; 0x30
 800f07a:	d106      	bne.n	800f08a <pb_field_set_to_default+0xac>
            *(pb_size_t*)iter->pSize = 0;
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	695b      	ldr	r3, [r3, #20]
 800f080:	2200      	movs	r2, #0
 800f082:	801a      	strh	r2, [r3, #0]
            init_data = false;
 800f084:	2300      	movs	r3, #0
 800f086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (init_data)
 800f08a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d04c      	beq.n	800f12c <pb_field_set_to_default+0x14e>
            if (PB_LTYPE(iter->pos->type) == PB_LTYPE_SUBMESSAGE)
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	685b      	ldr	r3, [r3, #4]
 800f096:	789b      	ldrb	r3, [r3, #2]
 800f098:	f003 030f 	and.w	r3, r3, #15
 800f09c:	2b07      	cmp	r3, #7
 800f09e:	d10a      	bne.n	800f0b6 <pb_field_set_to_default+0xd8>
                pb_message_set_to_defaults((const pb_field_t *) iter->pos->ptr, iter->pData);
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	685b      	ldr	r3, [r3, #4]
 800f0a4:	f8d3 200b 	ldr.w	r2, [r3, #11]
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	691b      	ldr	r3, [r3, #16]
 800f0ac:	4619      	mov	r1, r3
 800f0ae:	4610      	mov	r0, r2
 800f0b0:	f000 f840 	bl	800f134 <pb_message_set_to_defaults>
}
 800f0b4:	e03a      	b.n	800f12c <pb_field_set_to_default+0x14e>
            else if (iter->pos->ptr != NULL)
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	685b      	ldr	r3, [r3, #4]
 800f0ba:	f8d3 300b 	ldr.w	r3, [r3, #11]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d00e      	beq.n	800f0e0 <pb_field_set_to_default+0x102>
                memcpy(iter->pData, iter->pos->ptr, iter->pos->data_size);
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	6918      	ldr	r0, [r3, #16]
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	685b      	ldr	r3, [r3, #4]
 800f0ca:	f8d3 100b 	ldr.w	r1, [r3, #11]
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	685b      	ldr	r3, [r3, #4]
 800f0d2:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800f0d6:	b29b      	uxth	r3, r3
 800f0d8:	461a      	mov	r2, r3
 800f0da:	f001 feb0 	bl	8010e3e <memcpy>
}
 800f0de:	e025      	b.n	800f12c <pb_field_set_to_default+0x14e>
                memset(iter->pData, 0, iter->pos->data_size);
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	6918      	ldr	r0, [r3, #16]
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	685b      	ldr	r3, [r3, #4]
 800f0e8:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800f0ec:	b29b      	uxth	r3, r3
 800f0ee:	461a      	mov	r2, r3
 800f0f0:	2100      	movs	r1, #0
 800f0f2:	f001 feaf 	bl	8010e54 <memset>
}
 800f0f6:	e019      	b.n	800f12c <pb_field_set_to_default+0x14e>
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 800f0f8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f0fc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f100:	2b80      	cmp	r3, #128	; 0x80
 800f102:	d113      	bne.n	800f12c <pb_field_set_to_default+0x14e>
        *(void**)iter->pData = NULL;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	691b      	ldr	r3, [r3, #16]
 800f108:	2200      	movs	r2, #0
 800f10a:	601a      	str	r2, [r3, #0]
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 800f10c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f110:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f114:	2b20      	cmp	r3, #32
 800f116:	d005      	beq.n	800f124 <pb_field_set_to_default+0x146>
            PB_HTYPE(type) == PB_HTYPE_ONEOF)
 800f118:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f11c:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 800f120:	2b30      	cmp	r3, #48	; 0x30
 800f122:	d103      	bne.n	800f12c <pb_field_set_to_default+0x14e>
            *(pb_size_t*)iter->pSize = 0;
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	695b      	ldr	r3, [r3, #20]
 800f128:	2200      	movs	r2, #0
 800f12a:	801a      	strh	r2, [r3, #0]
}
 800f12c:	bf00      	nop
 800f12e:	3728      	adds	r7, #40	; 0x28
 800f130:	46bd      	mov	sp, r7
 800f132:	bd80      	pop	{r7, pc}

0800f134 <pb_message_set_to_defaults>:

static void pb_message_set_to_defaults(const pb_field_t fields[], void *dest_struct)
{
 800f134:	b580      	push	{r7, lr}
 800f136:	b088      	sub	sp, #32
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]
 800f13c:	6039      	str	r1, [r7, #0]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin(&iter, fields, dest_struct))
 800f13e:	f107 0308 	add.w	r3, r7, #8
 800f142:	683a      	ldr	r2, [r7, #0]
 800f144:	6879      	ldr	r1, [r7, #4]
 800f146:	4618      	mov	r0, r3
 800f148:	f7ff f864 	bl	800e214 <pb_field_iter_begin>
 800f14c:	4603      	mov	r3, r0
 800f14e:	f083 0301 	eor.w	r3, r3, #1
 800f152:	b2db      	uxtb	r3, r3
 800f154:	2b00      	cmp	r3, #0
 800f156:	d10d      	bne.n	800f174 <pb_message_set_to_defaults+0x40>
        return; /* Empty message type */
    
    do
    {
        pb_field_set_to_default(&iter);
 800f158:	f107 0308 	add.w	r3, r7, #8
 800f15c:	4618      	mov	r0, r3
 800f15e:	f7ff ff3e 	bl	800efde <pb_field_set_to_default>
    } while (pb_field_iter_next(&iter));
 800f162:	f107 0308 	add.w	r3, r7, #8
 800f166:	4618      	mov	r0, r3
 800f168:	f7ff f889 	bl	800e27e <pb_field_iter_next>
 800f16c:	4603      	mov	r3, r0
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d1f2      	bne.n	800f158 <pb_message_set_to_defaults+0x24>
 800f172:	e000      	b.n	800f176 <pb_message_set_to_defaults+0x42>
        return; /* Empty message type */
 800f174:	bf00      	nop
}
 800f176:	3720      	adds	r7, #32
 800f178:	46bd      	mov	sp, r7
 800f17a:	bd80      	pop	{r7, pc}

0800f17c <pb_decode_noinit>:
/*********************
 * Decode all fields *
 *********************/

bool checkreturn pb_decode_noinit(pb_istream_t *stream, const pb_field_t fields[], void *dest_struct)
{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b098      	sub	sp, #96	; 0x60
 800f180:	af00      	add	r7, sp, #0
 800f182:	60f8      	str	r0, [r7, #12]
 800f184:	60b9      	str	r1, [r7, #8]
 800f186:	607a      	str	r2, [r7, #4]
    uint32_t fields_seen[(PB_MAX_REQUIRED_FIELDS + 31) / 32] = {0, 0};
 800f188:	2300      	movs	r3, #0
 800f18a:	63bb      	str	r3, [r7, #56]	; 0x38
 800f18c:	2300      	movs	r3, #0
 800f18e:	63fb      	str	r3, [r7, #60]	; 0x3c
    const uint32_t allbits = ~(uint32_t)0;
 800f190:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f194:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint32_t extension_range_start = 0;
 800f196:	2300      	movs	r3, #0
 800f198:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* 'fixed_count_field' and 'fixed_count_size' track position of a repeated fixed
     * count field. This can only handle _one_ repeated fixed count field that
     * is unpacked and unordered among other (non repeated fixed count) fields.
     */
    const pb_field_t *fixed_count_field = NULL;
 800f19a:	2300      	movs	r3, #0
 800f19c:	65bb      	str	r3, [r7, #88]	; 0x58
    pb_size_t fixed_count_size = 0;
 800f19e:	2300      	movs	r3, #0
 800f1a0:	83fb      	strh	r3, [r7, #30]

    /* Return value ignored, as empty message types will be correctly handled by
     * pb_field_iter_find() anyway. */
    (void)pb_field_iter_begin(&iter, fields, dest_struct);
 800f1a2:	f107 0320 	add.w	r3, r7, #32
 800f1a6:	687a      	ldr	r2, [r7, #4]
 800f1a8:	68b9      	ldr	r1, [r7, #8]
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	f7ff f832 	bl	800e214 <pb_field_iter_begin>

    while (stream->bytes_left)
 800f1b0:	e0bf      	b.n	800f332 <pb_decode_noinit+0x1b6>
    {
        uint32_t tag;
        pb_wire_type_t wire_type;
        bool eof;

        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 800f1b2:	f107 0316 	add.w	r3, r7, #22
 800f1b6:	f107 0218 	add.w	r2, r7, #24
 800f1ba:	f107 0117 	add.w	r1, r7, #23
 800f1be:	68f8      	ldr	r0, [r7, #12]
 800f1c0:	f7ff fb2b 	bl	800e81a <pb_decode_tag>
 800f1c4:	4603      	mov	r3, r0
 800f1c6:	f083 0301 	eor.w	r3, r3, #1
 800f1ca:	b2db      	uxtb	r3, r3
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d005      	beq.n	800f1dc <pb_decode_noinit+0x60>
        {
            if (eof)
 800f1d0:	7dbb      	ldrb	r3, [r7, #22]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	f040 80b3 	bne.w	800f33e <pb_decode_noinit+0x1c2>
                break;
            else
                return false;
 800f1d8:	2300      	movs	r3, #0
 800f1da:	e130      	b.n	800f43e <pb_decode_noinit+0x2c2>
        }

        if (!pb_field_iter_find(&iter, tag))
 800f1dc:	69ba      	ldr	r2, [r7, #24]
 800f1de:	f107 0320 	add.w	r3, r7, #32
 800f1e2:	4611      	mov	r1, r2
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	f7ff f8d0 	bl	800e38a <pb_field_iter_find>
 800f1ea:	4603      	mov	r3, r0
 800f1ec:	f083 0301 	eor.w	r3, r3, #1
 800f1f0:	b2db      	uxtb	r3, r3
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d03e      	beq.n	800f274 <pb_decode_noinit+0xf8>
        {
            /* No match found, check if it matches an extension. */
            if (tag >= extension_range_start)
 800f1f6:	69bb      	ldr	r3, [r7, #24]
 800f1f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f1fa:	429a      	cmp	r2, r3
 800f1fc:	d82d      	bhi.n	800f25a <pb_decode_noinit+0xde>
            {
                if (!find_extension_field(&iter))
 800f1fe:	f107 0320 	add.w	r3, r7, #32
 800f202:	4618      	mov	r0, r3
 800f204:	f7ff fece 	bl	800efa4 <find_extension_field>
 800f208:	4603      	mov	r3, r0
 800f20a:	f083 0301 	eor.w	r3, r3, #1
 800f20e:	b2db      	uxtb	r3, r3
 800f210:	2b00      	cmp	r3, #0
 800f212:	d003      	beq.n	800f21c <pb_decode_noinit+0xa0>
                    extension_range_start = (uint32_t)-1;
 800f214:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f218:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f21a:	e003      	b.n	800f224 <pb_decode_noinit+0xa8>
                else
                    extension_range_start = iter.pos->tag;
 800f21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f21e:	881b      	ldrh	r3, [r3, #0]
 800f220:	b29b      	uxth	r3, r3
 800f222:	65fb      	str	r3, [r7, #92]	; 0x5c

                if (tag >= extension_range_start)
 800f224:	69bb      	ldr	r3, [r7, #24]
 800f226:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f228:	429a      	cmp	r2, r3
 800f22a:	d816      	bhi.n	800f25a <pb_decode_noinit+0xde>
                {
                    size_t pos = stream->bytes_left;
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	689b      	ldr	r3, [r3, #8]
 800f230:	647b      	str	r3, [r7, #68]	; 0x44

                    if (!decode_extension(stream, tag, wire_type, &iter))
 800f232:	69b9      	ldr	r1, [r7, #24]
 800f234:	7dfa      	ldrb	r2, [r7, #23]
 800f236:	f107 0320 	add.w	r3, r7, #32
 800f23a:	68f8      	ldr	r0, [r7, #12]
 800f23c:	f7ff fe72 	bl	800ef24 <decode_extension>
 800f240:	4603      	mov	r3, r0
 800f242:	f083 0301 	eor.w	r3, r3, #1
 800f246:	b2db      	uxtb	r3, r3
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d001      	beq.n	800f250 <pb_decode_noinit+0xd4>
                        return false;
 800f24c:	2300      	movs	r3, #0
 800f24e:	e0f6      	b.n	800f43e <pb_decode_noinit+0x2c2>

                    if (pos != stream->bytes_left)
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	689b      	ldr	r3, [r3, #8]
 800f254:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f256:	429a      	cmp	r2, r3
 800f258:	d168      	bne.n	800f32c <pb_decode_noinit+0x1b0>
                    }
                }
            }

            /* No match found, skip data */
            if (!pb_skip_field(stream, wire_type))
 800f25a:	7dfb      	ldrb	r3, [r7, #23]
 800f25c:	4619      	mov	r1, r3
 800f25e:	68f8      	ldr	r0, [r7, #12]
 800f260:	f7ff fb12 	bl	800e888 <pb_skip_field>
 800f264:	4603      	mov	r3, r0
 800f266:	f083 0301 	eor.w	r3, r3, #1
 800f26a:	b2db      	uxtb	r3, r3
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d05f      	beq.n	800f330 <pb_decode_noinit+0x1b4>
                return false;
 800f270:	2300      	movs	r3, #0
 800f272:	e0e4      	b.n	800f43e <pb_decode_noinit+0x2c2>
        }

        /* If a repeated fixed count field was found, get size from
         * 'fixed_count_field' as there is no counter contained in the struct.
         */
        if (PB_HTYPE(iter.pos->type) == PB_HTYPE_REPEATED
 800f274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f276:	789b      	ldrb	r3, [r3, #2]
 800f278:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f27c:	2b20      	cmp	r3, #32
 800f27e:	d124      	bne.n	800f2ca <pb_decode_noinit+0x14e>
            && iter.pSize == iter.pData)
 800f280:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f284:	429a      	cmp	r2, r3
 800f286:	d120      	bne.n	800f2ca <pb_decode_noinit+0x14e>
        {
            if (fixed_count_field != iter.pos) {
 800f288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f28a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f28c:	429a      	cmp	r2, r3
 800f28e:	d019      	beq.n	800f2c4 <pb_decode_noinit+0x148>
                /* If the new fixed count field does not match the previous one,
                 * check that the previous one is NULL or that it finished
                 * receiving all the expected data.
                 */
                if (fixed_count_field != NULL &&
 800f290:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f292:	2b00      	cmp	r3, #0
 800f294:	d012      	beq.n	800f2bc <pb_decode_noinit+0x140>
                    fixed_count_size != fixed_count_field->array_size)
 800f296:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f298:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800f29c:	b29a      	uxth	r2, r3
 800f29e:	8bfb      	ldrh	r3, [r7, #30]
                if (fixed_count_field != NULL &&
 800f2a0:	429a      	cmp	r2, r3
 800f2a2:	d00b      	beq.n	800f2bc <pb_decode_noinit+0x140>
                {
                    PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	68db      	ldr	r3, [r3, #12]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d002      	beq.n	800f2b2 <pb_decode_noinit+0x136>
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	68db      	ldr	r3, [r3, #12]
 800f2b0:	e000      	b.n	800f2b4 <pb_decode_noinit+0x138>
 800f2b2:	4b65      	ldr	r3, [pc, #404]	; (800f448 <pb_decode_noinit+0x2cc>)
 800f2b4:	68fa      	ldr	r2, [r7, #12]
 800f2b6:	60d3      	str	r3, [r2, #12]
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	e0c0      	b.n	800f43e <pb_decode_noinit+0x2c2>
                }

                fixed_count_field = iter.pos;
 800f2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2be:	65bb      	str	r3, [r7, #88]	; 0x58
                fixed_count_size = 0;
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	83fb      	strh	r3, [r7, #30]
            }

            iter.pSize = &fixed_count_size;
 800f2c4:	f107 031e 	add.w	r3, r7, #30
 800f2c8:	637b      	str	r3, [r7, #52]	; 0x34
        }

        if (PB_HTYPE(iter.pos->type) == PB_HTYPE_REQUIRED
 800f2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2cc:	789b      	ldrb	r3, [r3, #2]
 800f2ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d11b      	bne.n	800f30e <pb_decode_noinit+0x192>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 800f2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2d8:	2b3f      	cmp	r3, #63	; 0x3f
 800f2da:	d818      	bhi.n	800f30e <pb_decode_noinit+0x192>
        {
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 800f2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2de:	f003 031f 	and.w	r3, r3, #31
 800f2e2:	2201      	movs	r2, #1
 800f2e4:	fa02 f303 	lsl.w	r3, r2, r3
 800f2e8:	64bb      	str	r3, [r7, #72]	; 0x48
            fields_seen[iter.required_field_index >> 5] |= tmp;
 800f2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2ec:	095b      	lsrs	r3, r3, #5
 800f2ee:	009b      	lsls	r3, r3, #2
 800f2f0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800f2f4:	4413      	add	r3, r2
 800f2f6:	f853 1c28 	ldr.w	r1, [r3, #-40]
 800f2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2fc:	095b      	lsrs	r3, r3, #5
 800f2fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f300:	430a      	orrs	r2, r1
 800f302:	009b      	lsls	r3, r3, #2
 800f304:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800f308:	440b      	add	r3, r1
 800f30a:	f843 2c28 	str.w	r2, [r3, #-40]
        }

        if (!decode_field(stream, wire_type, &iter))
 800f30e:	7dfb      	ldrb	r3, [r7, #23]
 800f310:	f107 0220 	add.w	r2, r7, #32
 800f314:	4619      	mov	r1, r3
 800f316:	68f8      	ldr	r0, [r7, #12]
 800f318:	f7ff fd78 	bl	800ee0c <decode_field>
 800f31c:	4603      	mov	r3, r0
 800f31e:	f083 0301 	eor.w	r3, r3, #1
 800f322:	b2db      	uxtb	r3, r3
 800f324:	2b00      	cmp	r3, #0
 800f326:	d004      	beq.n	800f332 <pb_decode_noinit+0x1b6>
            return false;
 800f328:	2300      	movs	r3, #0
 800f32a:	e088      	b.n	800f43e <pb_decode_noinit+0x2c2>
                        continue;
 800f32c:	bf00      	nop
 800f32e:	e000      	b.n	800f332 <pb_decode_noinit+0x1b6>
            continue;
 800f330:	bf00      	nop
    while (stream->bytes_left)
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	689b      	ldr	r3, [r3, #8]
 800f336:	2b00      	cmp	r3, #0
 800f338:	f47f af3b 	bne.w	800f1b2 <pb_decode_noinit+0x36>
 800f33c:	e000      	b.n	800f340 <pb_decode_noinit+0x1c4>
                break;
 800f33e:	bf00      	nop
    }

    /* Check that all elements of the last decoded fixed count field were present. */
    if (fixed_count_field != NULL &&
 800f340:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f342:	2b00      	cmp	r3, #0
 800f344:	d012      	beq.n	800f36c <pb_decode_noinit+0x1f0>
        fixed_count_size != fixed_count_field->array_size)
 800f346:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f348:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800f34c:	b29a      	uxth	r2, r3
 800f34e:	8bfb      	ldrh	r3, [r7, #30]
    if (fixed_count_field != NULL &&
 800f350:	429a      	cmp	r2, r3
 800f352:	d00b      	beq.n	800f36c <pb_decode_noinit+0x1f0>
    {
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	68db      	ldr	r3, [r3, #12]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d002      	beq.n	800f362 <pb_decode_noinit+0x1e6>
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	68db      	ldr	r3, [r3, #12]
 800f360:	e000      	b.n	800f364 <pb_decode_noinit+0x1e8>
 800f362:	4b39      	ldr	r3, [pc, #228]	; (800f448 <pb_decode_noinit+0x2cc>)
 800f364:	68fa      	ldr	r2, [r7, #12]
 800f366:	60d3      	str	r3, [r2, #12]
 800f368:	2300      	movs	r3, #0
 800f36a:	e068      	b.n	800f43e <pb_decode_noinit+0x2c2>
         */
        unsigned req_field_count;
        pb_type_t last_type;
        unsigned i;
        do {
            req_field_count = iter.required_field_index;
 800f36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f36e:	657b      	str	r3, [r7, #84]	; 0x54
            last_type = iter.pos->type;
 800f370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f372:	789b      	ldrb	r3, [r3, #2]
 800f374:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
        } while (pb_field_iter_next(&iter));
 800f378:	f107 0320 	add.w	r3, r7, #32
 800f37c:	4618      	mov	r0, r3
 800f37e:	f7fe ff7e 	bl	800e27e <pb_field_iter_next>
 800f382:	4603      	mov	r3, r0
 800f384:	2b00      	cmp	r3, #0
 800f386:	d1f1      	bne.n	800f36c <pb_decode_noinit+0x1f0>
        
        /* Fixup if last field was also required. */
        if (PB_HTYPE(last_type) == PB_HTYPE_REQUIRED && iter.pos->tag != 0)
 800f388:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f38c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f390:	2b00      	cmp	r3, #0
 800f392:	d107      	bne.n	800f3a4 <pb_decode_noinit+0x228>
 800f394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f396:	881b      	ldrh	r3, [r3, #0]
 800f398:	b29b      	uxth	r3, r3
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d002      	beq.n	800f3a4 <pb_decode_noinit+0x228>
            req_field_count++;
 800f39e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f3a0:	3301      	adds	r3, #1
 800f3a2:	657b      	str	r3, [r7, #84]	; 0x54
        
        if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 800f3a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f3a6:	2b40      	cmp	r3, #64	; 0x40
 800f3a8:	d901      	bls.n	800f3ae <pb_decode_noinit+0x232>
            req_field_count = PB_MAX_REQUIRED_FIELDS;
 800f3aa:	2340      	movs	r3, #64	; 0x40
 800f3ac:	657b      	str	r3, [r7, #84]	; 0x54

        if (req_field_count > 0)
 800f3ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d043      	beq.n	800f43c <pb_decode_noinit+0x2c0>
        {
            /* Check the whole words */
            for (i = 0; i < (req_field_count >> 5); i++)
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	653b      	str	r3, [r7, #80]	; 0x50
 800f3b8:	e018      	b.n	800f3ec <pb_decode_noinit+0x270>
            {
                if (fields_seen[i] != allbits)
 800f3ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3bc:	009b      	lsls	r3, r3, #2
 800f3be:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800f3c2:	4413      	add	r3, r2
 800f3c4:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800f3c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f3ca:	429a      	cmp	r2, r3
 800f3cc:	d00b      	beq.n	800f3e6 <pb_decode_noinit+0x26a>
                    PB_RETURN_ERROR(stream, "missing required field");
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	68db      	ldr	r3, [r3, #12]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d002      	beq.n	800f3dc <pb_decode_noinit+0x260>
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	68db      	ldr	r3, [r3, #12]
 800f3da:	e000      	b.n	800f3de <pb_decode_noinit+0x262>
 800f3dc:	4b1b      	ldr	r3, [pc, #108]	; (800f44c <pb_decode_noinit+0x2d0>)
 800f3de:	68fa      	ldr	r2, [r7, #12]
 800f3e0:	60d3      	str	r3, [r2, #12]
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	e02b      	b.n	800f43e <pb_decode_noinit+0x2c2>
            for (i = 0; i < (req_field_count >> 5); i++)
 800f3e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3e8:	3301      	adds	r3, #1
 800f3ea:	653b      	str	r3, [r7, #80]	; 0x50
 800f3ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f3ee:	095b      	lsrs	r3, r3, #5
 800f3f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f3f2:	429a      	cmp	r2, r3
 800f3f4:	d3e1      	bcc.n	800f3ba <pb_decode_noinit+0x23e>
            }
            
            /* Check the remaining bits (if any) */
            if ((req_field_count & 31) != 0)
 800f3f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f3f8:	f003 031f 	and.w	r3, r3, #31
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d01d      	beq.n	800f43c <pb_decode_noinit+0x2c0>
            {
                if (fields_seen[req_field_count >> 5] !=
 800f400:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f402:	095b      	lsrs	r3, r3, #5
 800f404:	009b      	lsls	r3, r3, #2
 800f406:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800f40a:	4413      	add	r3, r2
 800f40c:	f853 2c28 	ldr.w	r2, [r3, #-40]
                    (allbits >> (32 - (req_field_count & 31))))
 800f410:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f412:	f003 031f 	and.w	r3, r3, #31
 800f416:	f1c3 0320 	rsb	r3, r3, #32
 800f41a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f41c:	fa21 f303 	lsr.w	r3, r1, r3
                if (fields_seen[req_field_count >> 5] !=
 800f420:	429a      	cmp	r2, r3
 800f422:	d00b      	beq.n	800f43c <pb_decode_noinit+0x2c0>
                {
                    PB_RETURN_ERROR(stream, "missing required field");
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	68db      	ldr	r3, [r3, #12]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d002      	beq.n	800f432 <pb_decode_noinit+0x2b6>
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	68db      	ldr	r3, [r3, #12]
 800f430:	e000      	b.n	800f434 <pb_decode_noinit+0x2b8>
 800f432:	4b06      	ldr	r3, [pc, #24]	; (800f44c <pb_decode_noinit+0x2d0>)
 800f434:	68fa      	ldr	r2, [r7, #12]
 800f436:	60d3      	str	r3, [r2, #12]
 800f438:	2300      	movs	r3, #0
 800f43a:	e000      	b.n	800f43e <pb_decode_noinit+0x2c2>
                }
            }
        }
    }
    
    return true;
 800f43c:	2301      	movs	r3, #1
}
 800f43e:	4618      	mov	r0, r3
 800f440:	3760      	adds	r7, #96	; 0x60
 800f442:	46bd      	mov	sp, r7
 800f444:	bd80      	pop	{r7, pc}
 800f446:	bf00      	nop
 800f448:	08015a60 	.word	0x08015a60
 800f44c:	08015a84 	.word	0x08015a84

0800f450 <pb_decode>:

bool checkreturn pb_decode(pb_istream_t *stream, const pb_field_t fields[], void *dest_struct)
{
 800f450:	b580      	push	{r7, lr}
 800f452:	b086      	sub	sp, #24
 800f454:	af00      	add	r7, sp, #0
 800f456:	60f8      	str	r0, [r7, #12]
 800f458:	60b9      	str	r1, [r7, #8]
 800f45a:	607a      	str	r2, [r7, #4]
    bool status;
    pb_message_set_to_defaults(fields, dest_struct);
 800f45c:	6879      	ldr	r1, [r7, #4]
 800f45e:	68b8      	ldr	r0, [r7, #8]
 800f460:	f7ff fe68 	bl	800f134 <pb_message_set_to_defaults>
    status = pb_decode_noinit(stream, fields, dest_struct);
 800f464:	687a      	ldr	r2, [r7, #4]
 800f466:	68b9      	ldr	r1, [r7, #8]
 800f468:	68f8      	ldr	r0, [r7, #12]
 800f46a:	f7ff fe87 	bl	800f17c <pb_decode_noinit>
 800f46e:	4603      	mov	r3, r0
 800f470:	75fb      	strb	r3, [r7, #23]
#ifdef PB_ENABLE_MALLOC
    if (!status)
        pb_release(fields, dest_struct);
#endif
    
    return status;
 800f472:	7dfb      	ldrb	r3, [r7, #23]
}
 800f474:	4618      	mov	r0, r3
 800f476:	3718      	adds	r7, #24
 800f478:	46bd      	mov	sp, r7
 800f47a:	bd80      	pop	{r7, pc}

0800f47c <pb_decode_delimited>:
        return false;
    return status;
}

bool pb_decode_delimited(pb_istream_t *stream, const pb_field_t fields[], void *dest_struct)
{
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b08a      	sub	sp, #40	; 0x28
 800f480:	af00      	add	r7, sp, #0
 800f482:	60f8      	str	r0, [r7, #12]
 800f484:	60b9      	str	r1, [r7, #8]
 800f486:	607a      	str	r2, [r7, #4]
    pb_istream_t substream;
    bool status;
    
    if (!pb_make_string_substream(stream, &substream))
 800f488:	f107 0314 	add.w	r3, r7, #20
 800f48c:	4619      	mov	r1, r3
 800f48e:	68f8      	ldr	r0, [r7, #12]
 800f490:	f7ff fa98 	bl	800e9c4 <pb_make_string_substream>
 800f494:	4603      	mov	r3, r0
 800f496:	f083 0301 	eor.w	r3, r3, #1
 800f49a:	b2db      	uxtb	r3, r3
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d001      	beq.n	800f4a4 <pb_decode_delimited+0x28>
        return false;
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	e019      	b.n	800f4d8 <pb_decode_delimited+0x5c>
    
    status = pb_decode(&substream, fields, dest_struct);
 800f4a4:	f107 0314 	add.w	r3, r7, #20
 800f4a8:	687a      	ldr	r2, [r7, #4]
 800f4aa:	68b9      	ldr	r1, [r7, #8]
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	f7ff ffcf 	bl	800f450 <pb_decode>
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (!pb_close_string_substream(stream, &substream))
 800f4b8:	f107 0314 	add.w	r3, r7, #20
 800f4bc:	4619      	mov	r1, r3
 800f4be:	68f8      	ldr	r0, [r7, #12]
 800f4c0:	f7ff faba 	bl	800ea38 <pb_close_string_substream>
 800f4c4:	4603      	mov	r3, r0
 800f4c6:	f083 0301 	eor.w	r3, r3, #1
 800f4ca:	b2db      	uxtb	r3, r3
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d001      	beq.n	800f4d4 <pb_decode_delimited+0x58>
        return false;
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	e001      	b.n	800f4d8 <pb_decode_delimited+0x5c>
    return status;
 800f4d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800f4d8:	4618      	mov	r0, r3
 800f4da:	3728      	adds	r7, #40	; 0x28
 800f4dc:	46bd      	mov	sp, r7
 800f4de:	bd80      	pop	{r7, pc}

0800f4e0 <pb_decode_svarint>:
#endif

/* Field decoders */

bool pb_decode_svarint(pb_istream_t *stream, pb_int64_t *dest)
{
 800f4e0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800f4e4:	b084      	sub	sp, #16
 800f4e6:	af00      	add	r7, sp, #0
 800f4e8:	6078      	str	r0, [r7, #4]
 800f4ea:	6039      	str	r1, [r7, #0]
    pb_uint64_t value;
    if (!pb_decode_varint(stream, &value))
 800f4ec:	f107 0308 	add.w	r3, r7, #8
 800f4f0:	4619      	mov	r1, r3
 800f4f2:	6878      	ldr	r0, [r7, #4]
 800f4f4:	f7ff f8f6 	bl	800e6e4 <pb_decode_varint>
 800f4f8:	4603      	mov	r3, r0
 800f4fa:	f083 0301 	eor.w	r3, r3, #1
 800f4fe:	b2db      	uxtb	r3, r3
 800f500:	2b00      	cmp	r3, #0
 800f502:	d001      	beq.n	800f508 <pb_decode_svarint+0x28>
        return false;
 800f504:	2300      	movs	r3, #0
 800f506:	e021      	b.n	800f54c <pb_decode_svarint+0x6c>
    
    if (value & 1)
 800f508:	e9d7 bc02 	ldrd	fp, ip, [r7, #8]
 800f50c:	f04f 0101 	mov.w	r1, #1
 800f510:	f04f 0200 	mov.w	r2, #0
 800f514:	ea0b 0301 	and.w	r3, fp, r1
 800f518:	ea0c 0402 	and.w	r4, ip, r2
 800f51c:	4323      	orrs	r3, r4
 800f51e:	d00c      	beq.n	800f53a <pb_decode_svarint+0x5a>
        *dest = (pb_int64_t)(~(value >> 1));
 800f520:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800f524:	0862      	lsrs	r2, r4, #1
 800f526:	ea4f 0133 	mov.w	r1, r3, rrx
 800f52a:	ea6f 0301 	mvn.w	r3, r1
 800f52e:	ea6f 0402 	mvn.w	r4, r2
 800f532:	683a      	ldr	r2, [r7, #0]
 800f534:	e9c2 3400 	strd	r3, r4, [r2]
 800f538:	e007      	b.n	800f54a <pb_decode_svarint+0x6a>
    else
        *dest = (pb_int64_t)(value >> 1);
 800f53a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800f53e:	0864      	lsrs	r4, r4, #1
 800f540:	ea4f 0333 	mov.w	r3, r3, rrx
 800f544:	683a      	ldr	r2, [r7, #0]
 800f546:	e9c2 3400 	strd	r3, r4, [r2]
    
    return true;
 800f54a:	2301      	movs	r3, #1
}
 800f54c:	4618      	mov	r0, r3
 800f54e:	3710      	adds	r7, #16
 800f550:	46bd      	mov	sp, r7
 800f552:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800f556 <pb_decode_fixed32>:

bool pb_decode_fixed32(pb_istream_t *stream, void *dest)
{
 800f556:	b580      	push	{r7, lr}
 800f558:	b084      	sub	sp, #16
 800f55a:	af00      	add	r7, sp, #0
 800f55c:	6078      	str	r0, [r7, #4]
 800f55e:	6039      	str	r1, [r7, #0]
    pb_byte_t bytes[4];

    if (!pb_read(stream, bytes, 4))
 800f560:	f107 030c 	add.w	r3, r7, #12
 800f564:	2204      	movs	r2, #4
 800f566:	4619      	mov	r1, r3
 800f568:	6878      	ldr	r0, [r7, #4]
 800f56a:	f7fe ff5f 	bl	800e42c <pb_read>
 800f56e:	4603      	mov	r3, r0
 800f570:	f083 0301 	eor.w	r3, r3, #1
 800f574:	b2db      	uxtb	r3, r3
 800f576:	2b00      	cmp	r3, #0
 800f578:	d001      	beq.n	800f57e <pb_decode_fixed32+0x28>
        return false;
 800f57a:	2300      	movs	r3, #0
 800f57c:	e00d      	b.n	800f59a <pb_decode_fixed32+0x44>
    
    *(uint32_t*)dest = ((uint32_t)bytes[0] << 0) |
 800f57e:	7b3b      	ldrb	r3, [r7, #12]
 800f580:	461a      	mov	r2, r3
                       ((uint32_t)bytes[1] << 8) |
 800f582:	7b7b      	ldrb	r3, [r7, #13]
 800f584:	021b      	lsls	r3, r3, #8
    *(uint32_t*)dest = ((uint32_t)bytes[0] << 0) |
 800f586:	431a      	orrs	r2, r3
                       ((uint32_t)bytes[2] << 16) |
 800f588:	7bbb      	ldrb	r3, [r7, #14]
 800f58a:	041b      	lsls	r3, r3, #16
                       ((uint32_t)bytes[1] << 8) |
 800f58c:	431a      	orrs	r2, r3
                       ((uint32_t)bytes[3] << 24);
 800f58e:	7bfb      	ldrb	r3, [r7, #15]
 800f590:	061b      	lsls	r3, r3, #24
                       ((uint32_t)bytes[2] << 16) |
 800f592:	431a      	orrs	r2, r3
    *(uint32_t*)dest = ((uint32_t)bytes[0] << 0) |
 800f594:	683b      	ldr	r3, [r7, #0]
 800f596:	601a      	str	r2, [r3, #0]
    return true;
 800f598:	2301      	movs	r3, #1
}
 800f59a:	4618      	mov	r0, r3
 800f59c:	3710      	adds	r7, #16
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	bd80      	pop	{r7, pc}

0800f5a2 <pb_decode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool pb_decode_fixed64(pb_istream_t *stream, void *dest)
{
 800f5a2:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 800f5a6:	b084      	sub	sp, #16
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	6078      	str	r0, [r7, #4]
 800f5ac:	6039      	str	r1, [r7, #0]
    pb_byte_t bytes[8];

    if (!pb_read(stream, bytes, 8))
 800f5ae:	f107 0308 	add.w	r3, r7, #8
 800f5b2:	2208      	movs	r2, #8
 800f5b4:	4619      	mov	r1, r3
 800f5b6:	6878      	ldr	r0, [r7, #4]
 800f5b8:	f7fe ff38 	bl	800e42c <pb_read>
 800f5bc:	4603      	mov	r3, r0
 800f5be:	f083 0301 	eor.w	r3, r3, #1
 800f5c2:	b2db      	uxtb	r3, r3
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d001      	beq.n	800f5cc <pb_decode_fixed64+0x2a>
        return false;
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	e06c      	b.n	800f6a6 <pb_decode_fixed64+0x104>
    
    *(uint64_t*)dest = ((uint64_t)bytes[0] << 0) |
 800f5cc:	7a3b      	ldrb	r3, [r7, #8]
 800f5ce:	fa5f fb83 	uxtb.w	fp, r3
 800f5d2:	f04f 0c00 	mov.w	ip, #0
                       ((uint64_t)bytes[1] << 8) |
 800f5d6:	7a7b      	ldrb	r3, [r7, #9]
 800f5d8:	b2d9      	uxtb	r1, r3
 800f5da:	f04f 0200 	mov.w	r2, #0
 800f5de:	f04f 0300 	mov.w	r3, #0
 800f5e2:	f04f 0400 	mov.w	r4, #0
 800f5e6:	0214      	lsls	r4, r2, #8
 800f5e8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800f5ec:	020b      	lsls	r3, r1, #8
    *(uint64_t*)dest = ((uint64_t)bytes[0] << 0) |
 800f5ee:	ea4b 0803 	orr.w	r8, fp, r3
 800f5f2:	ea4c 0904 	orr.w	r9, ip, r4
                       ((uint64_t)bytes[2] << 16) |
 800f5f6:	7abb      	ldrb	r3, [r7, #10]
 800f5f8:	b2d9      	uxtb	r1, r3
 800f5fa:	f04f 0200 	mov.w	r2, #0
 800f5fe:	f04f 0300 	mov.w	r3, #0
 800f602:	f04f 0400 	mov.w	r4, #0
 800f606:	0414      	lsls	r4, r2, #16
 800f608:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 800f60c:	040b      	lsls	r3, r1, #16
                       ((uint64_t)bytes[1] << 8) |
 800f60e:	ea48 0103 	orr.w	r1, r8, r3
 800f612:	ea49 0204 	orr.w	r2, r9, r4
                       ((uint64_t)bytes[3] << 24) |
 800f616:	7afb      	ldrb	r3, [r7, #11]
 800f618:	b2db      	uxtb	r3, r3
 800f61a:	f04f 0400 	mov.w	r4, #0
 800f61e:	0a1e      	lsrs	r6, r3, #8
 800f620:	061d      	lsls	r5, r3, #24
                       ((uint64_t)bytes[2] << 16) |
 800f622:	ea41 0805 	orr.w	r8, r1, r5
 800f626:	ea42 0906 	orr.w	r9, r2, r6
                       ((uint64_t)bytes[4] << 32) |
 800f62a:	7b3b      	ldrb	r3, [r7, #12]
 800f62c:	b2dd      	uxtb	r5, r3
 800f62e:	f04f 0600 	mov.w	r6, #0
 800f632:	f04f 0300 	mov.w	r3, #0
 800f636:	f04f 0400 	mov.w	r4, #0
 800f63a:	002c      	movs	r4, r5
 800f63c:	2300      	movs	r3, #0
                       ((uint64_t)bytes[3] << 24) |
 800f63e:	ea48 0103 	orr.w	r1, r8, r3
 800f642:	ea49 0204 	orr.w	r2, r9, r4
                       ((uint64_t)bytes[5] << 40) |
 800f646:	7b7b      	ldrb	r3, [r7, #13]
 800f648:	b2dd      	uxtb	r5, r3
 800f64a:	f04f 0600 	mov.w	r6, #0
 800f64e:	f04f 0300 	mov.w	r3, #0
 800f652:	f04f 0400 	mov.w	r4, #0
 800f656:	022c      	lsls	r4, r5, #8
 800f658:	2300      	movs	r3, #0
                       ((uint64_t)bytes[4] << 32) |
 800f65a:	ea41 0803 	orr.w	r8, r1, r3
 800f65e:	ea42 0904 	orr.w	r9, r2, r4
                       ((uint64_t)bytes[6] << 48) |
 800f662:	7bbb      	ldrb	r3, [r7, #14]
 800f664:	b2dd      	uxtb	r5, r3
 800f666:	f04f 0600 	mov.w	r6, #0
 800f66a:	f04f 0300 	mov.w	r3, #0
 800f66e:	f04f 0400 	mov.w	r4, #0
 800f672:	042c      	lsls	r4, r5, #16
 800f674:	2300      	movs	r3, #0
                       ((uint64_t)bytes[5] << 40) |
 800f676:	ea48 0103 	orr.w	r1, r8, r3
 800f67a:	ea49 0204 	orr.w	r2, r9, r4
                       ((uint64_t)bytes[7] << 56);
 800f67e:	7bfb      	ldrb	r3, [r7, #15]
 800f680:	b2dd      	uxtb	r5, r3
 800f682:	f04f 0600 	mov.w	r6, #0
 800f686:	f04f 0800 	mov.w	r8, #0
 800f68a:	f04f 0900 	mov.w	r9, #0
 800f68e:	ea4f 6905 	mov.w	r9, r5, lsl #24
 800f692:	f04f 0800 	mov.w	r8, #0
                       ((uint64_t)bytes[6] << 48) |
 800f696:	ea48 0301 	orr.w	r3, r8, r1
 800f69a:	ea49 0402 	orr.w	r4, r9, r2
    *(uint64_t*)dest = ((uint64_t)bytes[0] << 0) |
 800f69e:	683a      	ldr	r2, [r7, #0]
 800f6a0:	e9c2 3400 	strd	r3, r4, [r2]
    
    return true;
 800f6a4:	2301      	movs	r3, #1
}
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	3710      	adds	r7, #16
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}

0800f6b0 <pb_dec_varint>:
#endif

static bool checkreturn pb_dec_varint(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800f6b0:	b590      	push	{r4, r7, lr}
 800f6b2:	b08b      	sub	sp, #44	; 0x2c
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	60f8      	str	r0, [r7, #12]
 800f6b8:	60b9      	str	r1, [r7, #8]
 800f6ba:	607a      	str	r2, [r7, #4]
    pb_uint64_t value;
    pb_int64_t svalue;
    pb_int64_t clamped;
    if (!pb_decode_varint(stream, &value))
 800f6bc:	f107 0310 	add.w	r3, r7, #16
 800f6c0:	4619      	mov	r1, r3
 800f6c2:	68f8      	ldr	r0, [r7, #12]
 800f6c4:	f7ff f80e 	bl	800e6e4 <pb_decode_varint>
 800f6c8:	4603      	mov	r3, r0
 800f6ca:	f083 0301 	eor.w	r3, r3, #1
 800f6ce:	b2db      	uxtb	r3, r3
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d001      	beq.n	800f6d8 <pb_dec_varint+0x28>
        return false;
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	e078      	b.n	800f7ca <pb_dec_varint+0x11a>
     * be cast as int32_t, instead of the int64_t that should be used when
     * encoding. Previous nanopb versions had a bug in encoding. In order to
     * not break decoding of such messages, we cast <=32 bit fields to
     * int32_t first to get the sign correct.
     */
    if (field->data_size == sizeof(pb_int64_t))
 800f6d8:	68bb      	ldr	r3, [r7, #8]
 800f6da:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800f6de:	b29b      	uxth	r3, r3
 800f6e0:	2b08      	cmp	r3, #8
 800f6e2:	d104      	bne.n	800f6ee <pb_dec_varint+0x3e>
        svalue = (pb_int64_t)value;
 800f6e4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800f6e8:	e9c7 3408 	strd	r3, r4, [r7, #32]
 800f6ec:	e005      	b.n	800f6fa <pb_dec_varint+0x4a>
    else
        svalue = (int32_t)value;
 800f6ee:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800f6f2:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800f6f6:	e9c7 3408 	strd	r3, r4, [r7, #32]

    /* Cast to the proper field size, while checking for overflows */
    if (field->data_size == sizeof(pb_int64_t))
 800f6fa:	68bb      	ldr	r3, [r7, #8]
 800f6fc:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800f700:	b29b      	uxth	r3, r3
 800f702:	2b08      	cmp	r3, #8
 800f704:	d10a      	bne.n	800f71c <pb_dec_varint+0x6c>
        clamped = *(pb_int64_t*)dest = svalue;
 800f706:	687a      	ldr	r2, [r7, #4]
 800f708:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800f70c:	e9c2 3400 	strd	r3, r4, [r2]
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f716:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800f71a:	e041      	b.n	800f7a0 <pb_dec_varint+0xf0>
    else if (field->data_size == sizeof(int32_t))
 800f71c:	68bb      	ldr	r3, [r7, #8]
 800f71e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800f722:	b29b      	uxth	r3, r3
 800f724:	2b04      	cmp	r3, #4
 800f726:	d109      	bne.n	800f73c <pb_dec_varint+0x8c>
        clamped = *(int32_t*)dest = (int32_t)svalue;
 800f728:	6a3a      	ldr	r2, [r7, #32]
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	601a      	str	r2, [r3, #0]
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800f736:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800f73a:	e031      	b.n	800f7a0 <pb_dec_varint+0xf0>
    else if (field->data_size == sizeof(int_least16_t))
 800f73c:	68bb      	ldr	r3, [r7, #8]
 800f73e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800f742:	b29b      	uxth	r3, r3
 800f744:	2b02      	cmp	r3, #2
 800f746:	d10c      	bne.n	800f762 <pb_dec_varint+0xb2>
        clamped = *(int_least16_t*)dest = (int_least16_t)svalue;
 800f748:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	801a      	strh	r2, [r3, #0]
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f756:	b21b      	sxth	r3, r3
 800f758:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800f75c:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800f760:	e01e      	b.n	800f7a0 <pb_dec_varint+0xf0>
    else if (field->data_size == sizeof(int_least8_t))
 800f762:	68bb      	ldr	r3, [r7, #8]
 800f764:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800f768:	b29b      	uxth	r3, r3
 800f76a:	2b01      	cmp	r3, #1
 800f76c:	d10c      	bne.n	800f788 <pb_dec_varint+0xd8>
        clamped = *(int_least8_t*)dest = (int_least8_t)svalue;
 800f76e:	f997 2020 	ldrsb.w	r2, [r7, #32]
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	701a      	strb	r2, [r3, #0]
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	f993 3000 	ldrsb.w	r3, [r3]
 800f77c:	b25b      	sxtb	r3, r3
 800f77e:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800f782:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800f786:	e00b      	b.n	800f7a0 <pb_dec_varint+0xf0>
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	68db      	ldr	r3, [r3, #12]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d002      	beq.n	800f796 <pb_dec_varint+0xe6>
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	68db      	ldr	r3, [r3, #12]
 800f794:	e000      	b.n	800f798 <pb_dec_varint+0xe8>
 800f796:	4b0f      	ldr	r3, [pc, #60]	; (800f7d4 <pb_dec_varint+0x124>)
 800f798:	68fa      	ldr	r2, [r7, #12]
 800f79a:	60d3      	str	r3, [r2, #12]
 800f79c:	2300      	movs	r3, #0
 800f79e:	e014      	b.n	800f7ca <pb_dec_varint+0x11a>

    if (clamped != svalue)
 800f7a0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800f7a4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800f7a8:	42a2      	cmp	r2, r4
 800f7aa:	bf08      	it	eq
 800f7ac:	4299      	cmpeq	r1, r3
 800f7ae:	d00b      	beq.n	800f7c8 <pb_dec_varint+0x118>
        PB_RETURN_ERROR(stream, "integer too large");
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	68db      	ldr	r3, [r3, #12]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d002      	beq.n	800f7be <pb_dec_varint+0x10e>
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	68db      	ldr	r3, [r3, #12]
 800f7bc:	e000      	b.n	800f7c0 <pb_dec_varint+0x110>
 800f7be:	4b06      	ldr	r3, [pc, #24]	; (800f7d8 <pb_dec_varint+0x128>)
 800f7c0:	68fa      	ldr	r2, [r7, #12]
 800f7c2:	60d3      	str	r3, [r2, #12]
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	e000      	b.n	800f7ca <pb_dec_varint+0x11a>
    
    return true;
 800f7c8:	2301      	movs	r3, #1
}
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	372c      	adds	r7, #44	; 0x2c
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	bd90      	pop	{r4, r7, pc}
 800f7d2:	bf00      	nop
 800f7d4:	08015a9c 	.word	0x08015a9c
 800f7d8:	08015ab0 	.word	0x08015ab0

0800f7dc <pb_dec_uvarint>:

static bool checkreturn pb_dec_uvarint(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800f7dc:	b590      	push	{r4, r7, lr}
 800f7de:	b089      	sub	sp, #36	; 0x24
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	60f8      	str	r0, [r7, #12]
 800f7e4:	60b9      	str	r1, [r7, #8]
 800f7e6:	607a      	str	r2, [r7, #4]
    pb_uint64_t value, clamped;
    if (!pb_decode_varint(stream, &value))
 800f7e8:	f107 0310 	add.w	r3, r7, #16
 800f7ec:	4619      	mov	r1, r3
 800f7ee:	68f8      	ldr	r0, [r7, #12]
 800f7f0:	f7fe ff78 	bl	800e6e4 <pb_decode_varint>
 800f7f4:	4603      	mov	r3, r0
 800f7f6:	f083 0301 	eor.w	r3, r3, #1
 800f7fa:	b2db      	uxtb	r3, r3
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d001      	beq.n	800f804 <pb_dec_uvarint+0x28>
        return false;
 800f800:	2300      	movs	r3, #0
 800f802:	e069      	b.n	800f8d8 <pb_dec_uvarint+0xfc>
    
    /* Cast to the proper field size, while checking for overflows */
    if (field->data_size == sizeof(pb_uint64_t))
 800f804:	68bb      	ldr	r3, [r7, #8]
 800f806:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800f80a:	b29b      	uxth	r3, r3
 800f80c:	2b08      	cmp	r3, #8
 800f80e:	d10a      	bne.n	800f826 <pb_dec_uvarint+0x4a>
        clamped = *(pb_uint64_t*)dest = value;
 800f810:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800f814:	687a      	ldr	r2, [r7, #4]
 800f816:	e9c2 3400 	strd	r3, r4, [r2]
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f820:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800f824:	e043      	b.n	800f8ae <pb_dec_uvarint+0xd2>
    else if (field->data_size == sizeof(uint32_t))
 800f826:	68bb      	ldr	r3, [r7, #8]
 800f828:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800f82c:	b29b      	uxth	r3, r3
 800f82e:	2b04      	cmp	r3, #4
 800f830:	d10b      	bne.n	800f84a <pb_dec_uvarint+0x6e>
        clamped = *(uint32_t*)dest = (uint32_t)value;
 800f832:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800f836:	461a      	mov	r2, r3
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	601a      	str	r2, [r3, #0]
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	f04f 0400 	mov.w	r4, #0
 800f844:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800f848:	e031      	b.n	800f8ae <pb_dec_uvarint+0xd2>
    else if (field->data_size == sizeof(uint_least16_t))
 800f84a:	68bb      	ldr	r3, [r7, #8]
 800f84c:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800f850:	b29b      	uxth	r3, r3
 800f852:	2b02      	cmp	r3, #2
 800f854:	d10c      	bne.n	800f870 <pb_dec_uvarint+0x94>
        clamped = *(uint_least16_t*)dest = (uint_least16_t)value;
 800f856:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800f85a:	b29a      	uxth	r2, r3
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	801a      	strh	r2, [r3, #0]
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	881b      	ldrh	r3, [r3, #0]
 800f864:	b29b      	uxth	r3, r3
 800f866:	f04f 0400 	mov.w	r4, #0
 800f86a:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800f86e:	e01e      	b.n	800f8ae <pb_dec_uvarint+0xd2>
    else if (field->data_size == sizeof(uint_least8_t))
 800f870:	68bb      	ldr	r3, [r7, #8]
 800f872:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800f876:	b29b      	uxth	r3, r3
 800f878:	2b01      	cmp	r3, #1
 800f87a:	d10c      	bne.n	800f896 <pb_dec_uvarint+0xba>
        clamped = *(uint_least8_t*)dest = (uint_least8_t)value;
 800f87c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800f880:	b2da      	uxtb	r2, r3
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	701a      	strb	r2, [r3, #0]
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	781b      	ldrb	r3, [r3, #0]
 800f88a:	b2db      	uxtb	r3, r3
 800f88c:	f04f 0400 	mov.w	r4, #0
 800f890:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800f894:	e00b      	b.n	800f8ae <pb_dec_uvarint+0xd2>
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	68db      	ldr	r3, [r3, #12]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d002      	beq.n	800f8a4 <pb_dec_uvarint+0xc8>
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	68db      	ldr	r3, [r3, #12]
 800f8a2:	e000      	b.n	800f8a6 <pb_dec_uvarint+0xca>
 800f8a4:	4b0e      	ldr	r3, [pc, #56]	; (800f8e0 <pb_dec_uvarint+0x104>)
 800f8a6:	68fa      	ldr	r2, [r7, #12]
 800f8a8:	60d3      	str	r3, [r2, #12]
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	e014      	b.n	800f8d8 <pb_dec_uvarint+0xfc>
    
    if (clamped != value)
 800f8ae:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800f8b2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800f8b6:	42a2      	cmp	r2, r4
 800f8b8:	bf08      	it	eq
 800f8ba:	4299      	cmpeq	r1, r3
 800f8bc:	d00b      	beq.n	800f8d6 <pb_dec_uvarint+0xfa>
        PB_RETURN_ERROR(stream, "integer too large");
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	68db      	ldr	r3, [r3, #12]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d002      	beq.n	800f8cc <pb_dec_uvarint+0xf0>
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	68db      	ldr	r3, [r3, #12]
 800f8ca:	e000      	b.n	800f8ce <pb_dec_uvarint+0xf2>
 800f8cc:	4b05      	ldr	r3, [pc, #20]	; (800f8e4 <pb_dec_uvarint+0x108>)
 800f8ce:	68fa      	ldr	r2, [r7, #12]
 800f8d0:	60d3      	str	r3, [r2, #12]
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	e000      	b.n	800f8d8 <pb_dec_uvarint+0xfc>

    return true;
 800f8d6:	2301      	movs	r3, #1
}
 800f8d8:	4618      	mov	r0, r3
 800f8da:	3724      	adds	r7, #36	; 0x24
 800f8dc:	46bd      	mov	sp, r7
 800f8de:	bd90      	pop	{r4, r7, pc}
 800f8e0:	08015a9c 	.word	0x08015a9c
 800f8e4:	08015ab0 	.word	0x08015ab0

0800f8e8 <pb_dec_svarint>:

static bool checkreturn pb_dec_svarint(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800f8e8:	b590      	push	{r4, r7, lr}
 800f8ea:	b089      	sub	sp, #36	; 0x24
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	60f8      	str	r0, [r7, #12]
 800f8f0:	60b9      	str	r1, [r7, #8]
 800f8f2:	607a      	str	r2, [r7, #4]
    pb_int64_t value, clamped;
    if (!pb_decode_svarint(stream, &value))
 800f8f4:	f107 0310 	add.w	r3, r7, #16
 800f8f8:	4619      	mov	r1, r3
 800f8fa:	68f8      	ldr	r0, [r7, #12]
 800f8fc:	f7ff fdf0 	bl	800f4e0 <pb_decode_svarint>
 800f900:	4603      	mov	r3, r0
 800f902:	f083 0301 	eor.w	r3, r3, #1
 800f906:	b2db      	uxtb	r3, r3
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d001      	beq.n	800f910 <pb_dec_svarint+0x28>
        return false;
 800f90c:	2300      	movs	r3, #0
 800f90e:	e06b      	b.n	800f9e8 <pb_dec_svarint+0x100>
    
    /* Cast to the proper field size, while checking for overflows */
    if (field->data_size == sizeof(pb_int64_t))
 800f910:	68bb      	ldr	r3, [r7, #8]
 800f912:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800f916:	b29b      	uxth	r3, r3
 800f918:	2b08      	cmp	r3, #8
 800f91a:	d10a      	bne.n	800f932 <pb_dec_svarint+0x4a>
        clamped = *(pb_int64_t*)dest = value;
 800f91c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800f920:	687a      	ldr	r2, [r7, #4]
 800f922:	e9c2 3400 	strd	r3, r4, [r2]
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f92c:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800f930:	e045      	b.n	800f9be <pb_dec_svarint+0xd6>
    else if (field->data_size == sizeof(int32_t))
 800f932:	68bb      	ldr	r3, [r7, #8]
 800f934:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800f938:	b29b      	uxth	r3, r3
 800f93a:	2b04      	cmp	r3, #4
 800f93c:	d10b      	bne.n	800f956 <pb_dec_svarint+0x6e>
        clamped = *(int32_t*)dest = (int32_t)value;
 800f93e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800f942:	461a      	mov	r2, r3
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	601a      	str	r2, [r3, #0]
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800f950:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800f954:	e033      	b.n	800f9be <pb_dec_svarint+0xd6>
    else if (field->data_size == sizeof(int_least16_t))
 800f956:	68bb      	ldr	r3, [r7, #8]
 800f958:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800f95c:	b29b      	uxth	r3, r3
 800f95e:	2b02      	cmp	r3, #2
 800f960:	d10d      	bne.n	800f97e <pb_dec_svarint+0x96>
        clamped = *(int_least16_t*)dest = (int_least16_t)value;
 800f962:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800f966:	b21a      	sxth	r2, r3
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	801a      	strh	r2, [r3, #0]
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f972:	b21b      	sxth	r3, r3
 800f974:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800f978:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800f97c:	e01f      	b.n	800f9be <pb_dec_svarint+0xd6>
    else if (field->data_size == sizeof(int_least8_t))
 800f97e:	68bb      	ldr	r3, [r7, #8]
 800f980:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800f984:	b29b      	uxth	r3, r3
 800f986:	2b01      	cmp	r3, #1
 800f988:	d10d      	bne.n	800f9a6 <pb_dec_svarint+0xbe>
        clamped = *(int_least8_t*)dest = (int_least8_t)value;
 800f98a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800f98e:	b25a      	sxtb	r2, r3
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	701a      	strb	r2, [r3, #0]
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	f993 3000 	ldrsb.w	r3, [r3]
 800f99a:	b25b      	sxtb	r3, r3
 800f99c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800f9a0:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800f9a4:	e00b      	b.n	800f9be <pb_dec_svarint+0xd6>
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	68db      	ldr	r3, [r3, #12]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d002      	beq.n	800f9b4 <pb_dec_svarint+0xcc>
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	68db      	ldr	r3, [r3, #12]
 800f9b2:	e000      	b.n	800f9b6 <pb_dec_svarint+0xce>
 800f9b4:	4b0e      	ldr	r3, [pc, #56]	; (800f9f0 <pb_dec_svarint+0x108>)
 800f9b6:	68fa      	ldr	r2, [r7, #12]
 800f9b8:	60d3      	str	r3, [r2, #12]
 800f9ba:	2300      	movs	r3, #0
 800f9bc:	e014      	b.n	800f9e8 <pb_dec_svarint+0x100>

    if (clamped != value)
 800f9be:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800f9c2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800f9c6:	42a2      	cmp	r2, r4
 800f9c8:	bf08      	it	eq
 800f9ca:	4299      	cmpeq	r1, r3
 800f9cc:	d00b      	beq.n	800f9e6 <pb_dec_svarint+0xfe>
        PB_RETURN_ERROR(stream, "integer too large");
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	68db      	ldr	r3, [r3, #12]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d002      	beq.n	800f9dc <pb_dec_svarint+0xf4>
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	68db      	ldr	r3, [r3, #12]
 800f9da:	e000      	b.n	800f9de <pb_dec_svarint+0xf6>
 800f9dc:	4b05      	ldr	r3, [pc, #20]	; (800f9f4 <pb_dec_svarint+0x10c>)
 800f9de:	68fa      	ldr	r2, [r7, #12]
 800f9e0:	60d3      	str	r3, [r2, #12]
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	e000      	b.n	800f9e8 <pb_dec_svarint+0x100>
    
    return true;
 800f9e6:	2301      	movs	r3, #1
}
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	3724      	adds	r7, #36	; 0x24
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	bd90      	pop	{r4, r7, pc}
 800f9f0:	08015a9c 	.word	0x08015a9c
 800f9f4:	08015ab0 	.word	0x08015ab0

0800f9f8 <pb_dec_fixed32>:

static bool checkreturn pb_dec_fixed32(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800f9f8:	b580      	push	{r7, lr}
 800f9fa:	b084      	sub	sp, #16
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	60f8      	str	r0, [r7, #12]
 800fa00:	60b9      	str	r1, [r7, #8]
 800fa02:	607a      	str	r2, [r7, #4]
    PB_UNUSED(field);
    return pb_decode_fixed32(stream, dest);
 800fa04:	6879      	ldr	r1, [r7, #4]
 800fa06:	68f8      	ldr	r0, [r7, #12]
 800fa08:	f7ff fda5 	bl	800f556 <pb_decode_fixed32>
 800fa0c:	4603      	mov	r3, r0
}
 800fa0e:	4618      	mov	r0, r3
 800fa10:	3710      	adds	r7, #16
 800fa12:	46bd      	mov	sp, r7
 800fa14:	bd80      	pop	{r7, pc}

0800fa16 <pb_dec_fixed64>:

static bool checkreturn pb_dec_fixed64(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800fa16:	b580      	push	{r7, lr}
 800fa18:	b084      	sub	sp, #16
 800fa1a:	af00      	add	r7, sp, #0
 800fa1c:	60f8      	str	r0, [r7, #12]
 800fa1e:	60b9      	str	r1, [r7, #8]
 800fa20:	607a      	str	r2, [r7, #4]
    PB_UNUSED(field);
#ifndef PB_WITHOUT_64BIT
    return pb_decode_fixed64(stream, dest);
 800fa22:	6879      	ldr	r1, [r7, #4]
 800fa24:	68f8      	ldr	r0, [r7, #12]
 800fa26:	f7ff fdbc 	bl	800f5a2 <pb_decode_fixed64>
 800fa2a:	4603      	mov	r3, r0
#else
    PB_UNUSED(dest);
    PB_RETURN_ERROR(stream, "no 64bit support");
#endif
}
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	3710      	adds	r7, #16
 800fa30:	46bd      	mov	sp, r7
 800fa32:	bd80      	pop	{r7, pc}

0800fa34 <pb_dec_bytes>:

static bool checkreturn pb_dec_bytes(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b088      	sub	sp, #32
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	60f8      	str	r0, [r7, #12]
 800fa3c:	60b9      	str	r1, [r7, #8]
 800fa3e:	607a      	str	r2, [r7, #4]
    uint32_t size;
    size_t alloc_size;
    pb_bytes_array_t *bdest;
    
    if (!pb_decode_varint32(stream, &size))
 800fa40:	f107 0314 	add.w	r3, r7, #20
 800fa44:	4619      	mov	r1, r3
 800fa46:	68f8      	ldr	r0, [r7, #12]
 800fa48:	f7fe fe3c 	bl	800e6c4 <pb_decode_varint32>
 800fa4c:	4603      	mov	r3, r0
 800fa4e:	f083 0301 	eor.w	r3, r3, #1
 800fa52:	b2db      	uxtb	r3, r3
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d001      	beq.n	800fa5c <pb_dec_bytes+0x28>
        return false;
 800fa58:	2300      	movs	r3, #0
 800fa5a:	e056      	b.n	800fb0a <pb_dec_bytes+0xd6>
    
    if (size > PB_SIZE_MAX)
 800fa5c:	697b      	ldr	r3, [r7, #20]
 800fa5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fa62:	d30b      	bcc.n	800fa7c <pb_dec_bytes+0x48>
        PB_RETURN_ERROR(stream, "bytes overflow");
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	68db      	ldr	r3, [r3, #12]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d002      	beq.n	800fa72 <pb_dec_bytes+0x3e>
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	68db      	ldr	r3, [r3, #12]
 800fa70:	e000      	b.n	800fa74 <pb_dec_bytes+0x40>
 800fa72:	4b28      	ldr	r3, [pc, #160]	; (800fb14 <pb_dec_bytes+0xe0>)
 800fa74:	68fa      	ldr	r2, [r7, #12]
 800fa76:	60d3      	str	r3, [r2, #12]
 800fa78:	2300      	movs	r3, #0
 800fa7a:	e046      	b.n	800fb0a <pb_dec_bytes+0xd6>
    
    alloc_size = PB_BYTES_ARRAY_T_ALLOCSIZE(size);
 800fa7c:	697b      	ldr	r3, [r7, #20]
 800fa7e:	3302      	adds	r3, #2
 800fa80:	61fb      	str	r3, [r7, #28]
    if (size > alloc_size)
 800fa82:	697b      	ldr	r3, [r7, #20]
 800fa84:	69fa      	ldr	r2, [r7, #28]
 800fa86:	429a      	cmp	r2, r3
 800fa88:	d20b      	bcs.n	800faa2 <pb_dec_bytes+0x6e>
        PB_RETURN_ERROR(stream, "size too large");
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	68db      	ldr	r3, [r3, #12]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d002      	beq.n	800fa98 <pb_dec_bytes+0x64>
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	68db      	ldr	r3, [r3, #12]
 800fa96:	e000      	b.n	800fa9a <pb_dec_bytes+0x66>
 800fa98:	4b1f      	ldr	r3, [pc, #124]	; (800fb18 <pb_dec_bytes+0xe4>)
 800fa9a:	68fa      	ldr	r2, [r7, #12]
 800fa9c:	60d3      	str	r3, [r2, #12]
 800fa9e:	2300      	movs	r3, #0
 800faa0:	e033      	b.n	800fb0a <pb_dec_bytes+0xd6>
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800faa2:	68bb      	ldr	r3, [r7, #8]
 800faa4:	789b      	ldrb	r3, [r3, #2]
 800faa6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800faaa:	2b80      	cmp	r3, #128	; 0x80
 800faac:	d10b      	bne.n	800fac6 <pb_dec_bytes+0x92>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	68db      	ldr	r3, [r3, #12]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d002      	beq.n	800fabc <pb_dec_bytes+0x88>
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	68db      	ldr	r3, [r3, #12]
 800faba:	e000      	b.n	800fabe <pb_dec_bytes+0x8a>
 800fabc:	4b17      	ldr	r3, [pc, #92]	; (800fb1c <pb_dec_bytes+0xe8>)
 800fabe:	68fa      	ldr	r2, [r7, #12]
 800fac0:	60d3      	str	r3, [r2, #12]
 800fac2:	2300      	movs	r3, #0
 800fac4:	e021      	b.n	800fb0a <pb_dec_bytes+0xd6>
        bdest = *(pb_bytes_array_t**)dest;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 800fac6:	68bb      	ldr	r3, [r7, #8]
 800fac8:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800facc:	b29b      	uxth	r3, r3
 800face:	461a      	mov	r2, r3
 800fad0:	69fb      	ldr	r3, [r7, #28]
 800fad2:	4293      	cmp	r3, r2
 800fad4:	d90b      	bls.n	800faee <pb_dec_bytes+0xba>
            PB_RETURN_ERROR(stream, "bytes overflow");
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	68db      	ldr	r3, [r3, #12]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d002      	beq.n	800fae4 <pb_dec_bytes+0xb0>
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	68db      	ldr	r3, [r3, #12]
 800fae2:	e000      	b.n	800fae6 <pb_dec_bytes+0xb2>
 800fae4:	4b0b      	ldr	r3, [pc, #44]	; (800fb14 <pb_dec_bytes+0xe0>)
 800fae6:	68fa      	ldr	r2, [r7, #12]
 800fae8:	60d3      	str	r3, [r2, #12]
 800faea:	2300      	movs	r3, #0
 800faec:	e00d      	b.n	800fb0a <pb_dec_bytes+0xd6>
        bdest = (pb_bytes_array_t*)dest;
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	61bb      	str	r3, [r7, #24]
    }

    bdest->size = (pb_size_t)size;
 800faf2:	697b      	ldr	r3, [r7, #20]
 800faf4:	b29a      	uxth	r2, r3
 800faf6:	69bb      	ldr	r3, [r7, #24]
 800faf8:	801a      	strh	r2, [r3, #0]
    return pb_read(stream, bdest->bytes, size);
 800fafa:	69bb      	ldr	r3, [r7, #24]
 800fafc:	3302      	adds	r3, #2
 800fafe:	697a      	ldr	r2, [r7, #20]
 800fb00:	4619      	mov	r1, r3
 800fb02:	68f8      	ldr	r0, [r7, #12]
 800fb04:	f7fe fc92 	bl	800e42c <pb_read>
 800fb08:	4603      	mov	r3, r0
}
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	3720      	adds	r7, #32
 800fb0e:	46bd      	mov	sp, r7
 800fb10:	bd80      	pop	{r7, pc}
 800fb12:	bf00      	nop
 800fb14:	08015ac4 	.word	0x08015ac4
 800fb18:	08015ad4 	.word	0x08015ad4
 800fb1c:	08015a3c 	.word	0x08015a3c

0800fb20 <pb_dec_string>:

static bool checkreturn pb_dec_string(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b088      	sub	sp, #32
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	60f8      	str	r0, [r7, #12]
 800fb28:	60b9      	str	r1, [r7, #8]
 800fb2a:	607a      	str	r2, [r7, #4]
    uint32_t size;
    size_t alloc_size;
    bool status;
    if (!pb_decode_varint32(stream, &size))
 800fb2c:	f107 0314 	add.w	r3, r7, #20
 800fb30:	4619      	mov	r1, r3
 800fb32:	68f8      	ldr	r0, [r7, #12]
 800fb34:	f7fe fdc6 	bl	800e6c4 <pb_decode_varint32>
 800fb38:	4603      	mov	r3, r0
 800fb3a:	f083 0301 	eor.w	r3, r3, #1
 800fb3e:	b2db      	uxtb	r3, r3
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d001      	beq.n	800fb48 <pb_dec_string+0x28>
        return false;
 800fb44:	2300      	movs	r3, #0
 800fb46:	e046      	b.n	800fbd6 <pb_dec_string+0xb6>
    
    /* Space for null terminator */
    alloc_size = size + 1;
 800fb48:	697b      	ldr	r3, [r7, #20]
 800fb4a:	3301      	adds	r3, #1
 800fb4c:	61fb      	str	r3, [r7, #28]
    
    if (alloc_size < size)
 800fb4e:	697b      	ldr	r3, [r7, #20]
 800fb50:	69fa      	ldr	r2, [r7, #28]
 800fb52:	429a      	cmp	r2, r3
 800fb54:	d20b      	bcs.n	800fb6e <pb_dec_string+0x4e>
        PB_RETURN_ERROR(stream, "size too large");
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	68db      	ldr	r3, [r3, #12]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d002      	beq.n	800fb64 <pb_dec_string+0x44>
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	68db      	ldr	r3, [r3, #12]
 800fb62:	e000      	b.n	800fb66 <pb_dec_string+0x46>
 800fb64:	4b1e      	ldr	r3, [pc, #120]	; (800fbe0 <pb_dec_string+0xc0>)
 800fb66:	68fa      	ldr	r2, [r7, #12]
 800fb68:	60d3      	str	r3, [r2, #12]
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	e033      	b.n	800fbd6 <pb_dec_string+0xb6>
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800fb6e:	68bb      	ldr	r3, [r7, #8]
 800fb70:	789b      	ldrb	r3, [r3, #2]
 800fb72:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800fb76:	2b80      	cmp	r3, #128	; 0x80
 800fb78:	d10b      	bne.n	800fb92 <pb_dec_string+0x72>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	68db      	ldr	r3, [r3, #12]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d002      	beq.n	800fb88 <pb_dec_string+0x68>
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	68db      	ldr	r3, [r3, #12]
 800fb86:	e000      	b.n	800fb8a <pb_dec_string+0x6a>
 800fb88:	4b16      	ldr	r3, [pc, #88]	; (800fbe4 <pb_dec_string+0xc4>)
 800fb8a:	68fa      	ldr	r2, [r7, #12]
 800fb8c:	60d3      	str	r3, [r2, #12]
 800fb8e:	2300      	movs	r3, #0
 800fb90:	e021      	b.n	800fbd6 <pb_dec_string+0xb6>
        dest = *(void**)dest;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 800fb92:	68bb      	ldr	r3, [r7, #8]
 800fb94:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800fb98:	b29b      	uxth	r3, r3
 800fb9a:	461a      	mov	r2, r3
 800fb9c:	69fb      	ldr	r3, [r7, #28]
 800fb9e:	4293      	cmp	r3, r2
 800fba0:	d90b      	bls.n	800fbba <pb_dec_string+0x9a>
            PB_RETURN_ERROR(stream, "string overflow");
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	68db      	ldr	r3, [r3, #12]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d002      	beq.n	800fbb0 <pb_dec_string+0x90>
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	68db      	ldr	r3, [r3, #12]
 800fbae:	e000      	b.n	800fbb2 <pb_dec_string+0x92>
 800fbb0:	4b0d      	ldr	r3, [pc, #52]	; (800fbe8 <pb_dec_string+0xc8>)
 800fbb2:	68fa      	ldr	r2, [r7, #12]
 800fbb4:	60d3      	str	r3, [r2, #12]
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	e00d      	b.n	800fbd6 <pb_dec_string+0xb6>
    }
    
    status = pb_read(stream, (pb_byte_t*)dest, size);
 800fbba:	697b      	ldr	r3, [r7, #20]
 800fbbc:	461a      	mov	r2, r3
 800fbbe:	6879      	ldr	r1, [r7, #4]
 800fbc0:	68f8      	ldr	r0, [r7, #12]
 800fbc2:	f7fe fc33 	bl	800e42c <pb_read>
 800fbc6:	4603      	mov	r3, r0
 800fbc8:	76fb      	strb	r3, [r7, #27]
    *((pb_byte_t*)dest + size) = 0;
 800fbca:	697b      	ldr	r3, [r7, #20]
 800fbcc:	687a      	ldr	r2, [r7, #4]
 800fbce:	4413      	add	r3, r2
 800fbd0:	2200      	movs	r2, #0
 800fbd2:	701a      	strb	r2, [r3, #0]
    return status;
 800fbd4:	7efb      	ldrb	r3, [r7, #27]
}
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	3720      	adds	r7, #32
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	bd80      	pop	{r7, pc}
 800fbde:	bf00      	nop
 800fbe0:	08015ad4 	.word	0x08015ad4
 800fbe4:	08015a3c 	.word	0x08015a3c
 800fbe8:	08015ae4 	.word	0x08015ae4

0800fbec <pb_dec_submessage>:

static bool checkreturn pb_dec_submessage(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b08a      	sub	sp, #40	; 0x28
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	60f8      	str	r0, [r7, #12]
 800fbf4:	60b9      	str	r1, [r7, #8]
 800fbf6:	607a      	str	r2, [r7, #4]
    bool status;
    pb_istream_t substream;
    const pb_field_t* submsg_fields = (const pb_field_t*)field->ptr;
 800fbf8:	68bb      	ldr	r3, [r7, #8]
 800fbfa:	f8d3 300b 	ldr.w	r3, [r3, #11]
 800fbfe:	623b      	str	r3, [r7, #32]
    
    if (!pb_make_string_substream(stream, &substream))
 800fc00:	f107 0310 	add.w	r3, r7, #16
 800fc04:	4619      	mov	r1, r3
 800fc06:	68f8      	ldr	r0, [r7, #12]
 800fc08:	f7fe fedc 	bl	800e9c4 <pb_make_string_substream>
 800fc0c:	4603      	mov	r3, r0
 800fc0e:	f083 0301 	eor.w	r3, r3, #1
 800fc12:	b2db      	uxtb	r3, r3
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d001      	beq.n	800fc1c <pb_dec_submessage+0x30>
        return false;
 800fc18:	2300      	movs	r3, #0
 800fc1a:	e03b      	b.n	800fc94 <pb_dec_submessage+0xa8>
    
    if (field->ptr == NULL)
 800fc1c:	68bb      	ldr	r3, [r7, #8]
 800fc1e:	f8d3 300b 	ldr.w	r3, [r3, #11]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d10b      	bne.n	800fc3e <pb_dec_submessage+0x52>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	68db      	ldr	r3, [r3, #12]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d002      	beq.n	800fc34 <pb_dec_submessage+0x48>
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	68db      	ldr	r3, [r3, #12]
 800fc32:	e000      	b.n	800fc36 <pb_dec_submessage+0x4a>
 800fc34:	4b19      	ldr	r3, [pc, #100]	; (800fc9c <pb_dec_submessage+0xb0>)
 800fc36:	68fa      	ldr	r2, [r7, #12]
 800fc38:	60d3      	str	r3, [r2, #12]
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	e02a      	b.n	800fc94 <pb_dec_submessage+0xa8>
    
    /* New array entries need to be initialized, while required and optional
     * submessages have already been initialized in the top-level pb_decode. */
    if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 800fc3e:	68bb      	ldr	r3, [r7, #8]
 800fc40:	789b      	ldrb	r3, [r3, #2]
 800fc42:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800fc46:	2b20      	cmp	r3, #32
 800fc48:	d10a      	bne.n	800fc60 <pb_dec_submessage+0x74>
        status = pb_decode(&substream, submsg_fields, dest);
 800fc4a:	f107 0310 	add.w	r3, r7, #16
 800fc4e:	687a      	ldr	r2, [r7, #4]
 800fc50:	6a39      	ldr	r1, [r7, #32]
 800fc52:	4618      	mov	r0, r3
 800fc54:	f7ff fbfc 	bl	800f450 <pb_decode>
 800fc58:	4603      	mov	r3, r0
 800fc5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fc5e:	e009      	b.n	800fc74 <pb_dec_submessage+0x88>
    else
        status = pb_decode_noinit(&substream, submsg_fields, dest);
 800fc60:	f107 0310 	add.w	r3, r7, #16
 800fc64:	687a      	ldr	r2, [r7, #4]
 800fc66:	6a39      	ldr	r1, [r7, #32]
 800fc68:	4618      	mov	r0, r3
 800fc6a:	f7ff fa87 	bl	800f17c <pb_decode_noinit>
 800fc6e:	4603      	mov	r3, r0
 800fc70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    if (!pb_close_string_substream(stream, &substream))
 800fc74:	f107 0310 	add.w	r3, r7, #16
 800fc78:	4619      	mov	r1, r3
 800fc7a:	68f8      	ldr	r0, [r7, #12]
 800fc7c:	f7fe fedc 	bl	800ea38 <pb_close_string_substream>
 800fc80:	4603      	mov	r3, r0
 800fc82:	f083 0301 	eor.w	r3, r3, #1
 800fc86:	b2db      	uxtb	r3, r3
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d001      	beq.n	800fc90 <pb_dec_submessage+0xa4>
        return false;
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	e001      	b.n	800fc94 <pb_dec_submessage+0xa8>
    return status;
 800fc90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800fc94:	4618      	mov	r0, r3
 800fc96:	3728      	adds	r7, #40	; 0x28
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	bd80      	pop	{r7, pc}
 800fc9c:	08015af4 	.word	0x08015af4

0800fca0 <pb_dec_fixed_length_bytes>:

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b086      	sub	sp, #24
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	60f8      	str	r0, [r7, #12]
 800fca8:	60b9      	str	r1, [r7, #8]
 800fcaa:	607a      	str	r2, [r7, #4]
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 800fcac:	f107 0314 	add.w	r3, r7, #20
 800fcb0:	4619      	mov	r1, r3
 800fcb2:	68f8      	ldr	r0, [r7, #12]
 800fcb4:	f7fe fd06 	bl	800e6c4 <pb_decode_varint32>
 800fcb8:	4603      	mov	r3, r0
 800fcba:	f083 0301 	eor.w	r3, r3, #1
 800fcbe:	b2db      	uxtb	r3, r3
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d001      	beq.n	800fcc8 <pb_dec_fixed_length_bytes+0x28>
        return false;
 800fcc4:	2300      	movs	r3, #0
 800fcc6:	e03b      	b.n	800fd40 <pb_dec_fixed_length_bytes+0xa0>

    if (size > PB_SIZE_MAX)
 800fcc8:	697b      	ldr	r3, [r7, #20]
 800fcca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fcce:	d30b      	bcc.n	800fce8 <pb_dec_fixed_length_bytes+0x48>
        PB_RETURN_ERROR(stream, "bytes overflow");
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	68db      	ldr	r3, [r3, #12]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d002      	beq.n	800fcde <pb_dec_fixed_length_bytes+0x3e>
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	68db      	ldr	r3, [r3, #12]
 800fcdc:	e000      	b.n	800fce0 <pb_dec_fixed_length_bytes+0x40>
 800fcde:	4b1a      	ldr	r3, [pc, #104]	; (800fd48 <pb_dec_fixed_length_bytes+0xa8>)
 800fce0:	68fa      	ldr	r2, [r7, #12]
 800fce2:	60d3      	str	r3, [r2, #12]
 800fce4:	2300      	movs	r3, #0
 800fce6:	e02b      	b.n	800fd40 <pb_dec_fixed_length_bytes+0xa0>

    if (size == 0)
 800fce8:	697b      	ldr	r3, [r7, #20]
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d10a      	bne.n	800fd04 <pb_dec_fixed_length_bytes+0x64>
    {
        /* As a special case, treat empty bytes string as all zeros for fixed_length_bytes. */
        memset(dest, 0, field->data_size);
 800fcee:	68bb      	ldr	r3, [r7, #8]
 800fcf0:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800fcf4:	b29b      	uxth	r3, r3
 800fcf6:	461a      	mov	r2, r3
 800fcf8:	2100      	movs	r1, #0
 800fcfa:	6878      	ldr	r0, [r7, #4]
 800fcfc:	f001 f8aa 	bl	8010e54 <memset>
        return true;
 800fd00:	2301      	movs	r3, #1
 800fd02:	e01d      	b.n	800fd40 <pb_dec_fixed_length_bytes+0xa0>
    }

    if (size != field->data_size)
 800fd04:	68bb      	ldr	r3, [r7, #8]
 800fd06:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800fd0a:	b29b      	uxth	r3, r3
 800fd0c:	461a      	mov	r2, r3
 800fd0e:	697b      	ldr	r3, [r7, #20]
 800fd10:	429a      	cmp	r2, r3
 800fd12:	d00b      	beq.n	800fd2c <pb_dec_fixed_length_bytes+0x8c>
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	68db      	ldr	r3, [r3, #12]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d002      	beq.n	800fd22 <pb_dec_fixed_length_bytes+0x82>
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	68db      	ldr	r3, [r3, #12]
 800fd20:	e000      	b.n	800fd24 <pb_dec_fixed_length_bytes+0x84>
 800fd22:	4b0a      	ldr	r3, [pc, #40]	; (800fd4c <pb_dec_fixed_length_bytes+0xac>)
 800fd24:	68fa      	ldr	r2, [r7, #12]
 800fd26:	60d3      	str	r3, [r2, #12]
 800fd28:	2300      	movs	r3, #0
 800fd2a:	e009      	b.n	800fd40 <pb_dec_fixed_length_bytes+0xa0>

    return pb_read(stream, (pb_byte_t*)dest, field->data_size);
 800fd2c:	68bb      	ldr	r3, [r7, #8]
 800fd2e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800fd32:	b29b      	uxth	r3, r3
 800fd34:	461a      	mov	r2, r3
 800fd36:	6879      	ldr	r1, [r7, #4]
 800fd38:	68f8      	ldr	r0, [r7, #12]
 800fd3a:	f7fe fb77 	bl	800e42c <pb_read>
 800fd3e:	4603      	mov	r3, r0
}
 800fd40:	4618      	mov	r0, r3
 800fd42:	3718      	adds	r7, #24
 800fd44:	46bd      	mov	sp, r7
 800fd46:	bd80      	pop	{r7, pc}
 800fd48:	08015ac4 	.word	0x08015ac4
 800fd4c:	08015b10 	.word	0x08015b10

0800fd50 <pb_write>:
#endif
    return stream;
}

bool checkreturn pb_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b084      	sub	sp, #16
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	60f8      	str	r0, [r7, #12]
 800fd58:	60b9      	str	r1, [r7, #8]
 800fd5a:	607a      	str	r2, [r7, #4]
    if (stream->callback != NULL)
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d02b      	beq.n	800fdbc <pb_write+0x6c>
    {
        if (stream->bytes_written + count > stream->max_size)
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	68da      	ldr	r2, [r3, #12]
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	441a      	add	r2, r3
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	689b      	ldr	r3, [r3, #8]
 800fd70:	429a      	cmp	r2, r3
 800fd72:	d90b      	bls.n	800fd8c <pb_write+0x3c>
            PB_RETURN_ERROR(stream, "stream full");
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	691b      	ldr	r3, [r3, #16]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d002      	beq.n	800fd82 <pb_write+0x32>
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	691b      	ldr	r3, [r3, #16]
 800fd80:	e000      	b.n	800fd84 <pb_write+0x34>
 800fd82:	4b14      	ldr	r3, [pc, #80]	; (800fdd4 <pb_write+0x84>)
 800fd84:	68fa      	ldr	r2, [r7, #12]
 800fd86:	6113      	str	r3, [r2, #16]
 800fd88:	2300      	movs	r3, #0
 800fd8a:	e01e      	b.n	800fdca <pb_write+0x7a>

#ifdef PB_BUFFER_ONLY
        if (!buf_write(stream, buf, count))
            PB_RETURN_ERROR(stream, "io error");
#else        
        if (!stream->callback(stream, buf, count))
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	687a      	ldr	r2, [r7, #4]
 800fd92:	68b9      	ldr	r1, [r7, #8]
 800fd94:	68f8      	ldr	r0, [r7, #12]
 800fd96:	4798      	blx	r3
 800fd98:	4603      	mov	r3, r0
 800fd9a:	f083 0301 	eor.w	r3, r3, #1
 800fd9e:	b2db      	uxtb	r3, r3
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d00b      	beq.n	800fdbc <pb_write+0x6c>
            PB_RETURN_ERROR(stream, "io error");
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	691b      	ldr	r3, [r3, #16]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d002      	beq.n	800fdb2 <pb_write+0x62>
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	691b      	ldr	r3, [r3, #16]
 800fdb0:	e000      	b.n	800fdb4 <pb_write+0x64>
 800fdb2:	4b09      	ldr	r3, [pc, #36]	; (800fdd8 <pb_write+0x88>)
 800fdb4:	68fa      	ldr	r2, [r7, #12]
 800fdb6:	6113      	str	r3, [r2, #16]
 800fdb8:	2300      	movs	r3, #0
 800fdba:	e006      	b.n	800fdca <pb_write+0x7a>
#endif
    }
    
    stream->bytes_written += count;
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	68da      	ldr	r2, [r3, #12]
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	441a      	add	r2, r3
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	60da      	str	r2, [r3, #12]
    return true;
 800fdc8:	2301      	movs	r3, #1
}
 800fdca:	4618      	mov	r0, r3
 800fdcc:	3710      	adds	r7, #16
 800fdce:	46bd      	mov	sp, r7
 800fdd0:	bd80      	pop	{r7, pc}
 800fdd2:	bf00      	nop
 800fdd4:	08015b34 	.word	0x08015b34
 800fdd8:	08015b40 	.word	0x08015b40

0800fddc <encode_array>:
 *************************/

/* Encode a static array. Handles the size calculations and possible packing. */
static bool checkreturn encode_array(pb_ostream_t *stream, const pb_field_t *field,
                         const void *pData, size_t count, pb_encoder_t func)
{
 800fddc:	b590      	push	{r4, r7, lr}
 800fdde:	b08d      	sub	sp, #52	; 0x34
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	60f8      	str	r0, [r7, #12]
 800fde4:	60b9      	str	r1, [r7, #8]
 800fde6:	607a      	str	r2, [r7, #4]
 800fde8:	603b      	str	r3, [r7, #0]
    size_t i;
    const void *p;
    size_t size;
    
    if (count == 0)
 800fdea:	683b      	ldr	r3, [r7, #0]
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d101      	bne.n	800fdf4 <encode_array+0x18>
        return true;
 800fdf0:	2301      	movs	r3, #1
 800fdf2:	e0fb      	b.n	800ffec <encode_array+0x210>

    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
 800fdf4:	68bb      	ldr	r3, [r7, #8]
 800fdf6:	789b      	ldrb	r3, [r3, #2]
 800fdf8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800fdfc:	2b80      	cmp	r3, #128	; 0x80
 800fdfe:	d013      	beq.n	800fe28 <encode_array+0x4c>
 800fe00:	68bb      	ldr	r3, [r7, #8]
 800fe02:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800fe06:	b29b      	uxth	r3, r3
 800fe08:	461a      	mov	r2, r3
 800fe0a:	683b      	ldr	r3, [r7, #0]
 800fe0c:	4293      	cmp	r3, r2
 800fe0e:	d90b      	bls.n	800fe28 <encode_array+0x4c>
        PB_RETURN_ERROR(stream, "array max size exceeded");
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	691b      	ldr	r3, [r3, #16]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d002      	beq.n	800fe1e <encode_array+0x42>
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	691b      	ldr	r3, [r3, #16]
 800fe1c:	e000      	b.n	800fe20 <encode_array+0x44>
 800fe1e:	4b75      	ldr	r3, [pc, #468]	; (800fff4 <encode_array+0x218>)
 800fe20:	68fa      	ldr	r2, [r7, #12]
 800fe22:	6113      	str	r3, [r2, #16]
 800fe24:	2300      	movs	r3, #0
 800fe26:	e0e1      	b.n	800ffec <encode_array+0x210>
    
    /* We always pack arrays if the datatype allows it. */
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 800fe28:	68bb      	ldr	r3, [r7, #8]
 800fe2a:	789b      	ldrb	r3, [r3, #2]
 800fe2c:	f003 030f 	and.w	r3, r3, #15
 800fe30:	2b04      	cmp	r3, #4
 800fe32:	f300 808d 	bgt.w	800ff50 <encode_array+0x174>
    {
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
 800fe36:	68bb      	ldr	r3, [r7, #8]
 800fe38:	881b      	ldrh	r3, [r3, #0]
 800fe3a:	b29b      	uxth	r3, r3
 800fe3c:	461a      	mov	r2, r3
 800fe3e:	2102      	movs	r1, #2
 800fe40:	68f8      	ldr	r0, [r7, #12]
 800fe42:	f000 fcb1 	bl	80107a8 <pb_encode_tag>
 800fe46:	4603      	mov	r3, r0
 800fe48:	f083 0301 	eor.w	r3, r3, #1
 800fe4c:	b2db      	uxtb	r3, r3
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d001      	beq.n	800fe56 <encode_array+0x7a>
            return false;
 800fe52:	2300      	movs	r3, #0
 800fe54:	e0ca      	b.n	800ffec <encode_array+0x210>
        
        /* Determine the total size of packed array. */
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
 800fe56:	68bb      	ldr	r3, [r7, #8]
 800fe58:	789b      	ldrb	r3, [r3, #2]
 800fe5a:	f003 030f 	and.w	r3, r3, #15
 800fe5e:	2b03      	cmp	r3, #3
 800fe60:	d103      	bne.n	800fe6a <encode_array+0x8e>
        {
            size = 4 * count;
 800fe62:	683b      	ldr	r3, [r7, #0]
 800fe64:	009b      	lsls	r3, r3, #2
 800fe66:	627b      	str	r3, [r7, #36]	; 0x24
 800fe68:	e035      	b.n	800fed6 <encode_array+0xfa>
        }
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 800fe6a:	68bb      	ldr	r3, [r7, #8]
 800fe6c:	789b      	ldrb	r3, [r3, #2]
 800fe6e:	f003 030f 	and.w	r3, r3, #15
 800fe72:	2b04      	cmp	r3, #4
 800fe74:	d103      	bne.n	800fe7e <encode_array+0xa2>
        {
            size = 8 * count;
 800fe76:	683b      	ldr	r3, [r7, #0]
 800fe78:	00db      	lsls	r3, r3, #3
 800fe7a:	627b      	str	r3, [r7, #36]	; 0x24
 800fe7c:	e02b      	b.n	800fed6 <encode_array+0xfa>
        }
        else
        { 
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 800fe7e:	f107 0310 	add.w	r3, r7, #16
 800fe82:	2200      	movs	r2, #0
 800fe84:	601a      	str	r2, [r3, #0]
 800fe86:	605a      	str	r2, [r3, #4]
 800fe88:	609a      	str	r2, [r3, #8]
 800fe8a:	60da      	str	r2, [r3, #12]
 800fe8c:	611a      	str	r2, [r3, #16]
            p = pData;
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	62bb      	str	r3, [r7, #40]	; 0x28
            for (i = 0; i < count; i++)
 800fe92:	2300      	movs	r3, #0
 800fe94:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe96:	e018      	b.n	800feca <encode_array+0xee>
            {
                if (!func(&sizestream, field, p))
 800fe98:	f107 0010 	add.w	r0, r7, #16
 800fe9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fea0:	68b9      	ldr	r1, [r7, #8]
 800fea2:	4798      	blx	r3
 800fea4:	4603      	mov	r3, r0
 800fea6:	f083 0301 	eor.w	r3, r3, #1
 800feaa:	b2db      	uxtb	r3, r3
 800feac:	2b00      	cmp	r3, #0
 800feae:	d001      	beq.n	800feb4 <encode_array+0xd8>
                    return false;
 800feb0:	2300      	movs	r3, #0
 800feb2:	e09b      	b.n	800ffec <encode_array+0x210>
                p = (const char*)p + field->data_size;
 800feb4:	68bb      	ldr	r3, [r7, #8]
 800feb6:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800feba:	b29b      	uxth	r3, r3
 800febc:	461a      	mov	r2, r3
 800febe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fec0:	4413      	add	r3, r2
 800fec2:	62bb      	str	r3, [r7, #40]	; 0x28
            for (i = 0; i < count; i++)
 800fec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fec6:	3301      	adds	r3, #1
 800fec8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800feca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fecc:	683b      	ldr	r3, [r7, #0]
 800fece:	429a      	cmp	r2, r3
 800fed0:	d3e2      	bcc.n	800fe98 <encode_array+0xbc>
            }
            size = sizestream.bytes_written;
 800fed2:	69fb      	ldr	r3, [r7, #28]
 800fed4:	627b      	str	r3, [r7, #36]	; 0x24
        }
        
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800fed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fed8:	f04f 0400 	mov.w	r4, #0
 800fedc:	461a      	mov	r2, r3
 800fede:	4623      	mov	r3, r4
 800fee0:	68f8      	ldr	r0, [r7, #12]
 800fee2:	f000 fb5c 	bl	801059e <pb_encode_varint>
 800fee6:	4603      	mov	r3, r0
 800fee8:	f083 0301 	eor.w	r3, r3, #1
 800feec:	b2db      	uxtb	r3, r3
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d001      	beq.n	800fef6 <encode_array+0x11a>
            return false;
 800fef2:	2300      	movs	r3, #0
 800fef4:	e07a      	b.n	800ffec <encode_array+0x210>
        
        if (stream->callback == NULL)
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d106      	bne.n	800ff0c <encode_array+0x130>
            return pb_write(stream, NULL, size); /* Just sizing.. */
 800fefe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff00:	2100      	movs	r1, #0
 800ff02:	68f8      	ldr	r0, [r7, #12]
 800ff04:	f7ff ff24 	bl	800fd50 <pb_write>
 800ff08:	4603      	mov	r3, r0
 800ff0a:	e06f      	b.n	800ffec <encode_array+0x210>
        
        /* Write the data */
        p = pData;
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	62bb      	str	r3, [r7, #40]	; 0x28
        for (i = 0; i < count; i++)
 800ff10:	2300      	movs	r3, #0
 800ff12:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ff14:	e017      	b.n	800ff46 <encode_array+0x16a>
        {
            if (!func(stream, field, p))
 800ff16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ff1a:	68b9      	ldr	r1, [r7, #8]
 800ff1c:	68f8      	ldr	r0, [r7, #12]
 800ff1e:	4798      	blx	r3
 800ff20:	4603      	mov	r3, r0
 800ff22:	f083 0301 	eor.w	r3, r3, #1
 800ff26:	b2db      	uxtb	r3, r3
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d001      	beq.n	800ff30 <encode_array+0x154>
                return false;
 800ff2c:	2300      	movs	r3, #0
 800ff2e:	e05d      	b.n	800ffec <encode_array+0x210>
            p = (const char*)p + field->data_size;
 800ff30:	68bb      	ldr	r3, [r7, #8]
 800ff32:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800ff36:	b29b      	uxth	r3, r3
 800ff38:	461a      	mov	r2, r3
 800ff3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff3c:	4413      	add	r3, r2
 800ff3e:	62bb      	str	r3, [r7, #40]	; 0x28
        for (i = 0; i < count; i++)
 800ff40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff42:	3301      	adds	r3, #1
 800ff44:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ff46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ff48:	683b      	ldr	r3, [r7, #0]
 800ff4a:	429a      	cmp	r2, r3
 800ff4c:	d3e3      	bcc.n	800ff16 <encode_array+0x13a>
 800ff4e:	e04c      	b.n	800ffea <encode_array+0x20e>
        }
    }
    else
    {
        p = pData;
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	62bb      	str	r3, [r7, #40]	; 0x28
        for (i = 0; i < count; i++)
 800ff54:	2300      	movs	r3, #0
 800ff56:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ff58:	e043      	b.n	800ffe2 <encode_array+0x206>
        {
            if (!pb_encode_tag_for_field(stream, field))
 800ff5a:	68b9      	ldr	r1, [r7, #8]
 800ff5c:	68f8      	ldr	r0, [r7, #12]
 800ff5e:	f000 fc47 	bl	80107f0 <pb_encode_tag_for_field>
 800ff62:	4603      	mov	r3, r0
 800ff64:	f083 0301 	eor.w	r3, r3, #1
 800ff68:	b2db      	uxtb	r3, r3
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d001      	beq.n	800ff72 <encode_array+0x196>
                return false;
 800ff6e:	2300      	movs	r3, #0
 800ff70:	e03c      	b.n	800ffec <encode_array+0x210>

            /* Normally the data is stored directly in the array entries, but
             * for pointer-type string and bytes fields, the array entries are
             * actually pointers themselves also. So we have to dereference once
             * more to get to the actual data. */
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 800ff72:	68bb      	ldr	r3, [r7, #8]
 800ff74:	789b      	ldrb	r3, [r3, #2]
 800ff76:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ff7a:	2b80      	cmp	r3, #128	; 0x80
 800ff7c:	d119      	bne.n	800ffb2 <encode_array+0x1d6>
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 800ff7e:	68bb      	ldr	r3, [r7, #8]
 800ff80:	789b      	ldrb	r3, [r3, #2]
 800ff82:	f003 030f 	and.w	r3, r3, #15
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 800ff86:	2b06      	cmp	r3, #6
 800ff88:	d005      	beq.n	800ff96 <encode_array+0x1ba>
                 PB_LTYPE(field->type) == PB_LTYPE_BYTES))
 800ff8a:	68bb      	ldr	r3, [r7, #8]
 800ff8c:	789b      	ldrb	r3, [r3, #2]
 800ff8e:	f003 030f 	and.w	r3, r3, #15
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 800ff92:	2b05      	cmp	r3, #5
 800ff94:	d10d      	bne.n	800ffb2 <encode_array+0x1d6>
            {
                if (!func(stream, field, *(const void* const*)p))
 800ff96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff98:	681a      	ldr	r2, [r3, #0]
 800ff9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff9c:	68b9      	ldr	r1, [r7, #8]
 800ff9e:	68f8      	ldr	r0, [r7, #12]
 800ffa0:	4798      	blx	r3
 800ffa2:	4603      	mov	r3, r0
 800ffa4:	f083 0301 	eor.w	r3, r3, #1
 800ffa8:	b2db      	uxtb	r3, r3
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d00e      	beq.n	800ffcc <encode_array+0x1f0>
                    return false;
 800ffae:	2300      	movs	r3, #0
 800ffb0:	e01c      	b.n	800ffec <encode_array+0x210>
            }
            else
            {
                if (!func(stream, field, p))
 800ffb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ffb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ffb6:	68b9      	ldr	r1, [r7, #8]
 800ffb8:	68f8      	ldr	r0, [r7, #12]
 800ffba:	4798      	blx	r3
 800ffbc:	4603      	mov	r3, r0
 800ffbe:	f083 0301 	eor.w	r3, r3, #1
 800ffc2:	b2db      	uxtb	r3, r3
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d001      	beq.n	800ffcc <encode_array+0x1f0>
                    return false;
 800ffc8:	2300      	movs	r3, #0
 800ffca:	e00f      	b.n	800ffec <encode_array+0x210>
            }
            p = (const char*)p + field->data_size;
 800ffcc:	68bb      	ldr	r3, [r7, #8]
 800ffce:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800ffd2:	b29b      	uxth	r3, r3
 800ffd4:	461a      	mov	r2, r3
 800ffd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffd8:	4413      	add	r3, r2
 800ffda:	62bb      	str	r3, [r7, #40]	; 0x28
        for (i = 0; i < count; i++)
 800ffdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffde:	3301      	adds	r3, #1
 800ffe0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ffe2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ffe4:	683b      	ldr	r3, [r7, #0]
 800ffe6:	429a      	cmp	r2, r3
 800ffe8:	d3b7      	bcc.n	800ff5a <encode_array+0x17e>
        }
    }
    
    return true;
 800ffea:	2301      	movs	r3, #1
}
 800ffec:	4618      	mov	r0, r3
 800ffee:	3734      	adds	r7, #52	; 0x34
 800fff0:	46bd      	mov	sp, r7
 800fff2:	bd90      	pop	{r4, r7, pc}
 800fff4:	08015b4c 	.word	0x08015b4c

0800fff8 <pb_check_proto3_default_value>:

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool pb_check_proto3_default_value(const pb_field_t *field, const void *pData)
{
 800fff8:	b590      	push	{r4, r7, lr}
 800fffa:	b08d      	sub	sp, #52	; 0x34
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	6078      	str	r0, [r7, #4]
 8010000:	6039      	str	r1, [r7, #0]
    pb_type_t type = field->type;
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	789b      	ldrb	r3, [r3, #2]
 8010006:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    const void *pSize = (const char*)pData + field->size_offset;
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 8010010:	b21b      	sxth	r3, r3
 8010012:	461a      	mov	r2, r3
 8010014:	683b      	ldr	r3, [r7, #0]
 8010016:	4413      	add	r3, r2
 8010018:	62bb      	str	r3, [r7, #40]	; 0x28

    if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 801001a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801001e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8010022:	2b00      	cmp	r3, #0
 8010024:	d101      	bne.n	801002a <pb_check_proto3_default_value+0x32>
    {
        /* Required proto2 fields inside proto3 submessage, pretty rare case */
        return false;
 8010026:	2300      	movs	r3, #0
 8010028:	e0af      	b.n	801018a <pb_check_proto3_default_value+0x192>
    }
    else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 801002a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801002e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8010032:	2b20      	cmp	r3, #32
 8010034:	d107      	bne.n	8010046 <pb_check_proto3_default_value+0x4e>
    {
        /* Repeated fields inside proto3 submessage: present if count != 0 */
        return *(const pb_size_t*)pSize == 0;
 8010036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010038:	881b      	ldrh	r3, [r3, #0]
 801003a:	2b00      	cmp	r3, #0
 801003c:	bf0c      	ite	eq
 801003e:	2301      	moveq	r3, #1
 8010040:	2300      	movne	r3, #0
 8010042:	b2db      	uxtb	r3, r3
 8010044:	e0a1      	b.n	801018a <pb_check_proto3_default_value+0x192>
    }
    else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8010046:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801004a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801004e:	2b30      	cmp	r3, #48	; 0x30
 8010050:	d107      	bne.n	8010062 <pb_check_proto3_default_value+0x6a>
    {
        /* Oneof fields */
        return *(const pb_size_t*)pSize == 0;
 8010052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010054:	881b      	ldrh	r3, [r3, #0]
 8010056:	2b00      	cmp	r3, #0
 8010058:	bf0c      	ite	eq
 801005a:	2301      	moveq	r3, #1
 801005c:	2300      	movne	r3, #0
 801005e:	b2db      	uxtb	r3, r3
 8010060:	e093      	b.n	801018a <pb_check_proto3_default_value+0x192>
    }
    else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->size_offset)
 8010062:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010066:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801006a:	2b10      	cmp	r3, #16
 801006c:	d113      	bne.n	8010096 <pb_check_proto3_default_value+0x9e>
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 8010074:	b21b      	sxth	r3, r3
 8010076:	2b00      	cmp	r3, #0
 8010078:	d00d      	beq.n	8010096 <pb_check_proto3_default_value+0x9e>
    {
        /* Proto2 optional fields inside proto3 submessage */
        return *(const bool*)pSize == false;
 801007a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801007c:	781b      	ldrb	r3, [r3, #0]
 801007e:	2b00      	cmp	r3, #0
 8010080:	bf14      	ite	ne
 8010082:	2301      	movne	r3, #1
 8010084:	2300      	moveq	r3, #0
 8010086:	b2db      	uxtb	r3, r3
 8010088:	f083 0301 	eor.w	r3, r3, #1
 801008c:	b2db      	uxtb	r3, r3
 801008e:	f003 0301 	and.w	r3, r3, #1
 8010092:	b2db      	uxtb	r3, r3
 8010094:	e079      	b.n	801018a <pb_check_proto3_default_value+0x192>
    }

    /* Rest is proto3 singular fields */

    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 8010096:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801009a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d15b      	bne.n	801015a <pb_check_proto3_default_value+0x162>
    {
        if (PB_LTYPE(type) == PB_LTYPE_BYTES)
 80100a2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80100a6:	f003 030f 	and.w	r3, r3, #15
 80100aa:	2b05      	cmp	r3, #5
 80100ac:	d109      	bne.n	80100c2 <pb_check_proto3_default_value+0xca>
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)pData;
 80100ae:	683b      	ldr	r3, [r7, #0]
 80100b0:	627b      	str	r3, [r7, #36]	; 0x24
            return bytes->size == 0;
 80100b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100b4:	881b      	ldrh	r3, [r3, #0]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	bf0c      	ite	eq
 80100ba:	2301      	moveq	r3, #1
 80100bc:	2300      	movne	r3, #0
 80100be:	b2db      	uxtb	r3, r3
 80100c0:	e063      	b.n	801018a <pb_check_proto3_default_value+0x192>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
 80100c2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80100c6:	f003 030f 	and.w	r3, r3, #15
 80100ca:	2b06      	cmp	r3, #6
 80100cc:	d107      	bne.n	80100de <pb_check_proto3_default_value+0xe6>
        {
            return *(const char*)pData == '\0';
 80100ce:	683b      	ldr	r3, [r7, #0]
 80100d0:	781b      	ldrb	r3, [r3, #0]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	bf0c      	ite	eq
 80100d6:	2301      	moveq	r3, #1
 80100d8:	2300      	movne	r3, #0
 80100da:	b2db      	uxtb	r3, r3
 80100dc:	e055      	b.n	801018a <pb_check_proto3_default_value+0x192>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
 80100de:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80100e2:	f003 030f 	and.w	r3, r3, #15
 80100e6:	2b09      	cmp	r3, #9
 80100e8:	d109      	bne.n	80100fe <pb_check_proto3_default_value+0x106>
        {
            /* Fixed length bytes is only empty if its length is fixed
             * as 0. Which would be pretty strange, but we can check
             * it anyway. */
            return field->data_size == 0;
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80100f0:	b29b      	uxth	r3, r3
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	bf0c      	ite	eq
 80100f6:	2301      	moveq	r3, #1
 80100f8:	2300      	movne	r3, #0
 80100fa:	b2db      	uxtb	r3, r3
 80100fc:	e045      	b.n	801018a <pb_check_proto3_default_value+0x192>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 80100fe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010102:	f003 030f 	and.w	r3, r3, #15
 8010106:	2b07      	cmp	r3, #7
 8010108:	d127      	bne.n	801015a <pb_check_proto3_default_value+0x162>
             * are non-zero. The comparison cannot be done byte-per-byte
             * because the C struct may contain padding bytes that must
             * be skipped.
             */
            pb_field_iter_t iter;
            if (pb_field_iter_begin(&iter, (const pb_field_t*)field->ptr, pb_const_cast(pData)))
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	f8d3 400b 	ldr.w	r4, [r3, #11]
 8010110:	6838      	ldr	r0, [r7, #0]
 8010112:	f000 f9f0 	bl	80104f6 <pb_const_cast>
 8010116:	4602      	mov	r2, r0
 8010118:	f107 0308 	add.w	r3, r7, #8
 801011c:	4621      	mov	r1, r4
 801011e:	4618      	mov	r0, r3
 8010120:	f7fe f878 	bl	800e214 <pb_field_iter_begin>
 8010124:	4603      	mov	r3, r0
 8010126:	2b00      	cmp	r3, #0
 8010128:	d015      	beq.n	8010156 <pb_check_proto3_default_value+0x15e>
            {
                do
                {
                    if (!pb_check_proto3_default_value(iter.pos, iter.pData))
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	69ba      	ldr	r2, [r7, #24]
 801012e:	4611      	mov	r1, r2
 8010130:	4618      	mov	r0, r3
 8010132:	f7ff ff61 	bl	800fff8 <pb_check_proto3_default_value>
 8010136:	4603      	mov	r3, r0
 8010138:	f083 0301 	eor.w	r3, r3, #1
 801013c:	b2db      	uxtb	r3, r3
 801013e:	2b00      	cmp	r3, #0
 8010140:	d001      	beq.n	8010146 <pb_check_proto3_default_value+0x14e>
                    {
                        return false;
 8010142:	2300      	movs	r3, #0
 8010144:	e021      	b.n	801018a <pb_check_proto3_default_value+0x192>
                    }
                } while (pb_field_iter_next(&iter));
 8010146:	f107 0308 	add.w	r3, r7, #8
 801014a:	4618      	mov	r0, r3
 801014c:	f7fe f897 	bl	800e27e <pb_field_iter_next>
 8010150:	4603      	mov	r3, r0
 8010152:	2b00      	cmp	r3, #0
 8010154:	d1e9      	bne.n	801012a <pb_check_proto3_default_value+0x132>
            }
            return true;
 8010156:	2301      	movs	r3, #1
 8010158:	e017      	b.n	801018a <pb_check_proto3_default_value+0x192>
	     * UVARINT, SVARINT, FIXED32, FIXED64, EXTENSION fields, and also
	     * callback fields. These all have integer or pointer value which
	     * can be compared with 0.
	     */
	    pb_size_t i;
	    const char *p = (const char*)pData;
 801015a:	683b      	ldr	r3, [r7, #0]
 801015c:	623b      	str	r3, [r7, #32]
	    for (i = 0; i < field->data_size; i++)
 801015e:	2300      	movs	r3, #0
 8010160:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8010162:	e00a      	b.n	801017a <pb_check_proto3_default_value+0x182>
	    {
	        if (p[i] != 0)
 8010164:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010166:	6a3a      	ldr	r2, [r7, #32]
 8010168:	4413      	add	r3, r2
 801016a:	781b      	ldrb	r3, [r3, #0]
 801016c:	2b00      	cmp	r3, #0
 801016e:	d001      	beq.n	8010174 <pb_check_proto3_default_value+0x17c>
	        {
	            return false;
 8010170:	2300      	movs	r3, #0
 8010172:	e00a      	b.n	801018a <pb_check_proto3_default_value+0x192>
	    for (i = 0; i < field->data_size; i++)
 8010174:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010176:	3301      	adds	r3, #1
 8010178:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8010180:	b29b      	uxth	r3, r3
 8010182:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010184:	429a      	cmp	r2, r3
 8010186:	d3ed      	bcc.n	8010164 <pb_check_proto3_default_value+0x16c>
	        }
	    }

	    return true;
 8010188:	2301      	movs	r3, #1
	}
}
 801018a:	4618      	mov	r0, r3
 801018c:	3734      	adds	r7, #52	; 0x34
 801018e:	46bd      	mov	sp, r7
 8010190:	bd90      	pop	{r4, r7, pc}
	...

08010194 <encode_basic_field>:

/* Encode a field with static or pointer allocation, i.e. one whose data
 * is available to the encoder directly. */
static bool checkreturn encode_basic_field(pb_ostream_t *stream,
    const pb_field_t *field, const void *pData)
{
 8010194:	b580      	push	{r7, lr}
 8010196:	b08a      	sub	sp, #40	; 0x28
 8010198:	af02      	add	r7, sp, #8
 801019a:	60f8      	str	r0, [r7, #12]
 801019c:	60b9      	str	r1, [r7, #8]
 801019e:	607a      	str	r2, [r7, #4]
    pb_encoder_t func;
    bool implicit_has;
    const void *pSize = &implicit_has;
 80101a0:	f107 0313 	add.w	r3, r7, #19
 80101a4:	61fb      	str	r3, [r7, #28]
    
    func = PB_ENCODERS[PB_LTYPE(field->type)];
 80101a6:	68bb      	ldr	r3, [r7, #8]
 80101a8:	789b      	ldrb	r3, [r3, #2]
 80101aa:	f003 030f 	and.w	r3, r3, #15
 80101ae:	4a75      	ldr	r2, [pc, #468]	; (8010384 <encode_basic_field+0x1f0>)
 80101b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80101b4:	617b      	str	r3, [r7, #20]
    
    if (field->size_offset)
 80101b6:	68bb      	ldr	r3, [r7, #8]
 80101b8:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 80101bc:	b21b      	sxth	r3, r3
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d008      	beq.n	80101d4 <encode_basic_field+0x40>
    {
        /* Static optional, repeated or oneof field */
        pSize = (const char*)pData + field->size_offset;
 80101c2:	68bb      	ldr	r3, [r7, #8]
 80101c4:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 80101c8:	b21b      	sxth	r3, r3
 80101ca:	461a      	mov	r2, r3
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	4413      	add	r3, r2
 80101d0:	61fb      	str	r3, [r7, #28]
 80101d2:	e019      	b.n	8010208 <encode_basic_field+0x74>
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
 80101d4:	68bb      	ldr	r3, [r7, #8]
 80101d6:	789b      	ldrb	r3, [r3, #2]
 80101d8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80101dc:	2b10      	cmp	r3, #16
 80101de:	d111      	bne.n	8010204 <encode_basic_field+0x70>
    {
        /* Proto3 style field, optional but without explicit has_ field. */
        implicit_has = !pb_check_proto3_default_value(field, pData);
 80101e0:	6879      	ldr	r1, [r7, #4]
 80101e2:	68b8      	ldr	r0, [r7, #8]
 80101e4:	f7ff ff08 	bl	800fff8 <pb_check_proto3_default_value>
 80101e8:	4603      	mov	r3, r0
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	bf14      	ite	ne
 80101ee:	2301      	movne	r3, #1
 80101f0:	2300      	moveq	r3, #0
 80101f2:	b2db      	uxtb	r3, r3
 80101f4:	f083 0301 	eor.w	r3, r3, #1
 80101f8:	b2db      	uxtb	r3, r3
 80101fa:	f003 0301 	and.w	r3, r3, #1
 80101fe:	b2db      	uxtb	r3, r3
 8010200:	74fb      	strb	r3, [r7, #19]
 8010202:	e001      	b.n	8010208 <encode_basic_field+0x74>
    }
    else
    {
        /* Required field, always present */
        implicit_has = true;
 8010204:	2301      	movs	r3, #1
 8010206:	74fb      	strb	r3, [r7, #19]
    }

    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8010208:	68bb      	ldr	r3, [r7, #8]
 801020a:	789b      	ldrb	r3, [r3, #2]
 801020c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010210:	2b80      	cmp	r3, #128	; 0x80
 8010212:	d109      	bne.n	8010228 <encode_basic_field+0x94>
    {
        /* pData is a pointer to the field, which contains pointer to
         * the data. If the 2nd pointer is NULL, it is interpreted as if
         * the has_field was false.
         */
        pData = *(const void* const*)pData;
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	607b      	str	r3, [r7, #4]
        implicit_has = (pData != NULL);
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	2b00      	cmp	r3, #0
 801021e:	bf14      	ite	ne
 8010220:	2301      	movne	r3, #1
 8010222:	2300      	moveq	r3, #0
 8010224:	b2db      	uxtb	r3, r3
 8010226:	74fb      	strb	r3, [r7, #19]
    }

    switch (PB_HTYPE(field->type))
 8010228:	68bb      	ldr	r3, [r7, #8]
 801022a:	789b      	ldrb	r3, [r3, #2]
 801022c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8010230:	2b10      	cmp	r3, #16
 8010232:	d031      	beq.n	8010298 <encode_basic_field+0x104>
 8010234:	2b10      	cmp	r3, #16
 8010236:	dc02      	bgt.n	801023e <encode_basic_field+0xaa>
 8010238:	2b00      	cmp	r3, #0
 801023a:	d005      	beq.n	8010248 <encode_basic_field+0xb4>
 801023c:	e08a      	b.n	8010354 <encode_basic_field+0x1c0>
 801023e:	2b20      	cmp	r3, #32
 8010240:	d047      	beq.n	80102d2 <encode_basic_field+0x13e>
 8010242:	2b30      	cmp	r3, #48	; 0x30
 8010244:	d066      	beq.n	8010314 <encode_basic_field+0x180>
 8010246:	e085      	b.n	8010354 <encode_basic_field+0x1c0>
    {
        case PB_HTYPE_REQUIRED:
            if (!pData)
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d10b      	bne.n	8010266 <encode_basic_field+0xd2>
                PB_RETURN_ERROR(stream, "missing required field");
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	691b      	ldr	r3, [r3, #16]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d002      	beq.n	801025c <encode_basic_field+0xc8>
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	691b      	ldr	r3, [r3, #16]
 801025a:	e000      	b.n	801025e <encode_basic_field+0xca>
 801025c:	4b4a      	ldr	r3, [pc, #296]	; (8010388 <encode_basic_field+0x1f4>)
 801025e:	68fa      	ldr	r2, [r7, #12]
 8010260:	6113      	str	r3, [r2, #16]
 8010262:	2300      	movs	r3, #0
 8010264:	e08a      	b.n	801037c <encode_basic_field+0x1e8>
            if (!pb_encode_tag_for_field(stream, field))
 8010266:	68b9      	ldr	r1, [r7, #8]
 8010268:	68f8      	ldr	r0, [r7, #12]
 801026a:	f000 fac1 	bl	80107f0 <pb_encode_tag_for_field>
 801026e:	4603      	mov	r3, r0
 8010270:	f083 0301 	eor.w	r3, r3, #1
 8010274:	b2db      	uxtb	r3, r3
 8010276:	2b00      	cmp	r3, #0
 8010278:	d001      	beq.n	801027e <encode_basic_field+0xea>
                return false;
 801027a:	2300      	movs	r3, #0
 801027c:	e07e      	b.n	801037c <encode_basic_field+0x1e8>
            if (!func(stream, field, pData))
 801027e:	697b      	ldr	r3, [r7, #20]
 8010280:	687a      	ldr	r2, [r7, #4]
 8010282:	68b9      	ldr	r1, [r7, #8]
 8010284:	68f8      	ldr	r0, [r7, #12]
 8010286:	4798      	blx	r3
 8010288:	4603      	mov	r3, r0
 801028a:	f083 0301 	eor.w	r3, r3, #1
 801028e:	b2db      	uxtb	r3, r3
 8010290:	2b00      	cmp	r3, #0
 8010292:	d06b      	beq.n	801036c <encode_basic_field+0x1d8>
                return false;
 8010294:	2300      	movs	r3, #0
 8010296:	e071      	b.n	801037c <encode_basic_field+0x1e8>
            break;
        
        case PB_HTYPE_OPTIONAL:
            if (*(const bool*)pSize)
 8010298:	69fb      	ldr	r3, [r7, #28]
 801029a:	781b      	ldrb	r3, [r3, #0]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d067      	beq.n	8010370 <encode_basic_field+0x1dc>
            {
                if (!pb_encode_tag_for_field(stream, field))
 80102a0:	68b9      	ldr	r1, [r7, #8]
 80102a2:	68f8      	ldr	r0, [r7, #12]
 80102a4:	f000 faa4 	bl	80107f0 <pb_encode_tag_for_field>
 80102a8:	4603      	mov	r3, r0
 80102aa:	f083 0301 	eor.w	r3, r3, #1
 80102ae:	b2db      	uxtb	r3, r3
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d001      	beq.n	80102b8 <encode_basic_field+0x124>
                    return false;
 80102b4:	2300      	movs	r3, #0
 80102b6:	e061      	b.n	801037c <encode_basic_field+0x1e8>
            
                if (!func(stream, field, pData))
 80102b8:	697b      	ldr	r3, [r7, #20]
 80102ba:	687a      	ldr	r2, [r7, #4]
 80102bc:	68b9      	ldr	r1, [r7, #8]
 80102be:	68f8      	ldr	r0, [r7, #12]
 80102c0:	4798      	blx	r3
 80102c2:	4603      	mov	r3, r0
 80102c4:	f083 0301 	eor.w	r3, r3, #1
 80102c8:	b2db      	uxtb	r3, r3
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d050      	beq.n	8010370 <encode_basic_field+0x1dc>
                    return false;
 80102ce:	2300      	movs	r3, #0
 80102d0:	e054      	b.n	801037c <encode_basic_field+0x1e8>
            }
            break;
        
        case PB_HTYPE_REPEATED: {
            pb_size_t count;
            if (field->size_offset != 0) {
 80102d2:	68bb      	ldr	r3, [r7, #8]
 80102d4:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 80102d8:	b21b      	sxth	r3, r3
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d003      	beq.n	80102e6 <encode_basic_field+0x152>
                count = *(const pb_size_t*)pSize;
 80102de:	69fb      	ldr	r3, [r7, #28]
 80102e0:	881b      	ldrh	r3, [r3, #0]
 80102e2:	837b      	strh	r3, [r7, #26]
 80102e4:	e005      	b.n	80102f2 <encode_basic_field+0x15e>
            } else {
                count = field->array_size;
 80102e6:	68bb      	ldr	r3, [r7, #8]
 80102e8:	7a5a      	ldrb	r2, [r3, #9]
 80102ea:	7a9b      	ldrb	r3, [r3, #10]
 80102ec:	021b      	lsls	r3, r3, #8
 80102ee:	4313      	orrs	r3, r2
 80102f0:	837b      	strh	r3, [r7, #26]
            }
            if (!encode_array(stream, field, pData, count, func))
 80102f2:	8b7a      	ldrh	r2, [r7, #26]
 80102f4:	697b      	ldr	r3, [r7, #20]
 80102f6:	9300      	str	r3, [sp, #0]
 80102f8:	4613      	mov	r3, r2
 80102fa:	687a      	ldr	r2, [r7, #4]
 80102fc:	68b9      	ldr	r1, [r7, #8]
 80102fe:	68f8      	ldr	r0, [r7, #12]
 8010300:	f7ff fd6c 	bl	800fddc <encode_array>
 8010304:	4603      	mov	r3, r0
 8010306:	f083 0301 	eor.w	r3, r3, #1
 801030a:	b2db      	uxtb	r3, r3
 801030c:	2b00      	cmp	r3, #0
 801030e:	d031      	beq.n	8010374 <encode_basic_field+0x1e0>
                return false;
 8010310:	2300      	movs	r3, #0
 8010312:	e033      	b.n	801037c <encode_basic_field+0x1e8>
            break;
        }
        
        case PB_HTYPE_ONEOF:
            if (*(const pb_size_t*)pSize == field->tag)
 8010314:	69fb      	ldr	r3, [r7, #28]
 8010316:	881a      	ldrh	r2, [r3, #0]
 8010318:	68bb      	ldr	r3, [r7, #8]
 801031a:	881b      	ldrh	r3, [r3, #0]
 801031c:	b29b      	uxth	r3, r3
 801031e:	429a      	cmp	r2, r3
 8010320:	d12a      	bne.n	8010378 <encode_basic_field+0x1e4>
            {
                if (!pb_encode_tag_for_field(stream, field))
 8010322:	68b9      	ldr	r1, [r7, #8]
 8010324:	68f8      	ldr	r0, [r7, #12]
 8010326:	f000 fa63 	bl	80107f0 <pb_encode_tag_for_field>
 801032a:	4603      	mov	r3, r0
 801032c:	f083 0301 	eor.w	r3, r3, #1
 8010330:	b2db      	uxtb	r3, r3
 8010332:	2b00      	cmp	r3, #0
 8010334:	d001      	beq.n	801033a <encode_basic_field+0x1a6>
                    return false;
 8010336:	2300      	movs	r3, #0
 8010338:	e020      	b.n	801037c <encode_basic_field+0x1e8>

                if (!func(stream, field, pData))
 801033a:	697b      	ldr	r3, [r7, #20]
 801033c:	687a      	ldr	r2, [r7, #4]
 801033e:	68b9      	ldr	r1, [r7, #8]
 8010340:	68f8      	ldr	r0, [r7, #12]
 8010342:	4798      	blx	r3
 8010344:	4603      	mov	r3, r0
 8010346:	f083 0301 	eor.w	r3, r3, #1
 801034a:	b2db      	uxtb	r3, r3
 801034c:	2b00      	cmp	r3, #0
 801034e:	d013      	beq.n	8010378 <encode_basic_field+0x1e4>
                    return false;
 8010350:	2300      	movs	r3, #0
 8010352:	e013      	b.n	801037c <encode_basic_field+0x1e8>
            }
            break;
            
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	691b      	ldr	r3, [r3, #16]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d002      	beq.n	8010362 <encode_basic_field+0x1ce>
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	691b      	ldr	r3, [r3, #16]
 8010360:	e000      	b.n	8010364 <encode_basic_field+0x1d0>
 8010362:	4b0a      	ldr	r3, [pc, #40]	; (801038c <encode_basic_field+0x1f8>)
 8010364:	68fa      	ldr	r2, [r7, #12]
 8010366:	6113      	str	r3, [r2, #16]
 8010368:	2300      	movs	r3, #0
 801036a:	e007      	b.n	801037c <encode_basic_field+0x1e8>
            break;
 801036c:	bf00      	nop
 801036e:	e004      	b.n	801037a <encode_basic_field+0x1e6>
            break;
 8010370:	bf00      	nop
 8010372:	e002      	b.n	801037a <encode_basic_field+0x1e6>
            break;
 8010374:	bf00      	nop
 8010376:	e000      	b.n	801037a <encode_basic_field+0x1e6>
            break;
 8010378:	bf00      	nop
    }
    
    return true;
 801037a:	2301      	movs	r3, #1
}
 801037c:	4618      	mov	r0, r3
 801037e:	3720      	adds	r7, #32
 8010380:	46bd      	mov	sp, r7
 8010382:	bd80      	pop	{r7, pc}
 8010384:	08017688 	.word	0x08017688
 8010388:	08015b64 	.word	0x08015b64
 801038c:	08015b7c 	.word	0x08015b7c

08010390 <encode_callback_field>:

/* Encode a field with callback semantics. This means that a user function is
 * called to provide and encode the actual data. */
static bool checkreturn encode_callback_field(pb_ostream_t *stream,
    const pb_field_t *field, const void *pData)
{
 8010390:	b580      	push	{r7, lr}
 8010392:	b086      	sub	sp, #24
 8010394:	af00      	add	r7, sp, #0
 8010396:	60f8      	str	r0, [r7, #12]
 8010398:	60b9      	str	r1, [r7, #8]
 801039a:	607a      	str	r2, [r7, #4]
    const pb_callback_t *callback = (const pb_callback_t*)pData;
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	617b      	str	r3, [r7, #20]
    
#ifdef PB_OLD_CALLBACK_STYLE
    const void *arg = callback->arg;
#else
    void * const *arg = &(callback->arg);
 80103a0:	697b      	ldr	r3, [r7, #20]
 80103a2:	3304      	adds	r3, #4
 80103a4:	613b      	str	r3, [r7, #16]
#endif    
    
    if (callback->funcs.encode != NULL)
 80103a6:	697b      	ldr	r3, [r7, #20]
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d017      	beq.n	80103de <encode_callback_field+0x4e>
    {
        if (!callback->funcs.encode(stream, field, arg))
 80103ae:	697b      	ldr	r3, [r7, #20]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	693a      	ldr	r2, [r7, #16]
 80103b4:	68b9      	ldr	r1, [r7, #8]
 80103b6:	68f8      	ldr	r0, [r7, #12]
 80103b8:	4798      	blx	r3
 80103ba:	4603      	mov	r3, r0
 80103bc:	f083 0301 	eor.w	r3, r3, #1
 80103c0:	b2db      	uxtb	r3, r3
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d00b      	beq.n	80103de <encode_callback_field+0x4e>
            PB_RETURN_ERROR(stream, "callback error");
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	691b      	ldr	r3, [r3, #16]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d002      	beq.n	80103d4 <encode_callback_field+0x44>
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	691b      	ldr	r3, [r3, #16]
 80103d2:	e000      	b.n	80103d6 <encode_callback_field+0x46>
 80103d4:	4b04      	ldr	r3, [pc, #16]	; (80103e8 <encode_callback_field+0x58>)
 80103d6:	68fa      	ldr	r2, [r7, #12]
 80103d8:	6113      	str	r3, [r2, #16]
 80103da:	2300      	movs	r3, #0
 80103dc:	e000      	b.n	80103e0 <encode_callback_field+0x50>
    }
    return true;
 80103de:	2301      	movs	r3, #1
}
 80103e0:	4618      	mov	r0, r3
 80103e2:	3718      	adds	r7, #24
 80103e4:	46bd      	mov	sp, r7
 80103e6:	bd80      	pop	{r7, pc}
 80103e8:	08015b90 	.word	0x08015b90

080103ec <encode_field>:

/* Encode a single field of any callback or static type. */
static bool checkreturn encode_field(pb_ostream_t *stream,
    const pb_field_t *field, const void *pData)
{
 80103ec:	b580      	push	{r7, lr}
 80103ee:	b084      	sub	sp, #16
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	60f8      	str	r0, [r7, #12]
 80103f4:	60b9      	str	r1, [r7, #8]
 80103f6:	607a      	str	r2, [r7, #4]
    switch (PB_ATYPE(field->type))
 80103f8:	68bb      	ldr	r3, [r7, #8]
 80103fa:	789b      	ldrb	r3, [r3, #2]
 80103fc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010400:	2b40      	cmp	r3, #64	; 0x40
 8010402:	d00a      	beq.n	801041a <encode_field+0x2e>
 8010404:	2b80      	cmp	r3, #128	; 0x80
 8010406:	d001      	beq.n	801040c <encode_field+0x20>
 8010408:	2b00      	cmp	r3, #0
 801040a:	d10d      	bne.n	8010428 <encode_field+0x3c>
    {
        case PB_ATYPE_STATIC:
        case PB_ATYPE_POINTER:
            return encode_basic_field(stream, field, pData);
 801040c:	687a      	ldr	r2, [r7, #4]
 801040e:	68b9      	ldr	r1, [r7, #8]
 8010410:	68f8      	ldr	r0, [r7, #12]
 8010412:	f7ff febf 	bl	8010194 <encode_basic_field>
 8010416:	4603      	mov	r3, r0
 8010418:	e011      	b.n	801043e <encode_field+0x52>
        
        case PB_ATYPE_CALLBACK:
            return encode_callback_field(stream, field, pData);
 801041a:	687a      	ldr	r2, [r7, #4]
 801041c:	68b9      	ldr	r1, [r7, #8]
 801041e:	68f8      	ldr	r0, [r7, #12]
 8010420:	f7ff ffb6 	bl	8010390 <encode_callback_field>
 8010424:	4603      	mov	r3, r0
 8010426:	e00a      	b.n	801043e <encode_field+0x52>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	691b      	ldr	r3, [r3, #16]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d002      	beq.n	8010436 <encode_field+0x4a>
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	691b      	ldr	r3, [r3, #16]
 8010434:	e000      	b.n	8010438 <encode_field+0x4c>
 8010436:	4b04      	ldr	r3, [pc, #16]	; (8010448 <encode_field+0x5c>)
 8010438:	68fa      	ldr	r2, [r7, #12]
 801043a:	6113      	str	r3, [r2, #16]
 801043c:	2300      	movs	r3, #0
    }
}
 801043e:	4618      	mov	r0, r3
 8010440:	3710      	adds	r7, #16
 8010442:	46bd      	mov	sp, r7
 8010444:	bd80      	pop	{r7, pc}
 8010446:	bf00      	nop
 8010448:	08015b7c 	.word	0x08015b7c

0801044c <default_extension_encoder>:

/* Default handler for extension fields. Expects to have a pb_field_t
 * pointer in the extension->type->arg field. */
static bool checkreturn default_extension_encoder(pb_ostream_t *stream,
    const pb_extension_t *extension)
{
 801044c:	b580      	push	{r7, lr}
 801044e:	b084      	sub	sp, #16
 8010450:	af00      	add	r7, sp, #0
 8010452:	6078      	str	r0, [r7, #4]
 8010454:	6039      	str	r1, [r7, #0]
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 8010456:	683b      	ldr	r3, [r7, #0]
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	689b      	ldr	r3, [r3, #8]
 801045c:	60fb      	str	r3, [r7, #12]
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	789b      	ldrb	r3, [r3, #2]
 8010462:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010466:	2b80      	cmp	r3, #128	; 0x80
 8010468:	d108      	bne.n	801047c <default_extension_encoder+0x30>
    {
        /* For pointer extensions, the pointer is stored directly
         * in the extension structure. This avoids having an extra
         * indirection. */
        return encode_field(stream, field, &extension->dest);
 801046a:	683b      	ldr	r3, [r7, #0]
 801046c:	3304      	adds	r3, #4
 801046e:	461a      	mov	r2, r3
 8010470:	68f9      	ldr	r1, [r7, #12]
 8010472:	6878      	ldr	r0, [r7, #4]
 8010474:	f7ff ffba 	bl	80103ec <encode_field>
 8010478:	4603      	mov	r3, r0
 801047a:	e007      	b.n	801048c <default_extension_encoder+0x40>
    }
    else
    {
        return encode_field(stream, field, extension->dest);
 801047c:	683b      	ldr	r3, [r7, #0]
 801047e:	685b      	ldr	r3, [r3, #4]
 8010480:	461a      	mov	r2, r3
 8010482:	68f9      	ldr	r1, [r7, #12]
 8010484:	6878      	ldr	r0, [r7, #4]
 8010486:	f7ff ffb1 	bl	80103ec <encode_field>
 801048a:	4603      	mov	r3, r0
    }
}
 801048c:	4618      	mov	r0, r3
 801048e:	3710      	adds	r7, #16
 8010490:	46bd      	mov	sp, r7
 8010492:	bd80      	pop	{r7, pc}

08010494 <encode_extension_field>:

/* Walk through all the registered extensions and give them a chance
 * to encode themselves. */
static bool checkreturn encode_extension_field(pb_ostream_t *stream,
    const pb_field_t *field, const void *pData)
{
 8010494:	b580      	push	{r7, lr}
 8010496:	b086      	sub	sp, #24
 8010498:	af00      	add	r7, sp, #0
 801049a:	60f8      	str	r0, [r7, #12]
 801049c:	60b9      	str	r1, [r7, #8]
 801049e:	607a      	str	r2, [r7, #4]
    const pb_extension_t *extension = *(const pb_extension_t* const *)pData;
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	617b      	str	r3, [r7, #20]
    PB_UNUSED(field);
    
    while (extension)
 80104a6:	e01e      	b.n	80104e6 <encode_extension_field+0x52>
    {
        bool status;
        if (extension->type->encode)
 80104a8:	697b      	ldr	r3, [r7, #20]
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	685b      	ldr	r3, [r3, #4]
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d008      	beq.n	80104c4 <encode_extension_field+0x30>
            status = extension->type->encode(stream, extension);
 80104b2:	697b      	ldr	r3, [r7, #20]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	685b      	ldr	r3, [r3, #4]
 80104b8:	6979      	ldr	r1, [r7, #20]
 80104ba:	68f8      	ldr	r0, [r7, #12]
 80104bc:	4798      	blx	r3
 80104be:	4603      	mov	r3, r0
 80104c0:	74fb      	strb	r3, [r7, #19]
 80104c2:	e005      	b.n	80104d0 <encode_extension_field+0x3c>
        else
            status = default_extension_encoder(stream, extension);
 80104c4:	6979      	ldr	r1, [r7, #20]
 80104c6:	68f8      	ldr	r0, [r7, #12]
 80104c8:	f7ff ffc0 	bl	801044c <default_extension_encoder>
 80104cc:	4603      	mov	r3, r0
 80104ce:	74fb      	strb	r3, [r7, #19]

        if (!status)
 80104d0:	7cfb      	ldrb	r3, [r7, #19]
 80104d2:	f083 0301 	eor.w	r3, r3, #1
 80104d6:	b2db      	uxtb	r3, r3
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d001      	beq.n	80104e0 <encode_extension_field+0x4c>
            return false;
 80104dc:	2300      	movs	r3, #0
 80104de:	e006      	b.n	80104ee <encode_extension_field+0x5a>
        
        extension = extension->next;
 80104e0:	697b      	ldr	r3, [r7, #20]
 80104e2:	689b      	ldr	r3, [r3, #8]
 80104e4:	617b      	str	r3, [r7, #20]
    while (extension)
 80104e6:	697b      	ldr	r3, [r7, #20]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d1dd      	bne.n	80104a8 <encode_extension_field+0x14>
    }
    
    return true;
 80104ec:	2301      	movs	r3, #1
}
 80104ee:	4618      	mov	r0, r3
 80104f0:	3718      	adds	r7, #24
 80104f2:	46bd      	mov	sp, r7
 80104f4:	bd80      	pop	{r7, pc}

080104f6 <pb_const_cast>:
/*********************
 * Encode all fields *
 *********************/

static void *pb_const_cast(const void *p)
{
 80104f6:	b480      	push	{r7}
 80104f8:	b085      	sub	sp, #20
 80104fa:	af00      	add	r7, sp, #0
 80104fc:	6078      	str	r0, [r7, #4]
     * logic for both encoding and decoding. */
    union {
        void *p1;
        const void *p2;
    } t;
    t.p2 = p;
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	60fb      	str	r3, [r7, #12]
    return t.p1;
 8010502:	68fb      	ldr	r3, [r7, #12]
}
 8010504:	4618      	mov	r0, r3
 8010506:	3714      	adds	r7, #20
 8010508:	46bd      	mov	sp, r7
 801050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801050e:	4770      	bx	lr

08010510 <pb_encode>:

bool checkreturn pb_encode(pb_ostream_t *stream, const pb_field_t fields[], const void *src_struct)
{
 8010510:	b580      	push	{r7, lr}
 8010512:	b08a      	sub	sp, #40	; 0x28
 8010514:	af00      	add	r7, sp, #0
 8010516:	60f8      	str	r0, [r7, #12]
 8010518:	60b9      	str	r1, [r7, #8]
 801051a:	607a      	str	r2, [r7, #4]
    pb_field_iter_t iter;
    if (!pb_field_iter_begin(&iter, fields, pb_const_cast(src_struct)))
 801051c:	6878      	ldr	r0, [r7, #4]
 801051e:	f7ff ffea 	bl	80104f6 <pb_const_cast>
 8010522:	4602      	mov	r2, r0
 8010524:	f107 0310 	add.w	r3, r7, #16
 8010528:	68b9      	ldr	r1, [r7, #8]
 801052a:	4618      	mov	r0, r3
 801052c:	f7fd fe72 	bl	800e214 <pb_field_iter_begin>
 8010530:	4603      	mov	r3, r0
 8010532:	f083 0301 	eor.w	r3, r3, #1
 8010536:	b2db      	uxtb	r3, r3
 8010538:	2b00      	cmp	r3, #0
 801053a:	d001      	beq.n	8010540 <pb_encode+0x30>
        return true; /* Empty message type */
 801053c:	2301      	movs	r3, #1
 801053e:	e02a      	b.n	8010596 <pb_encode+0x86>
    
    do {
        if (PB_LTYPE(iter.pos->type) == PB_LTYPE_EXTENSION)
 8010540:	697b      	ldr	r3, [r7, #20]
 8010542:	789b      	ldrb	r3, [r3, #2]
 8010544:	f003 030f 	and.w	r3, r3, #15
 8010548:	2b08      	cmp	r3, #8
 801054a:	d10d      	bne.n	8010568 <pb_encode+0x58>
        {
            /* Special case for the extension field placeholder */
            if (!encode_extension_field(stream, iter.pos, iter.pData))
 801054c:	697b      	ldr	r3, [r7, #20]
 801054e:	6a3a      	ldr	r2, [r7, #32]
 8010550:	4619      	mov	r1, r3
 8010552:	68f8      	ldr	r0, [r7, #12]
 8010554:	f7ff ff9e 	bl	8010494 <encode_extension_field>
 8010558:	4603      	mov	r3, r0
 801055a:	f083 0301 	eor.w	r3, r3, #1
 801055e:	b2db      	uxtb	r3, r3
 8010560:	2b00      	cmp	r3, #0
 8010562:	d00f      	beq.n	8010584 <pb_encode+0x74>
                return false;
 8010564:	2300      	movs	r3, #0
 8010566:	e016      	b.n	8010596 <pb_encode+0x86>
        }
        else
        {
            /* Regular field */
            if (!encode_field(stream, iter.pos, iter.pData))
 8010568:	697b      	ldr	r3, [r7, #20]
 801056a:	6a3a      	ldr	r2, [r7, #32]
 801056c:	4619      	mov	r1, r3
 801056e:	68f8      	ldr	r0, [r7, #12]
 8010570:	f7ff ff3c 	bl	80103ec <encode_field>
 8010574:	4603      	mov	r3, r0
 8010576:	f083 0301 	eor.w	r3, r3, #1
 801057a:	b2db      	uxtb	r3, r3
 801057c:	2b00      	cmp	r3, #0
 801057e:	d001      	beq.n	8010584 <pb_encode+0x74>
                return false;
 8010580:	2300      	movs	r3, #0
 8010582:	e008      	b.n	8010596 <pb_encode+0x86>
        }
    } while (pb_field_iter_next(&iter));
 8010584:	f107 0310 	add.w	r3, r7, #16
 8010588:	4618      	mov	r0, r3
 801058a:	f7fd fe78 	bl	800e27e <pb_field_iter_next>
 801058e:	4603      	mov	r3, r0
 8010590:	2b00      	cmp	r3, #0
 8010592:	d1d5      	bne.n	8010540 <pb_encode+0x30>
    
    return true;
 8010594:	2301      	movs	r3, #1
}
 8010596:	4618      	mov	r0, r3
 8010598:	3728      	adds	r7, #40	; 0x28
 801059a:	46bd      	mov	sp, r7
 801059c:	bd80      	pop	{r7, pc}

0801059e <pb_encode_varint>:
  return pb_write(stream, buffer, i);
}
#endif

bool checkreturn pb_encode_varint(pb_ostream_t *stream, pb_uint64_t value)
{
 801059e:	b590      	push	{r4, r7, lr}
 80105a0:	b08b      	sub	sp, #44	; 0x2c
 80105a2:	af00      	add	r7, sp, #0
 80105a4:	60f8      	str	r0, [r7, #12]
 80105a6:	e9c7 2300 	strd	r2, r3, [r7]
    pb_byte_t buffer[10];
    size_t i = 0;
 80105aa:	2300      	movs	r3, #0
 80105ac:	627b      	str	r3, [r7, #36]	; 0x24
    
    if (value <= 0x7F)
 80105ae:	e9d7 3400 	ldrd	r3, r4, [r7]
 80105b2:	2c00      	cmp	r4, #0
 80105b4:	bf08      	it	eq
 80105b6:	2b80      	cmpeq	r3, #128	; 0x80
 80105b8:	d223      	bcs.n	8010602 <pb_encode_varint+0x64>
    {
        pb_byte_t v = (pb_byte_t)value;
 80105ba:	783b      	ldrb	r3, [r7, #0]
 80105bc:	75fb      	strb	r3, [r7, #23]
        return pb_write(stream, &v, 1);
 80105be:	f107 0317 	add.w	r3, r7, #23
 80105c2:	2201      	movs	r2, #1
 80105c4:	4619      	mov	r1, r3
 80105c6:	68f8      	ldr	r0, [r7, #12]
 80105c8:	f7ff fbc2 	bl	800fd50 <pb_write>
 80105cc:	4603      	mov	r3, r0
 80105ce:	e035      	b.n	801063c <pb_encode_varint+0x9e>
    }
    
    while (value)
    {
        buffer[i] = (pb_byte_t)((value & 0x7F) | 0x80);
 80105d0:	783b      	ldrb	r3, [r7, #0]
 80105d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80105d6:	b2d9      	uxtb	r1, r3
 80105d8:	f107 0218 	add.w	r2, r7, #24
 80105dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105de:	4413      	add	r3, r2
 80105e0:	460a      	mov	r2, r1
 80105e2:	701a      	strb	r2, [r3, #0]
        value >>= 7;
 80105e4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80105e8:	f04f 0300 	mov.w	r3, #0
 80105ec:	f04f 0400 	mov.w	r4, #0
 80105f0:	09cb      	lsrs	r3, r1, #7
 80105f2:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80105f6:	09d4      	lsrs	r4, r2, #7
 80105f8:	e9c7 3400 	strd	r3, r4, [r7]
        i++;
 80105fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105fe:	3301      	adds	r3, #1
 8010600:	627b      	str	r3, [r7, #36]	; 0x24
    while (value)
 8010602:	e9d7 3400 	ldrd	r3, r4, [r7]
 8010606:	4323      	orrs	r3, r4
 8010608:	d1e2      	bne.n	80105d0 <pb_encode_varint+0x32>
    }
    buffer[i-1] &= 0x7F; /* Unset top bit on last byte */
 801060a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801060c:	3b01      	subs	r3, #1
 801060e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010612:	4413      	add	r3, r2
 8010614:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8010618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801061a:	3b01      	subs	r3, #1
 801061c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8010620:	b2d2      	uxtb	r2, r2
 8010622:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8010626:	440b      	add	r3, r1
 8010628:	f803 2c10 	strb.w	r2, [r3, #-16]
    
    return pb_write(stream, buffer, i);
 801062c:	f107 0318 	add.w	r3, r7, #24
 8010630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010632:	4619      	mov	r1, r3
 8010634:	68f8      	ldr	r0, [r7, #12]
 8010636:	f7ff fb8b 	bl	800fd50 <pb_write>
 801063a:	4603      	mov	r3, r0
}
 801063c:	4618      	mov	r0, r3
 801063e:	372c      	adds	r7, #44	; 0x2c
 8010640:	46bd      	mov	sp, r7
 8010642:	bd90      	pop	{r4, r7, pc}

08010644 <pb_encode_svarint>:

bool checkreturn pb_encode_svarint(pb_ostream_t *stream, pb_int64_t value)
{
 8010644:	b590      	push	{r4, r7, lr}
 8010646:	b087      	sub	sp, #28
 8010648:	af00      	add	r7, sp, #0
 801064a:	60f8      	str	r0, [r7, #12]
 801064c:	e9c7 2300 	strd	r2, r3, [r7]
    pb_uint64_t zigzagged;
    if (value < 0)
 8010650:	e9d7 3400 	ldrd	r3, r4, [r7]
 8010654:	2b00      	cmp	r3, #0
 8010656:	f174 0300 	sbcs.w	r3, r4, #0
 801065a:	da0d      	bge.n	8010678 <pb_encode_svarint+0x34>
        zigzagged = ~((pb_uint64_t)value << 1);
 801065c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8010660:	184b      	adds	r3, r1, r1
 8010662:	eb42 0402 	adc.w	r4, r2, r2
 8010666:	4619      	mov	r1, r3
 8010668:	4622      	mov	r2, r4
 801066a:	ea6f 0301 	mvn.w	r3, r1
 801066e:	ea6f 0402 	mvn.w	r4, r2
 8010672:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8010676:	e006      	b.n	8010686 <pb_encode_svarint+0x42>
    else
        zigzagged = (pb_uint64_t)value << 1;
 8010678:	e9d7 1200 	ldrd	r1, r2, [r7]
 801067c:	184b      	adds	r3, r1, r1
 801067e:	eb42 0402 	adc.w	r4, r2, r2
 8010682:	e9c7 3404 	strd	r3, r4, [r7, #16]
    
    return pb_encode_varint(stream, zigzagged);
 8010686:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801068a:	68f8      	ldr	r0, [r7, #12]
 801068c:	f7ff ff87 	bl	801059e <pb_encode_varint>
 8010690:	4603      	mov	r3, r0
}
 8010692:	4618      	mov	r0, r3
 8010694:	371c      	adds	r7, #28
 8010696:	46bd      	mov	sp, r7
 8010698:	bd90      	pop	{r4, r7, pc}

0801069a <pb_encode_fixed32>:

bool checkreturn pb_encode_fixed32(pb_ostream_t *stream, const void *value)
{
 801069a:	b580      	push	{r7, lr}
 801069c:	b084      	sub	sp, #16
 801069e:	af00      	add	r7, sp, #0
 80106a0:	6078      	str	r0, [r7, #4]
 80106a2:	6039      	str	r1, [r7, #0]
    uint32_t val = *(const uint32_t*)value;
 80106a4:	683b      	ldr	r3, [r7, #0]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	60fb      	str	r3, [r7, #12]
    pb_byte_t bytes[4];
    bytes[0] = (pb_byte_t)(val & 0xFF);
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	b2db      	uxtb	r3, r3
 80106ae:	723b      	strb	r3, [r7, #8]
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	0a1b      	lsrs	r3, r3, #8
 80106b4:	b2db      	uxtb	r3, r3
 80106b6:	727b      	strb	r3, [r7, #9]
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	0c1b      	lsrs	r3, r3, #16
 80106bc:	b2db      	uxtb	r3, r3
 80106be:	72bb      	strb	r3, [r7, #10]
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	0e1b      	lsrs	r3, r3, #24
 80106c4:	b2db      	uxtb	r3, r3
 80106c6:	72fb      	strb	r3, [r7, #11]
    return pb_write(stream, bytes, 4);
 80106c8:	f107 0308 	add.w	r3, r7, #8
 80106cc:	2204      	movs	r2, #4
 80106ce:	4619      	mov	r1, r3
 80106d0:	6878      	ldr	r0, [r7, #4]
 80106d2:	f7ff fb3d 	bl	800fd50 <pb_write>
 80106d6:	4603      	mov	r3, r0
}
 80106d8:	4618      	mov	r0, r3
 80106da:	3710      	adds	r7, #16
 80106dc:	46bd      	mov	sp, r7
 80106de:	bd80      	pop	{r7, pc}

080106e0 <pb_encode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_encode_fixed64(pb_ostream_t *stream, const void *value)
{
 80106e0:	b590      	push	{r4, r7, lr}
 80106e2:	b087      	sub	sp, #28
 80106e4:	af00      	add	r7, sp, #0
 80106e6:	6078      	str	r0, [r7, #4]
 80106e8:	6039      	str	r1, [r7, #0]
    uint64_t val = *(const uint64_t*)value;
 80106ea:	683b      	ldr	r3, [r7, #0]
 80106ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 80106f0:	e9c7 3404 	strd	r3, r4, [r7, #16]
    pb_byte_t bytes[8];
    bytes[0] = (pb_byte_t)(val & 0xFF);
 80106f4:	7c3b      	ldrb	r3, [r7, #16]
 80106f6:	723b      	strb	r3, [r7, #8]
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
 80106f8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80106fc:	f04f 0300 	mov.w	r3, #0
 8010700:	f04f 0400 	mov.w	r4, #0
 8010704:	0a0b      	lsrs	r3, r1, #8
 8010706:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801070a:	0a14      	lsrs	r4, r2, #8
 801070c:	b2db      	uxtb	r3, r3
 801070e:	727b      	strb	r3, [r7, #9]
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
 8010710:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8010714:	f04f 0300 	mov.w	r3, #0
 8010718:	f04f 0400 	mov.w	r4, #0
 801071c:	0c0b      	lsrs	r3, r1, #16
 801071e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010722:	0c14      	lsrs	r4, r2, #16
 8010724:	b2db      	uxtb	r3, r3
 8010726:	72bb      	strb	r3, [r7, #10]
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
 8010728:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801072c:	f04f 0300 	mov.w	r3, #0
 8010730:	f04f 0400 	mov.w	r4, #0
 8010734:	0e0b      	lsrs	r3, r1, #24
 8010736:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801073a:	0e14      	lsrs	r4, r2, #24
 801073c:	b2db      	uxtb	r3, r3
 801073e:	72fb      	strb	r3, [r7, #11]
    bytes[4] = (pb_byte_t)((val >> 32) & 0xFF);
 8010740:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8010744:	f04f 0300 	mov.w	r3, #0
 8010748:	f04f 0400 	mov.w	r4, #0
 801074c:	0013      	movs	r3, r2
 801074e:	2400      	movs	r4, #0
 8010750:	b2db      	uxtb	r3, r3
 8010752:	733b      	strb	r3, [r7, #12]
    bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
 8010754:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8010758:	f04f 0300 	mov.w	r3, #0
 801075c:	f04f 0400 	mov.w	r4, #0
 8010760:	0a13      	lsrs	r3, r2, #8
 8010762:	2400      	movs	r4, #0
 8010764:	b2db      	uxtb	r3, r3
 8010766:	737b      	strb	r3, [r7, #13]
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
 8010768:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801076c:	f04f 0300 	mov.w	r3, #0
 8010770:	f04f 0400 	mov.w	r4, #0
 8010774:	0c13      	lsrs	r3, r2, #16
 8010776:	2400      	movs	r4, #0
 8010778:	b2db      	uxtb	r3, r3
 801077a:	73bb      	strb	r3, [r7, #14]
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
 801077c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8010780:	f04f 0300 	mov.w	r3, #0
 8010784:	f04f 0400 	mov.w	r4, #0
 8010788:	0e13      	lsrs	r3, r2, #24
 801078a:	2400      	movs	r4, #0
 801078c:	b2db      	uxtb	r3, r3
 801078e:	73fb      	strb	r3, [r7, #15]
    return pb_write(stream, bytes, 8);
 8010790:	f107 0308 	add.w	r3, r7, #8
 8010794:	2208      	movs	r2, #8
 8010796:	4619      	mov	r1, r3
 8010798:	6878      	ldr	r0, [r7, #4]
 801079a:	f7ff fad9 	bl	800fd50 <pb_write>
 801079e:	4603      	mov	r3, r0
}
 80107a0:	4618      	mov	r0, r3
 80107a2:	371c      	adds	r7, #28
 80107a4:	46bd      	mov	sp, r7
 80107a6:	bd90      	pop	{r4, r7, pc}

080107a8 <pb_encode_tag>:
#endif

bool checkreturn pb_encode_tag(pb_ostream_t *stream, pb_wire_type_t wiretype, uint32_t field_number)
{
 80107a8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80107ac:	b086      	sub	sp, #24
 80107ae:	af00      	add	r7, sp, #0
 80107b0:	60f8      	str	r0, [r7, #12]
 80107b2:	607a      	str	r2, [r7, #4]
 80107b4:	460a      	mov	r2, r1
 80107b6:	72fa      	strb	r2, [r7, #11]
    pb_uint64_t tag = ((pb_uint64_t)field_number << 3) | wiretype;
 80107b8:	687a      	ldr	r2, [r7, #4]
 80107ba:	4611      	mov	r1, r2
 80107bc:	f04f 0200 	mov.w	r2, #0
 80107c0:	ea4f 7c51 	mov.w	ip, r1, lsr #29
 80107c4:	ea4f 0bc1 	mov.w	fp, r1, lsl #3
 80107c8:	7af9      	ldrb	r1, [r7, #11]
 80107ca:	f04f 0200 	mov.w	r2, #0
 80107ce:	ea4b 0301 	orr.w	r3, fp, r1
 80107d2:	ea4c 0402 	orr.w	r4, ip, r2
 80107d6:	e9c7 3404 	strd	r3, r4, [r7, #16]
    return pb_encode_varint(stream, tag);
 80107da:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80107de:	68f8      	ldr	r0, [r7, #12]
 80107e0:	f7ff fedd 	bl	801059e <pb_encode_varint>
 80107e4:	4603      	mov	r3, r0
}
 80107e6:	4618      	mov	r0, r3
 80107e8:	3718      	adds	r7, #24
 80107ea:	46bd      	mov	sp, r7
 80107ec:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080107f0 <pb_encode_tag_for_field>:

bool checkreturn pb_encode_tag_for_field(pb_ostream_t *stream, const pb_field_t *field)
{
 80107f0:	b580      	push	{r7, lr}
 80107f2:	b084      	sub	sp, #16
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	6078      	str	r0, [r7, #4]
 80107f8:	6039      	str	r1, [r7, #0]
    pb_wire_type_t wiretype;
    switch (PB_LTYPE(field->type))
 80107fa:	683b      	ldr	r3, [r7, #0]
 80107fc:	789b      	ldrb	r3, [r3, #2]
 80107fe:	f003 030f 	and.w	r3, r3, #15
 8010802:	2b09      	cmp	r3, #9
 8010804:	d822      	bhi.n	801084c <pb_encode_tag_for_field+0x5c>
 8010806:	a201      	add	r2, pc, #4	; (adr r2, 801080c <pb_encode_tag_for_field+0x1c>)
 8010808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801080c:	08010835 	.word	0x08010835
 8010810:	08010835 	.word	0x08010835
 8010814:	08010835 	.word	0x08010835
 8010818:	0801083b 	.word	0x0801083b
 801081c:	08010841 	.word	0x08010841
 8010820:	08010847 	.word	0x08010847
 8010824:	08010847 	.word	0x08010847
 8010828:	08010847 	.word	0x08010847
 801082c:	0801084d 	.word	0x0801084d
 8010830:	08010847 	.word	0x08010847
    {
        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            wiretype = PB_WT_VARINT;
 8010834:	2300      	movs	r3, #0
 8010836:	73fb      	strb	r3, [r7, #15]
            break;
 8010838:	e014      	b.n	8010864 <pb_encode_tag_for_field+0x74>
        
        case PB_LTYPE_FIXED32:
            wiretype = PB_WT_32BIT;
 801083a:	2305      	movs	r3, #5
 801083c:	73fb      	strb	r3, [r7, #15]
            break;
 801083e:	e011      	b.n	8010864 <pb_encode_tag_for_field+0x74>
        
        case PB_LTYPE_FIXED64:
            wiretype = PB_WT_64BIT;
 8010840:	2301      	movs	r3, #1
 8010842:	73fb      	strb	r3, [r7, #15]
            break;
 8010844:	e00e      	b.n	8010864 <pb_encode_tag_for_field+0x74>
        
        case PB_LTYPE_BYTES:
        case PB_LTYPE_STRING:
        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_FIXED_LENGTH_BYTES:
            wiretype = PB_WT_STRING;
 8010846:	2302      	movs	r3, #2
 8010848:	73fb      	strb	r3, [r7, #15]
            break;
 801084a:	e00b      	b.n	8010864 <pb_encode_tag_for_field+0x74>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	691b      	ldr	r3, [r3, #16]
 8010850:	2b00      	cmp	r3, #0
 8010852:	d002      	beq.n	801085a <pb_encode_tag_for_field+0x6a>
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	691b      	ldr	r3, [r3, #16]
 8010858:	e000      	b.n	801085c <pb_encode_tag_for_field+0x6c>
 801085a:	4b09      	ldr	r3, [pc, #36]	; (8010880 <pb_encode_tag_for_field+0x90>)
 801085c:	687a      	ldr	r2, [r7, #4]
 801085e:	6113      	str	r3, [r2, #16]
 8010860:	2300      	movs	r3, #0
 8010862:	e009      	b.n	8010878 <pb_encode_tag_for_field+0x88>
    }
    
    return pb_encode_tag(stream, wiretype, field->tag);
 8010864:	683b      	ldr	r3, [r7, #0]
 8010866:	881b      	ldrh	r3, [r3, #0]
 8010868:	b29b      	uxth	r3, r3
 801086a:	461a      	mov	r2, r3
 801086c:	7bfb      	ldrb	r3, [r7, #15]
 801086e:	4619      	mov	r1, r3
 8010870:	6878      	ldr	r0, [r7, #4]
 8010872:	f7ff ff99 	bl	80107a8 <pb_encode_tag>
 8010876:	4603      	mov	r3, r0
}
 8010878:	4618      	mov	r0, r3
 801087a:	3710      	adds	r7, #16
 801087c:	46bd      	mov	sp, r7
 801087e:	bd80      	pop	{r7, pc}
 8010880:	08015b7c 	.word	0x08015b7c

08010884 <pb_encode_string>:

bool checkreturn pb_encode_string(pb_ostream_t *stream, const pb_byte_t *buffer, size_t size)
{
 8010884:	b590      	push	{r4, r7, lr}
 8010886:	b085      	sub	sp, #20
 8010888:	af00      	add	r7, sp, #0
 801088a:	60f8      	str	r0, [r7, #12]
 801088c:	60b9      	str	r1, [r7, #8]
 801088e:	607a      	str	r2, [r7, #4]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	f04f 0400 	mov.w	r4, #0
 8010896:	461a      	mov	r2, r3
 8010898:	4623      	mov	r3, r4
 801089a:	68f8      	ldr	r0, [r7, #12]
 801089c:	f7ff fe7f 	bl	801059e <pb_encode_varint>
 80108a0:	4603      	mov	r3, r0
 80108a2:	f083 0301 	eor.w	r3, r3, #1
 80108a6:	b2db      	uxtb	r3, r3
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d001      	beq.n	80108b0 <pb_encode_string+0x2c>
        return false;
 80108ac:	2300      	movs	r3, #0
 80108ae:	e005      	b.n	80108bc <pb_encode_string+0x38>
    
    return pb_write(stream, buffer, size);
 80108b0:	687a      	ldr	r2, [r7, #4]
 80108b2:	68b9      	ldr	r1, [r7, #8]
 80108b4:	68f8      	ldr	r0, [r7, #12]
 80108b6:	f7ff fa4b 	bl	800fd50 <pb_write>
 80108ba:	4603      	mov	r3, r0
}
 80108bc:	4618      	mov	r0, r3
 80108be:	3714      	adds	r7, #20
 80108c0:	46bd      	mov	sp, r7
 80108c2:	bd90      	pop	{r4, r7, pc}

080108c4 <pb_encode_submessage>:

bool checkreturn pb_encode_submessage(pb_ostream_t *stream, const pb_field_t fields[], const void *src_struct)
{
 80108c4:	b590      	push	{r4, r7, lr}
 80108c6:	b08d      	sub	sp, #52	; 0x34
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	60f8      	str	r0, [r7, #12]
 80108cc:	60b9      	str	r1, [r7, #8]
 80108ce:	607a      	str	r2, [r7, #4]
    /* First calculate the message size using a non-writing substream. */
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 80108d0:	f107 0314 	add.w	r3, r7, #20
 80108d4:	2200      	movs	r2, #0
 80108d6:	601a      	str	r2, [r3, #0]
 80108d8:	605a      	str	r2, [r3, #4]
 80108da:	609a      	str	r2, [r3, #8]
 80108dc:	60da      	str	r2, [r3, #12]
 80108de:	611a      	str	r2, [r3, #16]
    size_t size;
    bool status;
    
    if (!pb_encode(&substream, fields, src_struct))
 80108e0:	f107 0314 	add.w	r3, r7, #20
 80108e4:	687a      	ldr	r2, [r7, #4]
 80108e6:	68b9      	ldr	r1, [r7, #8]
 80108e8:	4618      	mov	r0, r3
 80108ea:	f7ff fe11 	bl	8010510 <pb_encode>
 80108ee:	4603      	mov	r3, r0
 80108f0:	f083 0301 	eor.w	r3, r3, #1
 80108f4:	b2db      	uxtb	r3, r3
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d004      	beq.n	8010904 <pb_encode_submessage+0x40>
    {
#ifndef PB_NO_ERRMSG
        stream->errmsg = substream.errmsg;
 80108fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	611a      	str	r2, [r3, #16]
#endif
        return false;
 8010900:	2300      	movs	r3, #0
 8010902:	e064      	b.n	80109ce <pb_encode_submessage+0x10a>
    }
    
    size = substream.bytes_written;
 8010904:	6a3b      	ldr	r3, [r7, #32]
 8010906:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8010908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801090a:	f04f 0400 	mov.w	r4, #0
 801090e:	461a      	mov	r2, r3
 8010910:	4623      	mov	r3, r4
 8010912:	68f8      	ldr	r0, [r7, #12]
 8010914:	f7ff fe43 	bl	801059e <pb_encode_varint>
 8010918:	4603      	mov	r3, r0
 801091a:	f083 0301 	eor.w	r3, r3, #1
 801091e:	b2db      	uxtb	r3, r3
 8010920:	2b00      	cmp	r3, #0
 8010922:	d001      	beq.n	8010928 <pb_encode_submessage+0x64>
        return false;
 8010924:	2300      	movs	r3, #0
 8010926:	e052      	b.n	80109ce <pb_encode_submessage+0x10a>
    
    if (stream->callback == NULL)
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d106      	bne.n	801093e <pb_encode_submessage+0x7a>
        return pb_write(stream, NULL, size); /* Just sizing */
 8010930:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010932:	2100      	movs	r1, #0
 8010934:	68f8      	ldr	r0, [r7, #12]
 8010936:	f7ff fa0b 	bl	800fd50 <pb_write>
 801093a:	4603      	mov	r3, r0
 801093c:	e047      	b.n	80109ce <pb_encode_submessage+0x10a>
    
    if (stream->bytes_written + size > stream->max_size)
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	68da      	ldr	r2, [r3, #12]
 8010942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010944:	441a      	add	r2, r3
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	689b      	ldr	r3, [r3, #8]
 801094a:	429a      	cmp	r2, r3
 801094c:	d90b      	bls.n	8010966 <pb_encode_submessage+0xa2>
        PB_RETURN_ERROR(stream, "stream full");
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	691b      	ldr	r3, [r3, #16]
 8010952:	2b00      	cmp	r3, #0
 8010954:	d002      	beq.n	801095c <pb_encode_submessage+0x98>
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	691b      	ldr	r3, [r3, #16]
 801095a:	e000      	b.n	801095e <pb_encode_submessage+0x9a>
 801095c:	4b1e      	ldr	r3, [pc, #120]	; (80109d8 <pb_encode_submessage+0x114>)
 801095e:	68fa      	ldr	r2, [r7, #12]
 8010960:	6113      	str	r3, [r2, #16]
 8010962:	2300      	movs	r3, #0
 8010964:	e033      	b.n	80109ce <pb_encode_submessage+0x10a>
        
    /* Use a substream to verify that a callback doesn't write more than
     * what it did the first time. */
    substream.callback = stream->callback;
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	617b      	str	r3, [r7, #20]
    substream.state = stream->state;
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	685b      	ldr	r3, [r3, #4]
 8010970:	61bb      	str	r3, [r7, #24]
    substream.max_size = size;
 8010972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010974:	61fb      	str	r3, [r7, #28]
    substream.bytes_written = 0;
 8010976:	2300      	movs	r3, #0
 8010978:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    substream.errmsg = NULL;
 801097a:	2300      	movs	r3, #0
 801097c:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    
    status = pb_encode(&substream, fields, src_struct);
 801097e:	f107 0314 	add.w	r3, r7, #20
 8010982:	687a      	ldr	r2, [r7, #4]
 8010984:	68b9      	ldr	r1, [r7, #8]
 8010986:	4618      	mov	r0, r3
 8010988:	f7ff fdc2 	bl	8010510 <pb_encode>
 801098c:	4603      	mov	r3, r0
 801098e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    
    stream->bytes_written += substream.bytes_written;
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	68da      	ldr	r2, [r3, #12]
 8010996:	6a3b      	ldr	r3, [r7, #32]
 8010998:	441a      	add	r2, r3
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	60da      	str	r2, [r3, #12]
    stream->state = substream.state;
 801099e:	69ba      	ldr	r2, [r7, #24]
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	605a      	str	r2, [r3, #4]
#ifndef PB_NO_ERRMSG
    stream->errmsg = substream.errmsg;
 80109a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	611a      	str	r2, [r3, #16]
#endif
    
    if (substream.bytes_written != size)
 80109aa:	6a3b      	ldr	r3, [r7, #32]
 80109ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80109ae:	429a      	cmp	r2, r3
 80109b0:	d00b      	beq.n	80109ca <pb_encode_submessage+0x106>
        PB_RETURN_ERROR(stream, "submsg size changed");
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	691b      	ldr	r3, [r3, #16]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d002      	beq.n	80109c0 <pb_encode_submessage+0xfc>
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	691b      	ldr	r3, [r3, #16]
 80109be:	e000      	b.n	80109c2 <pb_encode_submessage+0xfe>
 80109c0:	4b06      	ldr	r3, [pc, #24]	; (80109dc <pb_encode_submessage+0x118>)
 80109c2:	68fa      	ldr	r2, [r7, #12]
 80109c4:	6113      	str	r3, [r2, #16]
 80109c6:	2300      	movs	r3, #0
 80109c8:	e001      	b.n	80109ce <pb_encode_submessage+0x10a>
    
    return status;
 80109ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80109ce:	4618      	mov	r0, r3
 80109d0:	3734      	adds	r7, #52	; 0x34
 80109d2:	46bd      	mov	sp, r7
 80109d4:	bd90      	pop	{r4, r7, pc}
 80109d6:	bf00      	nop
 80109d8:	08015b34 	.word	0x08015b34
 80109dc:	08015ba0 	.word	0x08015ba0

080109e0 <pb_enc_varint>:

/* Field encoders */

static bool checkreturn pb_enc_varint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 80109e0:	b590      	push	{r4, r7, lr}
 80109e2:	b087      	sub	sp, #28
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	60f8      	str	r0, [r7, #12]
 80109e8:	60b9      	str	r1, [r7, #8]
 80109ea:	607a      	str	r2, [r7, #4]
    pb_int64_t value = 0;
 80109ec:	f04f 0300 	mov.w	r3, #0
 80109f0:	f04f 0400 	mov.w	r4, #0
 80109f4:	e9c7 3404 	strd	r3, r4, [r7, #16]
    
    if (field->data_size == sizeof(int_least8_t))
 80109f8:	68bb      	ldr	r3, [r7, #8]
 80109fa:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80109fe:	b29b      	uxth	r3, r3
 8010a00:	2b01      	cmp	r3, #1
 8010a02:	d108      	bne.n	8010a16 <pb_enc_varint+0x36>
        value = *(const int_least8_t*)src;
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	f993 3000 	ldrsb.w	r3, [r3]
 8010a0a:	b25b      	sxtb	r3, r3
 8010a0c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8010a10:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8010a14:	e033      	b.n	8010a7e <pb_enc_varint+0x9e>
    else if (field->data_size == sizeof(int_least16_t))
 8010a16:	68bb      	ldr	r3, [r7, #8]
 8010a18:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8010a1c:	b29b      	uxth	r3, r3
 8010a1e:	2b02      	cmp	r3, #2
 8010a20:	d108      	bne.n	8010a34 <pb_enc_varint+0x54>
        value = *(const int_least16_t*)src;
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010a28:	b21b      	sxth	r3, r3
 8010a2a:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8010a2e:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8010a32:	e024      	b.n	8010a7e <pb_enc_varint+0x9e>
    else if (field->data_size == sizeof(int32_t))
 8010a34:	68bb      	ldr	r3, [r7, #8]
 8010a36:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8010a3a:	b29b      	uxth	r3, r3
 8010a3c:	2b04      	cmp	r3, #4
 8010a3e:	d106      	bne.n	8010a4e <pb_enc_varint+0x6e>
        value = *(const int32_t*)src;
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8010a48:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8010a4c:	e017      	b.n	8010a7e <pb_enc_varint+0x9e>
    else if (field->data_size == sizeof(pb_int64_t))
 8010a4e:	68bb      	ldr	r3, [r7, #8]
 8010a50:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8010a54:	b29b      	uxth	r3, r3
 8010a56:	2b08      	cmp	r3, #8
 8010a58:	d105      	bne.n	8010a66 <pb_enc_varint+0x86>
        value = *(const pb_int64_t*)src;
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8010a60:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8010a64:	e00b      	b.n	8010a7e <pb_enc_varint+0x9e>
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	691b      	ldr	r3, [r3, #16]
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d002      	beq.n	8010a74 <pb_enc_varint+0x94>
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	691b      	ldr	r3, [r3, #16]
 8010a72:	e000      	b.n	8010a76 <pb_enc_varint+0x96>
 8010a74:	4b08      	ldr	r3, [pc, #32]	; (8010a98 <pb_enc_varint+0xb8>)
 8010a76:	68fa      	ldr	r2, [r7, #12]
 8010a78:	6113      	str	r3, [r2, #16]
 8010a7a:	2300      	movs	r3, #0
 8010a7c:	e007      	b.n	8010a8e <pb_enc_varint+0xae>
#ifdef PB_WITHOUT_64BIT
    if (value < 0)
      return pb_encode_negative_varint(stream, (pb_uint64_t)value);
    else
#endif
      return pb_encode_varint(stream, (pb_uint64_t)value);
 8010a7e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8010a82:	461a      	mov	r2, r3
 8010a84:	4623      	mov	r3, r4
 8010a86:	68f8      	ldr	r0, [r7, #12]
 8010a88:	f7ff fd89 	bl	801059e <pb_encode_varint>
 8010a8c:	4603      	mov	r3, r0
}
 8010a8e:	4618      	mov	r0, r3
 8010a90:	371c      	adds	r7, #28
 8010a92:	46bd      	mov	sp, r7
 8010a94:	bd90      	pop	{r4, r7, pc}
 8010a96:	bf00      	nop
 8010a98:	08015bb4 	.word	0x08015bb4

08010a9c <pb_enc_uvarint>:

static bool checkreturn pb_enc_uvarint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 8010a9c:	b590      	push	{r4, r7, lr}
 8010a9e:	b087      	sub	sp, #28
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	60f8      	str	r0, [r7, #12]
 8010aa4:	60b9      	str	r1, [r7, #8]
 8010aa6:	607a      	str	r2, [r7, #4]
    pb_uint64_t value = 0;
 8010aa8:	f04f 0300 	mov.w	r3, #0
 8010aac:	f04f 0400 	mov.w	r4, #0
 8010ab0:	e9c7 3404 	strd	r3, r4, [r7, #16]
    
    if (field->data_size == sizeof(uint_least8_t))
 8010ab4:	68bb      	ldr	r3, [r7, #8]
 8010ab6:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8010aba:	b29b      	uxth	r3, r3
 8010abc:	2b01      	cmp	r3, #1
 8010abe:	d107      	bne.n	8010ad0 <pb_enc_uvarint+0x34>
        value = *(const uint_least8_t*)src;
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	781b      	ldrb	r3, [r3, #0]
 8010ac4:	b2db      	uxtb	r3, r3
 8010ac6:	f04f 0400 	mov.w	r4, #0
 8010aca:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8010ace:	e032      	b.n	8010b36 <pb_enc_uvarint+0x9a>
    else if (field->data_size == sizeof(uint_least16_t))
 8010ad0:	68bb      	ldr	r3, [r7, #8]
 8010ad2:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8010ad6:	b29b      	uxth	r3, r3
 8010ad8:	2b02      	cmp	r3, #2
 8010ada:	d107      	bne.n	8010aec <pb_enc_uvarint+0x50>
        value = *(const uint_least16_t*)src;
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	881b      	ldrh	r3, [r3, #0]
 8010ae0:	b29b      	uxth	r3, r3
 8010ae2:	f04f 0400 	mov.w	r4, #0
 8010ae6:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8010aea:	e024      	b.n	8010b36 <pb_enc_uvarint+0x9a>
    else if (field->data_size == sizeof(uint32_t))
 8010aec:	68bb      	ldr	r3, [r7, #8]
 8010aee:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8010af2:	b29b      	uxth	r3, r3
 8010af4:	2b04      	cmp	r3, #4
 8010af6:	d106      	bne.n	8010b06 <pb_enc_uvarint+0x6a>
        value = *(const uint32_t*)src;
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	f04f 0400 	mov.w	r4, #0
 8010b00:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8010b04:	e017      	b.n	8010b36 <pb_enc_uvarint+0x9a>
    else if (field->data_size == sizeof(pb_uint64_t))
 8010b06:	68bb      	ldr	r3, [r7, #8]
 8010b08:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8010b0c:	b29b      	uxth	r3, r3
 8010b0e:	2b08      	cmp	r3, #8
 8010b10:	d105      	bne.n	8010b1e <pb_enc_uvarint+0x82>
        value = *(const pb_uint64_t*)src;
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	e9d3 3400 	ldrd	r3, r4, [r3]
 8010b18:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8010b1c:	e00b      	b.n	8010b36 <pb_enc_uvarint+0x9a>
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	691b      	ldr	r3, [r3, #16]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d002      	beq.n	8010b2c <pb_enc_uvarint+0x90>
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	691b      	ldr	r3, [r3, #16]
 8010b2a:	e000      	b.n	8010b2e <pb_enc_uvarint+0x92>
 8010b2c:	4b07      	ldr	r3, [pc, #28]	; (8010b4c <pb_enc_uvarint+0xb0>)
 8010b2e:	68fa      	ldr	r2, [r7, #12]
 8010b30:	6113      	str	r3, [r2, #16]
 8010b32:	2300      	movs	r3, #0
 8010b34:	e005      	b.n	8010b42 <pb_enc_uvarint+0xa6>
    
    return pb_encode_varint(stream, value);
 8010b36:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010b3a:	68f8      	ldr	r0, [r7, #12]
 8010b3c:	f7ff fd2f 	bl	801059e <pb_encode_varint>
 8010b40:	4603      	mov	r3, r0
}
 8010b42:	4618      	mov	r0, r3
 8010b44:	371c      	adds	r7, #28
 8010b46:	46bd      	mov	sp, r7
 8010b48:	bd90      	pop	{r4, r7, pc}
 8010b4a:	bf00      	nop
 8010b4c:	08015bb4 	.word	0x08015bb4

08010b50 <pb_enc_svarint>:

static bool checkreturn pb_enc_svarint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 8010b50:	b590      	push	{r4, r7, lr}
 8010b52:	b087      	sub	sp, #28
 8010b54:	af00      	add	r7, sp, #0
 8010b56:	60f8      	str	r0, [r7, #12]
 8010b58:	60b9      	str	r1, [r7, #8]
 8010b5a:	607a      	str	r2, [r7, #4]
    pb_int64_t value = 0;
 8010b5c:	f04f 0300 	mov.w	r3, #0
 8010b60:	f04f 0400 	mov.w	r4, #0
 8010b64:	e9c7 3404 	strd	r3, r4, [r7, #16]
    
    if (field->data_size == sizeof(int_least8_t))
 8010b68:	68bb      	ldr	r3, [r7, #8]
 8010b6a:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8010b6e:	b29b      	uxth	r3, r3
 8010b70:	2b01      	cmp	r3, #1
 8010b72:	d108      	bne.n	8010b86 <pb_enc_svarint+0x36>
        value = *(const int_least8_t*)src;
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	f993 3000 	ldrsb.w	r3, [r3]
 8010b7a:	b25b      	sxtb	r3, r3
 8010b7c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8010b80:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8010b84:	e033      	b.n	8010bee <pb_enc_svarint+0x9e>
    else if (field->data_size == sizeof(int_least16_t))
 8010b86:	68bb      	ldr	r3, [r7, #8]
 8010b88:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8010b8c:	b29b      	uxth	r3, r3
 8010b8e:	2b02      	cmp	r3, #2
 8010b90:	d108      	bne.n	8010ba4 <pb_enc_svarint+0x54>
        value = *(const int_least16_t*)src;
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010b98:	b21b      	sxth	r3, r3
 8010b9a:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8010b9e:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8010ba2:	e024      	b.n	8010bee <pb_enc_svarint+0x9e>
    else if (field->data_size == sizeof(int32_t))
 8010ba4:	68bb      	ldr	r3, [r7, #8]
 8010ba6:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8010baa:	b29b      	uxth	r3, r3
 8010bac:	2b04      	cmp	r3, #4
 8010bae:	d106      	bne.n	8010bbe <pb_enc_svarint+0x6e>
        value = *(const int32_t*)src;
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8010bb8:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8010bbc:	e017      	b.n	8010bee <pb_enc_svarint+0x9e>
    else if (field->data_size == sizeof(pb_int64_t))
 8010bbe:	68bb      	ldr	r3, [r7, #8]
 8010bc0:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8010bc4:	b29b      	uxth	r3, r3
 8010bc6:	2b08      	cmp	r3, #8
 8010bc8:	d105      	bne.n	8010bd6 <pb_enc_svarint+0x86>
        value = *(const pb_int64_t*)src;
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8010bd0:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8010bd4:	e00b      	b.n	8010bee <pb_enc_svarint+0x9e>
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	691b      	ldr	r3, [r3, #16]
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d002      	beq.n	8010be4 <pb_enc_svarint+0x94>
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	691b      	ldr	r3, [r3, #16]
 8010be2:	e000      	b.n	8010be6 <pb_enc_svarint+0x96>
 8010be4:	4b07      	ldr	r3, [pc, #28]	; (8010c04 <pb_enc_svarint+0xb4>)
 8010be6:	68fa      	ldr	r2, [r7, #12]
 8010be8:	6113      	str	r3, [r2, #16]
 8010bea:	2300      	movs	r3, #0
 8010bec:	e005      	b.n	8010bfa <pb_enc_svarint+0xaa>
    
    return pb_encode_svarint(stream, value);
 8010bee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010bf2:	68f8      	ldr	r0, [r7, #12]
 8010bf4:	f7ff fd26 	bl	8010644 <pb_encode_svarint>
 8010bf8:	4603      	mov	r3, r0
}
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	371c      	adds	r7, #28
 8010bfe:	46bd      	mov	sp, r7
 8010c00:	bd90      	pop	{r4, r7, pc}
 8010c02:	bf00      	nop
 8010c04:	08015bb4 	.word	0x08015bb4

08010c08 <pb_enc_fixed64>:

static bool checkreturn pb_enc_fixed64(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 8010c08:	b580      	push	{r7, lr}
 8010c0a:	b084      	sub	sp, #16
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	60f8      	str	r0, [r7, #12]
 8010c10:	60b9      	str	r1, [r7, #8]
 8010c12:	607a      	str	r2, [r7, #4]
    PB_UNUSED(field);
#ifndef PB_WITHOUT_64BIT
    return pb_encode_fixed64(stream, src);
 8010c14:	6879      	ldr	r1, [r7, #4]
 8010c16:	68f8      	ldr	r0, [r7, #12]
 8010c18:	f7ff fd62 	bl	80106e0 <pb_encode_fixed64>
 8010c1c:	4603      	mov	r3, r0
#else
    PB_UNUSED(src);
    PB_RETURN_ERROR(stream, "no 64bit support");
#endif
}
 8010c1e:	4618      	mov	r0, r3
 8010c20:	3710      	adds	r7, #16
 8010c22:	46bd      	mov	sp, r7
 8010c24:	bd80      	pop	{r7, pc}

08010c26 <pb_enc_fixed32>:

static bool checkreturn pb_enc_fixed32(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 8010c26:	b580      	push	{r7, lr}
 8010c28:	b084      	sub	sp, #16
 8010c2a:	af00      	add	r7, sp, #0
 8010c2c:	60f8      	str	r0, [r7, #12]
 8010c2e:	60b9      	str	r1, [r7, #8]
 8010c30:	607a      	str	r2, [r7, #4]
    PB_UNUSED(field);
    return pb_encode_fixed32(stream, src);
 8010c32:	6879      	ldr	r1, [r7, #4]
 8010c34:	68f8      	ldr	r0, [r7, #12]
 8010c36:	f7ff fd30 	bl	801069a <pb_encode_fixed32>
 8010c3a:	4603      	mov	r3, r0
}
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	3710      	adds	r7, #16
 8010c40:	46bd      	mov	sp, r7
 8010c42:	bd80      	pop	{r7, pc}

08010c44 <pb_enc_bytes>:

static bool checkreturn pb_enc_bytes(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 8010c44:	b580      	push	{r7, lr}
 8010c46:	b086      	sub	sp, #24
 8010c48:	af00      	add	r7, sp, #0
 8010c4a:	60f8      	str	r0, [r7, #12]
 8010c4c:	60b9      	str	r1, [r7, #8]
 8010c4e:	607a      	str	r2, [r7, #4]
    const pb_bytes_array_t *bytes = NULL;
 8010c50:	2300      	movs	r3, #0
 8010c52:	617b      	str	r3, [r7, #20]

    bytes = (const pb_bytes_array_t*)src;
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	617b      	str	r3, [r7, #20]
    
    if (src == NULL)
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d106      	bne.n	8010c6c <pb_enc_bytes+0x28>
    {
        /* Treat null pointer as an empty bytes field */
        return pb_encode_string(stream, NULL, 0);
 8010c5e:	2200      	movs	r2, #0
 8010c60:	2100      	movs	r1, #0
 8010c62:	68f8      	ldr	r0, [r7, #12]
 8010c64:	f7ff fe0e 	bl	8010884 <pb_encode_string>
 8010c68:	4603      	mov	r3, r0
 8010c6a:	e023      	b.n	8010cb4 <pb_enc_bytes+0x70>
    }
    
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8010c6c:	68bb      	ldr	r3, [r7, #8]
 8010c6e:	789b      	ldrb	r3, [r3, #2]
 8010c70:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d114      	bne.n	8010ca2 <pb_enc_bytes+0x5e>
        PB_BYTES_ARRAY_T_ALLOCSIZE(bytes->size) > field->data_size)
 8010c78:	697b      	ldr	r3, [r7, #20]
 8010c7a:	881b      	ldrh	r3, [r3, #0]
 8010c7c:	3302      	adds	r3, #2
 8010c7e:	68ba      	ldr	r2, [r7, #8]
 8010c80:	f8b2 2007 	ldrh.w	r2, [r2, #7]
 8010c84:	b292      	uxth	r2, r2
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8010c86:	4293      	cmp	r3, r2
 8010c88:	d90b      	bls.n	8010ca2 <pb_enc_bytes+0x5e>
    {
        PB_RETURN_ERROR(stream, "bytes size exceeded");
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	691b      	ldr	r3, [r3, #16]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d002      	beq.n	8010c98 <pb_enc_bytes+0x54>
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	691b      	ldr	r3, [r3, #16]
 8010c96:	e000      	b.n	8010c9a <pb_enc_bytes+0x56>
 8010c98:	4b08      	ldr	r3, [pc, #32]	; (8010cbc <pb_enc_bytes+0x78>)
 8010c9a:	68fa      	ldr	r2, [r7, #12]
 8010c9c:	6113      	str	r3, [r2, #16]
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	e008      	b.n	8010cb4 <pb_enc_bytes+0x70>
    }
    
    return pb_encode_string(stream, bytes->bytes, bytes->size);
 8010ca2:	697b      	ldr	r3, [r7, #20]
 8010ca4:	1c99      	adds	r1, r3, #2
 8010ca6:	697b      	ldr	r3, [r7, #20]
 8010ca8:	881b      	ldrh	r3, [r3, #0]
 8010caa:	461a      	mov	r2, r3
 8010cac:	68f8      	ldr	r0, [r7, #12]
 8010cae:	f7ff fde9 	bl	8010884 <pb_encode_string>
 8010cb2:	4603      	mov	r3, r0
}
 8010cb4:	4618      	mov	r0, r3
 8010cb6:	3718      	adds	r7, #24
 8010cb8:	46bd      	mov	sp, r7
 8010cba:	bd80      	pop	{r7, pc}
 8010cbc:	08015bc8 	.word	0x08015bc8

08010cc0 <pb_enc_string>:

static bool checkreturn pb_enc_string(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 8010cc0:	b580      	push	{r7, lr}
 8010cc2:	b088      	sub	sp, #32
 8010cc4:	af00      	add	r7, sp, #0
 8010cc6:	60f8      	str	r0, [r7, #12]
 8010cc8:	60b9      	str	r1, [r7, #8]
 8010cca:	607a      	str	r2, [r7, #4]
    size_t size = 0;
 8010ccc:	2300      	movs	r3, #0
 8010cce:	61fb      	str	r3, [r7, #28]
    size_t max_size = field->data_size;
 8010cd0:	68bb      	ldr	r3, [r7, #8]
 8010cd2:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8010cd6:	b29b      	uxth	r3, r3
 8010cd8:	61bb      	str	r3, [r7, #24]
    const char *p = (const char*)src;
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	617b      	str	r3, [r7, #20]
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8010cde:	68bb      	ldr	r3, [r7, #8]
 8010ce0:	789b      	ldrb	r3, [r3, #2]
 8010ce2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010ce6:	2b80      	cmp	r3, #128	; 0x80
 8010ce8:	d102      	bne.n	8010cf0 <pb_enc_string+0x30>
        max_size = (size_t)-1;
 8010cea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010cee:	61bb      	str	r3, [r7, #24]

    if (src == NULL)
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d108      	bne.n	8010d08 <pb_enc_string+0x48>
    {
        size = 0; /* Treat null pointer as an empty string */
 8010cf6:	2300      	movs	r3, #0
 8010cf8:	61fb      	str	r3, [r7, #28]
 8010cfa:	e00d      	b.n	8010d18 <pb_enc_string+0x58>
    else
    {
        /* strnlen() is not always available, so just use a loop */
        while (size < max_size && *p != '\0')
        {
            size++;
 8010cfc:	69fb      	ldr	r3, [r7, #28]
 8010cfe:	3301      	adds	r3, #1
 8010d00:	61fb      	str	r3, [r7, #28]
            p++;
 8010d02:	697b      	ldr	r3, [r7, #20]
 8010d04:	3301      	adds	r3, #1
 8010d06:	617b      	str	r3, [r7, #20]
        while (size < max_size && *p != '\0')
 8010d08:	69fa      	ldr	r2, [r7, #28]
 8010d0a:	69bb      	ldr	r3, [r7, #24]
 8010d0c:	429a      	cmp	r2, r3
 8010d0e:	d203      	bcs.n	8010d18 <pb_enc_string+0x58>
 8010d10:	697b      	ldr	r3, [r7, #20]
 8010d12:	781b      	ldrb	r3, [r3, #0]
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d1f1      	bne.n	8010cfc <pb_enc_string+0x3c>
        }
    }

    return pb_encode_string(stream, (const pb_byte_t*)src, size);
 8010d18:	69fa      	ldr	r2, [r7, #28]
 8010d1a:	6879      	ldr	r1, [r7, #4]
 8010d1c:	68f8      	ldr	r0, [r7, #12]
 8010d1e:	f7ff fdb1 	bl	8010884 <pb_encode_string>
 8010d22:	4603      	mov	r3, r0
}
 8010d24:	4618      	mov	r0, r3
 8010d26:	3720      	adds	r7, #32
 8010d28:	46bd      	mov	sp, r7
 8010d2a:	bd80      	pop	{r7, pc}

08010d2c <pb_enc_submessage>:

static bool checkreturn pb_enc_submessage(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 8010d2c:	b580      	push	{r7, lr}
 8010d2e:	b084      	sub	sp, #16
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	60f8      	str	r0, [r7, #12]
 8010d34:	60b9      	str	r1, [r7, #8]
 8010d36:	607a      	str	r2, [r7, #4]
    if (field->ptr == NULL)
 8010d38:	68bb      	ldr	r3, [r7, #8]
 8010d3a:	f8d3 300b 	ldr.w	r3, [r3, #11]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d10b      	bne.n	8010d5a <pb_enc_submessage+0x2e>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	691b      	ldr	r3, [r3, #16]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d002      	beq.n	8010d50 <pb_enc_submessage+0x24>
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	691b      	ldr	r3, [r3, #16]
 8010d4e:	e000      	b.n	8010d52 <pb_enc_submessage+0x26>
 8010d50:	4b08      	ldr	r3, [pc, #32]	; (8010d74 <pb_enc_submessage+0x48>)
 8010d52:	68fa      	ldr	r2, [r7, #12]
 8010d54:	6113      	str	r3, [r2, #16]
 8010d56:	2300      	movs	r3, #0
 8010d58:	e008      	b.n	8010d6c <pb_enc_submessage+0x40>
    
    return pb_encode_submessage(stream, (const pb_field_t*)field->ptr, src);
 8010d5a:	68bb      	ldr	r3, [r7, #8]
 8010d5c:	f8d3 300b 	ldr.w	r3, [r3, #11]
 8010d60:	687a      	ldr	r2, [r7, #4]
 8010d62:	4619      	mov	r1, r3
 8010d64:	68f8      	ldr	r0, [r7, #12]
 8010d66:	f7ff fdad 	bl	80108c4 <pb_encode_submessage>
 8010d6a:	4603      	mov	r3, r0
}
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	3710      	adds	r7, #16
 8010d70:	46bd      	mov	sp, r7
 8010d72:	bd80      	pop	{r7, pc}
 8010d74:	08015bdc 	.word	0x08015bdc

08010d78 <pb_enc_fixed_length_bytes>:

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 8010d78:	b580      	push	{r7, lr}
 8010d7a:	b084      	sub	sp, #16
 8010d7c:	af00      	add	r7, sp, #0
 8010d7e:	60f8      	str	r0, [r7, #12]
 8010d80:	60b9      	str	r1, [r7, #8]
 8010d82:	607a      	str	r2, [r7, #4]
    return pb_encode_string(stream, (const pb_byte_t*)src, field->data_size);
 8010d84:	68bb      	ldr	r3, [r7, #8]
 8010d86:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8010d8a:	b29b      	uxth	r3, r3
 8010d8c:	461a      	mov	r2, r3
 8010d8e:	6879      	ldr	r1, [r7, #4]
 8010d90:	68f8      	ldr	r0, [r7, #12]
 8010d92:	f7ff fd77 	bl	8010884 <pb_encode_string>
 8010d96:	4603      	mov	r3, r0
}
 8010d98:	4618      	mov	r0, r3
 8010d9a:	3710      	adds	r7, #16
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	bd80      	pop	{r7, pc}

08010da0 <__aeabi_memclr>:
 8010da0:	2200      	movs	r2, #0
 8010da2:	f7f6 bb55 	b.w	8007450 <__aeabi_memset>

08010da6 <__aeabi_memcpy>:
 8010da6:	f000 b84a 	b.w	8010e3e <memcpy>
	...

08010dac <__errno>:
 8010dac:	4b01      	ldr	r3, [pc, #4]	; (8010db4 <__errno+0x8>)
 8010dae:	6818      	ldr	r0, [r3, #0]
 8010db0:	4770      	bx	lr
 8010db2:	bf00      	nop
 8010db4:	200009d8 	.word	0x200009d8

08010db8 <__libc_init_array>:
 8010db8:	b570      	push	{r4, r5, r6, lr}
 8010dba:	4e0d      	ldr	r6, [pc, #52]	; (8010df0 <__libc_init_array+0x38>)
 8010dbc:	4c0d      	ldr	r4, [pc, #52]	; (8010df4 <__libc_init_array+0x3c>)
 8010dbe:	1ba4      	subs	r4, r4, r6
 8010dc0:	10a4      	asrs	r4, r4, #2
 8010dc2:	2500      	movs	r5, #0
 8010dc4:	42a5      	cmp	r5, r4
 8010dc6:	d109      	bne.n	8010ddc <__libc_init_array+0x24>
 8010dc8:	4e0b      	ldr	r6, [pc, #44]	; (8010df8 <__libc_init_array+0x40>)
 8010dca:	4c0c      	ldr	r4, [pc, #48]	; (8010dfc <__libc_init_array+0x44>)
 8010dcc:	f004 fa36 	bl	801523c <_init>
 8010dd0:	1ba4      	subs	r4, r4, r6
 8010dd2:	10a4      	asrs	r4, r4, #2
 8010dd4:	2500      	movs	r5, #0
 8010dd6:	42a5      	cmp	r5, r4
 8010dd8:	d105      	bne.n	8010de6 <__libc_init_array+0x2e>
 8010dda:	bd70      	pop	{r4, r5, r6, pc}
 8010ddc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010de0:	4798      	blx	r3
 8010de2:	3501      	adds	r5, #1
 8010de4:	e7ee      	b.n	8010dc4 <__libc_init_array+0xc>
 8010de6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010dea:	4798      	blx	r3
 8010dec:	3501      	adds	r5, #1
 8010dee:	e7f2      	b.n	8010dd6 <__libc_init_array+0x1e>
 8010df0:	08018034 	.word	0x08018034
 8010df4:	08018034 	.word	0x08018034
 8010df8:	08018034 	.word	0x08018034
 8010dfc:	08018038 	.word	0x08018038

08010e00 <malloc>:
 8010e00:	4b02      	ldr	r3, [pc, #8]	; (8010e0c <malloc+0xc>)
 8010e02:	4601      	mov	r1, r0
 8010e04:	6818      	ldr	r0, [r3, #0]
 8010e06:	f000 b87b 	b.w	8010f00 <_malloc_r>
 8010e0a:	bf00      	nop
 8010e0c:	200009d8 	.word	0x200009d8

08010e10 <free>:
 8010e10:	4b02      	ldr	r3, [pc, #8]	; (8010e1c <free+0xc>)
 8010e12:	4601      	mov	r1, r0
 8010e14:	6818      	ldr	r0, [r3, #0]
 8010e16:	f000 b825 	b.w	8010e64 <_free_r>
 8010e1a:	bf00      	nop
 8010e1c:	200009d8 	.word	0x200009d8

08010e20 <memcmp>:
 8010e20:	b530      	push	{r4, r5, lr}
 8010e22:	2400      	movs	r4, #0
 8010e24:	42a2      	cmp	r2, r4
 8010e26:	d101      	bne.n	8010e2c <memcmp+0xc>
 8010e28:	2000      	movs	r0, #0
 8010e2a:	e007      	b.n	8010e3c <memcmp+0x1c>
 8010e2c:	5d03      	ldrb	r3, [r0, r4]
 8010e2e:	3401      	adds	r4, #1
 8010e30:	190d      	adds	r5, r1, r4
 8010e32:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8010e36:	42ab      	cmp	r3, r5
 8010e38:	d0f4      	beq.n	8010e24 <memcmp+0x4>
 8010e3a:	1b58      	subs	r0, r3, r5
 8010e3c:	bd30      	pop	{r4, r5, pc}

08010e3e <memcpy>:
 8010e3e:	b510      	push	{r4, lr}
 8010e40:	1e43      	subs	r3, r0, #1
 8010e42:	440a      	add	r2, r1
 8010e44:	4291      	cmp	r1, r2
 8010e46:	d100      	bne.n	8010e4a <memcpy+0xc>
 8010e48:	bd10      	pop	{r4, pc}
 8010e4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010e4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010e52:	e7f7      	b.n	8010e44 <memcpy+0x6>

08010e54 <memset>:
 8010e54:	4402      	add	r2, r0
 8010e56:	4603      	mov	r3, r0
 8010e58:	4293      	cmp	r3, r2
 8010e5a:	d100      	bne.n	8010e5e <memset+0xa>
 8010e5c:	4770      	bx	lr
 8010e5e:	f803 1b01 	strb.w	r1, [r3], #1
 8010e62:	e7f9      	b.n	8010e58 <memset+0x4>

08010e64 <_free_r>:
 8010e64:	b538      	push	{r3, r4, r5, lr}
 8010e66:	4605      	mov	r5, r0
 8010e68:	2900      	cmp	r1, #0
 8010e6a:	d045      	beq.n	8010ef8 <_free_r+0x94>
 8010e6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010e70:	1f0c      	subs	r4, r1, #4
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	bfb8      	it	lt
 8010e76:	18e4      	addlt	r4, r4, r3
 8010e78:	f000 fbe0 	bl	801163c <__malloc_lock>
 8010e7c:	4a1f      	ldr	r2, [pc, #124]	; (8010efc <_free_r+0x98>)
 8010e7e:	6813      	ldr	r3, [r2, #0]
 8010e80:	4610      	mov	r0, r2
 8010e82:	b933      	cbnz	r3, 8010e92 <_free_r+0x2e>
 8010e84:	6063      	str	r3, [r4, #4]
 8010e86:	6014      	str	r4, [r2, #0]
 8010e88:	4628      	mov	r0, r5
 8010e8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e8e:	f000 bbd6 	b.w	801163e <__malloc_unlock>
 8010e92:	42a3      	cmp	r3, r4
 8010e94:	d90c      	bls.n	8010eb0 <_free_r+0x4c>
 8010e96:	6821      	ldr	r1, [r4, #0]
 8010e98:	1862      	adds	r2, r4, r1
 8010e9a:	4293      	cmp	r3, r2
 8010e9c:	bf04      	itt	eq
 8010e9e:	681a      	ldreq	r2, [r3, #0]
 8010ea0:	685b      	ldreq	r3, [r3, #4]
 8010ea2:	6063      	str	r3, [r4, #4]
 8010ea4:	bf04      	itt	eq
 8010ea6:	1852      	addeq	r2, r2, r1
 8010ea8:	6022      	streq	r2, [r4, #0]
 8010eaa:	6004      	str	r4, [r0, #0]
 8010eac:	e7ec      	b.n	8010e88 <_free_r+0x24>
 8010eae:	4613      	mov	r3, r2
 8010eb0:	685a      	ldr	r2, [r3, #4]
 8010eb2:	b10a      	cbz	r2, 8010eb8 <_free_r+0x54>
 8010eb4:	42a2      	cmp	r2, r4
 8010eb6:	d9fa      	bls.n	8010eae <_free_r+0x4a>
 8010eb8:	6819      	ldr	r1, [r3, #0]
 8010eba:	1858      	adds	r0, r3, r1
 8010ebc:	42a0      	cmp	r0, r4
 8010ebe:	d10b      	bne.n	8010ed8 <_free_r+0x74>
 8010ec0:	6820      	ldr	r0, [r4, #0]
 8010ec2:	4401      	add	r1, r0
 8010ec4:	1858      	adds	r0, r3, r1
 8010ec6:	4282      	cmp	r2, r0
 8010ec8:	6019      	str	r1, [r3, #0]
 8010eca:	d1dd      	bne.n	8010e88 <_free_r+0x24>
 8010ecc:	6810      	ldr	r0, [r2, #0]
 8010ece:	6852      	ldr	r2, [r2, #4]
 8010ed0:	605a      	str	r2, [r3, #4]
 8010ed2:	4401      	add	r1, r0
 8010ed4:	6019      	str	r1, [r3, #0]
 8010ed6:	e7d7      	b.n	8010e88 <_free_r+0x24>
 8010ed8:	d902      	bls.n	8010ee0 <_free_r+0x7c>
 8010eda:	230c      	movs	r3, #12
 8010edc:	602b      	str	r3, [r5, #0]
 8010ede:	e7d3      	b.n	8010e88 <_free_r+0x24>
 8010ee0:	6820      	ldr	r0, [r4, #0]
 8010ee2:	1821      	adds	r1, r4, r0
 8010ee4:	428a      	cmp	r2, r1
 8010ee6:	bf04      	itt	eq
 8010ee8:	6811      	ldreq	r1, [r2, #0]
 8010eea:	6852      	ldreq	r2, [r2, #4]
 8010eec:	6062      	str	r2, [r4, #4]
 8010eee:	bf04      	itt	eq
 8010ef0:	1809      	addeq	r1, r1, r0
 8010ef2:	6021      	streq	r1, [r4, #0]
 8010ef4:	605c      	str	r4, [r3, #4]
 8010ef6:	e7c7      	b.n	8010e88 <_free_r+0x24>
 8010ef8:	bd38      	pop	{r3, r4, r5, pc}
 8010efa:	bf00      	nop
 8010efc:	200121ac 	.word	0x200121ac

08010f00 <_malloc_r>:
 8010f00:	b570      	push	{r4, r5, r6, lr}
 8010f02:	1ccd      	adds	r5, r1, #3
 8010f04:	f025 0503 	bic.w	r5, r5, #3
 8010f08:	3508      	adds	r5, #8
 8010f0a:	2d0c      	cmp	r5, #12
 8010f0c:	bf38      	it	cc
 8010f0e:	250c      	movcc	r5, #12
 8010f10:	2d00      	cmp	r5, #0
 8010f12:	4606      	mov	r6, r0
 8010f14:	db01      	blt.n	8010f1a <_malloc_r+0x1a>
 8010f16:	42a9      	cmp	r1, r5
 8010f18:	d903      	bls.n	8010f22 <_malloc_r+0x22>
 8010f1a:	230c      	movs	r3, #12
 8010f1c:	6033      	str	r3, [r6, #0]
 8010f1e:	2000      	movs	r0, #0
 8010f20:	bd70      	pop	{r4, r5, r6, pc}
 8010f22:	f000 fb8b 	bl	801163c <__malloc_lock>
 8010f26:	4a21      	ldr	r2, [pc, #132]	; (8010fac <_malloc_r+0xac>)
 8010f28:	6814      	ldr	r4, [r2, #0]
 8010f2a:	4621      	mov	r1, r4
 8010f2c:	b991      	cbnz	r1, 8010f54 <_malloc_r+0x54>
 8010f2e:	4c20      	ldr	r4, [pc, #128]	; (8010fb0 <_malloc_r+0xb0>)
 8010f30:	6823      	ldr	r3, [r4, #0]
 8010f32:	b91b      	cbnz	r3, 8010f3c <_malloc_r+0x3c>
 8010f34:	4630      	mov	r0, r6
 8010f36:	f000 f8c1 	bl	80110bc <_sbrk_r>
 8010f3a:	6020      	str	r0, [r4, #0]
 8010f3c:	4629      	mov	r1, r5
 8010f3e:	4630      	mov	r0, r6
 8010f40:	f000 f8bc 	bl	80110bc <_sbrk_r>
 8010f44:	1c43      	adds	r3, r0, #1
 8010f46:	d124      	bne.n	8010f92 <_malloc_r+0x92>
 8010f48:	230c      	movs	r3, #12
 8010f4a:	6033      	str	r3, [r6, #0]
 8010f4c:	4630      	mov	r0, r6
 8010f4e:	f000 fb76 	bl	801163e <__malloc_unlock>
 8010f52:	e7e4      	b.n	8010f1e <_malloc_r+0x1e>
 8010f54:	680b      	ldr	r3, [r1, #0]
 8010f56:	1b5b      	subs	r3, r3, r5
 8010f58:	d418      	bmi.n	8010f8c <_malloc_r+0x8c>
 8010f5a:	2b0b      	cmp	r3, #11
 8010f5c:	d90f      	bls.n	8010f7e <_malloc_r+0x7e>
 8010f5e:	600b      	str	r3, [r1, #0]
 8010f60:	50cd      	str	r5, [r1, r3]
 8010f62:	18cc      	adds	r4, r1, r3
 8010f64:	4630      	mov	r0, r6
 8010f66:	f000 fb6a 	bl	801163e <__malloc_unlock>
 8010f6a:	f104 000b 	add.w	r0, r4, #11
 8010f6e:	1d23      	adds	r3, r4, #4
 8010f70:	f020 0007 	bic.w	r0, r0, #7
 8010f74:	1ac3      	subs	r3, r0, r3
 8010f76:	d0d3      	beq.n	8010f20 <_malloc_r+0x20>
 8010f78:	425a      	negs	r2, r3
 8010f7a:	50e2      	str	r2, [r4, r3]
 8010f7c:	e7d0      	b.n	8010f20 <_malloc_r+0x20>
 8010f7e:	428c      	cmp	r4, r1
 8010f80:	684b      	ldr	r3, [r1, #4]
 8010f82:	bf16      	itet	ne
 8010f84:	6063      	strne	r3, [r4, #4]
 8010f86:	6013      	streq	r3, [r2, #0]
 8010f88:	460c      	movne	r4, r1
 8010f8a:	e7eb      	b.n	8010f64 <_malloc_r+0x64>
 8010f8c:	460c      	mov	r4, r1
 8010f8e:	6849      	ldr	r1, [r1, #4]
 8010f90:	e7cc      	b.n	8010f2c <_malloc_r+0x2c>
 8010f92:	1cc4      	adds	r4, r0, #3
 8010f94:	f024 0403 	bic.w	r4, r4, #3
 8010f98:	42a0      	cmp	r0, r4
 8010f9a:	d005      	beq.n	8010fa8 <_malloc_r+0xa8>
 8010f9c:	1a21      	subs	r1, r4, r0
 8010f9e:	4630      	mov	r0, r6
 8010fa0:	f000 f88c 	bl	80110bc <_sbrk_r>
 8010fa4:	3001      	adds	r0, #1
 8010fa6:	d0cf      	beq.n	8010f48 <_malloc_r+0x48>
 8010fa8:	6025      	str	r5, [r4, #0]
 8010faa:	e7db      	b.n	8010f64 <_malloc_r+0x64>
 8010fac:	200121ac 	.word	0x200121ac
 8010fb0:	200121b0 	.word	0x200121b0

08010fb4 <iprintf>:
 8010fb4:	b40f      	push	{r0, r1, r2, r3}
 8010fb6:	4b0a      	ldr	r3, [pc, #40]	; (8010fe0 <iprintf+0x2c>)
 8010fb8:	b513      	push	{r0, r1, r4, lr}
 8010fba:	681c      	ldr	r4, [r3, #0]
 8010fbc:	b124      	cbz	r4, 8010fc8 <iprintf+0x14>
 8010fbe:	69a3      	ldr	r3, [r4, #24]
 8010fc0:	b913      	cbnz	r3, 8010fc8 <iprintf+0x14>
 8010fc2:	4620      	mov	r0, r4
 8010fc4:	f000 fa4c 	bl	8011460 <__sinit>
 8010fc8:	ab05      	add	r3, sp, #20
 8010fca:	9a04      	ldr	r2, [sp, #16]
 8010fcc:	68a1      	ldr	r1, [r4, #8]
 8010fce:	9301      	str	r3, [sp, #4]
 8010fd0:	4620      	mov	r0, r4
 8010fd2:	f000 fb85 	bl	80116e0 <_vfiprintf_r>
 8010fd6:	b002      	add	sp, #8
 8010fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010fdc:	b004      	add	sp, #16
 8010fde:	4770      	bx	lr
 8010fe0:	200009d8 	.word	0x200009d8

08010fe4 <_puts_r>:
 8010fe4:	b570      	push	{r4, r5, r6, lr}
 8010fe6:	460e      	mov	r6, r1
 8010fe8:	4605      	mov	r5, r0
 8010fea:	b118      	cbz	r0, 8010ff4 <_puts_r+0x10>
 8010fec:	6983      	ldr	r3, [r0, #24]
 8010fee:	b90b      	cbnz	r3, 8010ff4 <_puts_r+0x10>
 8010ff0:	f000 fa36 	bl	8011460 <__sinit>
 8010ff4:	69ab      	ldr	r3, [r5, #24]
 8010ff6:	68ac      	ldr	r4, [r5, #8]
 8010ff8:	b913      	cbnz	r3, 8011000 <_puts_r+0x1c>
 8010ffa:	4628      	mov	r0, r5
 8010ffc:	f000 fa30 	bl	8011460 <__sinit>
 8011000:	4b23      	ldr	r3, [pc, #140]	; (8011090 <_puts_r+0xac>)
 8011002:	429c      	cmp	r4, r3
 8011004:	d117      	bne.n	8011036 <_puts_r+0x52>
 8011006:	686c      	ldr	r4, [r5, #4]
 8011008:	89a3      	ldrh	r3, [r4, #12]
 801100a:	071b      	lsls	r3, r3, #28
 801100c:	d51d      	bpl.n	801104a <_puts_r+0x66>
 801100e:	6923      	ldr	r3, [r4, #16]
 8011010:	b1db      	cbz	r3, 801104a <_puts_r+0x66>
 8011012:	3e01      	subs	r6, #1
 8011014:	68a3      	ldr	r3, [r4, #8]
 8011016:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801101a:	3b01      	subs	r3, #1
 801101c:	60a3      	str	r3, [r4, #8]
 801101e:	b9e9      	cbnz	r1, 801105c <_puts_r+0x78>
 8011020:	2b00      	cmp	r3, #0
 8011022:	da2e      	bge.n	8011082 <_puts_r+0x9e>
 8011024:	4622      	mov	r2, r4
 8011026:	210a      	movs	r1, #10
 8011028:	4628      	mov	r0, r5
 801102a:	f000 f869 	bl	8011100 <__swbuf_r>
 801102e:	3001      	adds	r0, #1
 8011030:	d011      	beq.n	8011056 <_puts_r+0x72>
 8011032:	200a      	movs	r0, #10
 8011034:	e011      	b.n	801105a <_puts_r+0x76>
 8011036:	4b17      	ldr	r3, [pc, #92]	; (8011094 <_puts_r+0xb0>)
 8011038:	429c      	cmp	r4, r3
 801103a:	d101      	bne.n	8011040 <_puts_r+0x5c>
 801103c:	68ac      	ldr	r4, [r5, #8]
 801103e:	e7e3      	b.n	8011008 <_puts_r+0x24>
 8011040:	4b15      	ldr	r3, [pc, #84]	; (8011098 <_puts_r+0xb4>)
 8011042:	429c      	cmp	r4, r3
 8011044:	bf08      	it	eq
 8011046:	68ec      	ldreq	r4, [r5, #12]
 8011048:	e7de      	b.n	8011008 <_puts_r+0x24>
 801104a:	4621      	mov	r1, r4
 801104c:	4628      	mov	r0, r5
 801104e:	f000 f8a9 	bl	80111a4 <__swsetup_r>
 8011052:	2800      	cmp	r0, #0
 8011054:	d0dd      	beq.n	8011012 <_puts_r+0x2e>
 8011056:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801105a:	bd70      	pop	{r4, r5, r6, pc}
 801105c:	2b00      	cmp	r3, #0
 801105e:	da04      	bge.n	801106a <_puts_r+0x86>
 8011060:	69a2      	ldr	r2, [r4, #24]
 8011062:	429a      	cmp	r2, r3
 8011064:	dc06      	bgt.n	8011074 <_puts_r+0x90>
 8011066:	290a      	cmp	r1, #10
 8011068:	d004      	beq.n	8011074 <_puts_r+0x90>
 801106a:	6823      	ldr	r3, [r4, #0]
 801106c:	1c5a      	adds	r2, r3, #1
 801106e:	6022      	str	r2, [r4, #0]
 8011070:	7019      	strb	r1, [r3, #0]
 8011072:	e7cf      	b.n	8011014 <_puts_r+0x30>
 8011074:	4622      	mov	r2, r4
 8011076:	4628      	mov	r0, r5
 8011078:	f000 f842 	bl	8011100 <__swbuf_r>
 801107c:	3001      	adds	r0, #1
 801107e:	d1c9      	bne.n	8011014 <_puts_r+0x30>
 8011080:	e7e9      	b.n	8011056 <_puts_r+0x72>
 8011082:	6823      	ldr	r3, [r4, #0]
 8011084:	200a      	movs	r0, #10
 8011086:	1c5a      	adds	r2, r3, #1
 8011088:	6022      	str	r2, [r4, #0]
 801108a:	7018      	strb	r0, [r3, #0]
 801108c:	e7e5      	b.n	801105a <_puts_r+0x76>
 801108e:	bf00      	nop
 8011090:	08017b50 	.word	0x08017b50
 8011094:	08017b70 	.word	0x08017b70
 8011098:	08017b30 	.word	0x08017b30

0801109c <puts>:
 801109c:	4b02      	ldr	r3, [pc, #8]	; (80110a8 <puts+0xc>)
 801109e:	4601      	mov	r1, r0
 80110a0:	6818      	ldr	r0, [r3, #0]
 80110a2:	f7ff bf9f 	b.w	8010fe4 <_puts_r>
 80110a6:	bf00      	nop
 80110a8:	200009d8 	.word	0x200009d8

080110ac <realloc>:
 80110ac:	4b02      	ldr	r3, [pc, #8]	; (80110b8 <realloc+0xc>)
 80110ae:	460a      	mov	r2, r1
 80110b0:	4601      	mov	r1, r0
 80110b2:	6818      	ldr	r0, [r3, #0]
 80110b4:	f000 bac4 	b.w	8011640 <_realloc_r>
 80110b8:	200009d8 	.word	0x200009d8

080110bc <_sbrk_r>:
 80110bc:	b538      	push	{r3, r4, r5, lr}
 80110be:	4c06      	ldr	r4, [pc, #24]	; (80110d8 <_sbrk_r+0x1c>)
 80110c0:	2300      	movs	r3, #0
 80110c2:	4605      	mov	r5, r0
 80110c4:	4608      	mov	r0, r1
 80110c6:	6023      	str	r3, [r4, #0]
 80110c8:	f7f7 fb16 	bl	80086f8 <_sbrk>
 80110cc:	1c43      	adds	r3, r0, #1
 80110ce:	d102      	bne.n	80110d6 <_sbrk_r+0x1a>
 80110d0:	6823      	ldr	r3, [r4, #0]
 80110d2:	b103      	cbz	r3, 80110d6 <_sbrk_r+0x1a>
 80110d4:	602b      	str	r3, [r5, #0]
 80110d6:	bd38      	pop	{r3, r4, r5, pc}
 80110d8:	20014274 	.word	0x20014274

080110dc <strncmp>:
 80110dc:	b510      	push	{r4, lr}
 80110de:	b16a      	cbz	r2, 80110fc <strncmp+0x20>
 80110e0:	3901      	subs	r1, #1
 80110e2:	1884      	adds	r4, r0, r2
 80110e4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80110e8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80110ec:	4293      	cmp	r3, r2
 80110ee:	d103      	bne.n	80110f8 <strncmp+0x1c>
 80110f0:	42a0      	cmp	r0, r4
 80110f2:	d001      	beq.n	80110f8 <strncmp+0x1c>
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d1f5      	bne.n	80110e4 <strncmp+0x8>
 80110f8:	1a98      	subs	r0, r3, r2
 80110fa:	bd10      	pop	{r4, pc}
 80110fc:	4610      	mov	r0, r2
 80110fe:	e7fc      	b.n	80110fa <strncmp+0x1e>

08011100 <__swbuf_r>:
 8011100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011102:	460e      	mov	r6, r1
 8011104:	4614      	mov	r4, r2
 8011106:	4605      	mov	r5, r0
 8011108:	b118      	cbz	r0, 8011112 <__swbuf_r+0x12>
 801110a:	6983      	ldr	r3, [r0, #24]
 801110c:	b90b      	cbnz	r3, 8011112 <__swbuf_r+0x12>
 801110e:	f000 f9a7 	bl	8011460 <__sinit>
 8011112:	4b21      	ldr	r3, [pc, #132]	; (8011198 <__swbuf_r+0x98>)
 8011114:	429c      	cmp	r4, r3
 8011116:	d12a      	bne.n	801116e <__swbuf_r+0x6e>
 8011118:	686c      	ldr	r4, [r5, #4]
 801111a:	69a3      	ldr	r3, [r4, #24]
 801111c:	60a3      	str	r3, [r4, #8]
 801111e:	89a3      	ldrh	r3, [r4, #12]
 8011120:	071a      	lsls	r2, r3, #28
 8011122:	d52e      	bpl.n	8011182 <__swbuf_r+0x82>
 8011124:	6923      	ldr	r3, [r4, #16]
 8011126:	b363      	cbz	r3, 8011182 <__swbuf_r+0x82>
 8011128:	6923      	ldr	r3, [r4, #16]
 801112a:	6820      	ldr	r0, [r4, #0]
 801112c:	1ac0      	subs	r0, r0, r3
 801112e:	6963      	ldr	r3, [r4, #20]
 8011130:	b2f6      	uxtb	r6, r6
 8011132:	4283      	cmp	r3, r0
 8011134:	4637      	mov	r7, r6
 8011136:	dc04      	bgt.n	8011142 <__swbuf_r+0x42>
 8011138:	4621      	mov	r1, r4
 801113a:	4628      	mov	r0, r5
 801113c:	f000 f926 	bl	801138c <_fflush_r>
 8011140:	bb28      	cbnz	r0, 801118e <__swbuf_r+0x8e>
 8011142:	68a3      	ldr	r3, [r4, #8]
 8011144:	3b01      	subs	r3, #1
 8011146:	60a3      	str	r3, [r4, #8]
 8011148:	6823      	ldr	r3, [r4, #0]
 801114a:	1c5a      	adds	r2, r3, #1
 801114c:	6022      	str	r2, [r4, #0]
 801114e:	701e      	strb	r6, [r3, #0]
 8011150:	6963      	ldr	r3, [r4, #20]
 8011152:	3001      	adds	r0, #1
 8011154:	4283      	cmp	r3, r0
 8011156:	d004      	beq.n	8011162 <__swbuf_r+0x62>
 8011158:	89a3      	ldrh	r3, [r4, #12]
 801115a:	07db      	lsls	r3, r3, #31
 801115c:	d519      	bpl.n	8011192 <__swbuf_r+0x92>
 801115e:	2e0a      	cmp	r6, #10
 8011160:	d117      	bne.n	8011192 <__swbuf_r+0x92>
 8011162:	4621      	mov	r1, r4
 8011164:	4628      	mov	r0, r5
 8011166:	f000 f911 	bl	801138c <_fflush_r>
 801116a:	b190      	cbz	r0, 8011192 <__swbuf_r+0x92>
 801116c:	e00f      	b.n	801118e <__swbuf_r+0x8e>
 801116e:	4b0b      	ldr	r3, [pc, #44]	; (801119c <__swbuf_r+0x9c>)
 8011170:	429c      	cmp	r4, r3
 8011172:	d101      	bne.n	8011178 <__swbuf_r+0x78>
 8011174:	68ac      	ldr	r4, [r5, #8]
 8011176:	e7d0      	b.n	801111a <__swbuf_r+0x1a>
 8011178:	4b09      	ldr	r3, [pc, #36]	; (80111a0 <__swbuf_r+0xa0>)
 801117a:	429c      	cmp	r4, r3
 801117c:	bf08      	it	eq
 801117e:	68ec      	ldreq	r4, [r5, #12]
 8011180:	e7cb      	b.n	801111a <__swbuf_r+0x1a>
 8011182:	4621      	mov	r1, r4
 8011184:	4628      	mov	r0, r5
 8011186:	f000 f80d 	bl	80111a4 <__swsetup_r>
 801118a:	2800      	cmp	r0, #0
 801118c:	d0cc      	beq.n	8011128 <__swbuf_r+0x28>
 801118e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8011192:	4638      	mov	r0, r7
 8011194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011196:	bf00      	nop
 8011198:	08017b50 	.word	0x08017b50
 801119c:	08017b70 	.word	0x08017b70
 80111a0:	08017b30 	.word	0x08017b30

080111a4 <__swsetup_r>:
 80111a4:	4b32      	ldr	r3, [pc, #200]	; (8011270 <__swsetup_r+0xcc>)
 80111a6:	b570      	push	{r4, r5, r6, lr}
 80111a8:	681d      	ldr	r5, [r3, #0]
 80111aa:	4606      	mov	r6, r0
 80111ac:	460c      	mov	r4, r1
 80111ae:	b125      	cbz	r5, 80111ba <__swsetup_r+0x16>
 80111b0:	69ab      	ldr	r3, [r5, #24]
 80111b2:	b913      	cbnz	r3, 80111ba <__swsetup_r+0x16>
 80111b4:	4628      	mov	r0, r5
 80111b6:	f000 f953 	bl	8011460 <__sinit>
 80111ba:	4b2e      	ldr	r3, [pc, #184]	; (8011274 <__swsetup_r+0xd0>)
 80111bc:	429c      	cmp	r4, r3
 80111be:	d10f      	bne.n	80111e0 <__swsetup_r+0x3c>
 80111c0:	686c      	ldr	r4, [r5, #4]
 80111c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80111c6:	b29a      	uxth	r2, r3
 80111c8:	0715      	lsls	r5, r2, #28
 80111ca:	d42c      	bmi.n	8011226 <__swsetup_r+0x82>
 80111cc:	06d0      	lsls	r0, r2, #27
 80111ce:	d411      	bmi.n	80111f4 <__swsetup_r+0x50>
 80111d0:	2209      	movs	r2, #9
 80111d2:	6032      	str	r2, [r6, #0]
 80111d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80111d8:	81a3      	strh	r3, [r4, #12]
 80111da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80111de:	e03e      	b.n	801125e <__swsetup_r+0xba>
 80111e0:	4b25      	ldr	r3, [pc, #148]	; (8011278 <__swsetup_r+0xd4>)
 80111e2:	429c      	cmp	r4, r3
 80111e4:	d101      	bne.n	80111ea <__swsetup_r+0x46>
 80111e6:	68ac      	ldr	r4, [r5, #8]
 80111e8:	e7eb      	b.n	80111c2 <__swsetup_r+0x1e>
 80111ea:	4b24      	ldr	r3, [pc, #144]	; (801127c <__swsetup_r+0xd8>)
 80111ec:	429c      	cmp	r4, r3
 80111ee:	bf08      	it	eq
 80111f0:	68ec      	ldreq	r4, [r5, #12]
 80111f2:	e7e6      	b.n	80111c2 <__swsetup_r+0x1e>
 80111f4:	0751      	lsls	r1, r2, #29
 80111f6:	d512      	bpl.n	801121e <__swsetup_r+0x7a>
 80111f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80111fa:	b141      	cbz	r1, 801120e <__swsetup_r+0x6a>
 80111fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011200:	4299      	cmp	r1, r3
 8011202:	d002      	beq.n	801120a <__swsetup_r+0x66>
 8011204:	4630      	mov	r0, r6
 8011206:	f7ff fe2d 	bl	8010e64 <_free_r>
 801120a:	2300      	movs	r3, #0
 801120c:	6363      	str	r3, [r4, #52]	; 0x34
 801120e:	89a3      	ldrh	r3, [r4, #12]
 8011210:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011214:	81a3      	strh	r3, [r4, #12]
 8011216:	2300      	movs	r3, #0
 8011218:	6063      	str	r3, [r4, #4]
 801121a:	6923      	ldr	r3, [r4, #16]
 801121c:	6023      	str	r3, [r4, #0]
 801121e:	89a3      	ldrh	r3, [r4, #12]
 8011220:	f043 0308 	orr.w	r3, r3, #8
 8011224:	81a3      	strh	r3, [r4, #12]
 8011226:	6923      	ldr	r3, [r4, #16]
 8011228:	b94b      	cbnz	r3, 801123e <__swsetup_r+0x9a>
 801122a:	89a3      	ldrh	r3, [r4, #12]
 801122c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011230:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011234:	d003      	beq.n	801123e <__swsetup_r+0x9a>
 8011236:	4621      	mov	r1, r4
 8011238:	4630      	mov	r0, r6
 801123a:	f000 f9bf 	bl	80115bc <__smakebuf_r>
 801123e:	89a2      	ldrh	r2, [r4, #12]
 8011240:	f012 0301 	ands.w	r3, r2, #1
 8011244:	d00c      	beq.n	8011260 <__swsetup_r+0xbc>
 8011246:	2300      	movs	r3, #0
 8011248:	60a3      	str	r3, [r4, #8]
 801124a:	6963      	ldr	r3, [r4, #20]
 801124c:	425b      	negs	r3, r3
 801124e:	61a3      	str	r3, [r4, #24]
 8011250:	6923      	ldr	r3, [r4, #16]
 8011252:	b953      	cbnz	r3, 801126a <__swsetup_r+0xc6>
 8011254:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011258:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801125c:	d1ba      	bne.n	80111d4 <__swsetup_r+0x30>
 801125e:	bd70      	pop	{r4, r5, r6, pc}
 8011260:	0792      	lsls	r2, r2, #30
 8011262:	bf58      	it	pl
 8011264:	6963      	ldrpl	r3, [r4, #20]
 8011266:	60a3      	str	r3, [r4, #8]
 8011268:	e7f2      	b.n	8011250 <__swsetup_r+0xac>
 801126a:	2000      	movs	r0, #0
 801126c:	e7f7      	b.n	801125e <__swsetup_r+0xba>
 801126e:	bf00      	nop
 8011270:	200009d8 	.word	0x200009d8
 8011274:	08017b50 	.word	0x08017b50
 8011278:	08017b70 	.word	0x08017b70
 801127c:	08017b30 	.word	0x08017b30

08011280 <__sflush_r>:
 8011280:	898a      	ldrh	r2, [r1, #12]
 8011282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011286:	4605      	mov	r5, r0
 8011288:	0710      	lsls	r0, r2, #28
 801128a:	460c      	mov	r4, r1
 801128c:	d458      	bmi.n	8011340 <__sflush_r+0xc0>
 801128e:	684b      	ldr	r3, [r1, #4]
 8011290:	2b00      	cmp	r3, #0
 8011292:	dc05      	bgt.n	80112a0 <__sflush_r+0x20>
 8011294:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011296:	2b00      	cmp	r3, #0
 8011298:	dc02      	bgt.n	80112a0 <__sflush_r+0x20>
 801129a:	2000      	movs	r0, #0
 801129c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80112a2:	2e00      	cmp	r6, #0
 80112a4:	d0f9      	beq.n	801129a <__sflush_r+0x1a>
 80112a6:	2300      	movs	r3, #0
 80112a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80112ac:	682f      	ldr	r7, [r5, #0]
 80112ae:	6a21      	ldr	r1, [r4, #32]
 80112b0:	602b      	str	r3, [r5, #0]
 80112b2:	d032      	beq.n	801131a <__sflush_r+0x9a>
 80112b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80112b6:	89a3      	ldrh	r3, [r4, #12]
 80112b8:	075a      	lsls	r2, r3, #29
 80112ba:	d505      	bpl.n	80112c8 <__sflush_r+0x48>
 80112bc:	6863      	ldr	r3, [r4, #4]
 80112be:	1ac0      	subs	r0, r0, r3
 80112c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80112c2:	b10b      	cbz	r3, 80112c8 <__sflush_r+0x48>
 80112c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80112c6:	1ac0      	subs	r0, r0, r3
 80112c8:	2300      	movs	r3, #0
 80112ca:	4602      	mov	r2, r0
 80112cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80112ce:	6a21      	ldr	r1, [r4, #32]
 80112d0:	4628      	mov	r0, r5
 80112d2:	47b0      	blx	r6
 80112d4:	1c43      	adds	r3, r0, #1
 80112d6:	89a3      	ldrh	r3, [r4, #12]
 80112d8:	d106      	bne.n	80112e8 <__sflush_r+0x68>
 80112da:	6829      	ldr	r1, [r5, #0]
 80112dc:	291d      	cmp	r1, #29
 80112de:	d848      	bhi.n	8011372 <__sflush_r+0xf2>
 80112e0:	4a29      	ldr	r2, [pc, #164]	; (8011388 <__sflush_r+0x108>)
 80112e2:	40ca      	lsrs	r2, r1
 80112e4:	07d6      	lsls	r6, r2, #31
 80112e6:	d544      	bpl.n	8011372 <__sflush_r+0xf2>
 80112e8:	2200      	movs	r2, #0
 80112ea:	6062      	str	r2, [r4, #4]
 80112ec:	04d9      	lsls	r1, r3, #19
 80112ee:	6922      	ldr	r2, [r4, #16]
 80112f0:	6022      	str	r2, [r4, #0]
 80112f2:	d504      	bpl.n	80112fe <__sflush_r+0x7e>
 80112f4:	1c42      	adds	r2, r0, #1
 80112f6:	d101      	bne.n	80112fc <__sflush_r+0x7c>
 80112f8:	682b      	ldr	r3, [r5, #0]
 80112fa:	b903      	cbnz	r3, 80112fe <__sflush_r+0x7e>
 80112fc:	6560      	str	r0, [r4, #84]	; 0x54
 80112fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011300:	602f      	str	r7, [r5, #0]
 8011302:	2900      	cmp	r1, #0
 8011304:	d0c9      	beq.n	801129a <__sflush_r+0x1a>
 8011306:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801130a:	4299      	cmp	r1, r3
 801130c:	d002      	beq.n	8011314 <__sflush_r+0x94>
 801130e:	4628      	mov	r0, r5
 8011310:	f7ff fda8 	bl	8010e64 <_free_r>
 8011314:	2000      	movs	r0, #0
 8011316:	6360      	str	r0, [r4, #52]	; 0x34
 8011318:	e7c0      	b.n	801129c <__sflush_r+0x1c>
 801131a:	2301      	movs	r3, #1
 801131c:	4628      	mov	r0, r5
 801131e:	47b0      	blx	r6
 8011320:	1c41      	adds	r1, r0, #1
 8011322:	d1c8      	bne.n	80112b6 <__sflush_r+0x36>
 8011324:	682b      	ldr	r3, [r5, #0]
 8011326:	2b00      	cmp	r3, #0
 8011328:	d0c5      	beq.n	80112b6 <__sflush_r+0x36>
 801132a:	2b1d      	cmp	r3, #29
 801132c:	d001      	beq.n	8011332 <__sflush_r+0xb2>
 801132e:	2b16      	cmp	r3, #22
 8011330:	d101      	bne.n	8011336 <__sflush_r+0xb6>
 8011332:	602f      	str	r7, [r5, #0]
 8011334:	e7b1      	b.n	801129a <__sflush_r+0x1a>
 8011336:	89a3      	ldrh	r3, [r4, #12]
 8011338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801133c:	81a3      	strh	r3, [r4, #12]
 801133e:	e7ad      	b.n	801129c <__sflush_r+0x1c>
 8011340:	690f      	ldr	r7, [r1, #16]
 8011342:	2f00      	cmp	r7, #0
 8011344:	d0a9      	beq.n	801129a <__sflush_r+0x1a>
 8011346:	0793      	lsls	r3, r2, #30
 8011348:	680e      	ldr	r6, [r1, #0]
 801134a:	bf08      	it	eq
 801134c:	694b      	ldreq	r3, [r1, #20]
 801134e:	600f      	str	r7, [r1, #0]
 8011350:	bf18      	it	ne
 8011352:	2300      	movne	r3, #0
 8011354:	eba6 0807 	sub.w	r8, r6, r7
 8011358:	608b      	str	r3, [r1, #8]
 801135a:	f1b8 0f00 	cmp.w	r8, #0
 801135e:	dd9c      	ble.n	801129a <__sflush_r+0x1a>
 8011360:	4643      	mov	r3, r8
 8011362:	463a      	mov	r2, r7
 8011364:	6a21      	ldr	r1, [r4, #32]
 8011366:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011368:	4628      	mov	r0, r5
 801136a:	47b0      	blx	r6
 801136c:	2800      	cmp	r0, #0
 801136e:	dc06      	bgt.n	801137e <__sflush_r+0xfe>
 8011370:	89a3      	ldrh	r3, [r4, #12]
 8011372:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011376:	81a3      	strh	r3, [r4, #12]
 8011378:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801137c:	e78e      	b.n	801129c <__sflush_r+0x1c>
 801137e:	4407      	add	r7, r0
 8011380:	eba8 0800 	sub.w	r8, r8, r0
 8011384:	e7e9      	b.n	801135a <__sflush_r+0xda>
 8011386:	bf00      	nop
 8011388:	20400001 	.word	0x20400001

0801138c <_fflush_r>:
 801138c:	b538      	push	{r3, r4, r5, lr}
 801138e:	690b      	ldr	r3, [r1, #16]
 8011390:	4605      	mov	r5, r0
 8011392:	460c      	mov	r4, r1
 8011394:	b1db      	cbz	r3, 80113ce <_fflush_r+0x42>
 8011396:	b118      	cbz	r0, 80113a0 <_fflush_r+0x14>
 8011398:	6983      	ldr	r3, [r0, #24]
 801139a:	b90b      	cbnz	r3, 80113a0 <_fflush_r+0x14>
 801139c:	f000 f860 	bl	8011460 <__sinit>
 80113a0:	4b0c      	ldr	r3, [pc, #48]	; (80113d4 <_fflush_r+0x48>)
 80113a2:	429c      	cmp	r4, r3
 80113a4:	d109      	bne.n	80113ba <_fflush_r+0x2e>
 80113a6:	686c      	ldr	r4, [r5, #4]
 80113a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113ac:	b17b      	cbz	r3, 80113ce <_fflush_r+0x42>
 80113ae:	4621      	mov	r1, r4
 80113b0:	4628      	mov	r0, r5
 80113b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80113b6:	f7ff bf63 	b.w	8011280 <__sflush_r>
 80113ba:	4b07      	ldr	r3, [pc, #28]	; (80113d8 <_fflush_r+0x4c>)
 80113bc:	429c      	cmp	r4, r3
 80113be:	d101      	bne.n	80113c4 <_fflush_r+0x38>
 80113c0:	68ac      	ldr	r4, [r5, #8]
 80113c2:	e7f1      	b.n	80113a8 <_fflush_r+0x1c>
 80113c4:	4b05      	ldr	r3, [pc, #20]	; (80113dc <_fflush_r+0x50>)
 80113c6:	429c      	cmp	r4, r3
 80113c8:	bf08      	it	eq
 80113ca:	68ec      	ldreq	r4, [r5, #12]
 80113cc:	e7ec      	b.n	80113a8 <_fflush_r+0x1c>
 80113ce:	2000      	movs	r0, #0
 80113d0:	bd38      	pop	{r3, r4, r5, pc}
 80113d2:	bf00      	nop
 80113d4:	08017b50 	.word	0x08017b50
 80113d8:	08017b70 	.word	0x08017b70
 80113dc:	08017b30 	.word	0x08017b30

080113e0 <std>:
 80113e0:	2300      	movs	r3, #0
 80113e2:	b510      	push	{r4, lr}
 80113e4:	4604      	mov	r4, r0
 80113e6:	e9c0 3300 	strd	r3, r3, [r0]
 80113ea:	6083      	str	r3, [r0, #8]
 80113ec:	8181      	strh	r1, [r0, #12]
 80113ee:	6643      	str	r3, [r0, #100]	; 0x64
 80113f0:	81c2      	strh	r2, [r0, #14]
 80113f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80113f6:	6183      	str	r3, [r0, #24]
 80113f8:	4619      	mov	r1, r3
 80113fa:	2208      	movs	r2, #8
 80113fc:	305c      	adds	r0, #92	; 0x5c
 80113fe:	f7ff fd29 	bl	8010e54 <memset>
 8011402:	4b05      	ldr	r3, [pc, #20]	; (8011418 <std+0x38>)
 8011404:	6263      	str	r3, [r4, #36]	; 0x24
 8011406:	4b05      	ldr	r3, [pc, #20]	; (801141c <std+0x3c>)
 8011408:	62a3      	str	r3, [r4, #40]	; 0x28
 801140a:	4b05      	ldr	r3, [pc, #20]	; (8011420 <std+0x40>)
 801140c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801140e:	4b05      	ldr	r3, [pc, #20]	; (8011424 <std+0x44>)
 8011410:	6224      	str	r4, [r4, #32]
 8011412:	6323      	str	r3, [r4, #48]	; 0x30
 8011414:	bd10      	pop	{r4, pc}
 8011416:	bf00      	nop
 8011418:	08011c1d 	.word	0x08011c1d
 801141c:	08011c3f 	.word	0x08011c3f
 8011420:	08011c77 	.word	0x08011c77
 8011424:	08011c9b 	.word	0x08011c9b

08011428 <_cleanup_r>:
 8011428:	4901      	ldr	r1, [pc, #4]	; (8011430 <_cleanup_r+0x8>)
 801142a:	f000 b885 	b.w	8011538 <_fwalk_reent>
 801142e:	bf00      	nop
 8011430:	0801138d 	.word	0x0801138d

08011434 <__sfmoreglue>:
 8011434:	b570      	push	{r4, r5, r6, lr}
 8011436:	1e4a      	subs	r2, r1, #1
 8011438:	2568      	movs	r5, #104	; 0x68
 801143a:	4355      	muls	r5, r2
 801143c:	460e      	mov	r6, r1
 801143e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011442:	f7ff fd5d 	bl	8010f00 <_malloc_r>
 8011446:	4604      	mov	r4, r0
 8011448:	b140      	cbz	r0, 801145c <__sfmoreglue+0x28>
 801144a:	2100      	movs	r1, #0
 801144c:	e9c0 1600 	strd	r1, r6, [r0]
 8011450:	300c      	adds	r0, #12
 8011452:	60a0      	str	r0, [r4, #8]
 8011454:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011458:	f7ff fcfc 	bl	8010e54 <memset>
 801145c:	4620      	mov	r0, r4
 801145e:	bd70      	pop	{r4, r5, r6, pc}

08011460 <__sinit>:
 8011460:	6983      	ldr	r3, [r0, #24]
 8011462:	b510      	push	{r4, lr}
 8011464:	4604      	mov	r4, r0
 8011466:	bb33      	cbnz	r3, 80114b6 <__sinit+0x56>
 8011468:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801146c:	6503      	str	r3, [r0, #80]	; 0x50
 801146e:	4b12      	ldr	r3, [pc, #72]	; (80114b8 <__sinit+0x58>)
 8011470:	4a12      	ldr	r2, [pc, #72]	; (80114bc <__sinit+0x5c>)
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	6282      	str	r2, [r0, #40]	; 0x28
 8011476:	4298      	cmp	r0, r3
 8011478:	bf04      	itt	eq
 801147a:	2301      	moveq	r3, #1
 801147c:	6183      	streq	r3, [r0, #24]
 801147e:	f000 f81f 	bl	80114c0 <__sfp>
 8011482:	6060      	str	r0, [r4, #4]
 8011484:	4620      	mov	r0, r4
 8011486:	f000 f81b 	bl	80114c0 <__sfp>
 801148a:	60a0      	str	r0, [r4, #8]
 801148c:	4620      	mov	r0, r4
 801148e:	f000 f817 	bl	80114c0 <__sfp>
 8011492:	2200      	movs	r2, #0
 8011494:	60e0      	str	r0, [r4, #12]
 8011496:	2104      	movs	r1, #4
 8011498:	6860      	ldr	r0, [r4, #4]
 801149a:	f7ff ffa1 	bl	80113e0 <std>
 801149e:	2201      	movs	r2, #1
 80114a0:	2109      	movs	r1, #9
 80114a2:	68a0      	ldr	r0, [r4, #8]
 80114a4:	f7ff ff9c 	bl	80113e0 <std>
 80114a8:	2202      	movs	r2, #2
 80114aa:	2112      	movs	r1, #18
 80114ac:	68e0      	ldr	r0, [r4, #12]
 80114ae:	f7ff ff97 	bl	80113e0 <std>
 80114b2:	2301      	movs	r3, #1
 80114b4:	61a3      	str	r3, [r4, #24]
 80114b6:	bd10      	pop	{r4, pc}
 80114b8:	08017b2c 	.word	0x08017b2c
 80114bc:	08011429 	.word	0x08011429

080114c0 <__sfp>:
 80114c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114c2:	4b1b      	ldr	r3, [pc, #108]	; (8011530 <__sfp+0x70>)
 80114c4:	681e      	ldr	r6, [r3, #0]
 80114c6:	69b3      	ldr	r3, [r6, #24]
 80114c8:	4607      	mov	r7, r0
 80114ca:	b913      	cbnz	r3, 80114d2 <__sfp+0x12>
 80114cc:	4630      	mov	r0, r6
 80114ce:	f7ff ffc7 	bl	8011460 <__sinit>
 80114d2:	3648      	adds	r6, #72	; 0x48
 80114d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80114d8:	3b01      	subs	r3, #1
 80114da:	d503      	bpl.n	80114e4 <__sfp+0x24>
 80114dc:	6833      	ldr	r3, [r6, #0]
 80114de:	b133      	cbz	r3, 80114ee <__sfp+0x2e>
 80114e0:	6836      	ldr	r6, [r6, #0]
 80114e2:	e7f7      	b.n	80114d4 <__sfp+0x14>
 80114e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80114e8:	b16d      	cbz	r5, 8011506 <__sfp+0x46>
 80114ea:	3468      	adds	r4, #104	; 0x68
 80114ec:	e7f4      	b.n	80114d8 <__sfp+0x18>
 80114ee:	2104      	movs	r1, #4
 80114f0:	4638      	mov	r0, r7
 80114f2:	f7ff ff9f 	bl	8011434 <__sfmoreglue>
 80114f6:	6030      	str	r0, [r6, #0]
 80114f8:	2800      	cmp	r0, #0
 80114fa:	d1f1      	bne.n	80114e0 <__sfp+0x20>
 80114fc:	230c      	movs	r3, #12
 80114fe:	603b      	str	r3, [r7, #0]
 8011500:	4604      	mov	r4, r0
 8011502:	4620      	mov	r0, r4
 8011504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011506:	4b0b      	ldr	r3, [pc, #44]	; (8011534 <__sfp+0x74>)
 8011508:	6665      	str	r5, [r4, #100]	; 0x64
 801150a:	e9c4 5500 	strd	r5, r5, [r4]
 801150e:	60a5      	str	r5, [r4, #8]
 8011510:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8011514:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8011518:	2208      	movs	r2, #8
 801151a:	4629      	mov	r1, r5
 801151c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011520:	f7ff fc98 	bl	8010e54 <memset>
 8011524:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011528:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801152c:	e7e9      	b.n	8011502 <__sfp+0x42>
 801152e:	bf00      	nop
 8011530:	08017b2c 	.word	0x08017b2c
 8011534:	ffff0001 	.word	0xffff0001

08011538 <_fwalk_reent>:
 8011538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801153c:	4680      	mov	r8, r0
 801153e:	4689      	mov	r9, r1
 8011540:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011544:	2600      	movs	r6, #0
 8011546:	b914      	cbnz	r4, 801154e <_fwalk_reent+0x16>
 8011548:	4630      	mov	r0, r6
 801154a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801154e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8011552:	3f01      	subs	r7, #1
 8011554:	d501      	bpl.n	801155a <_fwalk_reent+0x22>
 8011556:	6824      	ldr	r4, [r4, #0]
 8011558:	e7f5      	b.n	8011546 <_fwalk_reent+0xe>
 801155a:	89ab      	ldrh	r3, [r5, #12]
 801155c:	2b01      	cmp	r3, #1
 801155e:	d907      	bls.n	8011570 <_fwalk_reent+0x38>
 8011560:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011564:	3301      	adds	r3, #1
 8011566:	d003      	beq.n	8011570 <_fwalk_reent+0x38>
 8011568:	4629      	mov	r1, r5
 801156a:	4640      	mov	r0, r8
 801156c:	47c8      	blx	r9
 801156e:	4306      	orrs	r6, r0
 8011570:	3568      	adds	r5, #104	; 0x68
 8011572:	e7ee      	b.n	8011552 <_fwalk_reent+0x1a>

08011574 <__swhatbuf_r>:
 8011574:	b570      	push	{r4, r5, r6, lr}
 8011576:	460e      	mov	r6, r1
 8011578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801157c:	2900      	cmp	r1, #0
 801157e:	b096      	sub	sp, #88	; 0x58
 8011580:	4614      	mov	r4, r2
 8011582:	461d      	mov	r5, r3
 8011584:	da07      	bge.n	8011596 <__swhatbuf_r+0x22>
 8011586:	2300      	movs	r3, #0
 8011588:	602b      	str	r3, [r5, #0]
 801158a:	89b3      	ldrh	r3, [r6, #12]
 801158c:	061a      	lsls	r2, r3, #24
 801158e:	d410      	bmi.n	80115b2 <__swhatbuf_r+0x3e>
 8011590:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011594:	e00e      	b.n	80115b4 <__swhatbuf_r+0x40>
 8011596:	466a      	mov	r2, sp
 8011598:	f000 fba6 	bl	8011ce8 <_fstat_r>
 801159c:	2800      	cmp	r0, #0
 801159e:	dbf2      	blt.n	8011586 <__swhatbuf_r+0x12>
 80115a0:	9a01      	ldr	r2, [sp, #4]
 80115a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80115a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80115aa:	425a      	negs	r2, r3
 80115ac:	415a      	adcs	r2, r3
 80115ae:	602a      	str	r2, [r5, #0]
 80115b0:	e7ee      	b.n	8011590 <__swhatbuf_r+0x1c>
 80115b2:	2340      	movs	r3, #64	; 0x40
 80115b4:	2000      	movs	r0, #0
 80115b6:	6023      	str	r3, [r4, #0]
 80115b8:	b016      	add	sp, #88	; 0x58
 80115ba:	bd70      	pop	{r4, r5, r6, pc}

080115bc <__smakebuf_r>:
 80115bc:	898b      	ldrh	r3, [r1, #12]
 80115be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80115c0:	079d      	lsls	r5, r3, #30
 80115c2:	4606      	mov	r6, r0
 80115c4:	460c      	mov	r4, r1
 80115c6:	d507      	bpl.n	80115d8 <__smakebuf_r+0x1c>
 80115c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80115cc:	6023      	str	r3, [r4, #0]
 80115ce:	6123      	str	r3, [r4, #16]
 80115d0:	2301      	movs	r3, #1
 80115d2:	6163      	str	r3, [r4, #20]
 80115d4:	b002      	add	sp, #8
 80115d6:	bd70      	pop	{r4, r5, r6, pc}
 80115d8:	ab01      	add	r3, sp, #4
 80115da:	466a      	mov	r2, sp
 80115dc:	f7ff ffca 	bl	8011574 <__swhatbuf_r>
 80115e0:	9900      	ldr	r1, [sp, #0]
 80115e2:	4605      	mov	r5, r0
 80115e4:	4630      	mov	r0, r6
 80115e6:	f7ff fc8b 	bl	8010f00 <_malloc_r>
 80115ea:	b948      	cbnz	r0, 8011600 <__smakebuf_r+0x44>
 80115ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80115f0:	059a      	lsls	r2, r3, #22
 80115f2:	d4ef      	bmi.n	80115d4 <__smakebuf_r+0x18>
 80115f4:	f023 0303 	bic.w	r3, r3, #3
 80115f8:	f043 0302 	orr.w	r3, r3, #2
 80115fc:	81a3      	strh	r3, [r4, #12]
 80115fe:	e7e3      	b.n	80115c8 <__smakebuf_r+0xc>
 8011600:	4b0d      	ldr	r3, [pc, #52]	; (8011638 <__smakebuf_r+0x7c>)
 8011602:	62b3      	str	r3, [r6, #40]	; 0x28
 8011604:	89a3      	ldrh	r3, [r4, #12]
 8011606:	6020      	str	r0, [r4, #0]
 8011608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801160c:	81a3      	strh	r3, [r4, #12]
 801160e:	9b00      	ldr	r3, [sp, #0]
 8011610:	6163      	str	r3, [r4, #20]
 8011612:	9b01      	ldr	r3, [sp, #4]
 8011614:	6120      	str	r0, [r4, #16]
 8011616:	b15b      	cbz	r3, 8011630 <__smakebuf_r+0x74>
 8011618:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801161c:	4630      	mov	r0, r6
 801161e:	f000 fb75 	bl	8011d0c <_isatty_r>
 8011622:	b128      	cbz	r0, 8011630 <__smakebuf_r+0x74>
 8011624:	89a3      	ldrh	r3, [r4, #12]
 8011626:	f023 0303 	bic.w	r3, r3, #3
 801162a:	f043 0301 	orr.w	r3, r3, #1
 801162e:	81a3      	strh	r3, [r4, #12]
 8011630:	89a3      	ldrh	r3, [r4, #12]
 8011632:	431d      	orrs	r5, r3
 8011634:	81a5      	strh	r5, [r4, #12]
 8011636:	e7cd      	b.n	80115d4 <__smakebuf_r+0x18>
 8011638:	08011429 	.word	0x08011429

0801163c <__malloc_lock>:
 801163c:	4770      	bx	lr

0801163e <__malloc_unlock>:
 801163e:	4770      	bx	lr

08011640 <_realloc_r>:
 8011640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011642:	4607      	mov	r7, r0
 8011644:	4614      	mov	r4, r2
 8011646:	460e      	mov	r6, r1
 8011648:	b921      	cbnz	r1, 8011654 <_realloc_r+0x14>
 801164a:	4611      	mov	r1, r2
 801164c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011650:	f7ff bc56 	b.w	8010f00 <_malloc_r>
 8011654:	b922      	cbnz	r2, 8011660 <_realloc_r+0x20>
 8011656:	f7ff fc05 	bl	8010e64 <_free_r>
 801165a:	4625      	mov	r5, r4
 801165c:	4628      	mov	r0, r5
 801165e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011660:	f000 fb76 	bl	8011d50 <_malloc_usable_size_r>
 8011664:	42a0      	cmp	r0, r4
 8011666:	d20f      	bcs.n	8011688 <_realloc_r+0x48>
 8011668:	4621      	mov	r1, r4
 801166a:	4638      	mov	r0, r7
 801166c:	f7ff fc48 	bl	8010f00 <_malloc_r>
 8011670:	4605      	mov	r5, r0
 8011672:	2800      	cmp	r0, #0
 8011674:	d0f2      	beq.n	801165c <_realloc_r+0x1c>
 8011676:	4631      	mov	r1, r6
 8011678:	4622      	mov	r2, r4
 801167a:	f7ff fbe0 	bl	8010e3e <memcpy>
 801167e:	4631      	mov	r1, r6
 8011680:	4638      	mov	r0, r7
 8011682:	f7ff fbef 	bl	8010e64 <_free_r>
 8011686:	e7e9      	b.n	801165c <_realloc_r+0x1c>
 8011688:	4635      	mov	r5, r6
 801168a:	e7e7      	b.n	801165c <_realloc_r+0x1c>

0801168c <__sfputc_r>:
 801168c:	6893      	ldr	r3, [r2, #8]
 801168e:	3b01      	subs	r3, #1
 8011690:	2b00      	cmp	r3, #0
 8011692:	b410      	push	{r4}
 8011694:	6093      	str	r3, [r2, #8]
 8011696:	da08      	bge.n	80116aa <__sfputc_r+0x1e>
 8011698:	6994      	ldr	r4, [r2, #24]
 801169a:	42a3      	cmp	r3, r4
 801169c:	db01      	blt.n	80116a2 <__sfputc_r+0x16>
 801169e:	290a      	cmp	r1, #10
 80116a0:	d103      	bne.n	80116aa <__sfputc_r+0x1e>
 80116a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80116a6:	f7ff bd2b 	b.w	8011100 <__swbuf_r>
 80116aa:	6813      	ldr	r3, [r2, #0]
 80116ac:	1c58      	adds	r0, r3, #1
 80116ae:	6010      	str	r0, [r2, #0]
 80116b0:	7019      	strb	r1, [r3, #0]
 80116b2:	4608      	mov	r0, r1
 80116b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80116b8:	4770      	bx	lr

080116ba <__sfputs_r>:
 80116ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116bc:	4606      	mov	r6, r0
 80116be:	460f      	mov	r7, r1
 80116c0:	4614      	mov	r4, r2
 80116c2:	18d5      	adds	r5, r2, r3
 80116c4:	42ac      	cmp	r4, r5
 80116c6:	d101      	bne.n	80116cc <__sfputs_r+0x12>
 80116c8:	2000      	movs	r0, #0
 80116ca:	e007      	b.n	80116dc <__sfputs_r+0x22>
 80116cc:	463a      	mov	r2, r7
 80116ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80116d2:	4630      	mov	r0, r6
 80116d4:	f7ff ffda 	bl	801168c <__sfputc_r>
 80116d8:	1c43      	adds	r3, r0, #1
 80116da:	d1f3      	bne.n	80116c4 <__sfputs_r+0xa>
 80116dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080116e0 <_vfiprintf_r>:
 80116e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116e4:	460c      	mov	r4, r1
 80116e6:	b09d      	sub	sp, #116	; 0x74
 80116e8:	4617      	mov	r7, r2
 80116ea:	461d      	mov	r5, r3
 80116ec:	4606      	mov	r6, r0
 80116ee:	b118      	cbz	r0, 80116f8 <_vfiprintf_r+0x18>
 80116f0:	6983      	ldr	r3, [r0, #24]
 80116f2:	b90b      	cbnz	r3, 80116f8 <_vfiprintf_r+0x18>
 80116f4:	f7ff feb4 	bl	8011460 <__sinit>
 80116f8:	4b7c      	ldr	r3, [pc, #496]	; (80118ec <_vfiprintf_r+0x20c>)
 80116fa:	429c      	cmp	r4, r3
 80116fc:	d158      	bne.n	80117b0 <_vfiprintf_r+0xd0>
 80116fe:	6874      	ldr	r4, [r6, #4]
 8011700:	89a3      	ldrh	r3, [r4, #12]
 8011702:	0718      	lsls	r0, r3, #28
 8011704:	d55e      	bpl.n	80117c4 <_vfiprintf_r+0xe4>
 8011706:	6923      	ldr	r3, [r4, #16]
 8011708:	2b00      	cmp	r3, #0
 801170a:	d05b      	beq.n	80117c4 <_vfiprintf_r+0xe4>
 801170c:	2300      	movs	r3, #0
 801170e:	9309      	str	r3, [sp, #36]	; 0x24
 8011710:	2320      	movs	r3, #32
 8011712:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011716:	2330      	movs	r3, #48	; 0x30
 8011718:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801171c:	9503      	str	r5, [sp, #12]
 801171e:	f04f 0b01 	mov.w	fp, #1
 8011722:	46b8      	mov	r8, r7
 8011724:	4645      	mov	r5, r8
 8011726:	f815 3b01 	ldrb.w	r3, [r5], #1
 801172a:	b10b      	cbz	r3, 8011730 <_vfiprintf_r+0x50>
 801172c:	2b25      	cmp	r3, #37	; 0x25
 801172e:	d154      	bne.n	80117da <_vfiprintf_r+0xfa>
 8011730:	ebb8 0a07 	subs.w	sl, r8, r7
 8011734:	d00b      	beq.n	801174e <_vfiprintf_r+0x6e>
 8011736:	4653      	mov	r3, sl
 8011738:	463a      	mov	r2, r7
 801173a:	4621      	mov	r1, r4
 801173c:	4630      	mov	r0, r6
 801173e:	f7ff ffbc 	bl	80116ba <__sfputs_r>
 8011742:	3001      	adds	r0, #1
 8011744:	f000 80c2 	beq.w	80118cc <_vfiprintf_r+0x1ec>
 8011748:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801174a:	4453      	add	r3, sl
 801174c:	9309      	str	r3, [sp, #36]	; 0x24
 801174e:	f898 3000 	ldrb.w	r3, [r8]
 8011752:	2b00      	cmp	r3, #0
 8011754:	f000 80ba 	beq.w	80118cc <_vfiprintf_r+0x1ec>
 8011758:	2300      	movs	r3, #0
 801175a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801175e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011762:	9304      	str	r3, [sp, #16]
 8011764:	9307      	str	r3, [sp, #28]
 8011766:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801176a:	931a      	str	r3, [sp, #104]	; 0x68
 801176c:	46a8      	mov	r8, r5
 801176e:	2205      	movs	r2, #5
 8011770:	f818 1b01 	ldrb.w	r1, [r8], #1
 8011774:	485e      	ldr	r0, [pc, #376]	; (80118f0 <_vfiprintf_r+0x210>)
 8011776:	f7f5 fec3 	bl	8007500 <memchr>
 801177a:	9b04      	ldr	r3, [sp, #16]
 801177c:	bb78      	cbnz	r0, 80117de <_vfiprintf_r+0xfe>
 801177e:	06d9      	lsls	r1, r3, #27
 8011780:	bf44      	itt	mi
 8011782:	2220      	movmi	r2, #32
 8011784:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011788:	071a      	lsls	r2, r3, #28
 801178a:	bf44      	itt	mi
 801178c:	222b      	movmi	r2, #43	; 0x2b
 801178e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011792:	782a      	ldrb	r2, [r5, #0]
 8011794:	2a2a      	cmp	r2, #42	; 0x2a
 8011796:	d02a      	beq.n	80117ee <_vfiprintf_r+0x10e>
 8011798:	9a07      	ldr	r2, [sp, #28]
 801179a:	46a8      	mov	r8, r5
 801179c:	2000      	movs	r0, #0
 801179e:	250a      	movs	r5, #10
 80117a0:	4641      	mov	r1, r8
 80117a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80117a6:	3b30      	subs	r3, #48	; 0x30
 80117a8:	2b09      	cmp	r3, #9
 80117aa:	d969      	bls.n	8011880 <_vfiprintf_r+0x1a0>
 80117ac:	b360      	cbz	r0, 8011808 <_vfiprintf_r+0x128>
 80117ae:	e024      	b.n	80117fa <_vfiprintf_r+0x11a>
 80117b0:	4b50      	ldr	r3, [pc, #320]	; (80118f4 <_vfiprintf_r+0x214>)
 80117b2:	429c      	cmp	r4, r3
 80117b4:	d101      	bne.n	80117ba <_vfiprintf_r+0xda>
 80117b6:	68b4      	ldr	r4, [r6, #8]
 80117b8:	e7a2      	b.n	8011700 <_vfiprintf_r+0x20>
 80117ba:	4b4f      	ldr	r3, [pc, #316]	; (80118f8 <_vfiprintf_r+0x218>)
 80117bc:	429c      	cmp	r4, r3
 80117be:	bf08      	it	eq
 80117c0:	68f4      	ldreq	r4, [r6, #12]
 80117c2:	e79d      	b.n	8011700 <_vfiprintf_r+0x20>
 80117c4:	4621      	mov	r1, r4
 80117c6:	4630      	mov	r0, r6
 80117c8:	f7ff fcec 	bl	80111a4 <__swsetup_r>
 80117cc:	2800      	cmp	r0, #0
 80117ce:	d09d      	beq.n	801170c <_vfiprintf_r+0x2c>
 80117d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80117d4:	b01d      	add	sp, #116	; 0x74
 80117d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117da:	46a8      	mov	r8, r5
 80117dc:	e7a2      	b.n	8011724 <_vfiprintf_r+0x44>
 80117de:	4a44      	ldr	r2, [pc, #272]	; (80118f0 <_vfiprintf_r+0x210>)
 80117e0:	1a80      	subs	r0, r0, r2
 80117e2:	fa0b f000 	lsl.w	r0, fp, r0
 80117e6:	4318      	orrs	r0, r3
 80117e8:	9004      	str	r0, [sp, #16]
 80117ea:	4645      	mov	r5, r8
 80117ec:	e7be      	b.n	801176c <_vfiprintf_r+0x8c>
 80117ee:	9a03      	ldr	r2, [sp, #12]
 80117f0:	1d11      	adds	r1, r2, #4
 80117f2:	6812      	ldr	r2, [r2, #0]
 80117f4:	9103      	str	r1, [sp, #12]
 80117f6:	2a00      	cmp	r2, #0
 80117f8:	db01      	blt.n	80117fe <_vfiprintf_r+0x11e>
 80117fa:	9207      	str	r2, [sp, #28]
 80117fc:	e004      	b.n	8011808 <_vfiprintf_r+0x128>
 80117fe:	4252      	negs	r2, r2
 8011800:	f043 0302 	orr.w	r3, r3, #2
 8011804:	9207      	str	r2, [sp, #28]
 8011806:	9304      	str	r3, [sp, #16]
 8011808:	f898 3000 	ldrb.w	r3, [r8]
 801180c:	2b2e      	cmp	r3, #46	; 0x2e
 801180e:	d10e      	bne.n	801182e <_vfiprintf_r+0x14e>
 8011810:	f898 3001 	ldrb.w	r3, [r8, #1]
 8011814:	2b2a      	cmp	r3, #42	; 0x2a
 8011816:	d138      	bne.n	801188a <_vfiprintf_r+0x1aa>
 8011818:	9b03      	ldr	r3, [sp, #12]
 801181a:	1d1a      	adds	r2, r3, #4
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	9203      	str	r2, [sp, #12]
 8011820:	2b00      	cmp	r3, #0
 8011822:	bfb8      	it	lt
 8011824:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011828:	f108 0802 	add.w	r8, r8, #2
 801182c:	9305      	str	r3, [sp, #20]
 801182e:	4d33      	ldr	r5, [pc, #204]	; (80118fc <_vfiprintf_r+0x21c>)
 8011830:	f898 1000 	ldrb.w	r1, [r8]
 8011834:	2203      	movs	r2, #3
 8011836:	4628      	mov	r0, r5
 8011838:	f7f5 fe62 	bl	8007500 <memchr>
 801183c:	b140      	cbz	r0, 8011850 <_vfiprintf_r+0x170>
 801183e:	2340      	movs	r3, #64	; 0x40
 8011840:	1b40      	subs	r0, r0, r5
 8011842:	fa03 f000 	lsl.w	r0, r3, r0
 8011846:	9b04      	ldr	r3, [sp, #16]
 8011848:	4303      	orrs	r3, r0
 801184a:	f108 0801 	add.w	r8, r8, #1
 801184e:	9304      	str	r3, [sp, #16]
 8011850:	f898 1000 	ldrb.w	r1, [r8]
 8011854:	482a      	ldr	r0, [pc, #168]	; (8011900 <_vfiprintf_r+0x220>)
 8011856:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801185a:	2206      	movs	r2, #6
 801185c:	f108 0701 	add.w	r7, r8, #1
 8011860:	f7f5 fe4e 	bl	8007500 <memchr>
 8011864:	2800      	cmp	r0, #0
 8011866:	d037      	beq.n	80118d8 <_vfiprintf_r+0x1f8>
 8011868:	4b26      	ldr	r3, [pc, #152]	; (8011904 <_vfiprintf_r+0x224>)
 801186a:	bb1b      	cbnz	r3, 80118b4 <_vfiprintf_r+0x1d4>
 801186c:	9b03      	ldr	r3, [sp, #12]
 801186e:	3307      	adds	r3, #7
 8011870:	f023 0307 	bic.w	r3, r3, #7
 8011874:	3308      	adds	r3, #8
 8011876:	9303      	str	r3, [sp, #12]
 8011878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801187a:	444b      	add	r3, r9
 801187c:	9309      	str	r3, [sp, #36]	; 0x24
 801187e:	e750      	b.n	8011722 <_vfiprintf_r+0x42>
 8011880:	fb05 3202 	mla	r2, r5, r2, r3
 8011884:	2001      	movs	r0, #1
 8011886:	4688      	mov	r8, r1
 8011888:	e78a      	b.n	80117a0 <_vfiprintf_r+0xc0>
 801188a:	2300      	movs	r3, #0
 801188c:	f108 0801 	add.w	r8, r8, #1
 8011890:	9305      	str	r3, [sp, #20]
 8011892:	4619      	mov	r1, r3
 8011894:	250a      	movs	r5, #10
 8011896:	4640      	mov	r0, r8
 8011898:	f810 2b01 	ldrb.w	r2, [r0], #1
 801189c:	3a30      	subs	r2, #48	; 0x30
 801189e:	2a09      	cmp	r2, #9
 80118a0:	d903      	bls.n	80118aa <_vfiprintf_r+0x1ca>
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d0c3      	beq.n	801182e <_vfiprintf_r+0x14e>
 80118a6:	9105      	str	r1, [sp, #20]
 80118a8:	e7c1      	b.n	801182e <_vfiprintf_r+0x14e>
 80118aa:	fb05 2101 	mla	r1, r5, r1, r2
 80118ae:	2301      	movs	r3, #1
 80118b0:	4680      	mov	r8, r0
 80118b2:	e7f0      	b.n	8011896 <_vfiprintf_r+0x1b6>
 80118b4:	ab03      	add	r3, sp, #12
 80118b6:	9300      	str	r3, [sp, #0]
 80118b8:	4622      	mov	r2, r4
 80118ba:	4b13      	ldr	r3, [pc, #76]	; (8011908 <_vfiprintf_r+0x228>)
 80118bc:	a904      	add	r1, sp, #16
 80118be:	4630      	mov	r0, r6
 80118c0:	f3af 8000 	nop.w
 80118c4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80118c8:	4681      	mov	r9, r0
 80118ca:	d1d5      	bne.n	8011878 <_vfiprintf_r+0x198>
 80118cc:	89a3      	ldrh	r3, [r4, #12]
 80118ce:	065b      	lsls	r3, r3, #25
 80118d0:	f53f af7e 	bmi.w	80117d0 <_vfiprintf_r+0xf0>
 80118d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80118d6:	e77d      	b.n	80117d4 <_vfiprintf_r+0xf4>
 80118d8:	ab03      	add	r3, sp, #12
 80118da:	9300      	str	r3, [sp, #0]
 80118dc:	4622      	mov	r2, r4
 80118de:	4b0a      	ldr	r3, [pc, #40]	; (8011908 <_vfiprintf_r+0x228>)
 80118e0:	a904      	add	r1, sp, #16
 80118e2:	4630      	mov	r0, r6
 80118e4:	f000 f888 	bl	80119f8 <_printf_i>
 80118e8:	e7ec      	b.n	80118c4 <_vfiprintf_r+0x1e4>
 80118ea:	bf00      	nop
 80118ec:	08017b50 	.word	0x08017b50
 80118f0:	08017b90 	.word	0x08017b90
 80118f4:	08017b70 	.word	0x08017b70
 80118f8:	08017b30 	.word	0x08017b30
 80118fc:	08017b96 	.word	0x08017b96
 8011900:	08017b9a 	.word	0x08017b9a
 8011904:	00000000 	.word	0x00000000
 8011908:	080116bb 	.word	0x080116bb

0801190c <_printf_common>:
 801190c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011910:	4691      	mov	r9, r2
 8011912:	461f      	mov	r7, r3
 8011914:	688a      	ldr	r2, [r1, #8]
 8011916:	690b      	ldr	r3, [r1, #16]
 8011918:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801191c:	4293      	cmp	r3, r2
 801191e:	bfb8      	it	lt
 8011920:	4613      	movlt	r3, r2
 8011922:	f8c9 3000 	str.w	r3, [r9]
 8011926:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801192a:	4606      	mov	r6, r0
 801192c:	460c      	mov	r4, r1
 801192e:	b112      	cbz	r2, 8011936 <_printf_common+0x2a>
 8011930:	3301      	adds	r3, #1
 8011932:	f8c9 3000 	str.w	r3, [r9]
 8011936:	6823      	ldr	r3, [r4, #0]
 8011938:	0699      	lsls	r1, r3, #26
 801193a:	bf42      	ittt	mi
 801193c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8011940:	3302      	addmi	r3, #2
 8011942:	f8c9 3000 	strmi.w	r3, [r9]
 8011946:	6825      	ldr	r5, [r4, #0]
 8011948:	f015 0506 	ands.w	r5, r5, #6
 801194c:	d107      	bne.n	801195e <_printf_common+0x52>
 801194e:	f104 0a19 	add.w	sl, r4, #25
 8011952:	68e3      	ldr	r3, [r4, #12]
 8011954:	f8d9 2000 	ldr.w	r2, [r9]
 8011958:	1a9b      	subs	r3, r3, r2
 801195a:	42ab      	cmp	r3, r5
 801195c:	dc28      	bgt.n	80119b0 <_printf_common+0xa4>
 801195e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8011962:	6822      	ldr	r2, [r4, #0]
 8011964:	3300      	adds	r3, #0
 8011966:	bf18      	it	ne
 8011968:	2301      	movne	r3, #1
 801196a:	0692      	lsls	r2, r2, #26
 801196c:	d42d      	bmi.n	80119ca <_printf_common+0xbe>
 801196e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011972:	4639      	mov	r1, r7
 8011974:	4630      	mov	r0, r6
 8011976:	47c0      	blx	r8
 8011978:	3001      	adds	r0, #1
 801197a:	d020      	beq.n	80119be <_printf_common+0xb2>
 801197c:	6823      	ldr	r3, [r4, #0]
 801197e:	68e5      	ldr	r5, [r4, #12]
 8011980:	f8d9 2000 	ldr.w	r2, [r9]
 8011984:	f003 0306 	and.w	r3, r3, #6
 8011988:	2b04      	cmp	r3, #4
 801198a:	bf08      	it	eq
 801198c:	1aad      	subeq	r5, r5, r2
 801198e:	68a3      	ldr	r3, [r4, #8]
 8011990:	6922      	ldr	r2, [r4, #16]
 8011992:	bf0c      	ite	eq
 8011994:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011998:	2500      	movne	r5, #0
 801199a:	4293      	cmp	r3, r2
 801199c:	bfc4      	itt	gt
 801199e:	1a9b      	subgt	r3, r3, r2
 80119a0:	18ed      	addgt	r5, r5, r3
 80119a2:	f04f 0900 	mov.w	r9, #0
 80119a6:	341a      	adds	r4, #26
 80119a8:	454d      	cmp	r5, r9
 80119aa:	d11a      	bne.n	80119e2 <_printf_common+0xd6>
 80119ac:	2000      	movs	r0, #0
 80119ae:	e008      	b.n	80119c2 <_printf_common+0xb6>
 80119b0:	2301      	movs	r3, #1
 80119b2:	4652      	mov	r2, sl
 80119b4:	4639      	mov	r1, r7
 80119b6:	4630      	mov	r0, r6
 80119b8:	47c0      	blx	r8
 80119ba:	3001      	adds	r0, #1
 80119bc:	d103      	bne.n	80119c6 <_printf_common+0xba>
 80119be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80119c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119c6:	3501      	adds	r5, #1
 80119c8:	e7c3      	b.n	8011952 <_printf_common+0x46>
 80119ca:	18e1      	adds	r1, r4, r3
 80119cc:	1c5a      	adds	r2, r3, #1
 80119ce:	2030      	movs	r0, #48	; 0x30
 80119d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80119d4:	4422      	add	r2, r4
 80119d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80119da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80119de:	3302      	adds	r3, #2
 80119e0:	e7c5      	b.n	801196e <_printf_common+0x62>
 80119e2:	2301      	movs	r3, #1
 80119e4:	4622      	mov	r2, r4
 80119e6:	4639      	mov	r1, r7
 80119e8:	4630      	mov	r0, r6
 80119ea:	47c0      	blx	r8
 80119ec:	3001      	adds	r0, #1
 80119ee:	d0e6      	beq.n	80119be <_printf_common+0xb2>
 80119f0:	f109 0901 	add.w	r9, r9, #1
 80119f4:	e7d8      	b.n	80119a8 <_printf_common+0x9c>
	...

080119f8 <_printf_i>:
 80119f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80119fc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8011a00:	460c      	mov	r4, r1
 8011a02:	7e09      	ldrb	r1, [r1, #24]
 8011a04:	b085      	sub	sp, #20
 8011a06:	296e      	cmp	r1, #110	; 0x6e
 8011a08:	4617      	mov	r7, r2
 8011a0a:	4606      	mov	r6, r0
 8011a0c:	4698      	mov	r8, r3
 8011a0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011a10:	f000 80b3 	beq.w	8011b7a <_printf_i+0x182>
 8011a14:	d822      	bhi.n	8011a5c <_printf_i+0x64>
 8011a16:	2963      	cmp	r1, #99	; 0x63
 8011a18:	d036      	beq.n	8011a88 <_printf_i+0x90>
 8011a1a:	d80a      	bhi.n	8011a32 <_printf_i+0x3a>
 8011a1c:	2900      	cmp	r1, #0
 8011a1e:	f000 80b9 	beq.w	8011b94 <_printf_i+0x19c>
 8011a22:	2958      	cmp	r1, #88	; 0x58
 8011a24:	f000 8083 	beq.w	8011b2e <_printf_i+0x136>
 8011a28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011a2c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8011a30:	e032      	b.n	8011a98 <_printf_i+0xa0>
 8011a32:	2964      	cmp	r1, #100	; 0x64
 8011a34:	d001      	beq.n	8011a3a <_printf_i+0x42>
 8011a36:	2969      	cmp	r1, #105	; 0x69
 8011a38:	d1f6      	bne.n	8011a28 <_printf_i+0x30>
 8011a3a:	6820      	ldr	r0, [r4, #0]
 8011a3c:	6813      	ldr	r3, [r2, #0]
 8011a3e:	0605      	lsls	r5, r0, #24
 8011a40:	f103 0104 	add.w	r1, r3, #4
 8011a44:	d52a      	bpl.n	8011a9c <_printf_i+0xa4>
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	6011      	str	r1, [r2, #0]
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	da03      	bge.n	8011a56 <_printf_i+0x5e>
 8011a4e:	222d      	movs	r2, #45	; 0x2d
 8011a50:	425b      	negs	r3, r3
 8011a52:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8011a56:	486f      	ldr	r0, [pc, #444]	; (8011c14 <_printf_i+0x21c>)
 8011a58:	220a      	movs	r2, #10
 8011a5a:	e039      	b.n	8011ad0 <_printf_i+0xd8>
 8011a5c:	2973      	cmp	r1, #115	; 0x73
 8011a5e:	f000 809d 	beq.w	8011b9c <_printf_i+0x1a4>
 8011a62:	d808      	bhi.n	8011a76 <_printf_i+0x7e>
 8011a64:	296f      	cmp	r1, #111	; 0x6f
 8011a66:	d020      	beq.n	8011aaa <_printf_i+0xb2>
 8011a68:	2970      	cmp	r1, #112	; 0x70
 8011a6a:	d1dd      	bne.n	8011a28 <_printf_i+0x30>
 8011a6c:	6823      	ldr	r3, [r4, #0]
 8011a6e:	f043 0320 	orr.w	r3, r3, #32
 8011a72:	6023      	str	r3, [r4, #0]
 8011a74:	e003      	b.n	8011a7e <_printf_i+0x86>
 8011a76:	2975      	cmp	r1, #117	; 0x75
 8011a78:	d017      	beq.n	8011aaa <_printf_i+0xb2>
 8011a7a:	2978      	cmp	r1, #120	; 0x78
 8011a7c:	d1d4      	bne.n	8011a28 <_printf_i+0x30>
 8011a7e:	2378      	movs	r3, #120	; 0x78
 8011a80:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011a84:	4864      	ldr	r0, [pc, #400]	; (8011c18 <_printf_i+0x220>)
 8011a86:	e055      	b.n	8011b34 <_printf_i+0x13c>
 8011a88:	6813      	ldr	r3, [r2, #0]
 8011a8a:	1d19      	adds	r1, r3, #4
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	6011      	str	r1, [r2, #0]
 8011a90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011a94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011a98:	2301      	movs	r3, #1
 8011a9a:	e08c      	b.n	8011bb6 <_printf_i+0x1be>
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	6011      	str	r1, [r2, #0]
 8011aa0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011aa4:	bf18      	it	ne
 8011aa6:	b21b      	sxthne	r3, r3
 8011aa8:	e7cf      	b.n	8011a4a <_printf_i+0x52>
 8011aaa:	6813      	ldr	r3, [r2, #0]
 8011aac:	6825      	ldr	r5, [r4, #0]
 8011aae:	1d18      	adds	r0, r3, #4
 8011ab0:	6010      	str	r0, [r2, #0]
 8011ab2:	0628      	lsls	r0, r5, #24
 8011ab4:	d501      	bpl.n	8011aba <_printf_i+0xc2>
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	e002      	b.n	8011ac0 <_printf_i+0xc8>
 8011aba:	0668      	lsls	r0, r5, #25
 8011abc:	d5fb      	bpl.n	8011ab6 <_printf_i+0xbe>
 8011abe:	881b      	ldrh	r3, [r3, #0]
 8011ac0:	4854      	ldr	r0, [pc, #336]	; (8011c14 <_printf_i+0x21c>)
 8011ac2:	296f      	cmp	r1, #111	; 0x6f
 8011ac4:	bf14      	ite	ne
 8011ac6:	220a      	movne	r2, #10
 8011ac8:	2208      	moveq	r2, #8
 8011aca:	2100      	movs	r1, #0
 8011acc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011ad0:	6865      	ldr	r5, [r4, #4]
 8011ad2:	60a5      	str	r5, [r4, #8]
 8011ad4:	2d00      	cmp	r5, #0
 8011ad6:	f2c0 8095 	blt.w	8011c04 <_printf_i+0x20c>
 8011ada:	6821      	ldr	r1, [r4, #0]
 8011adc:	f021 0104 	bic.w	r1, r1, #4
 8011ae0:	6021      	str	r1, [r4, #0]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d13d      	bne.n	8011b62 <_printf_i+0x16a>
 8011ae6:	2d00      	cmp	r5, #0
 8011ae8:	f040 808e 	bne.w	8011c08 <_printf_i+0x210>
 8011aec:	4665      	mov	r5, ip
 8011aee:	2a08      	cmp	r2, #8
 8011af0:	d10b      	bne.n	8011b0a <_printf_i+0x112>
 8011af2:	6823      	ldr	r3, [r4, #0]
 8011af4:	07db      	lsls	r3, r3, #31
 8011af6:	d508      	bpl.n	8011b0a <_printf_i+0x112>
 8011af8:	6923      	ldr	r3, [r4, #16]
 8011afa:	6862      	ldr	r2, [r4, #4]
 8011afc:	429a      	cmp	r2, r3
 8011afe:	bfde      	ittt	le
 8011b00:	2330      	movle	r3, #48	; 0x30
 8011b02:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011b06:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8011b0a:	ebac 0305 	sub.w	r3, ip, r5
 8011b0e:	6123      	str	r3, [r4, #16]
 8011b10:	f8cd 8000 	str.w	r8, [sp]
 8011b14:	463b      	mov	r3, r7
 8011b16:	aa03      	add	r2, sp, #12
 8011b18:	4621      	mov	r1, r4
 8011b1a:	4630      	mov	r0, r6
 8011b1c:	f7ff fef6 	bl	801190c <_printf_common>
 8011b20:	3001      	adds	r0, #1
 8011b22:	d14d      	bne.n	8011bc0 <_printf_i+0x1c8>
 8011b24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011b28:	b005      	add	sp, #20
 8011b2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011b2e:	4839      	ldr	r0, [pc, #228]	; (8011c14 <_printf_i+0x21c>)
 8011b30:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8011b34:	6813      	ldr	r3, [r2, #0]
 8011b36:	6821      	ldr	r1, [r4, #0]
 8011b38:	1d1d      	adds	r5, r3, #4
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	6015      	str	r5, [r2, #0]
 8011b3e:	060a      	lsls	r2, r1, #24
 8011b40:	d50b      	bpl.n	8011b5a <_printf_i+0x162>
 8011b42:	07ca      	lsls	r2, r1, #31
 8011b44:	bf44      	itt	mi
 8011b46:	f041 0120 	orrmi.w	r1, r1, #32
 8011b4a:	6021      	strmi	r1, [r4, #0]
 8011b4c:	b91b      	cbnz	r3, 8011b56 <_printf_i+0x15e>
 8011b4e:	6822      	ldr	r2, [r4, #0]
 8011b50:	f022 0220 	bic.w	r2, r2, #32
 8011b54:	6022      	str	r2, [r4, #0]
 8011b56:	2210      	movs	r2, #16
 8011b58:	e7b7      	b.n	8011aca <_printf_i+0xd2>
 8011b5a:	064d      	lsls	r5, r1, #25
 8011b5c:	bf48      	it	mi
 8011b5e:	b29b      	uxthmi	r3, r3
 8011b60:	e7ef      	b.n	8011b42 <_printf_i+0x14a>
 8011b62:	4665      	mov	r5, ip
 8011b64:	fbb3 f1f2 	udiv	r1, r3, r2
 8011b68:	fb02 3311 	mls	r3, r2, r1, r3
 8011b6c:	5cc3      	ldrb	r3, [r0, r3]
 8011b6e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8011b72:	460b      	mov	r3, r1
 8011b74:	2900      	cmp	r1, #0
 8011b76:	d1f5      	bne.n	8011b64 <_printf_i+0x16c>
 8011b78:	e7b9      	b.n	8011aee <_printf_i+0xf6>
 8011b7a:	6813      	ldr	r3, [r2, #0]
 8011b7c:	6825      	ldr	r5, [r4, #0]
 8011b7e:	6961      	ldr	r1, [r4, #20]
 8011b80:	1d18      	adds	r0, r3, #4
 8011b82:	6010      	str	r0, [r2, #0]
 8011b84:	0628      	lsls	r0, r5, #24
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	d501      	bpl.n	8011b8e <_printf_i+0x196>
 8011b8a:	6019      	str	r1, [r3, #0]
 8011b8c:	e002      	b.n	8011b94 <_printf_i+0x19c>
 8011b8e:	066a      	lsls	r2, r5, #25
 8011b90:	d5fb      	bpl.n	8011b8a <_printf_i+0x192>
 8011b92:	8019      	strh	r1, [r3, #0]
 8011b94:	2300      	movs	r3, #0
 8011b96:	6123      	str	r3, [r4, #16]
 8011b98:	4665      	mov	r5, ip
 8011b9a:	e7b9      	b.n	8011b10 <_printf_i+0x118>
 8011b9c:	6813      	ldr	r3, [r2, #0]
 8011b9e:	1d19      	adds	r1, r3, #4
 8011ba0:	6011      	str	r1, [r2, #0]
 8011ba2:	681d      	ldr	r5, [r3, #0]
 8011ba4:	6862      	ldr	r2, [r4, #4]
 8011ba6:	2100      	movs	r1, #0
 8011ba8:	4628      	mov	r0, r5
 8011baa:	f7f5 fca9 	bl	8007500 <memchr>
 8011bae:	b108      	cbz	r0, 8011bb4 <_printf_i+0x1bc>
 8011bb0:	1b40      	subs	r0, r0, r5
 8011bb2:	6060      	str	r0, [r4, #4]
 8011bb4:	6863      	ldr	r3, [r4, #4]
 8011bb6:	6123      	str	r3, [r4, #16]
 8011bb8:	2300      	movs	r3, #0
 8011bba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011bbe:	e7a7      	b.n	8011b10 <_printf_i+0x118>
 8011bc0:	6923      	ldr	r3, [r4, #16]
 8011bc2:	462a      	mov	r2, r5
 8011bc4:	4639      	mov	r1, r7
 8011bc6:	4630      	mov	r0, r6
 8011bc8:	47c0      	blx	r8
 8011bca:	3001      	adds	r0, #1
 8011bcc:	d0aa      	beq.n	8011b24 <_printf_i+0x12c>
 8011bce:	6823      	ldr	r3, [r4, #0]
 8011bd0:	079b      	lsls	r3, r3, #30
 8011bd2:	d413      	bmi.n	8011bfc <_printf_i+0x204>
 8011bd4:	68e0      	ldr	r0, [r4, #12]
 8011bd6:	9b03      	ldr	r3, [sp, #12]
 8011bd8:	4298      	cmp	r0, r3
 8011bda:	bfb8      	it	lt
 8011bdc:	4618      	movlt	r0, r3
 8011bde:	e7a3      	b.n	8011b28 <_printf_i+0x130>
 8011be0:	2301      	movs	r3, #1
 8011be2:	464a      	mov	r2, r9
 8011be4:	4639      	mov	r1, r7
 8011be6:	4630      	mov	r0, r6
 8011be8:	47c0      	blx	r8
 8011bea:	3001      	adds	r0, #1
 8011bec:	d09a      	beq.n	8011b24 <_printf_i+0x12c>
 8011bee:	3501      	adds	r5, #1
 8011bf0:	68e3      	ldr	r3, [r4, #12]
 8011bf2:	9a03      	ldr	r2, [sp, #12]
 8011bf4:	1a9b      	subs	r3, r3, r2
 8011bf6:	42ab      	cmp	r3, r5
 8011bf8:	dcf2      	bgt.n	8011be0 <_printf_i+0x1e8>
 8011bfa:	e7eb      	b.n	8011bd4 <_printf_i+0x1dc>
 8011bfc:	2500      	movs	r5, #0
 8011bfe:	f104 0919 	add.w	r9, r4, #25
 8011c02:	e7f5      	b.n	8011bf0 <_printf_i+0x1f8>
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d1ac      	bne.n	8011b62 <_printf_i+0x16a>
 8011c08:	7803      	ldrb	r3, [r0, #0]
 8011c0a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011c0e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011c12:	e76c      	b.n	8011aee <_printf_i+0xf6>
 8011c14:	08017ba1 	.word	0x08017ba1
 8011c18:	08017bb2 	.word	0x08017bb2

08011c1c <__sread>:
 8011c1c:	b510      	push	{r4, lr}
 8011c1e:	460c      	mov	r4, r1
 8011c20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c24:	f000 f89c 	bl	8011d60 <_read_r>
 8011c28:	2800      	cmp	r0, #0
 8011c2a:	bfab      	itete	ge
 8011c2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011c2e:	89a3      	ldrhlt	r3, [r4, #12]
 8011c30:	181b      	addge	r3, r3, r0
 8011c32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011c36:	bfac      	ite	ge
 8011c38:	6563      	strge	r3, [r4, #84]	; 0x54
 8011c3a:	81a3      	strhlt	r3, [r4, #12]
 8011c3c:	bd10      	pop	{r4, pc}

08011c3e <__swrite>:
 8011c3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c42:	461f      	mov	r7, r3
 8011c44:	898b      	ldrh	r3, [r1, #12]
 8011c46:	05db      	lsls	r3, r3, #23
 8011c48:	4605      	mov	r5, r0
 8011c4a:	460c      	mov	r4, r1
 8011c4c:	4616      	mov	r6, r2
 8011c4e:	d505      	bpl.n	8011c5c <__swrite+0x1e>
 8011c50:	2302      	movs	r3, #2
 8011c52:	2200      	movs	r2, #0
 8011c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c58:	f000 f868 	bl	8011d2c <_lseek_r>
 8011c5c:	89a3      	ldrh	r3, [r4, #12]
 8011c5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011c62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011c66:	81a3      	strh	r3, [r4, #12]
 8011c68:	4632      	mov	r2, r6
 8011c6a:	463b      	mov	r3, r7
 8011c6c:	4628      	mov	r0, r5
 8011c6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011c72:	f000 b817 	b.w	8011ca4 <_write_r>

08011c76 <__sseek>:
 8011c76:	b510      	push	{r4, lr}
 8011c78:	460c      	mov	r4, r1
 8011c7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c7e:	f000 f855 	bl	8011d2c <_lseek_r>
 8011c82:	1c43      	adds	r3, r0, #1
 8011c84:	89a3      	ldrh	r3, [r4, #12]
 8011c86:	bf15      	itete	ne
 8011c88:	6560      	strne	r0, [r4, #84]	; 0x54
 8011c8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011c8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011c92:	81a3      	strheq	r3, [r4, #12]
 8011c94:	bf18      	it	ne
 8011c96:	81a3      	strhne	r3, [r4, #12]
 8011c98:	bd10      	pop	{r4, pc}

08011c9a <__sclose>:
 8011c9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c9e:	f000 b813 	b.w	8011cc8 <_close_r>
	...

08011ca4 <_write_r>:
 8011ca4:	b538      	push	{r3, r4, r5, lr}
 8011ca6:	4c07      	ldr	r4, [pc, #28]	; (8011cc4 <_write_r+0x20>)
 8011ca8:	4605      	mov	r5, r0
 8011caa:	4608      	mov	r0, r1
 8011cac:	4611      	mov	r1, r2
 8011cae:	2200      	movs	r2, #0
 8011cb0:	6022      	str	r2, [r4, #0]
 8011cb2:	461a      	mov	r2, r3
 8011cb4:	f7fa fbd4 	bl	800c460 <_write>
 8011cb8:	1c43      	adds	r3, r0, #1
 8011cba:	d102      	bne.n	8011cc2 <_write_r+0x1e>
 8011cbc:	6823      	ldr	r3, [r4, #0]
 8011cbe:	b103      	cbz	r3, 8011cc2 <_write_r+0x1e>
 8011cc0:	602b      	str	r3, [r5, #0]
 8011cc2:	bd38      	pop	{r3, r4, r5, pc}
 8011cc4:	20014274 	.word	0x20014274

08011cc8 <_close_r>:
 8011cc8:	b538      	push	{r3, r4, r5, lr}
 8011cca:	4c06      	ldr	r4, [pc, #24]	; (8011ce4 <_close_r+0x1c>)
 8011ccc:	2300      	movs	r3, #0
 8011cce:	4605      	mov	r5, r0
 8011cd0:	4608      	mov	r0, r1
 8011cd2:	6023      	str	r3, [r4, #0]
 8011cd4:	f7f6 fcdb 	bl	800868e <_close>
 8011cd8:	1c43      	adds	r3, r0, #1
 8011cda:	d102      	bne.n	8011ce2 <_close_r+0x1a>
 8011cdc:	6823      	ldr	r3, [r4, #0]
 8011cde:	b103      	cbz	r3, 8011ce2 <_close_r+0x1a>
 8011ce0:	602b      	str	r3, [r5, #0]
 8011ce2:	bd38      	pop	{r3, r4, r5, pc}
 8011ce4:	20014274 	.word	0x20014274

08011ce8 <_fstat_r>:
 8011ce8:	b538      	push	{r3, r4, r5, lr}
 8011cea:	4c07      	ldr	r4, [pc, #28]	; (8011d08 <_fstat_r+0x20>)
 8011cec:	2300      	movs	r3, #0
 8011cee:	4605      	mov	r5, r0
 8011cf0:	4608      	mov	r0, r1
 8011cf2:	4611      	mov	r1, r2
 8011cf4:	6023      	str	r3, [r4, #0]
 8011cf6:	f7f6 fcd6 	bl	80086a6 <_fstat>
 8011cfa:	1c43      	adds	r3, r0, #1
 8011cfc:	d102      	bne.n	8011d04 <_fstat_r+0x1c>
 8011cfe:	6823      	ldr	r3, [r4, #0]
 8011d00:	b103      	cbz	r3, 8011d04 <_fstat_r+0x1c>
 8011d02:	602b      	str	r3, [r5, #0]
 8011d04:	bd38      	pop	{r3, r4, r5, pc}
 8011d06:	bf00      	nop
 8011d08:	20014274 	.word	0x20014274

08011d0c <_isatty_r>:
 8011d0c:	b538      	push	{r3, r4, r5, lr}
 8011d0e:	4c06      	ldr	r4, [pc, #24]	; (8011d28 <_isatty_r+0x1c>)
 8011d10:	2300      	movs	r3, #0
 8011d12:	4605      	mov	r5, r0
 8011d14:	4608      	mov	r0, r1
 8011d16:	6023      	str	r3, [r4, #0]
 8011d18:	f7f6 fcd5 	bl	80086c6 <_isatty>
 8011d1c:	1c43      	adds	r3, r0, #1
 8011d1e:	d102      	bne.n	8011d26 <_isatty_r+0x1a>
 8011d20:	6823      	ldr	r3, [r4, #0]
 8011d22:	b103      	cbz	r3, 8011d26 <_isatty_r+0x1a>
 8011d24:	602b      	str	r3, [r5, #0]
 8011d26:	bd38      	pop	{r3, r4, r5, pc}
 8011d28:	20014274 	.word	0x20014274

08011d2c <_lseek_r>:
 8011d2c:	b538      	push	{r3, r4, r5, lr}
 8011d2e:	4c07      	ldr	r4, [pc, #28]	; (8011d4c <_lseek_r+0x20>)
 8011d30:	4605      	mov	r5, r0
 8011d32:	4608      	mov	r0, r1
 8011d34:	4611      	mov	r1, r2
 8011d36:	2200      	movs	r2, #0
 8011d38:	6022      	str	r2, [r4, #0]
 8011d3a:	461a      	mov	r2, r3
 8011d3c:	f7f6 fcce 	bl	80086dc <_lseek>
 8011d40:	1c43      	adds	r3, r0, #1
 8011d42:	d102      	bne.n	8011d4a <_lseek_r+0x1e>
 8011d44:	6823      	ldr	r3, [r4, #0]
 8011d46:	b103      	cbz	r3, 8011d4a <_lseek_r+0x1e>
 8011d48:	602b      	str	r3, [r5, #0]
 8011d4a:	bd38      	pop	{r3, r4, r5, pc}
 8011d4c:	20014274 	.word	0x20014274

08011d50 <_malloc_usable_size_r>:
 8011d50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011d54:	1f18      	subs	r0, r3, #4
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	bfbc      	itt	lt
 8011d5a:	580b      	ldrlt	r3, [r1, r0]
 8011d5c:	18c0      	addlt	r0, r0, r3
 8011d5e:	4770      	bx	lr

08011d60 <_read_r>:
 8011d60:	b538      	push	{r3, r4, r5, lr}
 8011d62:	4c07      	ldr	r4, [pc, #28]	; (8011d80 <_read_r+0x20>)
 8011d64:	4605      	mov	r5, r0
 8011d66:	4608      	mov	r0, r1
 8011d68:	4611      	mov	r1, r2
 8011d6a:	2200      	movs	r2, #0
 8011d6c:	6022      	str	r2, [r4, #0]
 8011d6e:	461a      	mov	r2, r3
 8011d70:	f7f6 fc70 	bl	8008654 <_read>
 8011d74:	1c43      	adds	r3, r0, #1
 8011d76:	d102      	bne.n	8011d7e <_read_r+0x1e>
 8011d78:	6823      	ldr	r3, [r4, #0]
 8011d7a:	b103      	cbz	r3, 8011d7e <_read_r+0x1e>
 8011d7c:	602b      	str	r3, [r5, #0]
 8011d7e:	bd38      	pop	{r3, r4, r5, pc}
 8011d80:	20014274 	.word	0x20014274

08011d84 <asinhf>:
 8011d84:	b510      	push	{r4, lr}
 8011d86:	ee10 4a10 	vmov	r4, s0
 8011d8a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8011d8e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011d92:	ed2d 8b04 	vpush	{d8-d9}
 8011d96:	eeb0 8a40 	vmov.f32	s16, s0
 8011d9a:	db06      	blt.n	8011daa <asinhf+0x26>
 8011d9c:	ee30 8a00 	vadd.f32	s16, s0, s0
 8011da0:	eeb0 0a48 	vmov.f32	s0, s16
 8011da4:	ecbd 8b04 	vpop	{d8-d9}
 8011da8:	bd10      	pop	{r4, pc}
 8011daa:	f1b3 5f46 	cmp.w	r3, #830472192	; 0x31800000
 8011dae:	da21      	bge.n	8011df4 <asinhf+0x70>
 8011db0:	eddf 7a26 	vldr	s15, [pc, #152]	; 8011e4c <asinhf+0xc8>
 8011db4:	ee70 7a27 	vadd.f32	s15, s0, s15
 8011db8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011dbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dc4:	dcec      	bgt.n	8011da0 <asinhf+0x1c>
 8011dc6:	eeb0 0a48 	vmov.f32	s0, s16
 8011dca:	f000 fb77 	bl	80124bc <fabsf>
 8011dce:	ee68 8a08 	vmul.f32	s17, s16, s16
 8011dd2:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8011dd6:	eeb0 9a40 	vmov.f32	s18, s0
 8011dda:	ee38 0a88 	vadd.f32	s0, s17, s16
 8011dde:	f002 fc11 	bl	8014604 <__ieee754_sqrtf>
 8011de2:	ee30 8a08 	vadd.f32	s16, s0, s16
 8011de6:	ee88 0a88 	vdiv.f32	s0, s17, s16
 8011dea:	ee30 0a09 	vadd.f32	s0, s0, s18
 8011dee:	f000 fbaf 	bl	8012550 <log1pf>
 8011df2:	e028      	b.n	8011e46 <asinhf+0xc2>
 8011df4:	f1b3 4f9b 	cmp.w	r3, #1300234240	; 0x4d800000
 8011df8:	dd0c      	ble.n	8011e14 <asinhf+0x90>
 8011dfa:	f000 fb5f 	bl	80124bc <fabsf>
 8011dfe:	f001 feb9 	bl	8013b74 <__ieee754_logf>
 8011e02:	ed9f 8a13 	vldr	s16, [pc, #76]	; 8011e50 <asinhf+0xcc>
 8011e06:	ee30 8a08 	vadd.f32	s16, s0, s16
 8011e0a:	2c00      	cmp	r4, #0
 8011e0c:	bfd8      	it	le
 8011e0e:	eeb1 8a48 	vnegle.f32	s16, s16
 8011e12:	e7c5      	b.n	8011da0 <asinhf+0x1c>
 8011e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011e18:	ddd5      	ble.n	8011dc6 <asinhf+0x42>
 8011e1a:	f000 fb4f 	bl	80124bc <fabsf>
 8011e1e:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8011e22:	eef0 8a40 	vmov.f32	s17, s0
 8011e26:	eeb0 0a49 	vmov.f32	s0, s18
 8011e2a:	eea8 0a08 	vfma.f32	s0, s16, s16
 8011e2e:	f002 fbe9 	bl	8014604 <__ieee754_sqrtf>
 8011e32:	ee70 7a28 	vadd.f32	s15, s0, s17
 8011e36:	ee89 0a27 	vdiv.f32	s0, s18, s15
 8011e3a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8011e3e:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8011e42:	f001 fe97 	bl	8013b74 <__ieee754_logf>
 8011e46:	eeb0 8a40 	vmov.f32	s16, s0
 8011e4a:	e7de      	b.n	8011e0a <asinhf+0x86>
 8011e4c:	7149f2ca 	.word	0x7149f2ca
 8011e50:	3f317218 	.word	0x3f317218

08011e54 <atanf>:
 8011e54:	b538      	push	{r3, r4, r5, lr}
 8011e56:	ee10 5a10 	vmov	r5, s0
 8011e5a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8011e5e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8011e62:	eef0 7a40 	vmov.f32	s15, s0
 8011e66:	db10      	blt.n	8011e8a <atanf+0x36>
 8011e68:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8011e6c:	dd04      	ble.n	8011e78 <atanf+0x24>
 8011e6e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8011e72:	eeb0 0a67 	vmov.f32	s0, s15
 8011e76:	bd38      	pop	{r3, r4, r5, pc}
 8011e78:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8011fb0 <atanf+0x15c>
 8011e7c:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8011fb4 <atanf+0x160>
 8011e80:	2d00      	cmp	r5, #0
 8011e82:	bfd8      	it	le
 8011e84:	eef0 7a47 	vmovle.f32	s15, s14
 8011e88:	e7f3      	b.n	8011e72 <atanf+0x1e>
 8011e8a:	4b4b      	ldr	r3, [pc, #300]	; (8011fb8 <atanf+0x164>)
 8011e8c:	429c      	cmp	r4, r3
 8011e8e:	dc10      	bgt.n	8011eb2 <atanf+0x5e>
 8011e90:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8011e94:	da0a      	bge.n	8011eac <atanf+0x58>
 8011e96:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8011fbc <atanf+0x168>
 8011e9a:	ee30 7a07 	vadd.f32	s14, s0, s14
 8011e9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011ea2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8011ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eaa:	dce2      	bgt.n	8011e72 <atanf+0x1e>
 8011eac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011eb0:	e013      	b.n	8011eda <atanf+0x86>
 8011eb2:	f000 fb03 	bl	80124bc <fabsf>
 8011eb6:	4b42      	ldr	r3, [pc, #264]	; (8011fc0 <atanf+0x16c>)
 8011eb8:	429c      	cmp	r4, r3
 8011eba:	dc4f      	bgt.n	8011f5c <atanf+0x108>
 8011ebc:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8011ec0:	429c      	cmp	r4, r3
 8011ec2:	dc41      	bgt.n	8011f48 <atanf+0xf4>
 8011ec4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8011ec8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8011ecc:	eea0 7a27 	vfma.f32	s14, s0, s15
 8011ed0:	2300      	movs	r3, #0
 8011ed2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011ed6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011eda:	1c5a      	adds	r2, r3, #1
 8011edc:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8011ee0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8011fc4 <atanf+0x170>
 8011ee4:	eddf 5a38 	vldr	s11, [pc, #224]	; 8011fc8 <atanf+0x174>
 8011ee8:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8011fcc <atanf+0x178>
 8011eec:	ee66 6a06 	vmul.f32	s13, s12, s12
 8011ef0:	eee6 5a87 	vfma.f32	s11, s13, s14
 8011ef4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8011fd0 <atanf+0x17c>
 8011ef8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8011efc:	eddf 5a35 	vldr	s11, [pc, #212]	; 8011fd4 <atanf+0x180>
 8011f00:	eee7 5a26 	vfma.f32	s11, s14, s13
 8011f04:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8011fd8 <atanf+0x184>
 8011f08:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8011f0c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8011fdc <atanf+0x188>
 8011f10:	eee7 5a26 	vfma.f32	s11, s14, s13
 8011f14:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8011fe0 <atanf+0x18c>
 8011f18:	eea6 5a87 	vfma.f32	s10, s13, s14
 8011f1c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8011fe4 <atanf+0x190>
 8011f20:	eea5 7a26 	vfma.f32	s14, s10, s13
 8011f24:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8011fe8 <atanf+0x194>
 8011f28:	eea7 5a26 	vfma.f32	s10, s14, s13
 8011f2c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8011fec <atanf+0x198>
 8011f30:	eea5 7a26 	vfma.f32	s14, s10, s13
 8011f34:	ee27 7a26 	vmul.f32	s14, s14, s13
 8011f38:	eea5 7a86 	vfma.f32	s14, s11, s12
 8011f3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011f40:	d121      	bne.n	8011f86 <atanf+0x132>
 8011f42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011f46:	e794      	b.n	8011e72 <atanf+0x1e>
 8011f48:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011f4c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8011f50:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011f54:	2301      	movs	r3, #1
 8011f56:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011f5a:	e7be      	b.n	8011eda <atanf+0x86>
 8011f5c:	4b24      	ldr	r3, [pc, #144]	; (8011ff0 <atanf+0x19c>)
 8011f5e:	429c      	cmp	r4, r3
 8011f60:	dc0b      	bgt.n	8011f7a <atanf+0x126>
 8011f62:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8011f66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011f6a:	eea0 7a27 	vfma.f32	s14, s0, s15
 8011f6e:	2302      	movs	r3, #2
 8011f70:	ee70 6a67 	vsub.f32	s13, s0, s15
 8011f74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011f78:	e7af      	b.n	8011eda <atanf+0x86>
 8011f7a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8011f7e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011f82:	2303      	movs	r3, #3
 8011f84:	e7a9      	b.n	8011eda <atanf+0x86>
 8011f86:	4a1b      	ldr	r2, [pc, #108]	; (8011ff4 <atanf+0x1a0>)
 8011f88:	491b      	ldr	r1, [pc, #108]	; (8011ff8 <atanf+0x1a4>)
 8011f8a:	009b      	lsls	r3, r3, #2
 8011f8c:	441a      	add	r2, r3
 8011f8e:	440b      	add	r3, r1
 8011f90:	edd3 6a00 	vldr	s13, [r3]
 8011f94:	ee37 7a66 	vsub.f32	s14, s14, s13
 8011f98:	2d00      	cmp	r5, #0
 8011f9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011f9e:	ed92 7a00 	vldr	s14, [r2]
 8011fa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011fa6:	bfb8      	it	lt
 8011fa8:	eef1 7a67 	vneglt.f32	s15, s15
 8011fac:	e761      	b.n	8011e72 <atanf+0x1e>
 8011fae:	bf00      	nop
 8011fb0:	bfc90fdb 	.word	0xbfc90fdb
 8011fb4:	3fc90fdb 	.word	0x3fc90fdb
 8011fb8:	3edfffff 	.word	0x3edfffff
 8011fbc:	7149f2ca 	.word	0x7149f2ca
 8011fc0:	3f97ffff 	.word	0x3f97ffff
 8011fc4:	3c8569d7 	.word	0x3c8569d7
 8011fc8:	3d4bda59 	.word	0x3d4bda59
 8011fcc:	bd6ef16b 	.word	0xbd6ef16b
 8011fd0:	3d886b35 	.word	0x3d886b35
 8011fd4:	3dba2e6e 	.word	0x3dba2e6e
 8011fd8:	3e124925 	.word	0x3e124925
 8011fdc:	3eaaaaab 	.word	0x3eaaaaab
 8011fe0:	bd15a221 	.word	0xbd15a221
 8011fe4:	bd9d8795 	.word	0xbd9d8795
 8011fe8:	bde38e38 	.word	0xbde38e38
 8011fec:	be4ccccd 	.word	0xbe4ccccd
 8011ff0:	401bffff 	.word	0x401bffff
 8011ff4:	08017bc4 	.word	0x08017bc4
 8011ff8:	08017bd4 	.word	0x08017bd4

08011ffc <ceilf>:
 8011ffc:	ee10 3a10 	vmov	r3, s0
 8012000:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8012004:	0dca      	lsrs	r2, r1, #23
 8012006:	3a7f      	subs	r2, #127	; 0x7f
 8012008:	2a16      	cmp	r2, #22
 801200a:	dc2a      	bgt.n	8012062 <ceilf+0x66>
 801200c:	2a00      	cmp	r2, #0
 801200e:	da11      	bge.n	8012034 <ceilf+0x38>
 8012010:	eddf 7a18 	vldr	s15, [pc, #96]	; 8012074 <ceilf+0x78>
 8012014:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012018:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801201c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012020:	dd05      	ble.n	801202e <ceilf+0x32>
 8012022:	2b00      	cmp	r3, #0
 8012024:	db23      	blt.n	801206e <ceilf+0x72>
 8012026:	2900      	cmp	r1, #0
 8012028:	bf18      	it	ne
 801202a:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 801202e:	ee00 3a10 	vmov	s0, r3
 8012032:	4770      	bx	lr
 8012034:	4910      	ldr	r1, [pc, #64]	; (8012078 <ceilf+0x7c>)
 8012036:	4111      	asrs	r1, r2
 8012038:	420b      	tst	r3, r1
 801203a:	d0fa      	beq.n	8012032 <ceilf+0x36>
 801203c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8012074 <ceilf+0x78>
 8012040:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012044:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801204c:	ddef      	ble.n	801202e <ceilf+0x32>
 801204e:	2b00      	cmp	r3, #0
 8012050:	bfc2      	ittt	gt
 8012052:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 8012056:	fa40 f202 	asrgt.w	r2, r0, r2
 801205a:	189b      	addgt	r3, r3, r2
 801205c:	ea23 0301 	bic.w	r3, r3, r1
 8012060:	e7e5      	b.n	801202e <ceilf+0x32>
 8012062:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8012066:	d3e4      	bcc.n	8012032 <ceilf+0x36>
 8012068:	ee30 0a00 	vadd.f32	s0, s0, s0
 801206c:	4770      	bx	lr
 801206e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012072:	e7dc      	b.n	801202e <ceilf+0x32>
 8012074:	7149f2ca 	.word	0x7149f2ca
 8012078:	007fffff 	.word	0x007fffff

0801207c <cosf>:
 801207c:	ee10 3a10 	vmov	r3, s0
 8012080:	b507      	push	{r0, r1, r2, lr}
 8012082:	4a1c      	ldr	r2, [pc, #112]	; (80120f4 <cosf+0x78>)
 8012084:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012088:	4293      	cmp	r3, r2
 801208a:	dc04      	bgt.n	8012096 <cosf+0x1a>
 801208c:	eddf 0a1a 	vldr	s1, [pc, #104]	; 80120f8 <cosf+0x7c>
 8012090:	f002 fabc 	bl	801460c <__kernel_cosf>
 8012094:	e004      	b.n	80120a0 <cosf+0x24>
 8012096:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801209a:	db04      	blt.n	80120a6 <cosf+0x2a>
 801209c:	ee30 0a40 	vsub.f32	s0, s0, s0
 80120a0:	b003      	add	sp, #12
 80120a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80120a6:	4668      	mov	r0, sp
 80120a8:	f002 f912 	bl	80142d0 <__ieee754_rem_pio2f>
 80120ac:	f000 0003 	and.w	r0, r0, #3
 80120b0:	2801      	cmp	r0, #1
 80120b2:	d007      	beq.n	80120c4 <cosf+0x48>
 80120b4:	2802      	cmp	r0, #2
 80120b6:	d00e      	beq.n	80120d6 <cosf+0x5a>
 80120b8:	b9a0      	cbnz	r0, 80120e4 <cosf+0x68>
 80120ba:	eddd 0a01 	vldr	s1, [sp, #4]
 80120be:	ed9d 0a00 	vldr	s0, [sp]
 80120c2:	e7e5      	b.n	8012090 <cosf+0x14>
 80120c4:	eddd 0a01 	vldr	s1, [sp, #4]
 80120c8:	ed9d 0a00 	vldr	s0, [sp]
 80120cc:	f002 fd7e 	bl	8014bcc <__kernel_sinf>
 80120d0:	eeb1 0a40 	vneg.f32	s0, s0
 80120d4:	e7e4      	b.n	80120a0 <cosf+0x24>
 80120d6:	eddd 0a01 	vldr	s1, [sp, #4]
 80120da:	ed9d 0a00 	vldr	s0, [sp]
 80120de:	f002 fa95 	bl	801460c <__kernel_cosf>
 80120e2:	e7f5      	b.n	80120d0 <cosf+0x54>
 80120e4:	2001      	movs	r0, #1
 80120e6:	eddd 0a01 	vldr	s1, [sp, #4]
 80120ea:	ed9d 0a00 	vldr	s0, [sp]
 80120ee:	f002 fd6d 	bl	8014bcc <__kernel_sinf>
 80120f2:	e7d5      	b.n	80120a0 <cosf+0x24>
 80120f4:	3f490fd8 	.word	0x3f490fd8
 80120f8:	00000000 	.word	0x00000000

080120fc <erff>:
 80120fc:	b538      	push	{r3, r4, r5, lr}
 80120fe:	ee10 4a10 	vmov	r4, s0
 8012102:	f024 4500 	bic.w	r5, r4, #2147483648	; 0x80000000
 8012106:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801210a:	ed2d 8b06 	vpush	{d8-d10}
 801210e:	eef0 7a40 	vmov.f32	s15, s0
 8012112:	db12      	blt.n	801213a <erff+0x3e>
 8012114:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012118:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801211c:	0fe4      	lsrs	r4, r4, #31
 801211e:	0064      	lsls	r4, r4, #1
 8012120:	f1c4 0301 	rsb	r3, r4, #1
 8012124:	ee00 3a10 	vmov	s0, r3
 8012128:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801212c:	ee70 7a07 	vadd.f32	s15, s0, s14
 8012130:	ecbd 8b06 	vpop	{d8-d10}
 8012134:	eeb0 0a67 	vmov.f32	s0, s15
 8012138:	bd38      	pop	{r3, r4, r5, pc}
 801213a:	4ba4      	ldr	r3, [pc, #656]	; (80123cc <erff+0x2d0>)
 801213c:	429d      	cmp	r5, r3
 801213e:	dc4a      	bgt.n	80121d6 <erff+0xda>
 8012140:	f1b5 5f46 	cmp.w	r5, #830472192	; 0x31800000
 8012144:	da16      	bge.n	8012174 <erff+0x78>
 8012146:	f1b5 6f80 	cmp.w	r5, #67108864	; 0x4000000
 801214a:	da0e      	bge.n	801216a <erff+0x6e>
 801214c:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 80123d0 <erff+0x2d4>
 8012150:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012154:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8012158:	eea7 0a87 	vfma.f32	s0, s15, s14
 801215c:	eef0 7a40 	vmov.f32	s15, s0
 8012160:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8012164:	ee67 7a80 	vmul.f32	s15, s15, s0
 8012168:	e7e2      	b.n	8012130 <erff+0x34>
 801216a:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 80123d4 <erff+0x2d8>
 801216e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8012172:	e7dd      	b.n	8012130 <erff+0x34>
 8012174:	ee20 7a00 	vmul.f32	s14, s0, s0
 8012178:	ed9f 6a97 	vldr	s12, [pc, #604]	; 80123d8 <erff+0x2dc>
 801217c:	eddf 6a97 	vldr	s13, [pc, #604]	; 80123dc <erff+0x2e0>
 8012180:	eddf 5a97 	vldr	s11, [pc, #604]	; 80123e0 <erff+0x2e4>
 8012184:	eee7 6a06 	vfma.f32	s13, s14, s12
 8012188:	ed9f 6a96 	vldr	s12, [pc, #600]	; 80123e4 <erff+0x2e8>
 801218c:	eea6 6a87 	vfma.f32	s12, s13, s14
 8012190:	eddf 6a95 	vldr	s13, [pc, #596]	; 80123e8 <erff+0x2ec>
 8012194:	eee6 6a07 	vfma.f32	s13, s12, s14
 8012198:	ed9f 6a8e 	vldr	s12, [pc, #568]	; 80123d4 <erff+0x2d8>
 801219c:	eea6 6a87 	vfma.f32	s12, s13, s14
 80121a0:	eddf 6a92 	vldr	s13, [pc, #584]	; 80123ec <erff+0x2f0>
 80121a4:	eee7 6a25 	vfma.f32	s13, s14, s11
 80121a8:	eddf 5a91 	vldr	s11, [pc, #580]	; 80123f0 <erff+0x2f4>
 80121ac:	eee6 5a87 	vfma.f32	s11, s13, s14
 80121b0:	eddf 6a90 	vldr	s13, [pc, #576]	; 80123f4 <erff+0x2f8>
 80121b4:	eee5 6a87 	vfma.f32	s13, s11, s14
 80121b8:	eddf 5a8f 	vldr	s11, [pc, #572]	; 80123f8 <erff+0x2fc>
 80121bc:	eee6 5a87 	vfma.f32	s11, s13, s14
 80121c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80121c4:	eee5 6a87 	vfma.f32	s13, s11, s14
 80121c8:	eeb0 7a66 	vmov.f32	s14, s13
 80121cc:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80121d0:	eee0 7a26 	vfma.f32	s15, s0, s13
 80121d4:	e7ac      	b.n	8012130 <erff+0x34>
 80121d6:	4b89      	ldr	r3, [pc, #548]	; (80123fc <erff+0x300>)
 80121d8:	429d      	cmp	r5, r3
 80121da:	dc44      	bgt.n	8012266 <erff+0x16a>
 80121dc:	f000 f96e 	bl	80124bc <fabsf>
 80121e0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80121e4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80121e8:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8012400 <erff+0x304>
 80121ec:	eddf 6a85 	vldr	s13, [pc, #532]	; 8012404 <erff+0x308>
 80121f0:	ed9f 6a85 	vldr	s12, [pc, #532]	; 8012408 <erff+0x30c>
 80121f4:	eee0 6a07 	vfma.f32	s13, s0, s14
 80121f8:	2c00      	cmp	r4, #0
 80121fa:	ed9f 7a84 	vldr	s14, [pc, #528]	; 801240c <erff+0x310>
 80121fe:	eea6 7a80 	vfma.f32	s14, s13, s0
 8012202:	eddf 6a83 	vldr	s13, [pc, #524]	; 8012410 <erff+0x314>
 8012206:	eee7 6a00 	vfma.f32	s13, s14, s0
 801220a:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8012414 <erff+0x318>
 801220e:	eea6 7a80 	vfma.f32	s14, s13, s0
 8012212:	eddf 6a81 	vldr	s13, [pc, #516]	; 8012418 <erff+0x31c>
 8012216:	eee7 6a00 	vfma.f32	s13, s14, s0
 801221a:	ed9f 7a80 	vldr	s14, [pc, #512]	; 801241c <erff+0x320>
 801221e:	eea6 7a80 	vfma.f32	s14, s13, s0
 8012222:	eddf 6a7f 	vldr	s13, [pc, #508]	; 8012420 <erff+0x324>
 8012226:	eee0 6a06 	vfma.f32	s13, s0, s12
 801222a:	ed9f 6a7e 	vldr	s12, [pc, #504]	; 8012424 <erff+0x328>
 801222e:	eea6 6a80 	vfma.f32	s12, s13, s0
 8012232:	eddf 6a7d 	vldr	s13, [pc, #500]	; 8012428 <erff+0x32c>
 8012236:	eee6 6a00 	vfma.f32	s13, s12, s0
 801223a:	ed9f 6a7c 	vldr	s12, [pc, #496]	; 801242c <erff+0x330>
 801223e:	eea6 6a80 	vfma.f32	s12, s13, s0
 8012242:	eddf 6a7b 	vldr	s13, [pc, #492]	; 8012430 <erff+0x334>
 8012246:	eee6 6a00 	vfma.f32	s13, s12, s0
 801224a:	eee6 7a80 	vfma.f32	s15, s13, s0
 801224e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8012252:	bfab      	itete	ge
 8012254:	eddf 7a77 	vldrge	s15, [pc, #476]	; 8012434 <erff+0x338>
 8012258:	eddf 7a77 	vldrlt	s15, [pc, #476]	; 8012438 <erff+0x33c>
 801225c:	ee70 7a27 	vaddge.f32	s15, s0, s15
 8012260:	ee77 7ac0 	vsublt.f32	s15, s15, s0
 8012264:	e764      	b.n	8012130 <erff+0x34>
 8012266:	4b75      	ldr	r3, [pc, #468]	; (801243c <erff+0x340>)
 8012268:	429d      	cmp	r5, r3
 801226a:	dd08      	ble.n	801227e <erff+0x182>
 801226c:	2c00      	cmp	r4, #0
 801226e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012272:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8012276:	bfa8      	it	ge
 8012278:	eef0 7a40 	vmovge.f32	s15, s0
 801227c:	e758      	b.n	8012130 <erff+0x34>
 801227e:	f000 f91d 	bl	80124bc <fabsf>
 8012282:	4b6f      	ldr	r3, [pc, #444]	; (8012440 <erff+0x344>)
 8012284:	ee60 7a00 	vmul.f32	s15, s0, s0
 8012288:	eeb0 9a40 	vmov.f32	s18, s0
 801228c:	429d      	cmp	r5, r3
 801228e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012292:	ee80 7a27 	vdiv.f32	s14, s0, s15
 8012296:	eef0 8a40 	vmov.f32	s17, s0
 801229a:	dc64      	bgt.n	8012366 <erff+0x26a>
 801229c:	eddf 7a69 	vldr	s15, [pc, #420]	; 8012444 <erff+0x348>
 80122a0:	eddf 6a69 	vldr	s13, [pc, #420]	; 8012448 <erff+0x34c>
 80122a4:	eddf 9a69 	vldr	s19, [pc, #420]	; 801244c <erff+0x350>
 80122a8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80122ac:	eddf 7a68 	vldr	s15, [pc, #416]	; 8012450 <erff+0x354>
 80122b0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80122b4:	eddf 6a67 	vldr	s13, [pc, #412]	; 8012454 <erff+0x358>
 80122b8:	eee7 6a87 	vfma.f32	s13, s15, s14
 80122bc:	eddf 7a66 	vldr	s15, [pc, #408]	; 8012458 <erff+0x35c>
 80122c0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80122c4:	eddf 6a65 	vldr	s13, [pc, #404]	; 801245c <erff+0x360>
 80122c8:	eee7 6a87 	vfma.f32	s13, s15, s14
 80122cc:	eddf 7a64 	vldr	s15, [pc, #400]	; 8012460 <erff+0x364>
 80122d0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80122d4:	eddf 6a63 	vldr	s13, [pc, #396]	; 8012464 <erff+0x368>
 80122d8:	eee7 9a87 	vfma.f32	s19, s15, s14
 80122dc:	eddf 7a62 	vldr	s15, [pc, #392]	; 8012468 <erff+0x36c>
 80122e0:	eee7 7a26 	vfma.f32	s15, s14, s13
 80122e4:	eddf 6a61 	vldr	s13, [pc, #388]	; 801246c <erff+0x370>
 80122e8:	eee7 6a87 	vfma.f32	s13, s15, s14
 80122ec:	eddf 7a60 	vldr	s15, [pc, #384]	; 8012470 <erff+0x374>
 80122f0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80122f4:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8012474 <erff+0x378>
 80122f8:	eee7 6a87 	vfma.f32	s13, s15, s14
 80122fc:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8012478 <erff+0x37c>
 8012300:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012304:	eddf 6a5d 	vldr	s13, [pc, #372]	; 801247c <erff+0x380>
 8012308:	eee7 6a87 	vfma.f32	s13, s15, s14
 801230c:	eddf 7a5c 	vldr	s15, [pc, #368]	; 8012480 <erff+0x384>
 8012310:	ee19 3a10 	vmov	r3, s18
 8012314:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012318:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801231c:	f023 030f 	bic.w	r3, r3, #15
 8012320:	ee08 3a10 	vmov	s16, r3
 8012324:	eef0 aa68 	vmov.f32	s21, s17
 8012328:	eebe 0a02 	vmov.f32	s0, #226	; 0xbf100000 -0.5625000
 801232c:	eee7 aa87 	vfma.f32	s21, s15, s14
 8012330:	eea8 0a48 	vfms.f32	s0, s16, s16
 8012334:	f001 fac2 	bl	80138bc <__ieee754_expf>
 8012338:	eeb0 aa40 	vmov.f32	s20, s0
 801233c:	ee89 0aaa 	vdiv.f32	s0, s19, s21
 8012340:	ee78 7a49 	vsub.f32	s15, s16, s18
 8012344:	ee38 8a09 	vadd.f32	s16, s16, s18
 8012348:	eea7 0a88 	vfma.f32	s0, s15, s16
 801234c:	f001 fab6 	bl	80138bc <__ieee754_expf>
 8012350:	ee2a 0a00 	vmul.f32	s0, s20, s0
 8012354:	2c00      	cmp	r4, #0
 8012356:	eec0 7a09 	vdiv.f32	s15, s0, s18
 801235a:	bfac      	ite	ge
 801235c:	ee78 7ae7 	vsubge.f32	s15, s17, s15
 8012360:	ee77 7ae8 	vsublt.f32	s15, s15, s17
 8012364:	e6e4      	b.n	8012130 <erff+0x34>
 8012366:	eddf 6a47 	vldr	s13, [pc, #284]	; 8012484 <erff+0x388>
 801236a:	eddf 7a47 	vldr	s15, [pc, #284]	; 8012488 <erff+0x38c>
 801236e:	eddf 9a47 	vldr	s19, [pc, #284]	; 801248c <erff+0x390>
 8012372:	eee7 7a26 	vfma.f32	s15, s14, s13
 8012376:	eddf 6a46 	vldr	s13, [pc, #280]	; 8012490 <erff+0x394>
 801237a:	eee7 6a87 	vfma.f32	s13, s15, s14
 801237e:	eddf 7a45 	vldr	s15, [pc, #276]	; 8012494 <erff+0x398>
 8012382:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012386:	eddf 6a44 	vldr	s13, [pc, #272]	; 8012498 <erff+0x39c>
 801238a:	eee7 6a87 	vfma.f32	s13, s15, s14
 801238e:	eddf 7a43 	vldr	s15, [pc, #268]	; 801249c <erff+0x3a0>
 8012392:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012396:	eddf 6a42 	vldr	s13, [pc, #264]	; 80124a0 <erff+0x3a4>
 801239a:	eee7 9a87 	vfma.f32	s19, s15, s14
 801239e:	eddf 7a41 	vldr	s15, [pc, #260]	; 80124a4 <erff+0x3a8>
 80123a2:	eee7 6a27 	vfma.f32	s13, s14, s15
 80123a6:	eddf 7a40 	vldr	s15, [pc, #256]	; 80124a8 <erff+0x3ac>
 80123aa:	eee6 7a87 	vfma.f32	s15, s13, s14
 80123ae:	eddf 6a3f 	vldr	s13, [pc, #252]	; 80124ac <erff+0x3b0>
 80123b2:	eee7 6a87 	vfma.f32	s13, s15, s14
 80123b6:	eddf 7a3e 	vldr	s15, [pc, #248]	; 80124b0 <erff+0x3b4>
 80123ba:	eee6 7a87 	vfma.f32	s15, s13, s14
 80123be:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80124b4 <erff+0x3b8>
 80123c2:	eee7 6a87 	vfma.f32	s13, s15, s14
 80123c6:	eddf 7a3c 	vldr	s15, [pc, #240]	; 80124b8 <erff+0x3bc>
 80123ca:	e7a1      	b.n	8012310 <erff+0x214>
 80123cc:	3f57ffff 	.word	0x3f57ffff
 80123d0:	3f8375d4 	.word	0x3f8375d4
 80123d4:	3e0375d4 	.word	0x3e0375d4
 80123d8:	b7c756b1 	.word	0xb7c756b1
 80123dc:	bbbd1489 	.word	0xbbbd1489
 80123e0:	b684e21a 	.word	0xb684e21a
 80123e4:	bce9528f 	.word	0xbce9528f
 80123e8:	bea66beb 	.word	0xbea66beb
 80123ec:	390aee49 	.word	0x390aee49
 80123f0:	3ba68116 	.word	0x3ba68116
 80123f4:	3d852a63 	.word	0x3d852a63
 80123f8:	3ecbbbce 	.word	0x3ecbbbce
 80123fc:	3f9fffff 	.word	0x3f9fffff
 8012400:	bb0df9c0 	.word	0xbb0df9c0
 8012404:	3d1151b3 	.word	0x3d1151b3
 8012408:	3c445aa3 	.word	0x3c445aa3
 801240c:	bde31cc2 	.word	0xbde31cc2
 8012410:	3ea2fe54 	.word	0x3ea2fe54
 8012414:	bebe9208 	.word	0xbebe9208
 8012418:	3ed46805 	.word	0x3ed46805
 801241c:	bb1acdc6 	.word	0xbb1acdc6
 8012420:	3c5f6e13 	.word	0x3c5f6e13
 8012424:	3e013307 	.word	0x3e013307
 8012428:	3d931ae7 	.word	0x3d931ae7
 801242c:	3f0a5785 	.word	0x3f0a5785
 8012430:	3dd9f331 	.word	0x3dd9f331
 8012434:	3f58560b 	.word	0x3f58560b
 8012438:	bf58560b 	.word	0xbf58560b
 801243c:	40bfffff 	.word	0x40bfffff
 8012440:	4036db6d 	.word	0x4036db6d
 8012444:	c11d077e 	.word	0xc11d077e
 8012448:	c2a2932b 	.word	0xc2a2932b
 801244c:	bc21a093 	.word	0xbc21a093
 8012450:	c3389ae7 	.word	0xc3389ae7
 8012454:	c322658c 	.word	0xc322658c
 8012458:	c2798057 	.word	0xc2798057
 801245c:	c128f022 	.word	0xc128f022
 8012460:	bf31a0b7 	.word	0xbf31a0b7
 8012464:	bd777f97 	.word	0xbd777f97
 8012468:	40d23f7c 	.word	0x40d23f7c
 801246c:	42d9451f 	.word	0x42d9451f
 8012470:	43d6810b 	.word	0x43d6810b
 8012474:	442158c9 	.word	0x442158c9
 8012478:	43d9486f 	.word	0x43d9486f
 801247c:	4309a863 	.word	0x4309a863
 8012480:	419d35ce 	.word	0x419d35ce
 8012484:	c3f1c275 	.word	0xc3f1c275
 8012488:	c480230b 	.word	0xc480230b
 801248c:	bc21a092 	.word	0xbc21a092
 8012490:	c41f6441 	.word	0xc41f6441
 8012494:	c320a2ea 	.word	0xc320a2ea
 8012498:	c18e104b 	.word	0xc18e104b
 801249c:	bf4c9dd4 	.word	0xbf4c9dd4
 80124a0:	43ed43a7 	.word	0x43ed43a7
 80124a4:	c1b38712 	.word	0xc1b38712
 80124a8:	451f90ce 	.word	0x451f90ce
 80124ac:	4547fdbb 	.word	0x4547fdbb
 80124b0:	44c01759 	.word	0x44c01759
 80124b4:	43a2e571 	.word	0x43a2e571
 80124b8:	41f2b459 	.word	0x41f2b459

080124bc <fabsf>:
 80124bc:	ee10 3a10 	vmov	r3, s0
 80124c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80124c4:	ee00 3a10 	vmov	s0, r3
 80124c8:	4770      	bx	lr
	...

080124cc <floorf>:
 80124cc:	ee10 3a10 	vmov	r3, s0
 80124d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80124d4:	0dca      	lsrs	r2, r1, #23
 80124d6:	3a7f      	subs	r2, #127	; 0x7f
 80124d8:	2a16      	cmp	r2, #22
 80124da:	dc2a      	bgt.n	8012532 <floorf+0x66>
 80124dc:	2a00      	cmp	r2, #0
 80124de:	da11      	bge.n	8012504 <floorf+0x38>
 80124e0:	eddf 7a18 	vldr	s15, [pc, #96]	; 8012544 <floorf+0x78>
 80124e4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80124e8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80124ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124f0:	dd05      	ble.n	80124fe <floorf+0x32>
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	da23      	bge.n	801253e <floorf+0x72>
 80124f6:	4a14      	ldr	r2, [pc, #80]	; (8012548 <floorf+0x7c>)
 80124f8:	2900      	cmp	r1, #0
 80124fa:	bf18      	it	ne
 80124fc:	4613      	movne	r3, r2
 80124fe:	ee00 3a10 	vmov	s0, r3
 8012502:	4770      	bx	lr
 8012504:	4911      	ldr	r1, [pc, #68]	; (801254c <floorf+0x80>)
 8012506:	4111      	asrs	r1, r2
 8012508:	420b      	tst	r3, r1
 801250a:	d0fa      	beq.n	8012502 <floorf+0x36>
 801250c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8012544 <floorf+0x78>
 8012510:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012514:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801251c:	ddef      	ble.n	80124fe <floorf+0x32>
 801251e:	2b00      	cmp	r3, #0
 8012520:	bfbe      	ittt	lt
 8012522:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8012526:	fa40 f202 	asrlt.w	r2, r0, r2
 801252a:	189b      	addlt	r3, r3, r2
 801252c:	ea23 0301 	bic.w	r3, r3, r1
 8012530:	e7e5      	b.n	80124fe <floorf+0x32>
 8012532:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8012536:	d3e4      	bcc.n	8012502 <floorf+0x36>
 8012538:	ee30 0a00 	vadd.f32	s0, s0, s0
 801253c:	4770      	bx	lr
 801253e:	2300      	movs	r3, #0
 8012540:	e7dd      	b.n	80124fe <floorf+0x32>
 8012542:	bf00      	nop
 8012544:	7149f2ca 	.word	0x7149f2ca
 8012548:	bf800000 	.word	0xbf800000
 801254c:	007fffff 	.word	0x007fffff

08012550 <log1pf>:
 8012550:	ee10 2a10 	vmov	r2, s0
 8012554:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8012558:	db02      	blt.n	8012560 <log1pf+0x10>
 801255a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801255e:	4770      	bx	lr
 8012560:	4b70      	ldr	r3, [pc, #448]	; (8012724 <log1pf+0x1d4>)
 8012562:	429a      	cmp	r2, r3
 8012564:	dc78      	bgt.n	8012658 <log1pf+0x108>
 8012566:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 801256a:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801256e:	db12      	blt.n	8012596 <log1pf+0x46>
 8012570:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8012574:	eeb4 0a67 	vcmp.f32	s0, s15
 8012578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801257c:	bf05      	ittet	eq
 801257e:	ed9f 7a6a 	vldreq	s14, [pc, #424]	; 8012728 <log1pf+0x1d8>
 8012582:	eddf 7a6a 	vldreq	s15, [pc, #424]	; 801272c <log1pf+0x1dc>
 8012586:	ee70 7a40 	vsubne.f32	s15, s0, s0
 801258a:	ee87 0a27 	vdiveq.f32	s0, s14, s15
 801258e:	bf18      	it	ne
 8012590:	ee87 0aa7 	vdivne.f32	s0, s15, s15
 8012594:	4770      	bx	lr
 8012596:	f1b3 5f44 	cmp.w	r3, #822083584	; 0x31000000
 801259a:	da13      	bge.n	80125c4 <log1pf+0x74>
 801259c:	eddf 7a64 	vldr	s15, [pc, #400]	; 8012730 <log1pf+0x1e0>
 80125a0:	ee70 7a27 	vadd.f32	s15, s0, s15
 80125a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80125a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125ac:	dd03      	ble.n	80125b6 <log1pf+0x66>
 80125ae:	f1b3 5f12 	cmp.w	r3, #612368384	; 0x24800000
 80125b2:	f2c0 80b6 	blt.w	8012722 <log1pf+0x1d2>
 80125b6:	ee20 7a40 	vnmul.f32	s14, s0, s0
 80125ba:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80125be:	eea7 0a27 	vfma.f32	s0, s14, s15
 80125c2:	4770      	bx	lr
 80125c4:	4b5b      	ldr	r3, [pc, #364]	; (8012734 <log1pf+0x1e4>)
 80125c6:	441a      	add	r2, r3
 80125c8:	429a      	cmp	r2, r3
 80125ca:	d84d      	bhi.n	8012668 <log1pf+0x118>
 80125cc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80125d0:	ee30 7a27 	vadd.f32	s14, s0, s15
 80125d4:	ee17 2a10 	vmov	r2, s14
 80125d8:	15d3      	asrs	r3, r2, #23
 80125da:	3b7f      	subs	r3, #127	; 0x7f
 80125dc:	2b00      	cmp	r3, #0
 80125de:	bfcb      	itete	gt
 80125e0:	ee37 0a40 	vsubgt.f32	s0, s14, s0
 80125e4:	ee77 7a67 	vsuble.f32	s15, s14, s15
 80125e8:	ee37 0ac0 	vsubgt.f32	s0, s15, s0
 80125ec:	ee30 0a67 	vsuble.f32	s0, s0, s15
 80125f0:	eec0 6a07 	vdiv.f32	s13, s0, s14
 80125f4:	4950      	ldr	r1, [pc, #320]	; (8012738 <log1pf+0x1e8>)
 80125f6:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80125fa:	428a      	cmp	r2, r1
 80125fc:	bfc9      	itett	gt
 80125fe:	f042 517c 	orrgt.w	r1, r2, #1056964608	; 0x3f000000
 8012602:	f042 517e 	orrle.w	r1, r2, #1065353216	; 0x3f800000
 8012606:	f5c2 0200 	rsbgt	r2, r2, #8388608	; 0x800000
 801260a:	3301      	addgt	r3, #1
 801260c:	bfc8      	it	gt
 801260e:	1092      	asrgt	r2, r2, #2
 8012610:	ee07 1a90 	vmov	s15, r1
 8012614:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012618:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801261c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8012620:	ee20 7a07 	vmul.f32	s14, s0, s14
 8012624:	ee27 7a00 	vmul.f32	s14, s14, s0
 8012628:	2a00      	cmp	r2, #0
 801262a:	d13d      	bne.n	80126a8 <log1pf+0x158>
 801262c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8012630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012634:	d11b      	bne.n	801266e <log1pf+0x11e>
 8012636:	2b00      	cmp	r3, #0
 8012638:	d071      	beq.n	801271e <log1pf+0x1ce>
 801263a:	ee07 3a90 	vmov	s15, r3
 801263e:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 801273c <log1pf+0x1ec>
 8012642:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012646:	eee7 6a87 	vfma.f32	s13, s15, s14
 801264a:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8012740 <log1pf+0x1f0>
 801264e:	eeb0 0a66 	vmov.f32	s0, s13
 8012652:	eea7 0a87 	vfma.f32	s0, s15, s14
 8012656:	4770      	bx	lr
 8012658:	f1b2 4fb4 	cmp.w	r2, #1509949440	; 0x5a000000
 801265c:	dbb6      	blt.n	80125cc <log1pf+0x7c>
 801265e:	15d3      	asrs	r3, r2, #23
 8012660:	3b7f      	subs	r3, #127	; 0x7f
 8012662:	eddf 6a32 	vldr	s13, [pc, #200]	; 801272c <log1pf+0x1dc>
 8012666:	e7c5      	b.n	80125f4 <log1pf+0xa4>
 8012668:	2201      	movs	r2, #1
 801266a:	2300      	movs	r3, #0
 801266c:	e7d6      	b.n	801261c <log1pf+0xcc>
 801266e:	eddf 7a35 	vldr	s15, [pc, #212]	; 8012744 <log1pf+0x1f4>
 8012672:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8012676:	eea0 6a67 	vfms.f32	s12, s0, s15
 801267a:	ee26 6a07 	vmul.f32	s12, s12, s14
 801267e:	b913      	cbnz	r3, 8012686 <log1pf+0x136>
 8012680:	ee30 0a46 	vsub.f32	s0, s0, s12
 8012684:	4770      	bx	lr
 8012686:	ee07 3a90 	vmov	s15, r3
 801268a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 801273c <log1pf+0x1ec>
 801268e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012692:	eee7 6a87 	vfma.f32	s13, s15, s14
 8012696:	ee36 7a66 	vsub.f32	s14, s12, s13
 801269a:	ee37 0a40 	vsub.f32	s0, s14, s0
 801269e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8012740 <log1pf+0x1f0>
 80126a2:	ee97 0a87 	vfnms.f32	s0, s15, s14
 80126a6:	4770      	bx	lr
 80126a8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80126ac:	ee70 7a27 	vadd.f32	s15, s0, s15
 80126b0:	ed9f 6a25 	vldr	s12, [pc, #148]	; 8012748 <log1pf+0x1f8>
 80126b4:	ed9f 5a25 	vldr	s10, [pc, #148]	; 801274c <log1pf+0x1fc>
 80126b8:	eec0 5a27 	vdiv.f32	s11, s0, s15
 80126bc:	ee65 7aa5 	vmul.f32	s15, s11, s11
 80126c0:	eea7 5a86 	vfma.f32	s10, s15, s12
 80126c4:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8012750 <log1pf+0x200>
 80126c8:	eea5 6a27 	vfma.f32	s12, s10, s15
 80126cc:	ed9f 5a21 	vldr	s10, [pc, #132]	; 8012754 <log1pf+0x204>
 80126d0:	eea6 5a27 	vfma.f32	s10, s12, s15
 80126d4:	ed9f 6a20 	vldr	s12, [pc, #128]	; 8012758 <log1pf+0x208>
 80126d8:	eea5 6a27 	vfma.f32	s12, s10, s15
 80126dc:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 801275c <log1pf+0x20c>
 80126e0:	eea6 5a27 	vfma.f32	s10, s12, s15
 80126e4:	ed9f 6a17 	vldr	s12, [pc, #92]	; 8012744 <log1pf+0x1f4>
 80126e8:	eea5 6a27 	vfma.f32	s12, s10, s15
 80126ec:	eeb0 5a47 	vmov.f32	s10, s14
 80126f0:	eea6 5a27 	vfma.f32	s10, s12, s15
 80126f4:	ee25 6a25 	vmul.f32	s12, s10, s11
 80126f8:	b923      	cbnz	r3, 8012704 <log1pf+0x1b4>
 80126fa:	ee37 7a46 	vsub.f32	s14, s14, s12
 80126fe:	ee30 0a47 	vsub.f32	s0, s0, s14
 8012702:	4770      	bx	lr
 8012704:	ee07 3a90 	vmov	s15, r3
 8012708:	eddf 5a0c 	vldr	s11, [pc, #48]	; 801273c <log1pf+0x1ec>
 801270c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012710:	eee7 6aa5 	vfma.f32	s13, s15, s11
 8012714:	ee76 6a86 	vadd.f32	s13, s13, s12
 8012718:	ee37 7a66 	vsub.f32	s14, s14, s13
 801271c:	e7bd      	b.n	801269a <log1pf+0x14a>
 801271e:	ed9f 0a03 	vldr	s0, [pc, #12]	; 801272c <log1pf+0x1dc>
 8012722:	4770      	bx	lr
 8012724:	3ed413d6 	.word	0x3ed413d6
 8012728:	cc000000 	.word	0xcc000000
 801272c:	00000000 	.word	0x00000000
 8012730:	4c000000 	.word	0x4c000000
 8012734:	416a09e0 	.word	0x416a09e0
 8012738:	003504f6 	.word	0x003504f6
 801273c:	3717f7d1 	.word	0x3717f7d1
 8012740:	3f317180 	.word	0x3f317180
 8012744:	3f2aaaab 	.word	0x3f2aaaab
 8012748:	3e178897 	.word	0x3e178897
 801274c:	3e1cd04f 	.word	0x3e1cd04f
 8012750:	3e3a3325 	.word	0x3e3a3325
 8012754:	3e638e29 	.word	0x3e638e29
 8012758:	3e924925 	.word	0x3e924925
 801275c:	3ecccccd 	.word	0x3ecccccd

08012760 <roundf>:
 8012760:	ee10 0a10 	vmov	r0, s0
 8012764:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8012768:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 801276c:	2a16      	cmp	r2, #22
 801276e:	dc15      	bgt.n	801279c <roundf+0x3c>
 8012770:	2a00      	cmp	r2, #0
 8012772:	da08      	bge.n	8012786 <roundf+0x26>
 8012774:	3201      	adds	r2, #1
 8012776:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 801277a:	d101      	bne.n	8012780 <roundf+0x20>
 801277c:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8012780:	ee00 3a10 	vmov	s0, r3
 8012784:	4770      	bx	lr
 8012786:	4908      	ldr	r1, [pc, #32]	; (80127a8 <roundf+0x48>)
 8012788:	4111      	asrs	r1, r2
 801278a:	4208      	tst	r0, r1
 801278c:	d0fa      	beq.n	8012784 <roundf+0x24>
 801278e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012792:	4113      	asrs	r3, r2
 8012794:	4403      	add	r3, r0
 8012796:	ea23 0301 	bic.w	r3, r3, r1
 801279a:	e7f1      	b.n	8012780 <roundf+0x20>
 801279c:	2a80      	cmp	r2, #128	; 0x80
 801279e:	d1f1      	bne.n	8012784 <roundf+0x24>
 80127a0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80127a4:	4770      	bx	lr
 80127a6:	bf00      	nop
 80127a8:	007fffff 	.word	0x007fffff

080127ac <sinf>:
 80127ac:	ee10 3a10 	vmov	r3, s0
 80127b0:	b507      	push	{r0, r1, r2, lr}
 80127b2:	4a1d      	ldr	r2, [pc, #116]	; (8012828 <sinf+0x7c>)
 80127b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80127b8:	4293      	cmp	r3, r2
 80127ba:	dc05      	bgt.n	80127c8 <sinf+0x1c>
 80127bc:	eddf 0a1b 	vldr	s1, [pc, #108]	; 801282c <sinf+0x80>
 80127c0:	2000      	movs	r0, #0
 80127c2:	f002 fa03 	bl	8014bcc <__kernel_sinf>
 80127c6:	e004      	b.n	80127d2 <sinf+0x26>
 80127c8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80127cc:	db04      	blt.n	80127d8 <sinf+0x2c>
 80127ce:	ee30 0a40 	vsub.f32	s0, s0, s0
 80127d2:	b003      	add	sp, #12
 80127d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80127d8:	4668      	mov	r0, sp
 80127da:	f001 fd79 	bl	80142d0 <__ieee754_rem_pio2f>
 80127de:	f000 0003 	and.w	r0, r0, #3
 80127e2:	2801      	cmp	r0, #1
 80127e4:	d008      	beq.n	80127f8 <sinf+0x4c>
 80127e6:	2802      	cmp	r0, #2
 80127e8:	d00d      	beq.n	8012806 <sinf+0x5a>
 80127ea:	b9b0      	cbnz	r0, 801281a <sinf+0x6e>
 80127ec:	2001      	movs	r0, #1
 80127ee:	eddd 0a01 	vldr	s1, [sp, #4]
 80127f2:	ed9d 0a00 	vldr	s0, [sp]
 80127f6:	e7e4      	b.n	80127c2 <sinf+0x16>
 80127f8:	eddd 0a01 	vldr	s1, [sp, #4]
 80127fc:	ed9d 0a00 	vldr	s0, [sp]
 8012800:	f001 ff04 	bl	801460c <__kernel_cosf>
 8012804:	e7e5      	b.n	80127d2 <sinf+0x26>
 8012806:	2001      	movs	r0, #1
 8012808:	eddd 0a01 	vldr	s1, [sp, #4]
 801280c:	ed9d 0a00 	vldr	s0, [sp]
 8012810:	f002 f9dc 	bl	8014bcc <__kernel_sinf>
 8012814:	eeb1 0a40 	vneg.f32	s0, s0
 8012818:	e7db      	b.n	80127d2 <sinf+0x26>
 801281a:	eddd 0a01 	vldr	s1, [sp, #4]
 801281e:	ed9d 0a00 	vldr	s0, [sp]
 8012822:	f001 fef3 	bl	801460c <__kernel_cosf>
 8012826:	e7f5      	b.n	8012814 <sinf+0x68>
 8012828:	3f490fd8 	.word	0x3f490fd8
 801282c:	00000000 	.word	0x00000000

08012830 <tanf>:
 8012830:	ee10 3a10 	vmov	r3, s0
 8012834:	b507      	push	{r0, r1, r2, lr}
 8012836:	4a10      	ldr	r2, [pc, #64]	; (8012878 <tanf+0x48>)
 8012838:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801283c:	4293      	cmp	r3, r2
 801283e:	dc05      	bgt.n	801284c <tanf+0x1c>
 8012840:	eddf 0a0e 	vldr	s1, [pc, #56]	; 801287c <tanf+0x4c>
 8012844:	2001      	movs	r0, #1
 8012846:	f002 fa09 	bl	8014c5c <__kernel_tanf>
 801284a:	e004      	b.n	8012856 <tanf+0x26>
 801284c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012850:	db04      	blt.n	801285c <tanf+0x2c>
 8012852:	ee30 0a40 	vsub.f32	s0, s0, s0
 8012856:	b003      	add	sp, #12
 8012858:	f85d fb04 	ldr.w	pc, [sp], #4
 801285c:	4668      	mov	r0, sp
 801285e:	f001 fd37 	bl	80142d0 <__ieee754_rem_pio2f>
 8012862:	0040      	lsls	r0, r0, #1
 8012864:	f000 0002 	and.w	r0, r0, #2
 8012868:	f1c0 0001 	rsb	r0, r0, #1
 801286c:	eddd 0a01 	vldr	s1, [sp, #4]
 8012870:	ed9d 0a00 	vldr	s0, [sp]
 8012874:	e7e7      	b.n	8012846 <tanf+0x16>
 8012876:	bf00      	nop
 8012878:	3f490fda 	.word	0x3f490fda
 801287c:	00000000 	.word	0x00000000

08012880 <tanhf>:
 8012880:	b510      	push	{r4, lr}
 8012882:	ee10 4a10 	vmov	r4, s0
 8012886:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801288a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801288e:	ed2d 8b02 	vpush	{d8}
 8012892:	eef0 7a40 	vmov.f32	s15, s0
 8012896:	db0c      	blt.n	80128b2 <tanhf+0x32>
 8012898:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801289c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80128a0:	2c00      	cmp	r4, #0
 80128a2:	bfac      	ite	ge
 80128a4:	ee30 0a07 	vaddge.f32	s0, s0, s14
 80128a8:	ee30 0a47 	vsublt.f32	s0, s0, s14
 80128ac:	ecbd 8b02 	vpop	{d8}
 80128b0:	bd10      	pop	{r4, pc}
 80128b2:	4a1b      	ldr	r2, [pc, #108]	; (8012920 <tanhf+0xa0>)
 80128b4:	4293      	cmp	r3, r2
 80128b6:	dc30      	bgt.n	801291a <tanhf+0x9a>
 80128b8:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 80128bc:	da06      	bge.n	80128cc <tanhf+0x4c>
 80128be:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80128c2:	ee37 0a80 	vadd.f32	s0, s15, s0
 80128c6:	ee20 0a27 	vmul.f32	s0, s0, s15
 80128ca:	e7ef      	b.n	80128ac <tanhf+0x2c>
 80128cc:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80128d0:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 80128d4:	db12      	blt.n	80128fc <tanhf+0x7c>
 80128d6:	f7ff fdf1 	bl	80124bc <fabsf>
 80128da:	ee30 0a00 	vadd.f32	s0, s0, s0
 80128de:	f002 faab 	bl	8014e38 <expm1f>
 80128e2:	ee30 0a08 	vadd.f32	s0, s0, s16
 80128e6:	eec8 7a00 	vdiv.f32	s15, s16, s0
 80128ea:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80128ee:	ee30 0a67 	vsub.f32	s0, s0, s15
 80128f2:	2c00      	cmp	r4, #0
 80128f4:	bfb8      	it	lt
 80128f6:	eeb1 0a40 	vneglt.f32	s0, s0
 80128fa:	e7d7      	b.n	80128ac <tanhf+0x2c>
 80128fc:	f7ff fdde 	bl	80124bc <fabsf>
 8012900:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 8012904:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012908:	f002 fa96 	bl	8014e38 <expm1f>
 801290c:	ee70 7a08 	vadd.f32	s15, s0, s16
 8012910:	eeb1 7a40 	vneg.f32	s14, s0
 8012914:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8012918:	e7eb      	b.n	80128f2 <tanhf+0x72>
 801291a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801291e:	e7e8      	b.n	80128f2 <tanhf+0x72>
 8012920:	41afffff 	.word	0x41afffff

08012924 <acosf>:
 8012924:	b510      	push	{r4, lr}
 8012926:	ed2d 8b02 	vpush	{d8}
 801292a:	4c27      	ldr	r4, [pc, #156]	; (80129c8 <acosf+0xa4>)
 801292c:	b08a      	sub	sp, #40	; 0x28
 801292e:	eeb0 8a40 	vmov.f32	s16, s0
 8012932:	f000 fce1 	bl	80132f8 <__ieee754_acosf>
 8012936:	f994 3000 	ldrsb.w	r3, [r4]
 801293a:	3301      	adds	r3, #1
 801293c:	eef0 8a40 	vmov.f32	s17, s0
 8012940:	d03c      	beq.n	80129bc <acosf+0x98>
 8012942:	eeb4 8a48 	vcmp.f32	s16, s16
 8012946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801294a:	d637      	bvs.n	80129bc <acosf+0x98>
 801294c:	eeb0 0a48 	vmov.f32	s0, s16
 8012950:	f7ff fdb4 	bl	80124bc <fabsf>
 8012954:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012958:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801295c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012960:	dd2c      	ble.n	80129bc <acosf+0x98>
 8012962:	2301      	movs	r3, #1
 8012964:	9300      	str	r3, [sp, #0]
 8012966:	4b19      	ldr	r3, [pc, #100]	; (80129cc <acosf+0xa8>)
 8012968:	9301      	str	r3, [sp, #4]
 801296a:	ee18 0a10 	vmov	r0, s16
 801296e:	2300      	movs	r3, #0
 8012970:	9308      	str	r3, [sp, #32]
 8012972:	f7f4 ff79 	bl	8007868 <__aeabi_f2d>
 8012976:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801297a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801297e:	4814      	ldr	r0, [pc, #80]	; (80129d0 <acosf+0xac>)
 8012980:	f002 fa52 	bl	8014e28 <nan>
 8012984:	f994 3000 	ldrsb.w	r3, [r4]
 8012988:	2b02      	cmp	r3, #2
 801298a:	ed8d 0b06 	vstr	d0, [sp, #24]
 801298e:	d104      	bne.n	801299a <acosf+0x76>
 8012990:	f7fe fa0c 	bl	8010dac <__errno>
 8012994:	2321      	movs	r3, #33	; 0x21
 8012996:	6003      	str	r3, [r0, #0]
 8012998:	e004      	b.n	80129a4 <acosf+0x80>
 801299a:	4668      	mov	r0, sp
 801299c:	f002 fa42 	bl	8014e24 <matherr>
 80129a0:	2800      	cmp	r0, #0
 80129a2:	d0f5      	beq.n	8012990 <acosf+0x6c>
 80129a4:	9b08      	ldr	r3, [sp, #32]
 80129a6:	b11b      	cbz	r3, 80129b0 <acosf+0x8c>
 80129a8:	f7fe fa00 	bl	8010dac <__errno>
 80129ac:	9b08      	ldr	r3, [sp, #32]
 80129ae:	6003      	str	r3, [r0, #0]
 80129b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80129b4:	f7f5 f9c2 	bl	8007d3c <__aeabi_d2f>
 80129b8:	ee08 0a90 	vmov	s17, r0
 80129bc:	eeb0 0a68 	vmov.f32	s0, s17
 80129c0:	b00a      	add	sp, #40	; 0x28
 80129c2:	ecbd 8b02 	vpop	{d8}
 80129c6:	bd10      	pop	{r4, pc}
 80129c8:	20000a3c 	.word	0x20000a3c
 80129cc:	08017be4 	.word	0x08017be4
 80129d0:	08017b95 	.word	0x08017b95

080129d4 <acoshf>:
 80129d4:	b510      	push	{r4, lr}
 80129d6:	ed2d 8b02 	vpush	{d8}
 80129da:	b08a      	sub	sp, #40	; 0x28
 80129dc:	eeb0 8a40 	vmov.f32	s16, s0
 80129e0:	f000 fd86 	bl	80134f0 <__ieee754_acoshf>
 80129e4:	4b21      	ldr	r3, [pc, #132]	; (8012a6c <acoshf+0x98>)
 80129e6:	f993 4000 	ldrsb.w	r4, [r3]
 80129ea:	1c63      	adds	r3, r4, #1
 80129ec:	d039      	beq.n	8012a62 <acoshf+0x8e>
 80129ee:	eeb4 8a48 	vcmp.f32	s16, s16
 80129f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129f6:	d634      	bvs.n	8012a62 <acoshf+0x8e>
 80129f8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80129fc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8012a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a04:	d52d      	bpl.n	8012a62 <acoshf+0x8e>
 8012a06:	2301      	movs	r3, #1
 8012a08:	9300      	str	r3, [sp, #0]
 8012a0a:	4b19      	ldr	r3, [pc, #100]	; (8012a70 <acoshf+0x9c>)
 8012a0c:	9301      	str	r3, [sp, #4]
 8012a0e:	ee18 0a10 	vmov	r0, s16
 8012a12:	2300      	movs	r3, #0
 8012a14:	9308      	str	r3, [sp, #32]
 8012a16:	f7f4 ff27 	bl	8007868 <__aeabi_f2d>
 8012a1a:	2200      	movs	r2, #0
 8012a1c:	2300      	movs	r3, #0
 8012a1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012a22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012a26:	4610      	mov	r0, r2
 8012a28:	4619      	mov	r1, r3
 8012a2a:	f7f5 f89f 	bl	8007b6c <__aeabi_ddiv>
 8012a2e:	2c02      	cmp	r4, #2
 8012a30:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012a34:	d104      	bne.n	8012a40 <acoshf+0x6c>
 8012a36:	f7fe f9b9 	bl	8010dac <__errno>
 8012a3a:	2321      	movs	r3, #33	; 0x21
 8012a3c:	6003      	str	r3, [r0, #0]
 8012a3e:	e004      	b.n	8012a4a <acoshf+0x76>
 8012a40:	4668      	mov	r0, sp
 8012a42:	f002 f9ef 	bl	8014e24 <matherr>
 8012a46:	2800      	cmp	r0, #0
 8012a48:	d0f5      	beq.n	8012a36 <acoshf+0x62>
 8012a4a:	9b08      	ldr	r3, [sp, #32]
 8012a4c:	b11b      	cbz	r3, 8012a56 <acoshf+0x82>
 8012a4e:	f7fe f9ad 	bl	8010dac <__errno>
 8012a52:	9b08      	ldr	r3, [sp, #32]
 8012a54:	6003      	str	r3, [r0, #0]
 8012a56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012a5a:	f7f5 f96f 	bl	8007d3c <__aeabi_d2f>
 8012a5e:	ee00 0a10 	vmov	s0, r0
 8012a62:	b00a      	add	sp, #40	; 0x28
 8012a64:	ecbd 8b02 	vpop	{d8}
 8012a68:	bd10      	pop	{r4, pc}
 8012a6a:	bf00      	nop
 8012a6c:	20000a3c 	.word	0x20000a3c
 8012a70:	08017bea 	.word	0x08017bea

08012a74 <asinf>:
 8012a74:	b510      	push	{r4, lr}
 8012a76:	ed2d 8b02 	vpush	{d8}
 8012a7a:	4c27      	ldr	r4, [pc, #156]	; (8012b18 <asinf+0xa4>)
 8012a7c:	b08a      	sub	sp, #40	; 0x28
 8012a7e:	eeb0 8a40 	vmov.f32	s16, s0
 8012a82:	f000 fd89 	bl	8013598 <__ieee754_asinf>
 8012a86:	f994 3000 	ldrsb.w	r3, [r4]
 8012a8a:	3301      	adds	r3, #1
 8012a8c:	eef0 8a40 	vmov.f32	s17, s0
 8012a90:	d03c      	beq.n	8012b0c <asinf+0x98>
 8012a92:	eeb4 8a48 	vcmp.f32	s16, s16
 8012a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a9a:	d637      	bvs.n	8012b0c <asinf+0x98>
 8012a9c:	eeb0 0a48 	vmov.f32	s0, s16
 8012aa0:	f7ff fd0c 	bl	80124bc <fabsf>
 8012aa4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012aa8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ab0:	dd2c      	ble.n	8012b0c <asinf+0x98>
 8012ab2:	2301      	movs	r3, #1
 8012ab4:	9300      	str	r3, [sp, #0]
 8012ab6:	4b19      	ldr	r3, [pc, #100]	; (8012b1c <asinf+0xa8>)
 8012ab8:	9301      	str	r3, [sp, #4]
 8012aba:	ee18 0a10 	vmov	r0, s16
 8012abe:	2300      	movs	r3, #0
 8012ac0:	9308      	str	r3, [sp, #32]
 8012ac2:	f7f4 fed1 	bl	8007868 <__aeabi_f2d>
 8012ac6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012aca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012ace:	4814      	ldr	r0, [pc, #80]	; (8012b20 <asinf+0xac>)
 8012ad0:	f002 f9aa 	bl	8014e28 <nan>
 8012ad4:	f994 3000 	ldrsb.w	r3, [r4]
 8012ad8:	2b02      	cmp	r3, #2
 8012ada:	ed8d 0b06 	vstr	d0, [sp, #24]
 8012ade:	d104      	bne.n	8012aea <asinf+0x76>
 8012ae0:	f7fe f964 	bl	8010dac <__errno>
 8012ae4:	2321      	movs	r3, #33	; 0x21
 8012ae6:	6003      	str	r3, [r0, #0]
 8012ae8:	e004      	b.n	8012af4 <asinf+0x80>
 8012aea:	4668      	mov	r0, sp
 8012aec:	f002 f99a 	bl	8014e24 <matherr>
 8012af0:	2800      	cmp	r0, #0
 8012af2:	d0f5      	beq.n	8012ae0 <asinf+0x6c>
 8012af4:	9b08      	ldr	r3, [sp, #32]
 8012af6:	b11b      	cbz	r3, 8012b00 <asinf+0x8c>
 8012af8:	f7fe f958 	bl	8010dac <__errno>
 8012afc:	9b08      	ldr	r3, [sp, #32]
 8012afe:	6003      	str	r3, [r0, #0]
 8012b00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012b04:	f7f5 f91a 	bl	8007d3c <__aeabi_d2f>
 8012b08:	ee08 0a90 	vmov	s17, r0
 8012b0c:	eeb0 0a68 	vmov.f32	s0, s17
 8012b10:	b00a      	add	sp, #40	; 0x28
 8012b12:	ecbd 8b02 	vpop	{d8}
 8012b16:	bd10      	pop	{r4, pc}
 8012b18:	20000a3c 	.word	0x20000a3c
 8012b1c:	08017bf1 	.word	0x08017bf1
 8012b20:	08017b95 	.word	0x08017b95

08012b24 <atanhf>:
 8012b24:	b570      	push	{r4, r5, r6, lr}
 8012b26:	ed2d 8b04 	vpush	{d8-d9}
 8012b2a:	4c36      	ldr	r4, [pc, #216]	; (8012c04 <atanhf+0xe0>)
 8012b2c:	b08a      	sub	sp, #40	; 0x28
 8012b2e:	eeb0 8a40 	vmov.f32	s16, s0
 8012b32:	f000 fe19 	bl	8013768 <__ieee754_atanhf>
 8012b36:	f994 3000 	ldrsb.w	r3, [r4]
 8012b3a:	3301      	adds	r3, #1
 8012b3c:	eef0 8a40 	vmov.f32	s17, s0
 8012b40:	d059      	beq.n	8012bf6 <atanhf+0xd2>
 8012b42:	eeb4 8a48 	vcmp.f32	s16, s16
 8012b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b4a:	d654      	bvs.n	8012bf6 <atanhf+0xd2>
 8012b4c:	eeb0 0a48 	vmov.f32	s0, s16
 8012b50:	f7ff fcb4 	bl	80124bc <fabsf>
 8012b54:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8012b58:	eeb4 0ac9 	vcmpe.f32	s0, s18
 8012b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b60:	eef0 9a40 	vmov.f32	s19, s0
 8012b64:	db47      	blt.n	8012bf6 <atanhf+0xd2>
 8012b66:	ee18 0a10 	vmov	r0, s16
 8012b6a:	f7f4 fe7d 	bl	8007868 <__aeabi_f2d>
 8012b6e:	eef4 9ac9 	vcmpe.f32	s19, s18
 8012b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b76:	4602      	mov	r2, r0
 8012b78:	460b      	mov	r3, r1
 8012b7a:	f994 4000 	ldrsb.w	r4, [r4]
 8012b7e:	4d22      	ldr	r5, [pc, #136]	; (8012c08 <atanhf+0xe4>)
 8012b80:	dd17      	ble.n	8012bb2 <atanhf+0x8e>
 8012b82:	2101      	movs	r1, #1
 8012b84:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012b88:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012b8c:	e9cd 1500 	strd	r1, r5, [sp]
 8012b90:	2200      	movs	r2, #0
 8012b92:	2100      	movs	r1, #0
 8012b94:	2300      	movs	r3, #0
 8012b96:	9108      	str	r1, [sp, #32]
 8012b98:	4610      	mov	r0, r2
 8012b9a:	4619      	mov	r1, r3
 8012b9c:	f7f4 ffe6 	bl	8007b6c <__aeabi_ddiv>
 8012ba0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012ba4:	2c02      	cmp	r4, #2
 8012ba6:	d115      	bne.n	8012bd4 <atanhf+0xb0>
 8012ba8:	f7fe f900 	bl	8010dac <__errno>
 8012bac:	2321      	movs	r3, #33	; 0x21
 8012bae:	6003      	str	r3, [r0, #0]
 8012bb0:	e015      	b.n	8012bde <atanhf+0xba>
 8012bb2:	2602      	movs	r6, #2
 8012bb4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012bb8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012bbc:	e9cd 6500 	strd	r6, r5, [sp]
 8012bc0:	2200      	movs	r2, #0
 8012bc2:	2500      	movs	r5, #0
 8012bc4:	2300      	movs	r3, #0
 8012bc6:	9508      	str	r5, [sp, #32]
 8012bc8:	f7f4 ffd0 	bl	8007b6c <__aeabi_ddiv>
 8012bcc:	42b4      	cmp	r4, r6
 8012bce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012bd2:	e7e8      	b.n	8012ba6 <atanhf+0x82>
 8012bd4:	4668      	mov	r0, sp
 8012bd6:	f002 f925 	bl	8014e24 <matherr>
 8012bda:	2800      	cmp	r0, #0
 8012bdc:	d0e4      	beq.n	8012ba8 <atanhf+0x84>
 8012bde:	9b08      	ldr	r3, [sp, #32]
 8012be0:	b11b      	cbz	r3, 8012bea <atanhf+0xc6>
 8012be2:	f7fe f8e3 	bl	8010dac <__errno>
 8012be6:	9b08      	ldr	r3, [sp, #32]
 8012be8:	6003      	str	r3, [r0, #0]
 8012bea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012bee:	f7f5 f8a5 	bl	8007d3c <__aeabi_d2f>
 8012bf2:	ee08 0a90 	vmov	s17, r0
 8012bf6:	eeb0 0a68 	vmov.f32	s0, s17
 8012bfa:	b00a      	add	sp, #40	; 0x28
 8012bfc:	ecbd 8b04 	vpop	{d8-d9}
 8012c00:	bd70      	pop	{r4, r5, r6, pc}
 8012c02:	bf00      	nop
 8012c04:	20000a3c 	.word	0x20000a3c
 8012c08:	08017bf7 	.word	0x08017bf7

08012c0c <coshf>:
 8012c0c:	b510      	push	{r4, lr}
 8012c0e:	ed2d 8b02 	vpush	{d8}
 8012c12:	4c29      	ldr	r4, [pc, #164]	; (8012cb8 <coshf+0xac>)
 8012c14:	b08a      	sub	sp, #40	; 0x28
 8012c16:	eeb0 8a40 	vmov.f32	s16, s0
 8012c1a:	f000 fdeb 	bl	80137f4 <__ieee754_coshf>
 8012c1e:	f994 3000 	ldrsb.w	r3, [r4]
 8012c22:	3301      	adds	r3, #1
 8012c24:	eef0 8a40 	vmov.f32	s17, s0
 8012c28:	d035      	beq.n	8012c96 <coshf+0x8a>
 8012c2a:	eeb4 8a48 	vcmp.f32	s16, s16
 8012c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c32:	d630      	bvs.n	8012c96 <coshf+0x8a>
 8012c34:	eeb0 0a48 	vmov.f32	s0, s16
 8012c38:	f7ff fc40 	bl	80124bc <fabsf>
 8012c3c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8012cbc <coshf+0xb0>
 8012c40:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c48:	dd25      	ble.n	8012c96 <coshf+0x8a>
 8012c4a:	2303      	movs	r3, #3
 8012c4c:	9300      	str	r3, [sp, #0]
 8012c4e:	4b1c      	ldr	r3, [pc, #112]	; (8012cc0 <coshf+0xb4>)
 8012c50:	9301      	str	r3, [sp, #4]
 8012c52:	ee18 0a10 	vmov	r0, s16
 8012c56:	2300      	movs	r3, #0
 8012c58:	9308      	str	r3, [sp, #32]
 8012c5a:	f7f4 fe05 	bl	8007868 <__aeabi_f2d>
 8012c5e:	f994 3000 	ldrsb.w	r3, [r4]
 8012c62:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012c66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012c6a:	b9d3      	cbnz	r3, 8012ca2 <coshf+0x96>
 8012c6c:	4b15      	ldr	r3, [pc, #84]	; (8012cc4 <coshf+0xb8>)
 8012c6e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8012c72:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012c76:	4668      	mov	r0, sp
 8012c78:	f002 f8d4 	bl	8014e24 <matherr>
 8012c7c:	b1b8      	cbz	r0, 8012cae <coshf+0xa2>
 8012c7e:	9b08      	ldr	r3, [sp, #32]
 8012c80:	b11b      	cbz	r3, 8012c8a <coshf+0x7e>
 8012c82:	f7fe f893 	bl	8010dac <__errno>
 8012c86:	9b08      	ldr	r3, [sp, #32]
 8012c88:	6003      	str	r3, [r0, #0]
 8012c8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012c8e:	f7f5 f855 	bl	8007d3c <__aeabi_d2f>
 8012c92:	ee08 0a90 	vmov	s17, r0
 8012c96:	eeb0 0a68 	vmov.f32	s0, s17
 8012c9a:	b00a      	add	sp, #40	; 0x28
 8012c9c:	ecbd 8b02 	vpop	{d8}
 8012ca0:	bd10      	pop	{r4, pc}
 8012ca2:	4909      	ldr	r1, [pc, #36]	; (8012cc8 <coshf+0xbc>)
 8012ca4:	2000      	movs	r0, #0
 8012ca6:	2b02      	cmp	r3, #2
 8012ca8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012cac:	d1e3      	bne.n	8012c76 <coshf+0x6a>
 8012cae:	f7fe f87d 	bl	8010dac <__errno>
 8012cb2:	2322      	movs	r3, #34	; 0x22
 8012cb4:	6003      	str	r3, [r0, #0]
 8012cb6:	e7e2      	b.n	8012c7e <coshf+0x72>
 8012cb8:	20000a3c 	.word	0x20000a3c
 8012cbc:	42b2d4fc 	.word	0x42b2d4fc
 8012cc0:	08017beb 	.word	0x08017beb
 8012cc4:	47efffff 	.word	0x47efffff
 8012cc8:	7ff00000 	.word	0x7ff00000

08012ccc <expf>:
 8012ccc:	b530      	push	{r4, r5, lr}
 8012cce:	ed2d 8b02 	vpush	{d8}
 8012cd2:	4d35      	ldr	r5, [pc, #212]	; (8012da8 <expf+0xdc>)
 8012cd4:	b08b      	sub	sp, #44	; 0x2c
 8012cd6:	eeb0 8a40 	vmov.f32	s16, s0
 8012cda:	f000 fdef 	bl	80138bc <__ieee754_expf>
 8012cde:	f995 3000 	ldrsb.w	r3, [r5]
 8012ce2:	3301      	adds	r3, #1
 8012ce4:	ee10 4a10 	vmov	r4, s0
 8012ce8:	d030      	beq.n	8012d4c <expf+0x80>
 8012cea:	eeb0 0a48 	vmov.f32	s0, s16
 8012cee:	f002 f9cf 	bl	8015090 <finitef>
 8012cf2:	b358      	cbz	r0, 8012d4c <expf+0x80>
 8012cf4:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8012dac <expf+0xe0>
 8012cf8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8012cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d00:	dd35      	ble.n	8012d6e <expf+0xa2>
 8012d02:	2303      	movs	r3, #3
 8012d04:	9300      	str	r3, [sp, #0]
 8012d06:	4b2a      	ldr	r3, [pc, #168]	; (8012db0 <expf+0xe4>)
 8012d08:	9301      	str	r3, [sp, #4]
 8012d0a:	ee18 0a10 	vmov	r0, s16
 8012d0e:	2300      	movs	r3, #0
 8012d10:	9308      	str	r3, [sp, #32]
 8012d12:	f7f4 fda9 	bl	8007868 <__aeabi_f2d>
 8012d16:	f995 3000 	ldrsb.w	r3, [r5]
 8012d1a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012d1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012d22:	b9cb      	cbnz	r3, 8012d58 <expf+0x8c>
 8012d24:	4b23      	ldr	r3, [pc, #140]	; (8012db4 <expf+0xe8>)
 8012d26:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8012d2a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012d2e:	4668      	mov	r0, sp
 8012d30:	f002 f878 	bl	8014e24 <matherr>
 8012d34:	b1b0      	cbz	r0, 8012d64 <expf+0x98>
 8012d36:	9b08      	ldr	r3, [sp, #32]
 8012d38:	b11b      	cbz	r3, 8012d42 <expf+0x76>
 8012d3a:	f7fe f837 	bl	8010dac <__errno>
 8012d3e:	9b08      	ldr	r3, [sp, #32]
 8012d40:	6003      	str	r3, [r0, #0]
 8012d42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012d46:	f7f4 fff9 	bl	8007d3c <__aeabi_d2f>
 8012d4a:	4604      	mov	r4, r0
 8012d4c:	ee00 4a10 	vmov	s0, r4
 8012d50:	b00b      	add	sp, #44	; 0x2c
 8012d52:	ecbd 8b02 	vpop	{d8}
 8012d56:	bd30      	pop	{r4, r5, pc}
 8012d58:	4917      	ldr	r1, [pc, #92]	; (8012db8 <expf+0xec>)
 8012d5a:	2000      	movs	r0, #0
 8012d5c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012d60:	2b02      	cmp	r3, #2
 8012d62:	d1e4      	bne.n	8012d2e <expf+0x62>
 8012d64:	f7fe f822 	bl	8010dac <__errno>
 8012d68:	2322      	movs	r3, #34	; 0x22
 8012d6a:	6003      	str	r3, [r0, #0]
 8012d6c:	e7e3      	b.n	8012d36 <expf+0x6a>
 8012d6e:	eddf 7a13 	vldr	s15, [pc, #76]	; 8012dbc <expf+0xf0>
 8012d72:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8012d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d7a:	d5e7      	bpl.n	8012d4c <expf+0x80>
 8012d7c:	2304      	movs	r3, #4
 8012d7e:	9300      	str	r3, [sp, #0]
 8012d80:	4b0b      	ldr	r3, [pc, #44]	; (8012db0 <expf+0xe4>)
 8012d82:	9301      	str	r3, [sp, #4]
 8012d84:	ee18 0a10 	vmov	r0, s16
 8012d88:	2300      	movs	r3, #0
 8012d8a:	9308      	str	r3, [sp, #32]
 8012d8c:	f7f4 fd6c 	bl	8007868 <__aeabi_f2d>
 8012d90:	2300      	movs	r3, #0
 8012d92:	2200      	movs	r2, #0
 8012d94:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012d98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012d9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012da0:	f995 3000 	ldrsb.w	r3, [r5]
 8012da4:	e7dc      	b.n	8012d60 <expf+0x94>
 8012da6:	bf00      	nop
 8012da8:	20000a3c 	.word	0x20000a3c
 8012dac:	42b17180 	.word	0x42b17180
 8012db0:	08017bfe 	.word	0x08017bfe
 8012db4:	47efffff 	.word	0x47efffff
 8012db8:	7ff00000 	.word	0x7ff00000
 8012dbc:	c2cff1b5 	.word	0xc2cff1b5

08012dc0 <fmodf>:
 8012dc0:	b5d0      	push	{r4, r6, r7, lr}
 8012dc2:	ed2d 8b02 	vpush	{d8}
 8012dc6:	b08a      	sub	sp, #40	; 0x28
 8012dc8:	eef0 8a40 	vmov.f32	s17, s0
 8012dcc:	eeb0 8a60 	vmov.f32	s16, s1
 8012dd0:	f000 fe48 	bl	8013a64 <__ieee754_fmodf>
 8012dd4:	4b26      	ldr	r3, [pc, #152]	; (8012e70 <fmodf+0xb0>)
 8012dd6:	f993 4000 	ldrsb.w	r4, [r3]
 8012dda:	1c63      	adds	r3, r4, #1
 8012ddc:	d035      	beq.n	8012e4a <fmodf+0x8a>
 8012dde:	eeb4 8a48 	vcmp.f32	s16, s16
 8012de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012de6:	d630      	bvs.n	8012e4a <fmodf+0x8a>
 8012de8:	eef4 8a68 	vcmp.f32	s17, s17
 8012dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012df0:	d62b      	bvs.n	8012e4a <fmodf+0x8a>
 8012df2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8012df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dfa:	d126      	bne.n	8012e4a <fmodf+0x8a>
 8012dfc:	2301      	movs	r3, #1
 8012dfe:	9300      	str	r3, [sp, #0]
 8012e00:	4b1c      	ldr	r3, [pc, #112]	; (8012e74 <fmodf+0xb4>)
 8012e02:	9301      	str	r3, [sp, #4]
 8012e04:	ee18 0a90 	vmov	r0, s17
 8012e08:	2300      	movs	r3, #0
 8012e0a:	9308      	str	r3, [sp, #32]
 8012e0c:	f7f4 fd2c 	bl	8007868 <__aeabi_f2d>
 8012e10:	4606      	mov	r6, r0
 8012e12:	460f      	mov	r7, r1
 8012e14:	ee18 0a10 	vmov	r0, s16
 8012e18:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8012e1c:	f7f4 fd24 	bl	8007868 <__aeabi_f2d>
 8012e20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012e24:	b9ac      	cbnz	r4, 8012e52 <fmodf+0x92>
 8012e26:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8012e2a:	4668      	mov	r0, sp
 8012e2c:	f001 fffa 	bl	8014e24 <matherr>
 8012e30:	b1c8      	cbz	r0, 8012e66 <fmodf+0xa6>
 8012e32:	9b08      	ldr	r3, [sp, #32]
 8012e34:	b11b      	cbz	r3, 8012e3e <fmodf+0x7e>
 8012e36:	f7fd ffb9 	bl	8010dac <__errno>
 8012e3a:	9b08      	ldr	r3, [sp, #32]
 8012e3c:	6003      	str	r3, [r0, #0]
 8012e3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012e42:	f7f4 ff7b 	bl	8007d3c <__aeabi_d2f>
 8012e46:	ee00 0a10 	vmov	s0, r0
 8012e4a:	b00a      	add	sp, #40	; 0x28
 8012e4c:	ecbd 8b02 	vpop	{d8}
 8012e50:	bdd0      	pop	{r4, r6, r7, pc}
 8012e52:	2200      	movs	r2, #0
 8012e54:	2300      	movs	r3, #0
 8012e56:	4610      	mov	r0, r2
 8012e58:	4619      	mov	r1, r3
 8012e5a:	f7f4 fe87 	bl	8007b6c <__aeabi_ddiv>
 8012e5e:	2c02      	cmp	r4, #2
 8012e60:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012e64:	d1e1      	bne.n	8012e2a <fmodf+0x6a>
 8012e66:	f7fd ffa1 	bl	8010dac <__errno>
 8012e6a:	2321      	movs	r3, #33	; 0x21
 8012e6c:	6003      	str	r3, [r0, #0]
 8012e6e:	e7e0      	b.n	8012e32 <fmodf+0x72>
 8012e70:	20000a3c 	.word	0x20000a3c
 8012e74:	08017c03 	.word	0x08017c03

08012e78 <logf>:
 8012e78:	b510      	push	{r4, lr}
 8012e7a:	ed2d 8b02 	vpush	{d8}
 8012e7e:	b08a      	sub	sp, #40	; 0x28
 8012e80:	eeb0 8a40 	vmov.f32	s16, s0
 8012e84:	f000 fe76 	bl	8013b74 <__ieee754_logf>
 8012e88:	4b31      	ldr	r3, [pc, #196]	; (8012f50 <logf+0xd8>)
 8012e8a:	f993 4000 	ldrsb.w	r4, [r3]
 8012e8e:	1c63      	adds	r3, r4, #1
 8012e90:	d059      	beq.n	8012f46 <logf+0xce>
 8012e92:	eeb4 8a48 	vcmp.f32	s16, s16
 8012e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e9a:	d654      	bvs.n	8012f46 <logf+0xce>
 8012e9c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8012ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ea4:	dc4f      	bgt.n	8012f46 <logf+0xce>
 8012ea6:	4b2b      	ldr	r3, [pc, #172]	; (8012f54 <logf+0xdc>)
 8012ea8:	9301      	str	r3, [sp, #4]
 8012eaa:	ee18 0a10 	vmov	r0, s16
 8012eae:	2300      	movs	r3, #0
 8012eb0:	9308      	str	r3, [sp, #32]
 8012eb2:	f7f4 fcd9 	bl	8007868 <__aeabi_f2d>
 8012eb6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012eba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012ebe:	b994      	cbnz	r4, 8012ee6 <logf+0x6e>
 8012ec0:	4b25      	ldr	r3, [pc, #148]	; (8012f58 <logf+0xe0>)
 8012ec2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8012ec6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8012eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ece:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012ed2:	d025      	beq.n	8012f20 <logf+0xa8>
 8012ed4:	2301      	movs	r3, #1
 8012ed6:	2c02      	cmp	r4, #2
 8012ed8:	9300      	str	r3, [sp, #0]
 8012eda:	d116      	bne.n	8012f0a <logf+0x92>
 8012edc:	f7fd ff66 	bl	8010dac <__errno>
 8012ee0:	2321      	movs	r3, #33	; 0x21
 8012ee2:	6003      	str	r3, [r0, #0]
 8012ee4:	e016      	b.n	8012f14 <logf+0x9c>
 8012ee6:	4b1d      	ldr	r3, [pc, #116]	; (8012f5c <logf+0xe4>)
 8012ee8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8012eec:	2200      	movs	r2, #0
 8012eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ef2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012ef6:	d1ed      	bne.n	8012ed4 <logf+0x5c>
 8012ef8:	2302      	movs	r3, #2
 8012efa:	429c      	cmp	r4, r3
 8012efc:	9300      	str	r3, [sp, #0]
 8012efe:	d111      	bne.n	8012f24 <logf+0xac>
 8012f00:	f7fd ff54 	bl	8010dac <__errno>
 8012f04:	2322      	movs	r3, #34	; 0x22
 8012f06:	6003      	str	r3, [r0, #0]
 8012f08:	e011      	b.n	8012f2e <logf+0xb6>
 8012f0a:	4668      	mov	r0, sp
 8012f0c:	f001 ff8a 	bl	8014e24 <matherr>
 8012f10:	2800      	cmp	r0, #0
 8012f12:	d0e3      	beq.n	8012edc <logf+0x64>
 8012f14:	4812      	ldr	r0, [pc, #72]	; (8012f60 <logf+0xe8>)
 8012f16:	f001 ff87 	bl	8014e28 <nan>
 8012f1a:	ed8d 0b06 	vstr	d0, [sp, #24]
 8012f1e:	e006      	b.n	8012f2e <logf+0xb6>
 8012f20:	2302      	movs	r3, #2
 8012f22:	9300      	str	r3, [sp, #0]
 8012f24:	4668      	mov	r0, sp
 8012f26:	f001 ff7d 	bl	8014e24 <matherr>
 8012f2a:	2800      	cmp	r0, #0
 8012f2c:	d0e8      	beq.n	8012f00 <logf+0x88>
 8012f2e:	9b08      	ldr	r3, [sp, #32]
 8012f30:	b11b      	cbz	r3, 8012f3a <logf+0xc2>
 8012f32:	f7fd ff3b 	bl	8010dac <__errno>
 8012f36:	9b08      	ldr	r3, [sp, #32]
 8012f38:	6003      	str	r3, [r0, #0]
 8012f3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012f3e:	f7f4 fefd 	bl	8007d3c <__aeabi_d2f>
 8012f42:	ee00 0a10 	vmov	s0, r0
 8012f46:	b00a      	add	sp, #40	; 0x28
 8012f48:	ecbd 8b02 	vpop	{d8}
 8012f4c:	bd10      	pop	{r4, pc}
 8012f4e:	bf00      	nop
 8012f50:	20000a3c 	.word	0x20000a3c
 8012f54:	08017c09 	.word	0x08017c09
 8012f58:	c7efffff 	.word	0xc7efffff
 8012f5c:	fff00000 	.word	0xfff00000
 8012f60:	08017b95 	.word	0x08017b95

08012f64 <powf>:
 8012f64:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8012f68:	ed2d 8b04 	vpush	{d8-d9}
 8012f6c:	4ca7      	ldr	r4, [pc, #668]	; (801320c <powf+0x2a8>)
 8012f6e:	b08a      	sub	sp, #40	; 0x28
 8012f70:	eef0 8a40 	vmov.f32	s17, s0
 8012f74:	eeb0 8a60 	vmov.f32	s16, s1
 8012f78:	f000 feea 	bl	8013d50 <__ieee754_powf>
 8012f7c:	f994 5000 	ldrsb.w	r5, [r4]
 8012f80:	1c6b      	adds	r3, r5, #1
 8012f82:	eeb0 9a40 	vmov.f32	s18, s0
 8012f86:	4626      	mov	r6, r4
 8012f88:	d05f      	beq.n	801304a <powf+0xe6>
 8012f8a:	eeb4 8a48 	vcmp.f32	s16, s16
 8012f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f92:	d65a      	bvs.n	801304a <powf+0xe6>
 8012f94:	eef4 8a68 	vcmp.f32	s17, s17
 8012f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f9c:	d721      	bvc.n	8012fe2 <powf+0x7e>
 8012f9e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8012fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fa6:	d150      	bne.n	801304a <powf+0xe6>
 8012fa8:	2301      	movs	r3, #1
 8012faa:	9300      	str	r3, [sp, #0]
 8012fac:	4b98      	ldr	r3, [pc, #608]	; (8013210 <powf+0x2ac>)
 8012fae:	9301      	str	r3, [sp, #4]
 8012fb0:	ee18 0a90 	vmov	r0, s17
 8012fb4:	2300      	movs	r3, #0
 8012fb6:	9308      	str	r3, [sp, #32]
 8012fb8:	f7f4 fc56 	bl	8007868 <__aeabi_f2d>
 8012fbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012fc0:	ee18 0a10 	vmov	r0, s16
 8012fc4:	f7f4 fc50 	bl	8007868 <__aeabi_f2d>
 8012fc8:	4b92      	ldr	r3, [pc, #584]	; (8013214 <powf+0x2b0>)
 8012fca:	2200      	movs	r2, #0
 8012fcc:	2d02      	cmp	r5, #2
 8012fce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012fd2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012fd6:	d032      	beq.n	801303e <powf+0xda>
 8012fd8:	4668      	mov	r0, sp
 8012fda:	f001 ff23 	bl	8014e24 <matherr>
 8012fde:	bb40      	cbnz	r0, 8013032 <powf+0xce>
 8012fe0:	e065      	b.n	80130ae <powf+0x14a>
 8012fe2:	eddf 9a8d 	vldr	s19, [pc, #564]	; 8013218 <powf+0x2b4>
 8012fe6:	eef4 8a69 	vcmp.f32	s17, s19
 8012fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fee:	d163      	bne.n	80130b8 <powf+0x154>
 8012ff0:	eeb4 8a69 	vcmp.f32	s16, s19
 8012ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ff8:	d12e      	bne.n	8013058 <powf+0xf4>
 8012ffa:	2301      	movs	r3, #1
 8012ffc:	9300      	str	r3, [sp, #0]
 8012ffe:	4b84      	ldr	r3, [pc, #528]	; (8013210 <powf+0x2ac>)
 8013000:	9301      	str	r3, [sp, #4]
 8013002:	ee18 0a90 	vmov	r0, s17
 8013006:	2300      	movs	r3, #0
 8013008:	9308      	str	r3, [sp, #32]
 801300a:	f7f4 fc2d 	bl	8007868 <__aeabi_f2d>
 801300e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013012:	ee18 0a10 	vmov	r0, s16
 8013016:	f7f4 fc27 	bl	8007868 <__aeabi_f2d>
 801301a:	2200      	movs	r2, #0
 801301c:	2300      	movs	r3, #0
 801301e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013022:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013026:	2d00      	cmp	r5, #0
 8013028:	d0d6      	beq.n	8012fd8 <powf+0x74>
 801302a:	4b7a      	ldr	r3, [pc, #488]	; (8013214 <powf+0x2b0>)
 801302c:	2200      	movs	r2, #0
 801302e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013032:	9b08      	ldr	r3, [sp, #32]
 8013034:	b11b      	cbz	r3, 801303e <powf+0xda>
 8013036:	f7fd feb9 	bl	8010dac <__errno>
 801303a:	9b08      	ldr	r3, [sp, #32]
 801303c:	6003      	str	r3, [r0, #0]
 801303e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013042:	f7f4 fe7b 	bl	8007d3c <__aeabi_d2f>
 8013046:	ee09 0a10 	vmov	s18, r0
 801304a:	eeb0 0a49 	vmov.f32	s0, s18
 801304e:	b00a      	add	sp, #40	; 0x28
 8013050:	ecbd 8b04 	vpop	{d8-d9}
 8013054:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8013058:	eeb0 0a48 	vmov.f32	s0, s16
 801305c:	f002 f818 	bl	8015090 <finitef>
 8013060:	2800      	cmp	r0, #0
 8013062:	d0f2      	beq.n	801304a <powf+0xe6>
 8013064:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8013068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801306c:	d5ed      	bpl.n	801304a <powf+0xe6>
 801306e:	2301      	movs	r3, #1
 8013070:	9300      	str	r3, [sp, #0]
 8013072:	4b67      	ldr	r3, [pc, #412]	; (8013210 <powf+0x2ac>)
 8013074:	9301      	str	r3, [sp, #4]
 8013076:	ee18 0a90 	vmov	r0, s17
 801307a:	2300      	movs	r3, #0
 801307c:	9308      	str	r3, [sp, #32]
 801307e:	f7f4 fbf3 	bl	8007868 <__aeabi_f2d>
 8013082:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013086:	ee18 0a10 	vmov	r0, s16
 801308a:	f7f4 fbed 	bl	8007868 <__aeabi_f2d>
 801308e:	f994 3000 	ldrsb.w	r3, [r4]
 8013092:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013096:	b923      	cbnz	r3, 80130a2 <powf+0x13e>
 8013098:	2200      	movs	r2, #0
 801309a:	2300      	movs	r3, #0
 801309c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80130a0:	e79a      	b.n	8012fd8 <powf+0x74>
 80130a2:	495e      	ldr	r1, [pc, #376]	; (801321c <powf+0x2b8>)
 80130a4:	2000      	movs	r0, #0
 80130a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80130aa:	2b02      	cmp	r3, #2
 80130ac:	d194      	bne.n	8012fd8 <powf+0x74>
 80130ae:	f7fd fe7d 	bl	8010dac <__errno>
 80130b2:	2321      	movs	r3, #33	; 0x21
 80130b4:	6003      	str	r3, [r0, #0]
 80130b6:	e7bc      	b.n	8013032 <powf+0xce>
 80130b8:	f001 ffea 	bl	8015090 <finitef>
 80130bc:	4605      	mov	r5, r0
 80130be:	2800      	cmp	r0, #0
 80130c0:	d173      	bne.n	80131aa <powf+0x246>
 80130c2:	eeb0 0a68 	vmov.f32	s0, s17
 80130c6:	f001 ffe3 	bl	8015090 <finitef>
 80130ca:	2800      	cmp	r0, #0
 80130cc:	d06d      	beq.n	80131aa <powf+0x246>
 80130ce:	eeb0 0a48 	vmov.f32	s0, s16
 80130d2:	f001 ffdd 	bl	8015090 <finitef>
 80130d6:	2800      	cmp	r0, #0
 80130d8:	d067      	beq.n	80131aa <powf+0x246>
 80130da:	ee18 0a90 	vmov	r0, s17
 80130de:	f7f4 fbc3 	bl	8007868 <__aeabi_f2d>
 80130e2:	4680      	mov	r8, r0
 80130e4:	ee18 0a10 	vmov	r0, s16
 80130e8:	4689      	mov	r9, r1
 80130ea:	f7f4 fbbd 	bl	8007868 <__aeabi_f2d>
 80130ee:	eeb4 9a49 	vcmp.f32	s18, s18
 80130f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130f6:	f994 4000 	ldrsb.w	r4, [r4]
 80130fa:	4b45      	ldr	r3, [pc, #276]	; (8013210 <powf+0x2ac>)
 80130fc:	d713      	bvc.n	8013126 <powf+0x1c2>
 80130fe:	2201      	movs	r2, #1
 8013100:	e9cd 2300 	strd	r2, r3, [sp]
 8013104:	9508      	str	r5, [sp, #32]
 8013106:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801310a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801310e:	2c00      	cmp	r4, #0
 8013110:	d0c2      	beq.n	8013098 <powf+0x134>
 8013112:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 8013116:	ee17 0a90 	vmov	r0, s15
 801311a:	f7f4 fba5 	bl	8007868 <__aeabi_f2d>
 801311e:	2c02      	cmp	r4, #2
 8013120:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013124:	e7c2      	b.n	80130ac <powf+0x148>
 8013126:	2203      	movs	r2, #3
 8013128:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801312c:	e9cd 2300 	strd	r2, r3, [sp]
 8013130:	9508      	str	r5, [sp, #32]
 8013132:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8013136:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801313a:	ee28 8a27 	vmul.f32	s16, s16, s15
 801313e:	b9fc      	cbnz	r4, 8013180 <powf+0x21c>
 8013140:	4b37      	ldr	r3, [pc, #220]	; (8013220 <powf+0x2bc>)
 8013142:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8013146:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801314a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801314e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013152:	d553      	bpl.n	80131fc <powf+0x298>
 8013154:	eeb0 0a48 	vmov.f32	s0, s16
 8013158:	f001 ffaa 	bl	80150b0 <rintf>
 801315c:	eeb4 0a48 	vcmp.f32	s0, s16
 8013160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013164:	d004      	beq.n	8013170 <powf+0x20c>
 8013166:	4b2f      	ldr	r3, [pc, #188]	; (8013224 <powf+0x2c0>)
 8013168:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801316c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013170:	f996 3000 	ldrsb.w	r3, [r6]
 8013174:	2b02      	cmp	r3, #2
 8013176:	d141      	bne.n	80131fc <powf+0x298>
 8013178:	f7fd fe18 	bl	8010dac <__errno>
 801317c:	2322      	movs	r3, #34	; 0x22
 801317e:	e799      	b.n	80130b4 <powf+0x150>
 8013180:	4b29      	ldr	r3, [pc, #164]	; (8013228 <powf+0x2c4>)
 8013182:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8013186:	2200      	movs	r2, #0
 8013188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801318c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013190:	d5ee      	bpl.n	8013170 <powf+0x20c>
 8013192:	eeb0 0a48 	vmov.f32	s0, s16
 8013196:	f001 ff8b 	bl	80150b0 <rintf>
 801319a:	eeb4 0a48 	vcmp.f32	s0, s16
 801319e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131a2:	d0e5      	beq.n	8013170 <powf+0x20c>
 80131a4:	2200      	movs	r2, #0
 80131a6:	4b1d      	ldr	r3, [pc, #116]	; (801321c <powf+0x2b8>)
 80131a8:	e7e0      	b.n	801316c <powf+0x208>
 80131aa:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80131ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131b2:	f47f af4a 	bne.w	801304a <powf+0xe6>
 80131b6:	eeb0 0a68 	vmov.f32	s0, s17
 80131ba:	f001 ff69 	bl	8015090 <finitef>
 80131be:	2800      	cmp	r0, #0
 80131c0:	f43f af43 	beq.w	801304a <powf+0xe6>
 80131c4:	eeb0 0a48 	vmov.f32	s0, s16
 80131c8:	f001 ff62 	bl	8015090 <finitef>
 80131cc:	2800      	cmp	r0, #0
 80131ce:	f43f af3c 	beq.w	801304a <powf+0xe6>
 80131d2:	2304      	movs	r3, #4
 80131d4:	9300      	str	r3, [sp, #0]
 80131d6:	4b0e      	ldr	r3, [pc, #56]	; (8013210 <powf+0x2ac>)
 80131d8:	9301      	str	r3, [sp, #4]
 80131da:	ee18 0a90 	vmov	r0, s17
 80131de:	2300      	movs	r3, #0
 80131e0:	9308      	str	r3, [sp, #32]
 80131e2:	f7f4 fb41 	bl	8007868 <__aeabi_f2d>
 80131e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80131ea:	ee18 0a10 	vmov	r0, s16
 80131ee:	f7f4 fb3b 	bl	8007868 <__aeabi_f2d>
 80131f2:	2200      	movs	r2, #0
 80131f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80131f8:	2300      	movs	r3, #0
 80131fa:	e7b7      	b.n	801316c <powf+0x208>
 80131fc:	4668      	mov	r0, sp
 80131fe:	f001 fe11 	bl	8014e24 <matherr>
 8013202:	2800      	cmp	r0, #0
 8013204:	f47f af15 	bne.w	8013032 <powf+0xce>
 8013208:	e7b6      	b.n	8013178 <powf+0x214>
 801320a:	bf00      	nop
 801320c:	20000a3c 	.word	0x20000a3c
 8013210:	08017c0e 	.word	0x08017c0e
 8013214:	3ff00000 	.word	0x3ff00000
 8013218:	00000000 	.word	0x00000000
 801321c:	fff00000 	.word	0xfff00000
 8013220:	47efffff 	.word	0x47efffff
 8013224:	c7efffff 	.word	0xc7efffff
 8013228:	7ff00000 	.word	0x7ff00000

0801322c <sinhf>:
 801322c:	b530      	push	{r4, r5, lr}
 801322e:	ed2d 8b02 	vpush	{d8}
 8013232:	4c2b      	ldr	r4, [pc, #172]	; (80132e0 <sinhf+0xb4>)
 8013234:	b08b      	sub	sp, #44	; 0x2c
 8013236:	eeb0 8a40 	vmov.f32	s16, s0
 801323a:	f001 f975 	bl	8014528 <__ieee754_sinhf>
 801323e:	f994 3000 	ldrsb.w	r3, [r4]
 8013242:	3301      	adds	r3, #1
 8013244:	eef0 8a40 	vmov.f32	s17, s0
 8013248:	d034      	beq.n	80132b4 <sinhf+0x88>
 801324a:	f001 ff21 	bl	8015090 <finitef>
 801324e:	4605      	mov	r5, r0
 8013250:	2800      	cmp	r0, #0
 8013252:	d12f      	bne.n	80132b4 <sinhf+0x88>
 8013254:	eeb0 0a48 	vmov.f32	s0, s16
 8013258:	f001 ff1a 	bl	8015090 <finitef>
 801325c:	b350      	cbz	r0, 80132b4 <sinhf+0x88>
 801325e:	2303      	movs	r3, #3
 8013260:	9300      	str	r3, [sp, #0]
 8013262:	ee18 0a10 	vmov	r0, s16
 8013266:	4b1f      	ldr	r3, [pc, #124]	; (80132e4 <sinhf+0xb8>)
 8013268:	9301      	str	r3, [sp, #4]
 801326a:	9508      	str	r5, [sp, #32]
 801326c:	f7f4 fafc 	bl	8007868 <__aeabi_f2d>
 8013270:	f994 3000 	ldrsb.w	r3, [r4]
 8013274:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013278:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801327c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8013280:	b9f3      	cbnz	r3, 80132c0 <sinhf+0x94>
 8013282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013286:	bfd4      	ite	le
 8013288:	4b17      	ldrle	r3, [pc, #92]	; (80132e8 <sinhf+0xbc>)
 801328a:	4b18      	ldrgt	r3, [pc, #96]	; (80132ec <sinhf+0xc0>)
 801328c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8013290:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013294:	4668      	mov	r0, sp
 8013296:	f001 fdc5 	bl	8014e24 <matherr>
 801329a:	b1d8      	cbz	r0, 80132d4 <sinhf+0xa8>
 801329c:	9b08      	ldr	r3, [sp, #32]
 801329e:	b11b      	cbz	r3, 80132a8 <sinhf+0x7c>
 80132a0:	f7fd fd84 	bl	8010dac <__errno>
 80132a4:	9b08      	ldr	r3, [sp, #32]
 80132a6:	6003      	str	r3, [r0, #0]
 80132a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80132ac:	f7f4 fd46 	bl	8007d3c <__aeabi_d2f>
 80132b0:	ee08 0a90 	vmov	s17, r0
 80132b4:	eeb0 0a68 	vmov.f32	s0, s17
 80132b8:	b00b      	add	sp, #44	; 0x2c
 80132ba:	ecbd 8b02 	vpop	{d8}
 80132be:	bd30      	pop	{r4, r5, pc}
 80132c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132c4:	bfd4      	ite	le
 80132c6:	490a      	ldrle	r1, [pc, #40]	; (80132f0 <sinhf+0xc4>)
 80132c8:	490a      	ldrgt	r1, [pc, #40]	; (80132f4 <sinhf+0xc8>)
 80132ca:	2000      	movs	r0, #0
 80132cc:	2b02      	cmp	r3, #2
 80132ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80132d2:	d1df      	bne.n	8013294 <sinhf+0x68>
 80132d4:	f7fd fd6a 	bl	8010dac <__errno>
 80132d8:	2322      	movs	r3, #34	; 0x22
 80132da:	6003      	str	r3, [r0, #0]
 80132dc:	e7de      	b.n	801329c <sinhf+0x70>
 80132de:	bf00      	nop
 80132e0:	20000a3c 	.word	0x20000a3c
 80132e4:	08017c13 	.word	0x08017c13
 80132e8:	c7efffff 	.word	0xc7efffff
 80132ec:	47efffff 	.word	0x47efffff
 80132f0:	fff00000 	.word	0xfff00000
 80132f4:	7ff00000 	.word	0x7ff00000

080132f8 <__ieee754_acosf>:
 80132f8:	b508      	push	{r3, lr}
 80132fa:	ee10 3a10 	vmov	r3, s0
 80132fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8013302:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8013306:	ed2d 8b0c 	vpush	{d8-d13}
 801330a:	d10a      	bne.n	8013322 <__ieee754_acosf+0x2a>
 801330c:	ed9f 0a67 	vldr	s0, [pc, #412]	; 80134ac <__ieee754_acosf+0x1b4>
 8013310:	ed9f 8a67 	vldr	s16, [pc, #412]	; 80134b0 <__ieee754_acosf+0x1b8>
 8013314:	2b00      	cmp	r3, #0
 8013316:	bfd8      	it	le
 8013318:	eeb0 0a48 	vmovle.f32	s0, s16
 801331c:	ecbd 8b0c 	vpop	{d8-d13}
 8013320:	bd08      	pop	{r3, pc}
 8013322:	dd04      	ble.n	801332e <__ieee754_acosf+0x36>
 8013324:	ee30 8a40 	vsub.f32	s16, s0, s0
 8013328:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801332c:	e7f6      	b.n	801331c <__ieee754_acosf+0x24>
 801332e:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 8013332:	da3e      	bge.n	80133b2 <__ieee754_acosf+0xba>
 8013334:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 8013338:	f340 80b5 	ble.w	80134a6 <__ieee754_acosf+0x1ae>
 801333c:	ee60 7a00 	vmul.f32	s15, s0, s0
 8013340:	eddf 6a5c 	vldr	s13, [pc, #368]	; 80134b4 <__ieee754_acosf+0x1bc>
 8013344:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 80134b8 <__ieee754_acosf+0x1c0>
 8013348:	ed9f 6a5c 	vldr	s12, [pc, #368]	; 80134bc <__ieee754_acosf+0x1c4>
 801334c:	ed9f 8a5c 	vldr	s16, [pc, #368]	; 80134c0 <__ieee754_acosf+0x1c8>
 8013350:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8013354:	eddf 6a5b 	vldr	s13, [pc, #364]	; 80134c4 <__ieee754_acosf+0x1cc>
 8013358:	eee7 6a27 	vfma.f32	s13, s14, s15
 801335c:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 80134c8 <__ieee754_acosf+0x1d0>
 8013360:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013364:	eddf 6a59 	vldr	s13, [pc, #356]	; 80134cc <__ieee754_acosf+0x1d4>
 8013368:	eee7 6a27 	vfma.f32	s13, s14, s15
 801336c:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80134d0 <__ieee754_acosf+0x1d8>
 8013370:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013374:	eddf 6a57 	vldr	s13, [pc, #348]	; 80134d4 <__ieee754_acosf+0x1dc>
 8013378:	eea7 6aa6 	vfma.f32	s12, s15, s13
 801337c:	eddf 6a56 	vldr	s13, [pc, #344]	; 80134d8 <__ieee754_acosf+0x1e0>
 8013380:	eee6 6a27 	vfma.f32	s13, s12, s15
 8013384:	ed9f 6a55 	vldr	s12, [pc, #340]	; 80134dc <__ieee754_acosf+0x1e4>
 8013388:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801338c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013390:	eee6 6a27 	vfma.f32	s13, s12, s15
 8013394:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013398:	eef0 7a66 	vmov.f32	s15, s13
 801339c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80133a0:	eea0 8a66 	vfms.f32	s16, s0, s13
 80133a4:	ee30 8a48 	vsub.f32	s16, s0, s16
 80133a8:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 80134e0 <__ieee754_acosf+0x1e8>
 80133ac:	ee30 0a48 	vsub.f32	s0, s0, s16
 80133b0:	e7b4      	b.n	801331c <__ieee754_acosf+0x24>
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	eddf da3f 	vldr	s27, [pc, #252]	; 80134b4 <__ieee754_acosf+0x1bc>
 80133b8:	eddf ca3f 	vldr	s25, [pc, #252]	; 80134b8 <__ieee754_acosf+0x1c0>
 80133bc:	ed9f ca41 	vldr	s24, [pc, #260]	; 80134c4 <__ieee754_acosf+0x1cc>
 80133c0:	eddf ba41 	vldr	s23, [pc, #260]	; 80134c8 <__ieee754_acosf+0x1d0>
 80133c4:	ed9f ba41 	vldr	s22, [pc, #260]	; 80134cc <__ieee754_acosf+0x1d4>
 80133c8:	eddf 8a41 	vldr	s17, [pc, #260]	; 80134d0 <__ieee754_acosf+0x1d8>
 80133cc:	ed9f da41 	vldr	s26, [pc, #260]	; 80134d4 <__ieee754_acosf+0x1dc>
 80133d0:	eddf aa3a 	vldr	s21, [pc, #232]	; 80134bc <__ieee754_acosf+0x1c4>
 80133d4:	ed9f aa40 	vldr	s20, [pc, #256]	; 80134d8 <__ieee754_acosf+0x1e0>
 80133d8:	eddf 9a40 	vldr	s19, [pc, #256]	; 80134dc <__ieee754_acosf+0x1e4>
 80133dc:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80133e0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80133e4:	da28      	bge.n	8013438 <__ieee754_acosf+0x140>
 80133e6:	ee30 0a09 	vadd.f32	s0, s0, s18
 80133ea:	ee20 0a27 	vmul.f32	s0, s0, s15
 80133ee:	eee0 ca2d 	vfma.f32	s25, s0, s27
 80133f2:	eee0 aa0d 	vfma.f32	s21, s0, s26
 80133f6:	eeac ca80 	vfma.f32	s24, s25, s0
 80133fa:	eeaa aa80 	vfma.f32	s20, s21, s0
 80133fe:	eeec ba00 	vfma.f32	s23, s24, s0
 8013402:	eeea 9a00 	vfma.f32	s19, s20, s0
 8013406:	eeab ba80 	vfma.f32	s22, s23, s0
 801340a:	eea9 9a80 	vfma.f32	s18, s19, s0
 801340e:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8013412:	ee68 8a80 	vmul.f32	s17, s17, s0
 8013416:	f001 f8f5 	bl	8014604 <__ieee754_sqrtf>
 801341a:	ee88 7a89 	vdiv.f32	s14, s17, s18
 801341e:	eddf 7a31 	vldr	s15, [pc, #196]	; 80134e4 <__ieee754_acosf+0x1ec>
 8013422:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013426:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801342a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801342e:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 80134e8 <__ieee754_acosf+0x1f0>
 8013432:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8013436:	e771      	b.n	801331c <__ieee754_acosf+0x24>
 8013438:	ee39 8a40 	vsub.f32	s16, s18, s0
 801343c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8013440:	eeb0 0a48 	vmov.f32	s0, s16
 8013444:	f001 f8de 	bl	8014604 <__ieee754_sqrtf>
 8013448:	eee8 ca2d 	vfma.f32	s25, s16, s27
 801344c:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8013450:	eeac ca88 	vfma.f32	s24, s25, s16
 8013454:	eeaa aa88 	vfma.f32	s20, s21, s16
 8013458:	eeec ba08 	vfma.f32	s23, s24, s16
 801345c:	ee10 3a10 	vmov	r3, s0
 8013460:	eeab ba88 	vfma.f32	s22, s23, s16
 8013464:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8013468:	f023 030f 	bic.w	r3, r3, #15
 801346c:	eeea 9a08 	vfma.f32	s19, s20, s16
 8013470:	ee07 3a90 	vmov	s15, r3
 8013474:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8013478:	eeb0 6a48 	vmov.f32	s12, s16
 801347c:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8013480:	eea9 9a88 	vfma.f32	s18, s19, s16
 8013484:	ee70 6a27 	vadd.f32	s13, s0, s15
 8013488:	ee68 8a88 	vmul.f32	s17, s17, s16
 801348c:	eeb0 7a40 	vmov.f32	s14, s0
 8013490:	ee86 0a26 	vdiv.f32	s0, s12, s13
 8013494:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8013498:	eea7 0a26 	vfma.f32	s0, s14, s13
 801349c:	ee30 0a27 	vadd.f32	s0, s0, s15
 80134a0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80134a4:	e73a      	b.n	801331c <__ieee754_acosf+0x24>
 80134a6:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80134ec <__ieee754_acosf+0x1f4>
 80134aa:	e737      	b.n	801331c <__ieee754_acosf+0x24>
 80134ac:	00000000 	.word	0x00000000
 80134b0:	40490fdb 	.word	0x40490fdb
 80134b4:	3811ef08 	.word	0x3811ef08
 80134b8:	3a4f7f04 	.word	0x3a4f7f04
 80134bc:	bf303361 	.word	0xbf303361
 80134c0:	33a22168 	.word	0x33a22168
 80134c4:	bd241146 	.word	0xbd241146
 80134c8:	3e4e0aa8 	.word	0x3e4e0aa8
 80134cc:	bea6b090 	.word	0xbea6b090
 80134d0:	3e2aaaab 	.word	0x3e2aaaab
 80134d4:	3d9dc62e 	.word	0x3d9dc62e
 80134d8:	4001572d 	.word	0x4001572d
 80134dc:	c019d139 	.word	0xc019d139
 80134e0:	3fc90fda 	.word	0x3fc90fda
 80134e4:	b3a22168 	.word	0xb3a22168
 80134e8:	40490fda 	.word	0x40490fda
 80134ec:	3fc90fdb 	.word	0x3fc90fdb

080134f0 <__ieee754_acoshf>:
 80134f0:	b508      	push	{r3, lr}
 80134f2:	ee10 3a10 	vmov	r3, s0
 80134f6:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80134fa:	ed2d 8b04 	vpush	{d8-d9}
 80134fe:	eeb0 8a40 	vmov.f32	s16, s0
 8013502:	da06      	bge.n	8013512 <__ieee754_acoshf+0x22>
 8013504:	ee30 8a40 	vsub.f32	s16, s0, s0
 8013508:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801350c:	ecbd 8b04 	vpop	{d8-d9}
 8013510:	bd08      	pop	{r3, pc}
 8013512:	f1b3 4f9b 	cmp.w	r3, #1300234240	; 0x4d800000
 8013516:	db0c      	blt.n	8013532 <__ieee754_acoshf+0x42>
 8013518:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801351c:	db02      	blt.n	8013524 <__ieee754_acoshf+0x34>
 801351e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013522:	e7f3      	b.n	801350c <__ieee754_acoshf+0x1c>
 8013524:	f000 fb26 	bl	8013b74 <__ieee754_logf>
 8013528:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8013590 <__ieee754_acoshf+0xa0>
 801352c:	ee30 0a08 	vadd.f32	s0, s0, s16
 8013530:	e7ec      	b.n	801350c <__ieee754_acoshf+0x1c>
 8013532:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8013536:	d028      	beq.n	801358a <__ieee754_acoshf+0x9a>
 8013538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801353c:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8013540:	eef0 8a00 	vmov.f32	s17, #0	; 0x40000000  2.0
 8013544:	dd11      	ble.n	801356a <__ieee754_acoshf+0x7a>
 8013546:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801354a:	eea8 0a08 	vfma.f32	s0, s16, s16
 801354e:	f001 f859 	bl	8014604 <__ieee754_sqrtf>
 8013552:	ee70 7a08 	vadd.f32	s15, s0, s16
 8013556:	ee89 0a27 	vdiv.f32	s0, s18, s15
 801355a:	ee98 0a28 	vfnms.f32	s0, s16, s17
 801355e:	ecbd 8b04 	vpop	{d8-d9}
 8013562:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013566:	f000 bb05 	b.w	8013b74 <__ieee754_logf>
 801356a:	ee30 8a49 	vsub.f32	s16, s0, s18
 801356e:	ee28 0a08 	vmul.f32	s0, s16, s16
 8013572:	eea8 0a28 	vfma.f32	s0, s16, s17
 8013576:	f001 f845 	bl	8014604 <__ieee754_sqrtf>
 801357a:	ee30 0a08 	vadd.f32	s0, s0, s16
 801357e:	ecbd 8b04 	vpop	{d8-d9}
 8013582:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013586:	f7fe bfe3 	b.w	8012550 <log1pf>
 801358a:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8013594 <__ieee754_acoshf+0xa4>
 801358e:	e7bd      	b.n	801350c <__ieee754_acoshf+0x1c>
 8013590:	3f317218 	.word	0x3f317218
 8013594:	00000000 	.word	0x00000000

08013598 <__ieee754_asinf>:
 8013598:	b538      	push	{r3, r4, r5, lr}
 801359a:	ee10 5a10 	vmov	r5, s0
 801359e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80135a2:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80135a6:	ed2d 8b04 	vpush	{d8-d9}
 80135aa:	d10c      	bne.n	80135c6 <__ieee754_asinf+0x2e>
 80135ac:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8013728 <__ieee754_asinf+0x190>
 80135b0:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 801372c <__ieee754_asinf+0x194>
 80135b4:	ee60 7a27 	vmul.f32	s15, s0, s15
 80135b8:	eee0 7a07 	vfma.f32	s15, s0, s14
 80135bc:	eeb0 0a67 	vmov.f32	s0, s15
 80135c0:	ecbd 8b04 	vpop	{d8-d9}
 80135c4:	bd38      	pop	{r3, r4, r5, pc}
 80135c6:	dd04      	ble.n	80135d2 <__ieee754_asinf+0x3a>
 80135c8:	ee70 7a40 	vsub.f32	s15, s0, s0
 80135cc:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80135d0:	e7f6      	b.n	80135c0 <__ieee754_asinf+0x28>
 80135d2:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80135d6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80135da:	da0b      	bge.n	80135f4 <__ieee754_asinf+0x5c>
 80135dc:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80135e0:	da52      	bge.n	8013688 <__ieee754_asinf+0xf0>
 80135e2:	eddf 7a53 	vldr	s15, [pc, #332]	; 8013730 <__ieee754_asinf+0x198>
 80135e6:	ee70 7a27 	vadd.f32	s15, s0, s15
 80135ea:	eef4 7ae8 	vcmpe.f32	s15, s17
 80135ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135f2:	dce5      	bgt.n	80135c0 <__ieee754_asinf+0x28>
 80135f4:	f7fe ff62 	bl	80124bc <fabsf>
 80135f8:	ee38 0ac0 	vsub.f32	s0, s17, s0
 80135fc:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8013600:	ee20 8a08 	vmul.f32	s16, s0, s16
 8013604:	eddf 7a4b 	vldr	s15, [pc, #300]	; 8013734 <__ieee754_asinf+0x19c>
 8013608:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8013738 <__ieee754_asinf+0x1a0>
 801360c:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 801373c <__ieee754_asinf+0x1a4>
 8013610:	eea8 7a27 	vfma.f32	s14, s16, s15
 8013614:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8013740 <__ieee754_asinf+0x1a8>
 8013618:	eee7 7a08 	vfma.f32	s15, s14, s16
 801361c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8013744 <__ieee754_asinf+0x1ac>
 8013620:	eea7 7a88 	vfma.f32	s14, s15, s16
 8013624:	eddf 7a48 	vldr	s15, [pc, #288]	; 8013748 <__ieee754_asinf+0x1b0>
 8013628:	eee7 7a08 	vfma.f32	s15, s14, s16
 801362c:	ed9f 7a47 	vldr	s14, [pc, #284]	; 801374c <__ieee754_asinf+0x1b4>
 8013630:	eea7 9a88 	vfma.f32	s18, s15, s16
 8013634:	eddf 7a46 	vldr	s15, [pc, #280]	; 8013750 <__ieee754_asinf+0x1b8>
 8013638:	eee8 7a07 	vfma.f32	s15, s16, s14
 801363c:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8013754 <__ieee754_asinf+0x1bc>
 8013640:	eea7 7a88 	vfma.f32	s14, s15, s16
 8013644:	eddf 7a44 	vldr	s15, [pc, #272]	; 8013758 <__ieee754_asinf+0x1c0>
 8013648:	eee7 7a08 	vfma.f32	s15, s14, s16
 801364c:	eeb0 0a48 	vmov.f32	s0, s16
 8013650:	eee7 8a88 	vfma.f32	s17, s15, s16
 8013654:	f000 ffd6 	bl	8014604 <__ieee754_sqrtf>
 8013658:	4b40      	ldr	r3, [pc, #256]	; (801375c <__ieee754_asinf+0x1c4>)
 801365a:	ee29 9a08 	vmul.f32	s18, s18, s16
 801365e:	429c      	cmp	r4, r3
 8013660:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8013664:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8013668:	dd3d      	ble.n	80136e6 <__ieee754_asinf+0x14e>
 801366a:	eea0 0a06 	vfma.f32	s0, s0, s12
 801366e:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8013760 <__ieee754_asinf+0x1c8>
 8013672:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013676:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 801372c <__ieee754_asinf+0x194>
 801367a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801367e:	2d00      	cmp	r5, #0
 8013680:	bfd8      	it	le
 8013682:	eeb1 0a40 	vnegle.f32	s0, s0
 8013686:	e79b      	b.n	80135c0 <__ieee754_asinf+0x28>
 8013688:	ee60 7a00 	vmul.f32	s15, s0, s0
 801368c:	eddf 6a29 	vldr	s13, [pc, #164]	; 8013734 <__ieee754_asinf+0x19c>
 8013690:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8013738 <__ieee754_asinf+0x1a0>
 8013694:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 801374c <__ieee754_asinf+0x1b4>
 8013698:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801369c:	eddf 6a28 	vldr	s13, [pc, #160]	; 8013740 <__ieee754_asinf+0x1a8>
 80136a0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80136a4:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8013744 <__ieee754_asinf+0x1ac>
 80136a8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80136ac:	eddf 6a26 	vldr	s13, [pc, #152]	; 8013748 <__ieee754_asinf+0x1b0>
 80136b0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80136b4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 801373c <__ieee754_asinf+0x1a4>
 80136b8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80136bc:	eddf 6a24 	vldr	s13, [pc, #144]	; 8013750 <__ieee754_asinf+0x1b8>
 80136c0:	eee7 6a86 	vfma.f32	s13, s15, s12
 80136c4:	ed9f 6a23 	vldr	s12, [pc, #140]	; 8013754 <__ieee754_asinf+0x1bc>
 80136c8:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80136cc:	eddf 6a22 	vldr	s13, [pc, #136]	; 8013758 <__ieee754_asinf+0x1c0>
 80136d0:	eee6 6a27 	vfma.f32	s13, s12, s15
 80136d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80136d8:	eee6 8aa7 	vfma.f32	s17, s13, s15
 80136dc:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80136e0:	eea0 0a27 	vfma.f32	s0, s0, s15
 80136e4:	e76c      	b.n	80135c0 <__ieee754_asinf+0x28>
 80136e6:	ee10 3a10 	vmov	r3, s0
 80136ea:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80136ee:	f023 030f 	bic.w	r3, r3, #15
 80136f2:	ee07 3a90 	vmov	s15, r3
 80136f6:	eef1 6a67 	vneg.f32	s13, s15
 80136fa:	eea6 8aa7 	vfma.f32	s16, s13, s15
 80136fe:	ee70 5a00 	vadd.f32	s11, s0, s0
 8013702:	ee37 0a80 	vadd.f32	s0, s15, s0
 8013706:	eddf 7a08 	vldr	s15, [pc, #32]	; 8013728 <__ieee754_asinf+0x190>
 801370a:	ee88 5a00 	vdiv.f32	s10, s16, s0
 801370e:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8013764 <__ieee754_asinf+0x1cc>
 8013712:	eee5 7a47 	vfms.f32	s15, s10, s14
 8013716:	eed5 7a86 	vfnms.f32	s15, s11, s12
 801371a:	eeb0 6a40 	vmov.f32	s12, s0
 801371e:	eea6 6a87 	vfma.f32	s12, s13, s14
 8013722:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8013726:	e7a8      	b.n	801367a <__ieee754_asinf+0xe2>
 8013728:	b33bbd2e 	.word	0xb33bbd2e
 801372c:	3fc90fdb 	.word	0x3fc90fdb
 8013730:	7149f2ca 	.word	0x7149f2ca
 8013734:	3811ef08 	.word	0x3811ef08
 8013738:	3a4f7f04 	.word	0x3a4f7f04
 801373c:	3e2aaaab 	.word	0x3e2aaaab
 8013740:	bd241146 	.word	0xbd241146
 8013744:	3e4e0aa8 	.word	0x3e4e0aa8
 8013748:	bea6b090 	.word	0xbea6b090
 801374c:	3d9dc62e 	.word	0x3d9dc62e
 8013750:	bf303361 	.word	0xbf303361
 8013754:	4001572d 	.word	0x4001572d
 8013758:	c019d139 	.word	0xc019d139
 801375c:	3f799999 	.word	0x3f799999
 8013760:	333bbd2e 	.word	0x333bbd2e
 8013764:	3f490fdb 	.word	0x3f490fdb

08013768 <__ieee754_atanhf>:
 8013768:	b510      	push	{r4, lr}
 801376a:	ee10 4a10 	vmov	r4, s0
 801376e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8013772:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8013776:	ed2d 8b02 	vpush	{d8}
 801377a:	dd06      	ble.n	801378a <__ieee754_atanhf+0x22>
 801377c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013780:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8013784:	ecbd 8b02 	vpop	{d8}
 8013788:	bd10      	pop	{r4, pc}
 801378a:	d104      	bne.n	8013796 <__ieee754_atanhf+0x2e>
 801378c:	eddf 7a17 	vldr	s15, [pc, #92]	; 80137ec <__ieee754_atanhf+0x84>
 8013790:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8013794:	e7f6      	b.n	8013784 <__ieee754_atanhf+0x1c>
 8013796:	f1b3 5f46 	cmp.w	r3, #830472192	; 0x31800000
 801379a:	da08      	bge.n	80137ae <__ieee754_atanhf+0x46>
 801379c:	eddf 7a14 	vldr	s15, [pc, #80]	; 80137f0 <__ieee754_atanhf+0x88>
 80137a0:	ee70 7a27 	vadd.f32	s15, s0, s15
 80137a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80137a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137ac:	dcea      	bgt.n	8013784 <__ieee754_atanhf+0x1c>
 80137ae:	ee07 3a90 	vmov	s15, r3
 80137b2:	ee37 0aa7 	vadd.f32	s0, s15, s15
 80137b6:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80137ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80137be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80137c2:	bfb6      	itet	lt
 80137c4:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80137c8:	ee80 0a07 	vdivge.f32	s0, s0, s14
 80137cc:	eec7 6a87 	vdivlt.f32	s13, s15, s14
 80137d0:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 80137d4:	bfb8      	it	lt
 80137d6:	ee36 0a80 	vaddlt.f32	s0, s13, s0
 80137da:	f7fe feb9 	bl	8012550 <log1pf>
 80137de:	ee20 0a08 	vmul.f32	s0, s0, s16
 80137e2:	2c00      	cmp	r4, #0
 80137e4:	bfb8      	it	lt
 80137e6:	eeb1 0a40 	vneglt.f32	s0, s0
 80137ea:	e7cb      	b.n	8013784 <__ieee754_atanhf+0x1c>
 80137ec:	00000000 	.word	0x00000000
 80137f0:	7149f2ca 	.word	0x7149f2ca

080137f4 <__ieee754_coshf>:
 80137f4:	b510      	push	{r4, lr}
 80137f6:	ee10 4a10 	vmov	r4, s0
 80137fa:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80137fe:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8013802:	ed2d 8b02 	vpush	{d8}
 8013806:	db04      	blt.n	8013812 <__ieee754_coshf+0x1e>
 8013808:	ee20 0a00 	vmul.f32	s0, s0, s0
 801380c:	ecbd 8b02 	vpop	{d8}
 8013810:	bd10      	pop	{r4, pc}
 8013812:	4b25      	ldr	r3, [pc, #148]	; (80138a8 <__ieee754_coshf+0xb4>)
 8013814:	429c      	cmp	r4, r3
 8013816:	dc15      	bgt.n	8013844 <__ieee754_coshf+0x50>
 8013818:	f7fe fe50 	bl	80124bc <fabsf>
 801381c:	f001 fb0c 	bl	8014e38 <expm1f>
 8013820:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013824:	f1b4 5f10 	cmp.w	r4, #603979776	; 0x24000000
 8013828:	eef0 7a40 	vmov.f32	s15, s0
 801382c:	ee30 0a07 	vadd.f32	s0, s0, s14
 8013830:	dbec      	blt.n	801380c <__ieee754_coshf+0x18>
 8013832:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013836:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801383a:	eec7 6a80 	vdiv.f32	s13, s15, s0
 801383e:	ee36 0a87 	vadd.f32	s0, s13, s14
 8013842:	e7e3      	b.n	801380c <__ieee754_coshf+0x18>
 8013844:	4b19      	ldr	r3, [pc, #100]	; (80138ac <__ieee754_coshf+0xb8>)
 8013846:	429c      	cmp	r4, r3
 8013848:	dc0c      	bgt.n	8013864 <__ieee754_coshf+0x70>
 801384a:	f7fe fe37 	bl	80124bc <fabsf>
 801384e:	f000 f835 	bl	80138bc <__ieee754_expf>
 8013852:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8013856:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801385a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801385e:	eeb0 0a67 	vmov.f32	s0, s15
 8013862:	e7d3      	b.n	801380c <__ieee754_coshf+0x18>
 8013864:	4b12      	ldr	r3, [pc, #72]	; (80138b0 <__ieee754_coshf+0xbc>)
 8013866:	429c      	cmp	r4, r3
 8013868:	dc08      	bgt.n	801387c <__ieee754_coshf+0x88>
 801386a:	f7fe fe27 	bl	80124bc <fabsf>
 801386e:	f000 f825 	bl	80138bc <__ieee754_expf>
 8013872:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013876:	ee20 0a27 	vmul.f32	s0, s0, s15
 801387a:	e7c7      	b.n	801380c <__ieee754_coshf+0x18>
 801387c:	4b0d      	ldr	r3, [pc, #52]	; (80138b4 <__ieee754_coshf+0xc0>)
 801387e:	429c      	cmp	r4, r3
 8013880:	dc0c      	bgt.n	801389c <__ieee754_coshf+0xa8>
 8013882:	f7fe fe1b 	bl	80124bc <fabsf>
 8013886:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 801388a:	ee20 0a08 	vmul.f32	s0, s0, s16
 801388e:	f000 f815 	bl	80138bc <__ieee754_expf>
 8013892:	ee20 8a08 	vmul.f32	s16, s0, s16
 8013896:	ee28 0a00 	vmul.f32	s0, s16, s0
 801389a:	e7b7      	b.n	801380c <__ieee754_coshf+0x18>
 801389c:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80138b8 <__ieee754_coshf+0xc4>
 80138a0:	ee20 0a00 	vmul.f32	s0, s0, s0
 80138a4:	e7b2      	b.n	801380c <__ieee754_coshf+0x18>
 80138a6:	bf00      	nop
 80138a8:	3eb17217 	.word	0x3eb17217
 80138ac:	41afffff 	.word	0x41afffff
 80138b0:	42b17217 	.word	0x42b17217
 80138b4:	42b2d4fc 	.word	0x42b2d4fc
 80138b8:	7149f2ca 	.word	0x7149f2ca

080138bc <__ieee754_expf>:
 80138bc:	ee10 2a10 	vmov	r2, s0
 80138c0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80138c4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80138c8:	d902      	bls.n	80138d0 <__ieee754_expf+0x14>
 80138ca:	ee30 0a00 	vadd.f32	s0, s0, s0
 80138ce:	4770      	bx	lr
 80138d0:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 80138d4:	d106      	bne.n	80138e4 <__ieee754_expf+0x28>
 80138d6:	eddf 7a51 	vldr	s15, [pc, #324]	; 8013a1c <__ieee754_expf+0x160>
 80138da:	2b00      	cmp	r3, #0
 80138dc:	bf18      	it	ne
 80138de:	eeb0 0a67 	vmovne.f32	s0, s15
 80138e2:	4770      	bx	lr
 80138e4:	484e      	ldr	r0, [pc, #312]	; (8013a20 <__ieee754_expf+0x164>)
 80138e6:	4282      	cmp	r2, r0
 80138e8:	dd04      	ble.n	80138f4 <__ieee754_expf+0x38>
 80138ea:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8013a24 <__ieee754_expf+0x168>
 80138ee:	ee20 0a00 	vmul.f32	s0, s0, s0
 80138f2:	4770      	bx	lr
 80138f4:	2a00      	cmp	r2, #0
 80138f6:	da03      	bge.n	8013900 <__ieee754_expf+0x44>
 80138f8:	4a4b      	ldr	r2, [pc, #300]	; (8013a28 <__ieee754_expf+0x16c>)
 80138fa:	4291      	cmp	r1, r2
 80138fc:	f200 808a 	bhi.w	8013a14 <__ieee754_expf+0x158>
 8013900:	4a4a      	ldr	r2, [pc, #296]	; (8013a2c <__ieee754_expf+0x170>)
 8013902:	4291      	cmp	r1, r2
 8013904:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8013908:	d954      	bls.n	80139b4 <__ieee754_expf+0xf8>
 801390a:	4a49      	ldr	r2, [pc, #292]	; (8013a30 <__ieee754_expf+0x174>)
 801390c:	4291      	cmp	r1, r2
 801390e:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8013912:	d836      	bhi.n	8013982 <__ieee754_expf+0xc6>
 8013914:	4947      	ldr	r1, [pc, #284]	; (8013a34 <__ieee754_expf+0x178>)
 8013916:	4411      	add	r1, r2
 8013918:	ed91 7a00 	vldr	s14, [r1]
 801391c:	4946      	ldr	r1, [pc, #280]	; (8013a38 <__ieee754_expf+0x17c>)
 801391e:	440a      	add	r2, r1
 8013920:	edd2 7a00 	vldr	s15, [r2]
 8013924:	ee30 7a47 	vsub.f32	s14, s0, s14
 8013928:	f1c3 0201 	rsb	r2, r3, #1
 801392c:	1ad2      	subs	r2, r2, r3
 801392e:	ee37 0a67 	vsub.f32	s0, s14, s15
 8013932:	ee60 6a00 	vmul.f32	s13, s0, s0
 8013936:	eddf 5a41 	vldr	s11, [pc, #260]	; 8013a3c <__ieee754_expf+0x180>
 801393a:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8013a40 <__ieee754_expf+0x184>
 801393e:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8013942:	eddf 5a40 	vldr	s11, [pc, #256]	; 8013a44 <__ieee754_expf+0x188>
 8013946:	eee5 5a26 	vfma.f32	s11, s10, s13
 801394a:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 8013a48 <__ieee754_expf+0x18c>
 801394e:	eea5 5aa6 	vfma.f32	s10, s11, s13
 8013952:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8013a4c <__ieee754_expf+0x190>
 8013956:	eee5 5a26 	vfma.f32	s11, s10, s13
 801395a:	eeb0 5a40 	vmov.f32	s10, s0
 801395e:	eea5 5ae6 	vfms.f32	s10, s11, s13
 8013962:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8013966:	eef0 6a45 	vmov.f32	s13, s10
 801396a:	ee20 5a05 	vmul.f32	s10, s0, s10
 801396e:	bb92      	cbnz	r2, 80139d6 <__ieee754_expf+0x11a>
 8013970:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8013974:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8013978:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801397c:	ee36 0a40 	vsub.f32	s0, s12, s0
 8013980:	4770      	bx	lr
 8013982:	4b33      	ldr	r3, [pc, #204]	; (8013a50 <__ieee754_expf+0x194>)
 8013984:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8013a54 <__ieee754_expf+0x198>
 8013988:	4413      	add	r3, r2
 801398a:	edd3 7a00 	vldr	s15, [r3]
 801398e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013992:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8013a58 <__ieee754_expf+0x19c>
 8013996:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801399a:	ee17 2a90 	vmov	r2, s15
 801399e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80139a2:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80139a6:	eeb0 7a40 	vmov.f32	s14, s0
 80139aa:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8013a5c <__ieee754_expf+0x1a0>
 80139ae:	ee67 7a80 	vmul.f32	s15, s15, s0
 80139b2:	e7bc      	b.n	801392e <__ieee754_expf+0x72>
 80139b4:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 80139b8:	d20b      	bcs.n	80139d2 <__ieee754_expf+0x116>
 80139ba:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8013a24 <__ieee754_expf+0x168>
 80139be:	ee70 6a26 	vadd.f32	s13, s0, s13
 80139c2:	eef4 6ac6 	vcmpe.f32	s13, s12
 80139c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139ca:	dd02      	ble.n	80139d2 <__ieee754_expf+0x116>
 80139cc:	ee30 0a06 	vadd.f32	s0, s0, s12
 80139d0:	4770      	bx	lr
 80139d2:	2200      	movs	r2, #0
 80139d4:	e7ad      	b.n	8013932 <__ieee754_expf+0x76>
 80139d6:	ee75 6ae6 	vsub.f32	s13, s11, s13
 80139da:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 80139de:	ee85 0a26 	vdiv.f32	s0, s10, s13
 80139e2:	bfb8      	it	lt
 80139e4:	3264      	addlt	r2, #100	; 0x64
 80139e6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80139ea:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80139ee:	ee76 7a40 	vsub.f32	s15, s12, s0
 80139f2:	ee17 3a90 	vmov	r3, s15
 80139f6:	bfab      	itete	ge
 80139f8:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 80139fc:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8013a00:	ee00 3a10 	vmovge	s0, r3
 8013a04:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 8013a60 <__ieee754_expf+0x1a4>
 8013a08:	bfbc      	itt	lt
 8013a0a:	ee00 3a10 	vmovlt	s0, r3
 8013a0e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8013a12:	4770      	bx	lr
 8013a14:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013a1c <__ieee754_expf+0x160>
 8013a18:	4770      	bx	lr
 8013a1a:	bf00      	nop
 8013a1c:	00000000 	.word	0x00000000
 8013a20:	42b17217 	.word	0x42b17217
 8013a24:	7149f2ca 	.word	0x7149f2ca
 8013a28:	42cff1b5 	.word	0x42cff1b5
 8013a2c:	3eb17218 	.word	0x3eb17218
 8013a30:	3f851591 	.word	0x3f851591
 8013a34:	08017c24 	.word	0x08017c24
 8013a38:	08017c2c 	.word	0x08017c2c
 8013a3c:	3331bb4c 	.word	0x3331bb4c
 8013a40:	b5ddea0e 	.word	0xb5ddea0e
 8013a44:	388ab355 	.word	0x388ab355
 8013a48:	bb360b61 	.word	0xbb360b61
 8013a4c:	3e2aaaab 	.word	0x3e2aaaab
 8013a50:	08017c1c 	.word	0x08017c1c
 8013a54:	3fb8aa3b 	.word	0x3fb8aa3b
 8013a58:	3f317180 	.word	0x3f317180
 8013a5c:	3717f7d1 	.word	0x3717f7d1
 8013a60:	0d800000 	.word	0x0d800000

08013a64 <__ieee754_fmodf>:
 8013a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013a66:	ee10 6a90 	vmov	r6, s1
 8013a6a:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 8013a6e:	ee10 3a10 	vmov	r3, s0
 8013a72:	d009      	beq.n	8013a88 <__ieee754_fmodf+0x24>
 8013a74:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8013a78:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8013a7c:	ee10 7a10 	vmov	r7, s0
 8013a80:	da02      	bge.n	8013a88 <__ieee754_fmodf+0x24>
 8013a82:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8013a86:	dd0a      	ble.n	8013a9e <__ieee754_fmodf+0x3a>
 8013a88:	ee07 3a90 	vmov	s15, r3
 8013a8c:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8013a90:	eec0 7aa0 	vdiv.f32	s15, s1, s1
 8013a94:	ee17 3a90 	vmov	r3, s15
 8013a98:	ee00 3a10 	vmov	s0, r3
 8013a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a9e:	42a9      	cmp	r1, r5
 8013aa0:	dbfa      	blt.n	8013a98 <__ieee754_fmodf+0x34>
 8013aa2:	f003 4400 	and.w	r4, r3, #2147483648	; 0x80000000
 8013aa6:	d105      	bne.n	8013ab4 <__ieee754_fmodf+0x50>
 8013aa8:	4a30      	ldr	r2, [pc, #192]	; (8013b6c <__ieee754_fmodf+0x108>)
 8013aaa:	0fe3      	lsrs	r3, r4, #31
 8013aac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	e7f1      	b.n	8013a98 <__ieee754_fmodf+0x34>
 8013ab4:	4b2e      	ldr	r3, [pc, #184]	; (8013b70 <__ieee754_fmodf+0x10c>)
 8013ab6:	4299      	cmp	r1, r3
 8013ab8:	dc3e      	bgt.n	8013b38 <__ieee754_fmodf+0xd4>
 8013aba:	020a      	lsls	r2, r1, #8
 8013abc:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8013ac0:	2a00      	cmp	r2, #0
 8013ac2:	dc36      	bgt.n	8013b32 <__ieee754_fmodf+0xce>
 8013ac4:	429d      	cmp	r5, r3
 8013ac6:	dc3a      	bgt.n	8013b3e <__ieee754_fmodf+0xda>
 8013ac8:	022b      	lsls	r3, r5, #8
 8013aca:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 8013ace:	005b      	lsls	r3, r3, #1
 8013ad0:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8013ad4:	d5fb      	bpl.n	8013ace <__ieee754_fmodf+0x6a>
 8013ad6:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8013ada:	bfbb      	ittet	lt
 8013adc:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 8013ae0:	1a1b      	sublt	r3, r3, r0
 8013ae2:	f3c7 0116 	ubfxge	r1, r7, #0, #23
 8013ae6:	4099      	lsllt	r1, r3
 8013ae8:	bfa8      	it	ge
 8013aea:	f441 0100 	orrge.w	r1, r1, #8388608	; 0x800000
 8013aee:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 8013af2:	bfb5      	itete	lt
 8013af4:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 8013af8:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 8013afc:	1a9b      	sublt	r3, r3, r2
 8013afe:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 8013b02:	bfb8      	it	lt
 8013b04:	409d      	lsllt	r5, r3
 8013b06:	1a80      	subs	r0, r0, r2
 8013b08:	1b4b      	subs	r3, r1, r5
 8013b0a:	b9d8      	cbnz	r0, 8013b44 <__ieee754_fmodf+0xe0>
 8013b0c:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 8013b10:	bf28      	it	cs
 8013b12:	460b      	movcs	r3, r1
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d0c7      	beq.n	8013aa8 <__ieee754_fmodf+0x44>
 8013b18:	4915      	ldr	r1, [pc, #84]	; (8013b70 <__ieee754_fmodf+0x10c>)
 8013b1a:	428b      	cmp	r3, r1
 8013b1c:	dd1a      	ble.n	8013b54 <__ieee754_fmodf+0xf0>
 8013b1e:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 8013b22:	db1a      	blt.n	8013b5a <__ieee754_fmodf+0xf6>
 8013b24:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8013b28:	4323      	orrs	r3, r4
 8013b2a:	327f      	adds	r2, #127	; 0x7f
 8013b2c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8013b30:	e7b2      	b.n	8013a98 <__ieee754_fmodf+0x34>
 8013b32:	3801      	subs	r0, #1
 8013b34:	0052      	lsls	r2, r2, #1
 8013b36:	e7c3      	b.n	8013ac0 <__ieee754_fmodf+0x5c>
 8013b38:	15c8      	asrs	r0, r1, #23
 8013b3a:	387f      	subs	r0, #127	; 0x7f
 8013b3c:	e7c2      	b.n	8013ac4 <__ieee754_fmodf+0x60>
 8013b3e:	15ea      	asrs	r2, r5, #23
 8013b40:	3a7f      	subs	r2, #127	; 0x7f
 8013b42:	e7c8      	b.n	8013ad6 <__ieee754_fmodf+0x72>
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	da02      	bge.n	8013b4e <__ieee754_fmodf+0xea>
 8013b48:	0049      	lsls	r1, r1, #1
 8013b4a:	3801      	subs	r0, #1
 8013b4c:	e7dc      	b.n	8013b08 <__ieee754_fmodf+0xa4>
 8013b4e:	d0ab      	beq.n	8013aa8 <__ieee754_fmodf+0x44>
 8013b50:	0059      	lsls	r1, r3, #1
 8013b52:	e7fa      	b.n	8013b4a <__ieee754_fmodf+0xe6>
 8013b54:	005b      	lsls	r3, r3, #1
 8013b56:	3a01      	subs	r2, #1
 8013b58:	e7df      	b.n	8013b1a <__ieee754_fmodf+0xb6>
 8013b5a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8013b5e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8013b62:	3282      	adds	r2, #130	; 0x82
 8013b64:	4113      	asrs	r3, r2
 8013b66:	4323      	orrs	r3, r4
 8013b68:	e796      	b.n	8013a98 <__ieee754_fmodf+0x34>
 8013b6a:	bf00      	nop
 8013b6c:	08017c34 	.word	0x08017c34
 8013b70:	007fffff 	.word	0x007fffff

08013b74 <__ieee754_logf>:
 8013b74:	ee10 3a10 	vmov	r3, s0
 8013b78:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8013b7c:	d106      	bne.n	8013b8c <__ieee754_logf+0x18>
 8013b7e:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8013d14 <__ieee754_logf+0x1a0>
 8013b82:	eddf 7a65 	vldr	s15, [pc, #404]	; 8013d18 <__ieee754_logf+0x1a4>
 8013b86:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8013b8a:	4770      	bx	lr
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	da02      	bge.n	8013b96 <__ieee754_logf+0x22>
 8013b90:	ee30 7a40 	vsub.f32	s14, s0, s0
 8013b94:	e7f5      	b.n	8013b82 <__ieee754_logf+0xe>
 8013b96:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013b9a:	db02      	blt.n	8013ba2 <__ieee754_logf+0x2e>
 8013b9c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013ba0:	4770      	bx	lr
 8013ba2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8013ba6:	bfbf      	itttt	lt
 8013ba8:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 8013d1c <__ieee754_logf+0x1a8>
 8013bac:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8013bb0:	f06f 0118 	mvnlt.w	r1, #24
 8013bb4:	ee17 3a90 	vmovlt	r3, s15
 8013bb8:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8013bbc:	bfa8      	it	ge
 8013bbe:	2100      	movge	r1, #0
 8013bc0:	3a7f      	subs	r2, #127	; 0x7f
 8013bc2:	440a      	add	r2, r1
 8013bc4:	4956      	ldr	r1, [pc, #344]	; (8013d20 <__ieee754_logf+0x1ac>)
 8013bc6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8013bca:	4419      	add	r1, r3
 8013bcc:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 8013bd0:	eb02 52d1 	add.w	r2, r2, r1, lsr #23
 8013bd4:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 8013bd8:	4319      	orrs	r1, r3
 8013bda:	ee07 1a90 	vmov	s15, r1
 8013bde:	f103 010f 	add.w	r1, r3, #15
 8013be2:	f3c1 0116 	ubfx	r1, r1, #0, #23
 8013be6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013bea:	290f      	cmp	r1, #15
 8013bec:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8013bf0:	dc31      	bgt.n	8013c56 <__ieee754_logf+0xe2>
 8013bf2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8013bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bfa:	d10f      	bne.n	8013c1c <__ieee754_logf+0xa8>
 8013bfc:	2a00      	cmp	r2, #0
 8013bfe:	f000 8085 	beq.w	8013d0c <__ieee754_logf+0x198>
 8013c02:	ee07 2a90 	vmov	s15, r2
 8013c06:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8013d24 <__ieee754_logf+0x1b0>
 8013c0a:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8013d28 <__ieee754_logf+0x1b4>
 8013c0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013c12:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013c16:	eea7 0a87 	vfma.f32	s0, s15, s14
 8013c1a:	4770      	bx	lr
 8013c1c:	eddf 7a43 	vldr	s15, [pc, #268]	; 8013d2c <__ieee754_logf+0x1b8>
 8013c20:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8013c24:	eea0 7a67 	vfms.f32	s14, s0, s15
 8013c28:	ee60 7a00 	vmul.f32	s15, s0, s0
 8013c2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013c30:	b912      	cbnz	r2, 8013c38 <__ieee754_logf+0xc4>
 8013c32:	ee30 0a47 	vsub.f32	s0, s0, s14
 8013c36:	4770      	bx	lr
 8013c38:	ee07 2a90 	vmov	s15, r2
 8013c3c:	eddf 6a39 	vldr	s13, [pc, #228]	; 8013d24 <__ieee754_logf+0x1b0>
 8013c40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013c44:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8013c48:	ee37 0a40 	vsub.f32	s0, s14, s0
 8013c4c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8013d28 <__ieee754_logf+0x1b4>
 8013c50:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8013c54:	4770      	bx	lr
 8013c56:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8013c5a:	ee70 7a27 	vadd.f32	s15, s0, s15
 8013c5e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8013d30 <__ieee754_logf+0x1bc>
 8013c62:	eddf 4a34 	vldr	s9, [pc, #208]	; 8013d34 <__ieee754_logf+0x1c0>
 8013c66:	4934      	ldr	r1, [pc, #208]	; (8013d38 <__ieee754_logf+0x1c4>)
 8013c68:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8013c6c:	4419      	add	r1, r3
 8013c6e:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 8013c72:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8013c76:	430b      	orrs	r3, r1
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	ee07 2a90 	vmov	s15, r2
 8013c7e:	ee26 5a06 	vmul.f32	s10, s12, s12
 8013c82:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8013c86:	ee25 7a05 	vmul.f32	s14, s10, s10
 8013c8a:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8013d3c <__ieee754_logf+0x1c8>
 8013c8e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8013c92:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8013d40 <__ieee754_logf+0x1cc>
 8013c96:	eee7 5a87 	vfma.f32	s11, s15, s14
 8013c9a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8013d44 <__ieee754_logf+0x1d0>
 8013c9e:	eee7 7a24 	vfma.f32	s15, s14, s9
 8013ca2:	eddf 4a29 	vldr	s9, [pc, #164]	; 8013d48 <__ieee754_logf+0x1d4>
 8013ca6:	eee7 4a87 	vfma.f32	s9, s15, s14
 8013caa:	eddf 7a28 	vldr	s15, [pc, #160]	; 8013d4c <__ieee754_logf+0x1d8>
 8013cae:	eee4 7a87 	vfma.f32	s15, s9, s14
 8013cb2:	ee67 7a85 	vmul.f32	s15, s15, s10
 8013cb6:	eee5 7a87 	vfma.f32	s15, s11, s14
 8013cba:	dd1c      	ble.n	8013cf6 <__ieee754_logf+0x182>
 8013cbc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8013cc0:	ee20 7a07 	vmul.f32	s14, s0, s14
 8013cc4:	ee27 7a00 	vmul.f32	s14, s14, s0
 8013cc8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013ccc:	ee67 7a86 	vmul.f32	s15, s15, s12
 8013cd0:	b922      	cbnz	r2, 8013cdc <__ieee754_logf+0x168>
 8013cd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013cd6:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013cda:	4770      	bx	lr
 8013cdc:	ed9f 6a11 	vldr	s12, [pc, #68]	; 8013d24 <__ieee754_logf+0x1b0>
 8013ce0:	eee6 7a86 	vfma.f32	s15, s13, s12
 8013ce4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013ce8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8013cec:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8013d28 <__ieee754_logf+0x1b4>
 8013cf0:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8013cf4:	4770      	bx	lr
 8013cf6:	ee70 7a67 	vsub.f32	s15, s0, s15
 8013cfa:	ee67 7a86 	vmul.f32	s15, s15, s12
 8013cfe:	2a00      	cmp	r2, #0
 8013d00:	d0e9      	beq.n	8013cd6 <__ieee754_logf+0x162>
 8013d02:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8013d24 <__ieee754_logf+0x1b0>
 8013d06:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8013d0a:	e7ed      	b.n	8013ce8 <__ieee754_logf+0x174>
 8013d0c:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8013d18 <__ieee754_logf+0x1a4>
 8013d10:	4770      	bx	lr
 8013d12:	bf00      	nop
 8013d14:	cc000000 	.word	0xcc000000
 8013d18:	00000000 	.word	0x00000000
 8013d1c:	4c000000 	.word	0x4c000000
 8013d20:	004afb20 	.word	0x004afb20
 8013d24:	3717f7d1 	.word	0x3717f7d1
 8013d28:	3f317180 	.word	0x3f317180
 8013d2c:	3eaaaaab 	.word	0x3eaaaaab
 8013d30:	3e1cd04f 	.word	0x3e1cd04f
 8013d34:	3e178897 	.word	0x3e178897
 8013d38:	ffcf5c30 	.word	0xffcf5c30
 8013d3c:	3e638e29 	.word	0x3e638e29
 8013d40:	3ecccccd 	.word	0x3ecccccd
 8013d44:	3e3a3325 	.word	0x3e3a3325
 8013d48:	3e924925 	.word	0x3e924925
 8013d4c:	3f2aaaab 	.word	0x3f2aaaab

08013d50 <__ieee754_powf>:
 8013d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d54:	ee10 5a90 	vmov	r5, s1
 8013d58:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8013d5c:	ed2d 8b02 	vpush	{d8}
 8013d60:	eeb0 8a40 	vmov.f32	s16, s0
 8013d64:	eef0 8a60 	vmov.f32	s17, s1
 8013d68:	f000 8293 	beq.w	8014292 <__ieee754_powf+0x542>
 8013d6c:	ee10 8a10 	vmov	r8, s0
 8013d70:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8013d74:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8013d78:	dc06      	bgt.n	8013d88 <__ieee754_powf+0x38>
 8013d7a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8013d7e:	dd0a      	ble.n	8013d96 <__ieee754_powf+0x46>
 8013d80:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8013d84:	f000 8285 	beq.w	8014292 <__ieee754_powf+0x542>
 8013d88:	ecbd 8b02 	vpop	{d8}
 8013d8c:	48d9      	ldr	r0, [pc, #868]	; (80140f4 <__ieee754_powf+0x3a4>)
 8013d8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013d92:	f001 b987 	b.w	80150a4 <nanf>
 8013d96:	f1b8 0f00 	cmp.w	r8, #0
 8013d9a:	da1d      	bge.n	8013dd8 <__ieee754_powf+0x88>
 8013d9c:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8013da0:	da2c      	bge.n	8013dfc <__ieee754_powf+0xac>
 8013da2:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8013da6:	db30      	blt.n	8013e0a <__ieee754_powf+0xba>
 8013da8:	15fb      	asrs	r3, r7, #23
 8013daa:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8013dae:	fa47 f603 	asr.w	r6, r7, r3
 8013db2:	fa06 f303 	lsl.w	r3, r6, r3
 8013db6:	42bb      	cmp	r3, r7
 8013db8:	d127      	bne.n	8013e0a <__ieee754_powf+0xba>
 8013dba:	f006 0601 	and.w	r6, r6, #1
 8013dbe:	f1c6 0602 	rsb	r6, r6, #2
 8013dc2:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8013dc6:	d122      	bne.n	8013e0e <__ieee754_powf+0xbe>
 8013dc8:	2d00      	cmp	r5, #0
 8013dca:	f280 8268 	bge.w	801429e <__ieee754_powf+0x54e>
 8013dce:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013dd2:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8013dd6:	e00d      	b.n	8013df4 <__ieee754_powf+0xa4>
 8013dd8:	2600      	movs	r6, #0
 8013dda:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8013dde:	d1f0      	bne.n	8013dc2 <__ieee754_powf+0x72>
 8013de0:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8013de4:	f000 8255 	beq.w	8014292 <__ieee754_powf+0x542>
 8013de8:	dd0a      	ble.n	8013e00 <__ieee754_powf+0xb0>
 8013dea:	2d00      	cmp	r5, #0
 8013dec:	f280 8254 	bge.w	8014298 <__ieee754_powf+0x548>
 8013df0:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 80140f8 <__ieee754_powf+0x3a8>
 8013df4:	ecbd 8b02 	vpop	{d8}
 8013df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013dfc:	2602      	movs	r6, #2
 8013dfe:	e7ec      	b.n	8013dda <__ieee754_powf+0x8a>
 8013e00:	2d00      	cmp	r5, #0
 8013e02:	daf5      	bge.n	8013df0 <__ieee754_powf+0xa0>
 8013e04:	eeb1 0a68 	vneg.f32	s0, s17
 8013e08:	e7f4      	b.n	8013df4 <__ieee754_powf+0xa4>
 8013e0a:	2600      	movs	r6, #0
 8013e0c:	e7d9      	b.n	8013dc2 <__ieee754_powf+0x72>
 8013e0e:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8013e12:	d102      	bne.n	8013e1a <__ieee754_powf+0xca>
 8013e14:	ee28 0a08 	vmul.f32	s0, s16, s16
 8013e18:	e7ec      	b.n	8013df4 <__ieee754_powf+0xa4>
 8013e1a:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8013e1e:	eeb0 0a48 	vmov.f32	s0, s16
 8013e22:	d108      	bne.n	8013e36 <__ieee754_powf+0xe6>
 8013e24:	f1b8 0f00 	cmp.w	r8, #0
 8013e28:	db05      	blt.n	8013e36 <__ieee754_powf+0xe6>
 8013e2a:	ecbd 8b02 	vpop	{d8}
 8013e2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013e32:	f000 bbe7 	b.w	8014604 <__ieee754_sqrtf>
 8013e36:	f7fe fb41 	bl	80124bc <fabsf>
 8013e3a:	b124      	cbz	r4, 8013e46 <__ieee754_powf+0xf6>
 8013e3c:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8013e40:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8013e44:	d117      	bne.n	8013e76 <__ieee754_powf+0x126>
 8013e46:	2d00      	cmp	r5, #0
 8013e48:	bfbc      	itt	lt
 8013e4a:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8013e4e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8013e52:	f1b8 0f00 	cmp.w	r8, #0
 8013e56:	dacd      	bge.n	8013df4 <__ieee754_powf+0xa4>
 8013e58:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8013e5c:	ea54 0306 	orrs.w	r3, r4, r6
 8013e60:	d104      	bne.n	8013e6c <__ieee754_powf+0x11c>
 8013e62:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013e66:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8013e6a:	e7c3      	b.n	8013df4 <__ieee754_powf+0xa4>
 8013e6c:	2e01      	cmp	r6, #1
 8013e6e:	d1c1      	bne.n	8013df4 <__ieee754_powf+0xa4>
 8013e70:	eeb1 0a40 	vneg.f32	s0, s0
 8013e74:	e7be      	b.n	8013df4 <__ieee754_powf+0xa4>
 8013e76:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8013e7a:	3801      	subs	r0, #1
 8013e7c:	ea56 0300 	orrs.w	r3, r6, r0
 8013e80:	d104      	bne.n	8013e8c <__ieee754_powf+0x13c>
 8013e82:	ee38 8a48 	vsub.f32	s16, s16, s16
 8013e86:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8013e8a:	e7b3      	b.n	8013df4 <__ieee754_powf+0xa4>
 8013e8c:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8013e90:	dd6d      	ble.n	8013f6e <__ieee754_powf+0x21e>
 8013e92:	4b9a      	ldr	r3, [pc, #616]	; (80140fc <__ieee754_powf+0x3ac>)
 8013e94:	429c      	cmp	r4, r3
 8013e96:	dc06      	bgt.n	8013ea6 <__ieee754_powf+0x156>
 8013e98:	2d00      	cmp	r5, #0
 8013e9a:	daa9      	bge.n	8013df0 <__ieee754_powf+0xa0>
 8013e9c:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8014100 <__ieee754_powf+0x3b0>
 8013ea0:	ee20 0a00 	vmul.f32	s0, s0, s0
 8013ea4:	e7a6      	b.n	8013df4 <__ieee754_powf+0xa4>
 8013ea6:	4b97      	ldr	r3, [pc, #604]	; (8014104 <__ieee754_powf+0x3b4>)
 8013ea8:	429c      	cmp	r4, r3
 8013eaa:	dd02      	ble.n	8013eb2 <__ieee754_powf+0x162>
 8013eac:	2d00      	cmp	r5, #0
 8013eae:	dcf5      	bgt.n	8013e9c <__ieee754_powf+0x14c>
 8013eb0:	e79e      	b.n	8013df0 <__ieee754_powf+0xa0>
 8013eb2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013eb6:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013eba:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8014108 <__ieee754_powf+0x3b8>
 8013ebe:	eef1 6a40 	vneg.f32	s13, s0
 8013ec2:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8013ec6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013eca:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013ece:	eee7 7a40 	vfms.f32	s15, s14, s0
 8013ed2:	ee60 0a00 	vmul.f32	s1, s0, s0
 8013ed6:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 801410c <__ieee754_powf+0x3bc>
 8013eda:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8013ede:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8014110 <__ieee754_powf+0x3c0>
 8013ee2:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 8013ee6:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013eea:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8014114 <__ieee754_powf+0x3c4>
 8013eee:	eeb0 6a67 	vmov.f32	s12, s15
 8013ef2:	eea0 6a07 	vfma.f32	s12, s0, s14
 8013ef6:	ee16 3a10 	vmov	r3, s12
 8013efa:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8013efe:	f023 030f 	bic.w	r3, r3, #15
 8013f02:	ee00 3a90 	vmov	s1, r3
 8013f06:	eee6 0a87 	vfma.f32	s1, s13, s14
 8013f0a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8013f0e:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8013f12:	f025 050f 	bic.w	r5, r5, #15
 8013f16:	ee07 5a10 	vmov	s14, r5
 8013f1a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8013f1e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8013f22:	ee07 3a90 	vmov	s15, r3
 8013f26:	eee7 0a27 	vfma.f32	s1, s14, s15
 8013f2a:	3e01      	subs	r6, #1
 8013f2c:	ea56 0200 	orrs.w	r2, r6, r0
 8013f30:	ee07 5a10 	vmov	s14, r5
 8013f34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013f38:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8013f3c:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8013f40:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8013f44:	ee17 4a10 	vmov	r4, s14
 8013f48:	bf08      	it	eq
 8013f4a:	eeb0 8a40 	vmoveq.f32	s16, s0
 8013f4e:	2c00      	cmp	r4, #0
 8013f50:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8013f54:	f340 8184 	ble.w	8014260 <__ieee754_powf+0x510>
 8013f58:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8013f5c:	f340 80fc 	ble.w	8014158 <__ieee754_powf+0x408>
 8013f60:	eddf 7a67 	vldr	s15, [pc, #412]	; 8014100 <__ieee754_powf+0x3b0>
 8013f64:	ee28 0a27 	vmul.f32	s0, s16, s15
 8013f68:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013f6c:	e742      	b.n	8013df4 <__ieee754_powf+0xa4>
 8013f6e:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8013f72:	bfbf      	itttt	lt
 8013f74:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 8014118 <__ieee754_powf+0x3c8>
 8013f78:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8013f7c:	f06f 0217 	mvnlt.w	r2, #23
 8013f80:	ee17 4a90 	vmovlt	r4, s15
 8013f84:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8013f88:	bfa8      	it	ge
 8013f8a:	2200      	movge	r2, #0
 8013f8c:	3b7f      	subs	r3, #127	; 0x7f
 8013f8e:	4413      	add	r3, r2
 8013f90:	4a62      	ldr	r2, [pc, #392]	; (801411c <__ieee754_powf+0x3cc>)
 8013f92:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8013f96:	4294      	cmp	r4, r2
 8013f98:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8013f9c:	dd06      	ble.n	8013fac <__ieee754_powf+0x25c>
 8013f9e:	4a60      	ldr	r2, [pc, #384]	; (8014120 <__ieee754_powf+0x3d0>)
 8013fa0:	4294      	cmp	r4, r2
 8013fa2:	f340 80a5 	ble.w	80140f0 <__ieee754_powf+0x3a0>
 8013fa6:	3301      	adds	r3, #1
 8013fa8:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8013fac:	2400      	movs	r4, #0
 8013fae:	4a5d      	ldr	r2, [pc, #372]	; (8014124 <__ieee754_powf+0x3d4>)
 8013fb0:	00a7      	lsls	r7, r4, #2
 8013fb2:	443a      	add	r2, r7
 8013fb4:	ee07 1a90 	vmov	s15, r1
 8013fb8:	ed92 7a00 	vldr	s14, [r2]
 8013fbc:	4a5a      	ldr	r2, [pc, #360]	; (8014128 <__ieee754_powf+0x3d8>)
 8013fbe:	ee37 6a27 	vadd.f32	s12, s14, s15
 8013fc2:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8013fc6:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8013fca:	1049      	asrs	r1, r1, #1
 8013fcc:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8013fd0:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8013fd4:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8013fd8:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8013fdc:	ee06 1a10 	vmov	s12, r1
 8013fe0:	ee65 4aa6 	vmul.f32	s9, s11, s13
 8013fe4:	ee14 ca90 	vmov	ip, s9
 8013fe8:	ea02 0c0c 	and.w	ip, r2, ip
 8013fec:	ee05 ca10 	vmov	s10, ip
 8013ff0:	eeb1 4a45 	vneg.f32	s8, s10
 8013ff4:	eee4 5a06 	vfma.f32	s11, s8, s12
 8013ff8:	ee36 6a47 	vsub.f32	s12, s12, s14
 8013ffc:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 801412c <__ieee754_powf+0x3dc>
 8014000:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8014004:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8014008:	eee4 5a06 	vfma.f32	s11, s8, s12
 801400c:	ee67 3aa7 	vmul.f32	s7, s15, s15
 8014010:	ee25 6aa6 	vmul.f32	s12, s11, s13
 8014014:	eddf 5a46 	vldr	s11, [pc, #280]	; 8014130 <__ieee754_powf+0x3e0>
 8014018:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801401c:	eddf 5a45 	vldr	s11, [pc, #276]	; 8014134 <__ieee754_powf+0x3e4>
 8014020:	eee7 5a27 	vfma.f32	s11, s14, s15
 8014024:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8014108 <__ieee754_powf+0x3b8>
 8014028:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801402c:	eddf 5a42 	vldr	s11, [pc, #264]	; 8014138 <__ieee754_powf+0x3e8>
 8014030:	eee7 5a27 	vfma.f32	s11, s14, s15
 8014034:	ed9f 7a41 	vldr	s14, [pc, #260]	; 801413c <__ieee754_powf+0x3ec>
 8014038:	ee75 6a24 	vadd.f32	s13, s10, s9
 801403c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8014040:	ee66 6a86 	vmul.f32	s13, s13, s12
 8014044:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 8014048:	eef0 7a65 	vmov.f32	s15, s11
 801404c:	eee3 6a87 	vfma.f32	s13, s7, s14
 8014050:	eee5 7a05 	vfma.f32	s15, s10, s10
 8014054:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014058:	ee17 1a90 	vmov	r1, s15
 801405c:	4011      	ands	r1, r2
 801405e:	ee07 1a90 	vmov	s15, r1
 8014062:	ee37 7ae5 	vsub.f32	s14, s15, s11
 8014066:	eddf 5a36 	vldr	s11, [pc, #216]	; 8014140 <__ieee754_powf+0x3f0>
 801406a:	eea4 7a05 	vfma.f32	s14, s8, s10
 801406e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8014072:	ee27 7a24 	vmul.f32	s14, s14, s9
 8014076:	eea7 7a86 	vfma.f32	s14, s15, s12
 801407a:	eeb0 6a47 	vmov.f32	s12, s14
 801407e:	eea5 6a27 	vfma.f32	s12, s10, s15
 8014082:	ee16 1a10 	vmov	r1, s12
 8014086:	4011      	ands	r1, r2
 8014088:	ee06 1a90 	vmov	s13, r1
 801408c:	eee4 6a27 	vfma.f32	s13, s8, s15
 8014090:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8014144 <__ieee754_powf+0x3f4>
 8014094:	ee37 7a66 	vsub.f32	s14, s14, s13
 8014098:	ee06 1a10 	vmov	s12, r1
 801409c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80140a0:	eddf 7a29 	vldr	s15, [pc, #164]	; 8014148 <__ieee754_powf+0x3f8>
 80140a4:	4929      	ldr	r1, [pc, #164]	; (801414c <__ieee754_powf+0x3fc>)
 80140a6:	eea6 7a27 	vfma.f32	s14, s12, s15
 80140aa:	4439      	add	r1, r7
 80140ac:	edd1 7a00 	vldr	s15, [r1]
 80140b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80140b4:	ee07 3a90 	vmov	s15, r3
 80140b8:	eef0 0a47 	vmov.f32	s1, s14
 80140bc:	4b24      	ldr	r3, [pc, #144]	; (8014150 <__ieee754_powf+0x400>)
 80140be:	eee6 0a25 	vfma.f32	s1, s12, s11
 80140c2:	443b      	add	r3, r7
 80140c4:	ed93 5a00 	vldr	s10, [r3]
 80140c8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80140cc:	ee70 0a85 	vadd.f32	s1, s1, s10
 80140d0:	ee70 7aa6 	vadd.f32	s15, s1, s13
 80140d4:	ee17 3a90 	vmov	r3, s15
 80140d8:	4013      	ands	r3, r2
 80140da:	ee07 3a90 	vmov	s15, r3
 80140de:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80140e2:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80140e6:	eee6 7a65 	vfms.f32	s15, s12, s11
 80140ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80140ee:	e70e      	b.n	8013f0e <__ieee754_powf+0x1be>
 80140f0:	2401      	movs	r4, #1
 80140f2:	e75c      	b.n	8013fae <__ieee754_powf+0x25e>
 80140f4:	08017b95 	.word	0x08017b95
 80140f8:	00000000 	.word	0x00000000
 80140fc:	3f7ffff7 	.word	0x3f7ffff7
 8014100:	7149f2ca 	.word	0x7149f2ca
 8014104:	3f800007 	.word	0x3f800007
 8014108:	3eaaaaab 	.word	0x3eaaaaab
 801410c:	36eca570 	.word	0x36eca570
 8014110:	3fb8aa3b 	.word	0x3fb8aa3b
 8014114:	3fb8aa00 	.word	0x3fb8aa00
 8014118:	4b800000 	.word	0x4b800000
 801411c:	001cc471 	.word	0x001cc471
 8014120:	005db3d6 	.word	0x005db3d6
 8014124:	08017c3c 	.word	0x08017c3c
 8014128:	fffff000 	.word	0xfffff000
 801412c:	3e6c3255 	.word	0x3e6c3255
 8014130:	3e53f142 	.word	0x3e53f142
 8014134:	3e8ba305 	.word	0x3e8ba305
 8014138:	3edb6db7 	.word	0x3edb6db7
 801413c:	3f19999a 	.word	0x3f19999a
 8014140:	3f763800 	.word	0x3f763800
 8014144:	3f76384f 	.word	0x3f76384f
 8014148:	369dc3a0 	.word	0x369dc3a0
 801414c:	08017c4c 	.word	0x08017c4c
 8014150:	08017c44 	.word	0x08017c44
 8014154:	3338aa3c 	.word	0x3338aa3c
 8014158:	f040 8092 	bne.w	8014280 <__ieee754_powf+0x530>
 801415c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8014154 <__ieee754_powf+0x404>
 8014160:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014164:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8014168:	eef4 6ac7 	vcmpe.f32	s13, s14
 801416c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014170:	f73f aef6 	bgt.w	8013f60 <__ieee754_powf+0x210>
 8014174:	15db      	asrs	r3, r3, #23
 8014176:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 801417a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801417e:	4103      	asrs	r3, r0
 8014180:	4423      	add	r3, r4
 8014182:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014186:	4947      	ldr	r1, [pc, #284]	; (80142a4 <__ieee754_powf+0x554>)
 8014188:	3a7f      	subs	r2, #127	; 0x7f
 801418a:	4111      	asrs	r1, r2
 801418c:	ea23 0101 	bic.w	r1, r3, r1
 8014190:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8014194:	ee07 1a10 	vmov	s14, r1
 8014198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801419c:	f1c2 0217 	rsb	r2, r2, #23
 80141a0:	4110      	asrs	r0, r2
 80141a2:	2c00      	cmp	r4, #0
 80141a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80141a8:	bfb8      	it	lt
 80141aa:	4240      	neglt	r0, r0
 80141ac:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80141b0:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80142a8 <__ieee754_powf+0x558>
 80141b4:	ee17 3a10 	vmov	r3, s14
 80141b8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80141bc:	f023 030f 	bic.w	r3, r3, #15
 80141c0:	ee07 3a10 	vmov	s14, r3
 80141c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80141c8:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80141cc:	eddf 7a37 	vldr	s15, [pc, #220]	; 80142ac <__ieee754_powf+0x55c>
 80141d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80141d4:	eee0 7aa6 	vfma.f32	s15, s1, s13
 80141d8:	eddf 6a35 	vldr	s13, [pc, #212]	; 80142b0 <__ieee754_powf+0x560>
 80141dc:	eeb0 0a67 	vmov.f32	s0, s15
 80141e0:	eea7 0a26 	vfma.f32	s0, s14, s13
 80141e4:	eeb0 6a40 	vmov.f32	s12, s0
 80141e8:	eea7 6a66 	vfms.f32	s12, s14, s13
 80141ec:	ee20 7a00 	vmul.f32	s14, s0, s0
 80141f0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80141f4:	eddf 6a2f 	vldr	s13, [pc, #188]	; 80142b4 <__ieee754_powf+0x564>
 80141f8:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 80142b8 <__ieee754_powf+0x568>
 80141fc:	eea7 6a26 	vfma.f32	s12, s14, s13
 8014200:	eddf 6a2e 	vldr	s13, [pc, #184]	; 80142bc <__ieee754_powf+0x56c>
 8014204:	eee6 6a07 	vfma.f32	s13, s12, s14
 8014208:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 80142c0 <__ieee754_powf+0x570>
 801420c:	eea6 6a87 	vfma.f32	s12, s13, s14
 8014210:	eddf 6a2c 	vldr	s13, [pc, #176]	; 80142c4 <__ieee754_powf+0x574>
 8014214:	eee6 6a07 	vfma.f32	s13, s12, s14
 8014218:	eeb0 6a40 	vmov.f32	s12, s0
 801421c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8014220:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8014224:	eeb0 7a46 	vmov.f32	s14, s12
 8014228:	ee77 6a66 	vsub.f32	s13, s14, s13
 801422c:	ee20 6a06 	vmul.f32	s12, s0, s12
 8014230:	eee0 7a27 	vfma.f32	s15, s0, s15
 8014234:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8014238:	ee77 7a67 	vsub.f32	s15, s14, s15
 801423c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8014240:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014244:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8014248:	ee10 3a10 	vmov	r3, s0
 801424c:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8014250:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8014254:	da1a      	bge.n	801428c <__ieee754_powf+0x53c>
 8014256:	f000 ff85 	bl	8015164 <scalbnf>
 801425a:	ee20 0a08 	vmul.f32	s0, s0, s16
 801425e:	e5c9      	b.n	8013df4 <__ieee754_powf+0xa4>
 8014260:	4a19      	ldr	r2, [pc, #100]	; (80142c8 <__ieee754_powf+0x578>)
 8014262:	4293      	cmp	r3, r2
 8014264:	dd02      	ble.n	801426c <__ieee754_powf+0x51c>
 8014266:	eddf 7a19 	vldr	s15, [pc, #100]	; 80142cc <__ieee754_powf+0x57c>
 801426a:	e67b      	b.n	8013f64 <__ieee754_powf+0x214>
 801426c:	d108      	bne.n	8014280 <__ieee754_powf+0x530>
 801426e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014272:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8014276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801427a:	f6ff af7b 	blt.w	8014174 <__ieee754_powf+0x424>
 801427e:	e7f2      	b.n	8014266 <__ieee754_powf+0x516>
 8014280:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8014284:	f73f af76 	bgt.w	8014174 <__ieee754_powf+0x424>
 8014288:	2000      	movs	r0, #0
 801428a:	e78f      	b.n	80141ac <__ieee754_powf+0x45c>
 801428c:	ee00 3a10 	vmov	s0, r3
 8014290:	e7e3      	b.n	801425a <__ieee754_powf+0x50a>
 8014292:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014296:	e5ad      	b.n	8013df4 <__ieee754_powf+0xa4>
 8014298:	eeb0 0a68 	vmov.f32	s0, s17
 801429c:	e5aa      	b.n	8013df4 <__ieee754_powf+0xa4>
 801429e:	eeb0 0a48 	vmov.f32	s0, s16
 80142a2:	e5a7      	b.n	8013df4 <__ieee754_powf+0xa4>
 80142a4:	007fffff 	.word	0x007fffff
 80142a8:	3f317218 	.word	0x3f317218
 80142ac:	35bfbe8c 	.word	0x35bfbe8c
 80142b0:	3f317200 	.word	0x3f317200
 80142b4:	3331bb4c 	.word	0x3331bb4c
 80142b8:	b5ddea0e 	.word	0xb5ddea0e
 80142bc:	388ab355 	.word	0x388ab355
 80142c0:	bb360b61 	.word	0xbb360b61
 80142c4:	3e2aaaab 	.word	0x3e2aaaab
 80142c8:	43160000 	.word	0x43160000
 80142cc:	0da24260 	.word	0x0da24260

080142d0 <__ieee754_rem_pio2f>:
 80142d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80142d2:	ee10 6a10 	vmov	r6, s0
 80142d6:	4b86      	ldr	r3, [pc, #536]	; (80144f0 <__ieee754_rem_pio2f+0x220>)
 80142d8:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80142dc:	429c      	cmp	r4, r3
 80142de:	b087      	sub	sp, #28
 80142e0:	4605      	mov	r5, r0
 80142e2:	dc05      	bgt.n	80142f0 <__ieee754_rem_pio2f+0x20>
 80142e4:	2300      	movs	r3, #0
 80142e6:	ed85 0a00 	vstr	s0, [r5]
 80142ea:	6043      	str	r3, [r0, #4]
 80142ec:	2000      	movs	r0, #0
 80142ee:	e020      	b.n	8014332 <__ieee754_rem_pio2f+0x62>
 80142f0:	4b80      	ldr	r3, [pc, #512]	; (80144f4 <__ieee754_rem_pio2f+0x224>)
 80142f2:	429c      	cmp	r4, r3
 80142f4:	dc38      	bgt.n	8014368 <__ieee754_rem_pio2f+0x98>
 80142f6:	2e00      	cmp	r6, #0
 80142f8:	f024 040f 	bic.w	r4, r4, #15
 80142fc:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80144f8 <__ieee754_rem_pio2f+0x228>
 8014300:	4b7e      	ldr	r3, [pc, #504]	; (80144fc <__ieee754_rem_pio2f+0x22c>)
 8014302:	dd18      	ble.n	8014336 <__ieee754_rem_pio2f+0x66>
 8014304:	429c      	cmp	r4, r3
 8014306:	ee70 7a47 	vsub.f32	s15, s0, s14
 801430a:	bf09      	itett	eq
 801430c:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8014500 <__ieee754_rem_pio2f+0x230>
 8014310:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8014504 <__ieee754_rem_pio2f+0x234>
 8014314:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8014318:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8014508 <__ieee754_rem_pio2f+0x238>
 801431c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8014320:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014324:	edc0 6a00 	vstr	s13, [r0]
 8014328:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801432c:	edc0 7a01 	vstr	s15, [r0, #4]
 8014330:	2001      	movs	r0, #1
 8014332:	b007      	add	sp, #28
 8014334:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014336:	429c      	cmp	r4, r3
 8014338:	ee70 7a07 	vadd.f32	s15, s0, s14
 801433c:	bf09      	itett	eq
 801433e:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8014500 <__ieee754_rem_pio2f+0x230>
 8014342:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8014504 <__ieee754_rem_pio2f+0x234>
 8014346:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801434a:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8014508 <__ieee754_rem_pio2f+0x238>
 801434e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8014352:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014356:	edc0 6a00 	vstr	s13, [r0]
 801435a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801435e:	edc0 7a01 	vstr	s15, [r0, #4]
 8014362:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014366:	e7e4      	b.n	8014332 <__ieee754_rem_pio2f+0x62>
 8014368:	4b68      	ldr	r3, [pc, #416]	; (801450c <__ieee754_rem_pio2f+0x23c>)
 801436a:	429c      	cmp	r4, r3
 801436c:	dc71      	bgt.n	8014452 <__ieee754_rem_pio2f+0x182>
 801436e:	f7fe f8a5 	bl	80124bc <fabsf>
 8014372:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8014510 <__ieee754_rem_pio2f+0x240>
 8014376:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801437a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801437e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014382:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8014386:	ee17 0a90 	vmov	r0, s15
 801438a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80144f8 <__ieee754_rem_pio2f+0x228>
 801438e:	eeb1 7a46 	vneg.f32	s14, s12
 8014392:	eea7 0a27 	vfma.f32	s0, s14, s15
 8014396:	281f      	cmp	r0, #31
 8014398:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8014504 <__ieee754_rem_pio2f+0x234>
 801439c:	ee66 7a27 	vmul.f32	s15, s12, s15
 80143a0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80143a4:	ee16 3a90 	vmov	r3, s13
 80143a8:	dc1c      	bgt.n	80143e4 <__ieee754_rem_pio2f+0x114>
 80143aa:	1e47      	subs	r7, r0, #1
 80143ac:	4959      	ldr	r1, [pc, #356]	; (8014514 <__ieee754_rem_pio2f+0x244>)
 80143ae:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80143b2:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 80143b6:	428a      	cmp	r2, r1
 80143b8:	d014      	beq.n	80143e4 <__ieee754_rem_pio2f+0x114>
 80143ba:	602b      	str	r3, [r5, #0]
 80143bc:	ed95 7a00 	vldr	s14, [r5]
 80143c0:	ee30 0a47 	vsub.f32	s0, s0, s14
 80143c4:	2e00      	cmp	r6, #0
 80143c6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80143ca:	ed85 0a01 	vstr	s0, [r5, #4]
 80143ce:	dab0      	bge.n	8014332 <__ieee754_rem_pio2f+0x62>
 80143d0:	eeb1 7a47 	vneg.f32	s14, s14
 80143d4:	eeb1 0a40 	vneg.f32	s0, s0
 80143d8:	ed85 7a00 	vstr	s14, [r5]
 80143dc:	ed85 0a01 	vstr	s0, [r5, #4]
 80143e0:	4240      	negs	r0, r0
 80143e2:	e7a6      	b.n	8014332 <__ieee754_rem_pio2f+0x62>
 80143e4:	15e4      	asrs	r4, r4, #23
 80143e6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80143ea:	1aa2      	subs	r2, r4, r2
 80143ec:	2a08      	cmp	r2, #8
 80143ee:	dde4      	ble.n	80143ba <__ieee754_rem_pio2f+0xea>
 80143f0:	eddf 7a43 	vldr	s15, [pc, #268]	; 8014500 <__ieee754_rem_pio2f+0x230>
 80143f4:	eef0 6a40 	vmov.f32	s13, s0
 80143f8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80143fc:	ee30 0a66 	vsub.f32	s0, s0, s13
 8014400:	eea7 0a27 	vfma.f32	s0, s14, s15
 8014404:	eddf 7a40 	vldr	s15, [pc, #256]	; 8014508 <__ieee754_rem_pio2f+0x238>
 8014408:	ee96 0a27 	vfnms.f32	s0, s12, s15
 801440c:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8014410:	eef0 7a40 	vmov.f32	s15, s0
 8014414:	ee15 3a90 	vmov	r3, s11
 8014418:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801441c:	1aa4      	subs	r4, r4, r2
 801441e:	2c19      	cmp	r4, #25
 8014420:	dc04      	bgt.n	801442c <__ieee754_rem_pio2f+0x15c>
 8014422:	edc5 5a00 	vstr	s11, [r5]
 8014426:	eeb0 0a66 	vmov.f32	s0, s13
 801442a:	e7c7      	b.n	80143bc <__ieee754_rem_pio2f+0xec>
 801442c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8014518 <__ieee754_rem_pio2f+0x248>
 8014430:	eeb0 0a66 	vmov.f32	s0, s13
 8014434:	eea7 0a25 	vfma.f32	s0, s14, s11
 8014438:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801443c:	eee7 7a25 	vfma.f32	s15, s14, s11
 8014440:	ed9f 7a36 	vldr	s14, [pc, #216]	; 801451c <__ieee754_rem_pio2f+0x24c>
 8014444:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8014448:	ee30 7a67 	vsub.f32	s14, s0, s15
 801444c:	ed85 7a00 	vstr	s14, [r5]
 8014450:	e7b4      	b.n	80143bc <__ieee754_rem_pio2f+0xec>
 8014452:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8014456:	db06      	blt.n	8014466 <__ieee754_rem_pio2f+0x196>
 8014458:	ee70 7a40 	vsub.f32	s15, s0, s0
 801445c:	edc0 7a01 	vstr	s15, [r0, #4]
 8014460:	edc0 7a00 	vstr	s15, [r0]
 8014464:	e742      	b.n	80142ec <__ieee754_rem_pio2f+0x1c>
 8014466:	15e2      	asrs	r2, r4, #23
 8014468:	3a86      	subs	r2, #134	; 0x86
 801446a:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 801446e:	ee07 3a90 	vmov	s15, r3
 8014472:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8014476:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8014520 <__ieee754_rem_pio2f+0x250>
 801447a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801447e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014482:	ed8d 7a03 	vstr	s14, [sp, #12]
 8014486:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801448a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801448e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014492:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014496:	ed8d 7a04 	vstr	s14, [sp, #16]
 801449a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801449e:	eef5 7a40 	vcmp.f32	s15, #0.0
 80144a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144a6:	edcd 7a05 	vstr	s15, [sp, #20]
 80144aa:	d11e      	bne.n	80144ea <__ieee754_rem_pio2f+0x21a>
 80144ac:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80144b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144b4:	bf0c      	ite	eq
 80144b6:	2301      	moveq	r3, #1
 80144b8:	2302      	movne	r3, #2
 80144ba:	491a      	ldr	r1, [pc, #104]	; (8014524 <__ieee754_rem_pio2f+0x254>)
 80144bc:	9101      	str	r1, [sp, #4]
 80144be:	2102      	movs	r1, #2
 80144c0:	9100      	str	r1, [sp, #0]
 80144c2:	a803      	add	r0, sp, #12
 80144c4:	4629      	mov	r1, r5
 80144c6:	f000 f8ff 	bl	80146c8 <__kernel_rem_pio2f>
 80144ca:	2e00      	cmp	r6, #0
 80144cc:	f6bf af31 	bge.w	8014332 <__ieee754_rem_pio2f+0x62>
 80144d0:	edd5 7a00 	vldr	s15, [r5]
 80144d4:	eef1 7a67 	vneg.f32	s15, s15
 80144d8:	edc5 7a00 	vstr	s15, [r5]
 80144dc:	edd5 7a01 	vldr	s15, [r5, #4]
 80144e0:	eef1 7a67 	vneg.f32	s15, s15
 80144e4:	edc5 7a01 	vstr	s15, [r5, #4]
 80144e8:	e77a      	b.n	80143e0 <__ieee754_rem_pio2f+0x110>
 80144ea:	2303      	movs	r3, #3
 80144ec:	e7e5      	b.n	80144ba <__ieee754_rem_pio2f+0x1ea>
 80144ee:	bf00      	nop
 80144f0:	3f490fd8 	.word	0x3f490fd8
 80144f4:	4016cbe3 	.word	0x4016cbe3
 80144f8:	3fc90f80 	.word	0x3fc90f80
 80144fc:	3fc90fd0 	.word	0x3fc90fd0
 8014500:	37354400 	.word	0x37354400
 8014504:	37354443 	.word	0x37354443
 8014508:	2e85a308 	.word	0x2e85a308
 801450c:	43490f80 	.word	0x43490f80
 8014510:	3f22f984 	.word	0x3f22f984
 8014514:	08017c54 	.word	0x08017c54
 8014518:	2e85a300 	.word	0x2e85a300
 801451c:	248d3132 	.word	0x248d3132
 8014520:	43800000 	.word	0x43800000
 8014524:	08017cd4 	.word	0x08017cd4

08014528 <__ieee754_sinhf>:
 8014528:	b510      	push	{r4, lr}
 801452a:	ee10 3a10 	vmov	r3, s0
 801452e:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8014532:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8014536:	ed2d 8b02 	vpush	{d8}
 801453a:	eef0 7a40 	vmov.f32	s15, s0
 801453e:	db06      	blt.n	801454e <__ieee754_sinhf+0x26>
 8014540:	ee70 7a00 	vadd.f32	s15, s0, s0
 8014544:	ecbd 8b02 	vpop	{d8}
 8014548:	eeb0 0a67 	vmov.f32	s0, s15
 801454c:	bd10      	pop	{r4, pc}
 801454e:	2b00      	cmp	r3, #0
 8014550:	4b28      	ldr	r3, [pc, #160]	; (80145f4 <__ieee754_sinhf+0xcc>)
 8014552:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8014556:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
 801455a:	bfa8      	it	ge
 801455c:	eeb0 8a68 	vmovge.f32	s16, s17
 8014560:	429c      	cmp	r4, r3
 8014562:	dc2a      	bgt.n	80145ba <__ieee754_sinhf+0x92>
 8014564:	f1b4 5f46 	cmp.w	r4, #830472192	; 0x31800000
 8014568:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801456c:	da08      	bge.n	8014580 <__ieee754_sinhf+0x58>
 801456e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80145f8 <__ieee754_sinhf+0xd0>
 8014572:	ee30 7a07 	vadd.f32	s14, s0, s14
 8014576:	eeb4 7ae8 	vcmpe.f32	s14, s17
 801457a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801457e:	dce1      	bgt.n	8014544 <__ieee754_sinhf+0x1c>
 8014580:	eeb0 0a67 	vmov.f32	s0, s15
 8014584:	f7fd ff9a 	bl	80124bc <fabsf>
 8014588:	f000 fc56 	bl	8014e38 <expm1f>
 801458c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8014590:	bfbb      	ittet	lt
 8014592:	ee20 7a00 	vmullt.f32	s14, s0, s0
 8014596:	ee70 8a28 	vaddlt.f32	s17, s0, s17
 801459a:	ee70 8a28 	vaddge.f32	s17, s0, s17
 801459e:	eec7 7a28 	vdivlt.f32	s15, s14, s17
 80145a2:	bfad      	iteet	ge
 80145a4:	eec0 7a28 	vdivge.f32	s15, s0, s17
 80145a8:	eeb0 7a00 	vmovlt.f32	s14, #0	; 0x40000000  2.0
 80145ac:	eed0 7a07 	vfnmslt.f32	s15, s0, s14
 80145b0:	ee77 7a80 	vaddge.f32	s15, s15, s0
 80145b4:	ee67 7a88 	vmul.f32	s15, s15, s16
 80145b8:	e7c4      	b.n	8014544 <__ieee754_sinhf+0x1c>
 80145ba:	4b10      	ldr	r3, [pc, #64]	; (80145fc <__ieee754_sinhf+0xd4>)
 80145bc:	429c      	cmp	r4, r3
 80145be:	dc06      	bgt.n	80145ce <__ieee754_sinhf+0xa6>
 80145c0:	f7fd ff7c 	bl	80124bc <fabsf>
 80145c4:	f7ff f97a 	bl	80138bc <__ieee754_expf>
 80145c8:	ee60 7a08 	vmul.f32	s15, s0, s16
 80145cc:	e7ba      	b.n	8014544 <__ieee754_sinhf+0x1c>
 80145ce:	4b0c      	ldr	r3, [pc, #48]	; (8014600 <__ieee754_sinhf+0xd8>)
 80145d0:	429c      	cmp	r4, r3
 80145d2:	dc0a      	bgt.n	80145ea <__ieee754_sinhf+0xc2>
 80145d4:	f7fd ff72 	bl	80124bc <fabsf>
 80145d8:	ee20 0a28 	vmul.f32	s0, s0, s17
 80145dc:	f7ff f96e 	bl	80138bc <__ieee754_expf>
 80145e0:	ee68 7a00 	vmul.f32	s15, s16, s0
 80145e4:	ee67 7a80 	vmul.f32	s15, s15, s0
 80145e8:	e7ac      	b.n	8014544 <__ieee754_sinhf+0x1c>
 80145ea:	ed9f 7a03 	vldr	s14, [pc, #12]	; 80145f8 <__ieee754_sinhf+0xd0>
 80145ee:	ee60 7a07 	vmul.f32	s15, s0, s14
 80145f2:	e7a7      	b.n	8014544 <__ieee754_sinhf+0x1c>
 80145f4:	41afffff 	.word	0x41afffff
 80145f8:	7cf0bdc2 	.word	0x7cf0bdc2
 80145fc:	42b17217 	.word	0x42b17217
 8014600:	42b2d4fc 	.word	0x42b2d4fc

08014604 <__ieee754_sqrtf>:
 8014604:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8014608:	4770      	bx	lr
	...

0801460c <__kernel_cosf>:
 801460c:	ee10 3a10 	vmov	r3, s0
 8014610:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014614:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8014618:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801461c:	da05      	bge.n	801462a <__kernel_cosf+0x1e>
 801461e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014622:	ee17 2a90 	vmov	r2, s15
 8014626:	2a00      	cmp	r2, #0
 8014628:	d03b      	beq.n	80146a2 <__kernel_cosf+0x96>
 801462a:	ee20 6a00 	vmul.f32	s12, s0, s0
 801462e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8014632:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80146a8 <__kernel_cosf+0x9c>
 8014636:	4a1d      	ldr	r2, [pc, #116]	; (80146ac <__kernel_cosf+0xa0>)
 8014638:	ee66 7a07 	vmul.f32	s15, s12, s14
 801463c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80146b0 <__kernel_cosf+0xa4>
 8014640:	eea6 7a25 	vfma.f32	s14, s12, s11
 8014644:	4293      	cmp	r3, r2
 8014646:	eddf 5a1b 	vldr	s11, [pc, #108]	; 80146b4 <__kernel_cosf+0xa8>
 801464a:	eee7 5a06 	vfma.f32	s11, s14, s12
 801464e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80146b8 <__kernel_cosf+0xac>
 8014652:	eea5 7a86 	vfma.f32	s14, s11, s12
 8014656:	eddf 5a19 	vldr	s11, [pc, #100]	; 80146bc <__kernel_cosf+0xb0>
 801465a:	eee7 5a06 	vfma.f32	s11, s14, s12
 801465e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80146c0 <__kernel_cosf+0xb4>
 8014662:	eea5 7a86 	vfma.f32	s14, s11, s12
 8014666:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 801466a:	ee27 7a06 	vmul.f32	s14, s14, s12
 801466e:	eee6 0a07 	vfma.f32	s1, s12, s14
 8014672:	dc04      	bgt.n	801467e <__kernel_cosf+0x72>
 8014674:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8014678:	ee36 0ae0 	vsub.f32	s0, s13, s1
 801467c:	4770      	bx	lr
 801467e:	4a11      	ldr	r2, [pc, #68]	; (80146c4 <__kernel_cosf+0xb8>)
 8014680:	4293      	cmp	r3, r2
 8014682:	bfda      	itte	le
 8014684:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8014688:	ee07 3a10 	vmovle	s14, r3
 801468c:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8014690:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014694:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8014698:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801469c:	ee30 0a67 	vsub.f32	s0, s0, s15
 80146a0:	4770      	bx	lr
 80146a2:	eeb0 0a66 	vmov.f32	s0, s13
 80146a6:	4770      	bx	lr
 80146a8:	ad47d74e 	.word	0xad47d74e
 80146ac:	3e999999 	.word	0x3e999999
 80146b0:	310f74f6 	.word	0x310f74f6
 80146b4:	b493f27c 	.word	0xb493f27c
 80146b8:	37d00d01 	.word	0x37d00d01
 80146bc:	bab60b61 	.word	0xbab60b61
 80146c0:	3d2aaaab 	.word	0x3d2aaaab
 80146c4:	3f480000 	.word	0x3f480000

080146c8 <__kernel_rem_pio2f>:
 80146c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146cc:	ed2d 8b04 	vpush	{d8-d9}
 80146d0:	b0d7      	sub	sp, #348	; 0x15c
 80146d2:	469b      	mov	fp, r3
 80146d4:	460e      	mov	r6, r1
 80146d6:	4bbe      	ldr	r3, [pc, #760]	; (80149d0 <__kernel_rem_pio2f+0x308>)
 80146d8:	9964      	ldr	r1, [sp, #400]	; 0x190
 80146da:	9002      	str	r0, [sp, #8]
 80146dc:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 80146e0:	9865      	ldr	r0, [sp, #404]	; 0x194
 80146e2:	ed9f 7abf 	vldr	s14, [pc, #764]	; 80149e0 <__kernel_rem_pio2f+0x318>
 80146e6:	1ed1      	subs	r1, r2, #3
 80146e8:	2308      	movs	r3, #8
 80146ea:	fb91 f1f3 	sdiv	r1, r1, r3
 80146ee:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80146f2:	f10b 3aff 	add.w	sl, fp, #4294967295	; 0xffffffff
 80146f6:	1c4c      	adds	r4, r1, #1
 80146f8:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 80146fc:	eba1 050a 	sub.w	r5, r1, sl
 8014700:	aa1a      	add	r2, sp, #104	; 0x68
 8014702:	eb09 070a 	add.w	r7, r9, sl
 8014706:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 801470a:	4696      	mov	lr, r2
 801470c:	2300      	movs	r3, #0
 801470e:	42bb      	cmp	r3, r7
 8014710:	dd0f      	ble.n	8014732 <__kernel_rem_pio2f+0x6a>
 8014712:	af42      	add	r7, sp, #264	; 0x108
 8014714:	2200      	movs	r2, #0
 8014716:	454a      	cmp	r2, r9
 8014718:	dc27      	bgt.n	801476a <__kernel_rem_pio2f+0xa2>
 801471a:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 801471e:	eb0b 0302 	add.w	r3, fp, r2
 8014722:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8014726:	9d02      	ldr	r5, [sp, #8]
 8014728:	eddf 7aad 	vldr	s15, [pc, #692]	; 80149e0 <__kernel_rem_pio2f+0x318>
 801472c:	f04f 0c00 	mov.w	ip, #0
 8014730:	e015      	b.n	801475e <__kernel_rem_pio2f+0x96>
 8014732:	42dd      	cmn	r5, r3
 8014734:	bf5d      	ittte	pl
 8014736:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 801473a:	ee07 2a90 	vmovpl	s15, r2
 801473e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8014742:	eef0 7a47 	vmovmi.f32	s15, s14
 8014746:	ecee 7a01 	vstmia	lr!, {s15}
 801474a:	3301      	adds	r3, #1
 801474c:	e7df      	b.n	801470e <__kernel_rem_pio2f+0x46>
 801474e:	ecf5 6a01 	vldmia	r5!, {s13}
 8014752:	ed33 7a01 	vldmdb	r3!, {s14}
 8014756:	eee6 7a87 	vfma.f32	s15, s13, s14
 801475a:	f10c 0c01 	add.w	ip, ip, #1
 801475e:	45d4      	cmp	ip, sl
 8014760:	ddf5      	ble.n	801474e <__kernel_rem_pio2f+0x86>
 8014762:	ece7 7a01 	vstmia	r7!, {s15}
 8014766:	3201      	adds	r2, #1
 8014768:	e7d5      	b.n	8014716 <__kernel_rem_pio2f+0x4e>
 801476a:	ab06      	add	r3, sp, #24
 801476c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8014770:	9304      	str	r3, [sp, #16]
 8014772:	eddf 8a9a 	vldr	s17, [pc, #616]	; 80149dc <__kernel_rem_pio2f+0x314>
 8014776:	ed9f 9a98 	vldr	s18, [pc, #608]	; 80149d8 <__kernel_rem_pio2f+0x310>
 801477a:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 801477e:	9303      	str	r3, [sp, #12]
 8014780:	464d      	mov	r5, r9
 8014782:	ab56      	add	r3, sp, #344	; 0x158
 8014784:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8014788:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 801478c:	3f01      	subs	r7, #1
 801478e:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8014792:	00bf      	lsls	r7, r7, #2
 8014794:	ab56      	add	r3, sp, #344	; 0x158
 8014796:	19da      	adds	r2, r3, r7
 8014798:	3a4c      	subs	r2, #76	; 0x4c
 801479a:	2300      	movs	r3, #0
 801479c:	1ae9      	subs	r1, r5, r3
 801479e:	2900      	cmp	r1, #0
 80147a0:	dc4c      	bgt.n	801483c <__kernel_rem_pio2f+0x174>
 80147a2:	4620      	mov	r0, r4
 80147a4:	f000 fcde 	bl	8015164 <scalbnf>
 80147a8:	eeb0 8a40 	vmov.f32	s16, s0
 80147ac:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80147b0:	ee28 0a00 	vmul.f32	s0, s16, s0
 80147b4:	f7fd fe8a 	bl	80124cc <floorf>
 80147b8:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80147bc:	eea0 8a67 	vfms.f32	s16, s0, s15
 80147c0:	2c00      	cmp	r4, #0
 80147c2:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80147c6:	edcd 7a01 	vstr	s15, [sp, #4]
 80147ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80147ce:	ee38 8a67 	vsub.f32	s16, s16, s15
 80147d2:	dd48      	ble.n	8014866 <__kernel_rem_pio2f+0x19e>
 80147d4:	1e69      	subs	r1, r5, #1
 80147d6:	ab06      	add	r3, sp, #24
 80147d8:	f1c4 0008 	rsb	r0, r4, #8
 80147dc:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 80147e0:	9a01      	ldr	r2, [sp, #4]
 80147e2:	fa4c f300 	asr.w	r3, ip, r0
 80147e6:	441a      	add	r2, r3
 80147e8:	4083      	lsls	r3, r0
 80147ea:	9201      	str	r2, [sp, #4]
 80147ec:	ebac 0203 	sub.w	r2, ip, r3
 80147f0:	ab06      	add	r3, sp, #24
 80147f2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 80147f6:	f1c4 0307 	rsb	r3, r4, #7
 80147fa:	fa42 f803 	asr.w	r8, r2, r3
 80147fe:	f1b8 0f00 	cmp.w	r8, #0
 8014802:	dd41      	ble.n	8014888 <__kernel_rem_pio2f+0x1c0>
 8014804:	9b01      	ldr	r3, [sp, #4]
 8014806:	2000      	movs	r0, #0
 8014808:	3301      	adds	r3, #1
 801480a:	9301      	str	r3, [sp, #4]
 801480c:	4601      	mov	r1, r0
 801480e:	4285      	cmp	r5, r0
 8014810:	dc6d      	bgt.n	80148ee <__kernel_rem_pio2f+0x226>
 8014812:	2c00      	cmp	r4, #0
 8014814:	dd04      	ble.n	8014820 <__kernel_rem_pio2f+0x158>
 8014816:	2c01      	cmp	r4, #1
 8014818:	d07e      	beq.n	8014918 <__kernel_rem_pio2f+0x250>
 801481a:	2c02      	cmp	r4, #2
 801481c:	f000 8086 	beq.w	801492c <__kernel_rem_pio2f+0x264>
 8014820:	f1b8 0f02 	cmp.w	r8, #2
 8014824:	d130      	bne.n	8014888 <__kernel_rem_pio2f+0x1c0>
 8014826:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801482a:	ee30 8a48 	vsub.f32	s16, s0, s16
 801482e:	b359      	cbz	r1, 8014888 <__kernel_rem_pio2f+0x1c0>
 8014830:	4620      	mov	r0, r4
 8014832:	f000 fc97 	bl	8015164 <scalbnf>
 8014836:	ee38 8a40 	vsub.f32	s16, s16, s0
 801483a:	e025      	b.n	8014888 <__kernel_rem_pio2f+0x1c0>
 801483c:	ee60 7a28 	vmul.f32	s15, s0, s17
 8014840:	a806      	add	r0, sp, #24
 8014842:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014846:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801484a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801484e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014852:	ee10 1a10 	vmov	r1, s0
 8014856:	ed32 0a01 	vldmdb	r2!, {s0}
 801485a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 801485e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8014862:	3301      	adds	r3, #1
 8014864:	e79a      	b.n	801479c <__kernel_rem_pio2f+0xd4>
 8014866:	d106      	bne.n	8014876 <__kernel_rem_pio2f+0x1ae>
 8014868:	1e6b      	subs	r3, r5, #1
 801486a:	aa06      	add	r2, sp, #24
 801486c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8014870:	ea4f 2822 	mov.w	r8, r2, asr #8
 8014874:	e7c3      	b.n	80147fe <__kernel_rem_pio2f+0x136>
 8014876:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801487a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801487e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014882:	da31      	bge.n	80148e8 <__kernel_rem_pio2f+0x220>
 8014884:	f04f 0800 	mov.w	r8, #0
 8014888:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801488c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014890:	f040 80a8 	bne.w	80149e4 <__kernel_rem_pio2f+0x31c>
 8014894:	1e6b      	subs	r3, r5, #1
 8014896:	4618      	mov	r0, r3
 8014898:	2200      	movs	r2, #0
 801489a:	4548      	cmp	r0, r9
 801489c:	da4d      	bge.n	801493a <__kernel_rem_pio2f+0x272>
 801489e:	2a00      	cmp	r2, #0
 80148a0:	f000 8087 	beq.w	80149b2 <__kernel_rem_pio2f+0x2ea>
 80148a4:	aa06      	add	r2, sp, #24
 80148a6:	3c08      	subs	r4, #8
 80148a8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80148ac:	2900      	cmp	r1, #0
 80148ae:	f000 808d 	beq.w	80149cc <__kernel_rem_pio2f+0x304>
 80148b2:	4620      	mov	r0, r4
 80148b4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80148b8:	9302      	str	r3, [sp, #8]
 80148ba:	f000 fc53 	bl	8015164 <scalbnf>
 80148be:	9b02      	ldr	r3, [sp, #8]
 80148c0:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80149dc <__kernel_rem_pio2f+0x314>
 80148c4:	0099      	lsls	r1, r3, #2
 80148c6:	aa42      	add	r2, sp, #264	; 0x108
 80148c8:	1850      	adds	r0, r2, r1
 80148ca:	1d05      	adds	r5, r0, #4
 80148cc:	461c      	mov	r4, r3
 80148ce:	2c00      	cmp	r4, #0
 80148d0:	f280 80b8 	bge.w	8014a44 <__kernel_rem_pio2f+0x37c>
 80148d4:	2500      	movs	r5, #0
 80148d6:	1b5c      	subs	r4, r3, r5
 80148d8:	2c00      	cmp	r4, #0
 80148da:	f2c0 80d8 	blt.w	8014a8e <__kernel_rem_pio2f+0x3c6>
 80148de:	4f3d      	ldr	r7, [pc, #244]	; (80149d4 <__kernel_rem_pio2f+0x30c>)
 80148e0:	eddf 7a3f 	vldr	s15, [pc, #252]	; 80149e0 <__kernel_rem_pio2f+0x318>
 80148e4:	2400      	movs	r4, #0
 80148e6:	e0c6      	b.n	8014a76 <__kernel_rem_pio2f+0x3ae>
 80148e8:	f04f 0802 	mov.w	r8, #2
 80148ec:	e78a      	b.n	8014804 <__kernel_rem_pio2f+0x13c>
 80148ee:	ab06      	add	r3, sp, #24
 80148f0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80148f4:	b949      	cbnz	r1, 801490a <__kernel_rem_pio2f+0x242>
 80148f6:	b12b      	cbz	r3, 8014904 <__kernel_rem_pio2f+0x23c>
 80148f8:	aa06      	add	r2, sp, #24
 80148fa:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80148fe:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8014902:	2301      	movs	r3, #1
 8014904:	3001      	adds	r0, #1
 8014906:	4619      	mov	r1, r3
 8014908:	e781      	b.n	801480e <__kernel_rem_pio2f+0x146>
 801490a:	aa06      	add	r2, sp, #24
 801490c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8014910:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8014914:	460b      	mov	r3, r1
 8014916:	e7f5      	b.n	8014904 <__kernel_rem_pio2f+0x23c>
 8014918:	1e68      	subs	r0, r5, #1
 801491a:	ab06      	add	r3, sp, #24
 801491c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014920:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014924:	aa06      	add	r2, sp, #24
 8014926:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 801492a:	e779      	b.n	8014820 <__kernel_rem_pio2f+0x158>
 801492c:	1e68      	subs	r0, r5, #1
 801492e:	ab06      	add	r3, sp, #24
 8014930:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014934:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014938:	e7f4      	b.n	8014924 <__kernel_rem_pio2f+0x25c>
 801493a:	a906      	add	r1, sp, #24
 801493c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8014940:	3801      	subs	r0, #1
 8014942:	430a      	orrs	r2, r1
 8014944:	e7a9      	b.n	801489a <__kernel_rem_pio2f+0x1d2>
 8014946:	f10c 0c01 	add.w	ip, ip, #1
 801494a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801494e:	2a00      	cmp	r2, #0
 8014950:	d0f9      	beq.n	8014946 <__kernel_rem_pio2f+0x27e>
 8014952:	eb0b 0305 	add.w	r3, fp, r5
 8014956:	aa1a      	add	r2, sp, #104	; 0x68
 8014958:	009b      	lsls	r3, r3, #2
 801495a:	1898      	adds	r0, r3, r2
 801495c:	3004      	adds	r0, #4
 801495e:	1c69      	adds	r1, r5, #1
 8014960:	3704      	adds	r7, #4
 8014962:	2200      	movs	r2, #0
 8014964:	4465      	add	r5, ip
 8014966:	9005      	str	r0, [sp, #20]
 8014968:	428d      	cmp	r5, r1
 801496a:	f6ff af0a 	blt.w	8014782 <__kernel_rem_pio2f+0xba>
 801496e:	a81a      	add	r0, sp, #104	; 0x68
 8014970:	eb02 0c03 	add.w	ip, r2, r3
 8014974:	4484      	add	ip, r0
 8014976:	9803      	ldr	r0, [sp, #12]
 8014978:	f8dd e008 	ldr.w	lr, [sp, #8]
 801497c:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8014980:	9001      	str	r0, [sp, #4]
 8014982:	ee07 0a90 	vmov	s15, r0
 8014986:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801498a:	9805      	ldr	r0, [sp, #20]
 801498c:	edcc 7a00 	vstr	s15, [ip]
 8014990:	eddf 7a13 	vldr	s15, [pc, #76]	; 80149e0 <__kernel_rem_pio2f+0x318>
 8014994:	eb00 0802 	add.w	r8, r0, r2
 8014998:	f04f 0c00 	mov.w	ip, #0
 801499c:	45d4      	cmp	ip, sl
 801499e:	dd0c      	ble.n	80149ba <__kernel_rem_pio2f+0x2f2>
 80149a0:	eb02 0c07 	add.w	ip, r2, r7
 80149a4:	a842      	add	r0, sp, #264	; 0x108
 80149a6:	4484      	add	ip, r0
 80149a8:	edcc 7a01 	vstr	s15, [ip, #4]
 80149ac:	3101      	adds	r1, #1
 80149ae:	3204      	adds	r2, #4
 80149b0:	e7da      	b.n	8014968 <__kernel_rem_pio2f+0x2a0>
 80149b2:	9b04      	ldr	r3, [sp, #16]
 80149b4:	f04f 0c01 	mov.w	ip, #1
 80149b8:	e7c7      	b.n	801494a <__kernel_rem_pio2f+0x282>
 80149ba:	ecfe 6a01 	vldmia	lr!, {s13}
 80149be:	ed38 7a01 	vldmdb	r8!, {s14}
 80149c2:	f10c 0c01 	add.w	ip, ip, #1
 80149c6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80149ca:	e7e7      	b.n	801499c <__kernel_rem_pio2f+0x2d4>
 80149cc:	3b01      	subs	r3, #1
 80149ce:	e769      	b.n	80148a4 <__kernel_rem_pio2f+0x1dc>
 80149d0:	08018018 	.word	0x08018018
 80149d4:	08017fec 	.word	0x08017fec
 80149d8:	43800000 	.word	0x43800000
 80149dc:	3b800000 	.word	0x3b800000
 80149e0:	00000000 	.word	0x00000000
 80149e4:	4260      	negs	r0, r4
 80149e6:	eeb0 0a48 	vmov.f32	s0, s16
 80149ea:	f000 fbbb 	bl	8015164 <scalbnf>
 80149ee:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 80149d8 <__kernel_rem_pio2f+0x310>
 80149f2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80149f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149fa:	db1a      	blt.n	8014a32 <__kernel_rem_pio2f+0x36a>
 80149fc:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80149dc <__kernel_rem_pio2f+0x314>
 8014a00:	ee60 7a27 	vmul.f32	s15, s0, s15
 8014a04:	aa06      	add	r2, sp, #24
 8014a06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014a0a:	a906      	add	r1, sp, #24
 8014a0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014a10:	3408      	adds	r4, #8
 8014a12:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8014a16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014a1a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014a1e:	ee10 3a10 	vmov	r3, s0
 8014a22:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8014a26:	1c6b      	adds	r3, r5, #1
 8014a28:	ee17 2a90 	vmov	r2, s15
 8014a2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8014a30:	e73f      	b.n	80148b2 <__kernel_rem_pio2f+0x1ea>
 8014a32:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014a36:	aa06      	add	r2, sp, #24
 8014a38:	ee10 3a10 	vmov	r3, s0
 8014a3c:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8014a40:	462b      	mov	r3, r5
 8014a42:	e736      	b.n	80148b2 <__kernel_rem_pio2f+0x1ea>
 8014a44:	aa06      	add	r2, sp, #24
 8014a46:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8014a4a:	9202      	str	r2, [sp, #8]
 8014a4c:	ee07 2a90 	vmov	s15, r2
 8014a50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014a54:	3c01      	subs	r4, #1
 8014a56:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014a5a:	ee20 0a07 	vmul.f32	s0, s0, s14
 8014a5e:	ed65 7a01 	vstmdb	r5!, {s15}
 8014a62:	e734      	b.n	80148ce <__kernel_rem_pio2f+0x206>
 8014a64:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8014a68:	ecf7 6a01 	vldmia	r7!, {s13}
 8014a6c:	ed9c 7a00 	vldr	s14, [ip]
 8014a70:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014a74:	3401      	adds	r4, #1
 8014a76:	454c      	cmp	r4, r9
 8014a78:	dc01      	bgt.n	8014a7e <__kernel_rem_pio2f+0x3b6>
 8014a7a:	42a5      	cmp	r5, r4
 8014a7c:	daf2      	bge.n	8014a64 <__kernel_rem_pio2f+0x39c>
 8014a7e:	aa56      	add	r2, sp, #344	; 0x158
 8014a80:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 8014a84:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8014a88:	3501      	adds	r5, #1
 8014a8a:	3804      	subs	r0, #4
 8014a8c:	e723      	b.n	80148d6 <__kernel_rem_pio2f+0x20e>
 8014a8e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8014a90:	2a03      	cmp	r2, #3
 8014a92:	d84d      	bhi.n	8014b30 <__kernel_rem_pio2f+0x468>
 8014a94:	e8df f002 	tbb	[pc, r2]
 8014a98:	021f1f3e 	.word	0x021f1f3e
 8014a9c:	aa56      	add	r2, sp, #344	; 0x158
 8014a9e:	4411      	add	r1, r2
 8014aa0:	399c      	subs	r1, #156	; 0x9c
 8014aa2:	4608      	mov	r0, r1
 8014aa4:	461c      	mov	r4, r3
 8014aa6:	2c00      	cmp	r4, #0
 8014aa8:	dc5f      	bgt.n	8014b6a <__kernel_rem_pio2f+0x4a2>
 8014aaa:	4608      	mov	r0, r1
 8014aac:	461c      	mov	r4, r3
 8014aae:	2c01      	cmp	r4, #1
 8014ab0:	dc6b      	bgt.n	8014b8a <__kernel_rem_pio2f+0x4c2>
 8014ab2:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 80149e0 <__kernel_rem_pio2f+0x318>
 8014ab6:	2b01      	cmp	r3, #1
 8014ab8:	dc77      	bgt.n	8014baa <__kernel_rem_pio2f+0x4e2>
 8014aba:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8014abe:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8014ac2:	f1b8 0f00 	cmp.w	r8, #0
 8014ac6:	d176      	bne.n	8014bb6 <__kernel_rem_pio2f+0x4ee>
 8014ac8:	edc6 6a00 	vstr	s13, [r6]
 8014acc:	ed86 7a01 	vstr	s14, [r6, #4]
 8014ad0:	edc6 7a02 	vstr	s15, [r6, #8]
 8014ad4:	e02c      	b.n	8014b30 <__kernel_rem_pio2f+0x468>
 8014ad6:	aa56      	add	r2, sp, #344	; 0x158
 8014ad8:	4411      	add	r1, r2
 8014ada:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 80149e0 <__kernel_rem_pio2f+0x318>
 8014ade:	399c      	subs	r1, #156	; 0x9c
 8014ae0:	4618      	mov	r0, r3
 8014ae2:	2800      	cmp	r0, #0
 8014ae4:	da32      	bge.n	8014b4c <__kernel_rem_pio2f+0x484>
 8014ae6:	f1b8 0f00 	cmp.w	r8, #0
 8014aea:	d035      	beq.n	8014b58 <__kernel_rem_pio2f+0x490>
 8014aec:	eef1 7a47 	vneg.f32	s15, s14
 8014af0:	edc6 7a00 	vstr	s15, [r6]
 8014af4:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8014af8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014afc:	a82f      	add	r0, sp, #188	; 0xbc
 8014afe:	2101      	movs	r1, #1
 8014b00:	428b      	cmp	r3, r1
 8014b02:	da2c      	bge.n	8014b5e <__kernel_rem_pio2f+0x496>
 8014b04:	f1b8 0f00 	cmp.w	r8, #0
 8014b08:	d001      	beq.n	8014b0e <__kernel_rem_pio2f+0x446>
 8014b0a:	eef1 7a67 	vneg.f32	s15, s15
 8014b0e:	edc6 7a01 	vstr	s15, [r6, #4]
 8014b12:	e00d      	b.n	8014b30 <__kernel_rem_pio2f+0x468>
 8014b14:	aa56      	add	r2, sp, #344	; 0x158
 8014b16:	4411      	add	r1, r2
 8014b18:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 80149e0 <__kernel_rem_pio2f+0x318>
 8014b1c:	399c      	subs	r1, #156	; 0x9c
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	da0e      	bge.n	8014b40 <__kernel_rem_pio2f+0x478>
 8014b22:	f1b8 0f00 	cmp.w	r8, #0
 8014b26:	d001      	beq.n	8014b2c <__kernel_rem_pio2f+0x464>
 8014b28:	eef1 7a67 	vneg.f32	s15, s15
 8014b2c:	edc6 7a00 	vstr	s15, [r6]
 8014b30:	9b01      	ldr	r3, [sp, #4]
 8014b32:	f003 0007 	and.w	r0, r3, #7
 8014b36:	b057      	add	sp, #348	; 0x15c
 8014b38:	ecbd 8b04 	vpop	{d8-d9}
 8014b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b40:	ed31 7a01 	vldmdb	r1!, {s14}
 8014b44:	3b01      	subs	r3, #1
 8014b46:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014b4a:	e7e8      	b.n	8014b1e <__kernel_rem_pio2f+0x456>
 8014b4c:	ed71 7a01 	vldmdb	r1!, {s15}
 8014b50:	3801      	subs	r0, #1
 8014b52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014b56:	e7c4      	b.n	8014ae2 <__kernel_rem_pio2f+0x41a>
 8014b58:	eef0 7a47 	vmov.f32	s15, s14
 8014b5c:	e7c8      	b.n	8014af0 <__kernel_rem_pio2f+0x428>
 8014b5e:	ecb0 7a01 	vldmia	r0!, {s14}
 8014b62:	3101      	adds	r1, #1
 8014b64:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014b68:	e7ca      	b.n	8014b00 <__kernel_rem_pio2f+0x438>
 8014b6a:	ed50 7a02 	vldr	s15, [r0, #-8]
 8014b6e:	ed70 6a01 	vldmdb	r0!, {s13}
 8014b72:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8014b76:	3c01      	subs	r4, #1
 8014b78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014b7c:	ed00 7a01 	vstr	s14, [r0, #-4]
 8014b80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014b84:	edc0 7a00 	vstr	s15, [r0]
 8014b88:	e78d      	b.n	8014aa6 <__kernel_rem_pio2f+0x3de>
 8014b8a:	ed50 7a02 	vldr	s15, [r0, #-8]
 8014b8e:	ed70 6a01 	vldmdb	r0!, {s13}
 8014b92:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8014b96:	3c01      	subs	r4, #1
 8014b98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014b9c:	ed00 7a01 	vstr	s14, [r0, #-4]
 8014ba0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014ba4:	edc0 7a00 	vstr	s15, [r0]
 8014ba8:	e781      	b.n	8014aae <__kernel_rem_pio2f+0x3e6>
 8014baa:	ed31 7a01 	vldmdb	r1!, {s14}
 8014bae:	3b01      	subs	r3, #1
 8014bb0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014bb4:	e77f      	b.n	8014ab6 <__kernel_rem_pio2f+0x3ee>
 8014bb6:	eef1 6a66 	vneg.f32	s13, s13
 8014bba:	eeb1 7a47 	vneg.f32	s14, s14
 8014bbe:	edc6 6a00 	vstr	s13, [r6]
 8014bc2:	ed86 7a01 	vstr	s14, [r6, #4]
 8014bc6:	eef1 7a67 	vneg.f32	s15, s15
 8014bca:	e781      	b.n	8014ad0 <__kernel_rem_pio2f+0x408>

08014bcc <__kernel_sinf>:
 8014bcc:	ee10 3a10 	vmov	r3, s0
 8014bd0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014bd4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8014bd8:	da04      	bge.n	8014be4 <__kernel_sinf+0x18>
 8014bda:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014bde:	ee17 3a90 	vmov	r3, s15
 8014be2:	b35b      	cbz	r3, 8014c3c <__kernel_sinf+0x70>
 8014be4:	ee20 7a00 	vmul.f32	s14, s0, s0
 8014be8:	eddf 7a15 	vldr	s15, [pc, #84]	; 8014c40 <__kernel_sinf+0x74>
 8014bec:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8014c44 <__kernel_sinf+0x78>
 8014bf0:	eea7 6a27 	vfma.f32	s12, s14, s15
 8014bf4:	eddf 7a14 	vldr	s15, [pc, #80]	; 8014c48 <__kernel_sinf+0x7c>
 8014bf8:	eee6 7a07 	vfma.f32	s15, s12, s14
 8014bfc:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8014c4c <__kernel_sinf+0x80>
 8014c00:	eea7 6a87 	vfma.f32	s12, s15, s14
 8014c04:	eddf 7a12 	vldr	s15, [pc, #72]	; 8014c50 <__kernel_sinf+0x84>
 8014c08:	ee60 6a07 	vmul.f32	s13, s0, s14
 8014c0c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8014c10:	b930      	cbnz	r0, 8014c20 <__kernel_sinf+0x54>
 8014c12:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8014c54 <__kernel_sinf+0x88>
 8014c16:	eea7 6a27 	vfma.f32	s12, s14, s15
 8014c1a:	eea6 0a26 	vfma.f32	s0, s12, s13
 8014c1e:	4770      	bx	lr
 8014c20:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8014c24:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8014c28:	eee0 7a86 	vfma.f32	s15, s1, s12
 8014c2c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8014c30:	eddf 7a09 	vldr	s15, [pc, #36]	; 8014c58 <__kernel_sinf+0x8c>
 8014c34:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8014c38:	ee30 0a60 	vsub.f32	s0, s0, s1
 8014c3c:	4770      	bx	lr
 8014c3e:	bf00      	nop
 8014c40:	2f2ec9d3 	.word	0x2f2ec9d3
 8014c44:	b2d72f34 	.word	0xb2d72f34
 8014c48:	3638ef1b 	.word	0x3638ef1b
 8014c4c:	b9500d01 	.word	0xb9500d01
 8014c50:	3c088889 	.word	0x3c088889
 8014c54:	be2aaaab 	.word	0xbe2aaaab
 8014c58:	3e2aaaab 	.word	0x3e2aaaab

08014c5c <__kernel_tanf>:
 8014c5c:	b508      	push	{r3, lr}
 8014c5e:	ee10 3a10 	vmov	r3, s0
 8014c62:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8014c66:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8014c6a:	eef0 7a40 	vmov.f32	s15, s0
 8014c6e:	da17      	bge.n	8014ca0 <__kernel_tanf+0x44>
 8014c70:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8014c74:	ee17 1a10 	vmov	r1, s14
 8014c78:	bb41      	cbnz	r1, 8014ccc <__kernel_tanf+0x70>
 8014c7a:	1c43      	adds	r3, r0, #1
 8014c7c:	4313      	orrs	r3, r2
 8014c7e:	d108      	bne.n	8014c92 <__kernel_tanf+0x36>
 8014c80:	f7fd fc1c 	bl	80124bc <fabsf>
 8014c84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014c88:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014c8c:	eeb0 0a67 	vmov.f32	s0, s15
 8014c90:	bd08      	pop	{r3, pc}
 8014c92:	2801      	cmp	r0, #1
 8014c94:	d0fa      	beq.n	8014c8c <__kernel_tanf+0x30>
 8014c96:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8014c9a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014c9e:	e7f5      	b.n	8014c8c <__kernel_tanf+0x30>
 8014ca0:	494e      	ldr	r1, [pc, #312]	; (8014ddc <__kernel_tanf+0x180>)
 8014ca2:	428a      	cmp	r2, r1
 8014ca4:	dd12      	ble.n	8014ccc <__kernel_tanf+0x70>
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8014de0 <__kernel_tanf+0x184>
 8014cac:	bfb8      	it	lt
 8014cae:	eef1 7a40 	vneglt.f32	s15, s0
 8014cb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014cb6:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8014de4 <__kernel_tanf+0x188>
 8014cba:	bfb8      	it	lt
 8014cbc:	eef1 0a60 	vneglt.f32	s1, s1
 8014cc0:	ee77 0a60 	vsub.f32	s1, s14, s1
 8014cc4:	ee70 7aa7 	vadd.f32	s15, s1, s15
 8014cc8:	eddf 0a47 	vldr	s1, [pc, #284]	; 8014de8 <__kernel_tanf+0x18c>
 8014ccc:	ed9f 6a47 	vldr	s12, [pc, #284]	; 8014dec <__kernel_tanf+0x190>
 8014cd0:	eddf 5a47 	vldr	s11, [pc, #284]	; 8014df0 <__kernel_tanf+0x194>
 8014cd4:	ed9f 5a47 	vldr	s10, [pc, #284]	; 8014df4 <__kernel_tanf+0x198>
 8014cd8:	4940      	ldr	r1, [pc, #256]	; (8014ddc <__kernel_tanf+0x180>)
 8014cda:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8014cde:	428a      	cmp	r2, r1
 8014ce0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8014ce4:	ee67 4aa6 	vmul.f32	s9, s15, s13
 8014ce8:	eee7 5a06 	vfma.f32	s11, s14, s12
 8014cec:	ed9f 6a42 	vldr	s12, [pc, #264]	; 8014df8 <__kernel_tanf+0x19c>
 8014cf0:	eea5 6a87 	vfma.f32	s12, s11, s14
 8014cf4:	eddf 5a41 	vldr	s11, [pc, #260]	; 8014dfc <__kernel_tanf+0x1a0>
 8014cf8:	eee6 5a07 	vfma.f32	s11, s12, s14
 8014cfc:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8014e00 <__kernel_tanf+0x1a4>
 8014d00:	eea5 6a87 	vfma.f32	s12, s11, s14
 8014d04:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8014e04 <__kernel_tanf+0x1a8>
 8014d08:	eee6 5a07 	vfma.f32	s11, s12, s14
 8014d0c:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8014e08 <__kernel_tanf+0x1ac>
 8014d10:	eea7 6a05 	vfma.f32	s12, s14, s10
 8014d14:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8014e0c <__kernel_tanf+0x1b0>
 8014d18:	eea6 5a07 	vfma.f32	s10, s12, s14
 8014d1c:	ed9f 6a3c 	vldr	s12, [pc, #240]	; 8014e10 <__kernel_tanf+0x1b4>
 8014d20:	eea5 6a07 	vfma.f32	s12, s10, s14
 8014d24:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 8014e14 <__kernel_tanf+0x1b8>
 8014d28:	eea6 5a07 	vfma.f32	s10, s12, s14
 8014d2c:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 8014e18 <__kernel_tanf+0x1bc>
 8014d30:	eea5 6a07 	vfma.f32	s12, s10, s14
 8014d34:	eeb0 7a46 	vmov.f32	s14, s12
 8014d38:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8014d3c:	eeb0 6a60 	vmov.f32	s12, s1
 8014d40:	eea7 6a24 	vfma.f32	s12, s14, s9
 8014d44:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8014e1c <__kernel_tanf+0x1c0>
 8014d48:	eee6 0a26 	vfma.f32	s1, s12, s13
 8014d4c:	eee4 0a87 	vfma.f32	s1, s9, s14
 8014d50:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8014d54:	dd1d      	ble.n	8014d92 <__kernel_tanf+0x136>
 8014d56:	ee07 0a10 	vmov	s14, r0
 8014d5a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014d5e:	ee66 5aa6 	vmul.f32	s11, s13, s13
 8014d62:	ee76 6a87 	vadd.f32	s13, s13, s14
 8014d66:	179b      	asrs	r3, r3, #30
 8014d68:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 8014d6c:	f003 0302 	and.w	r3, r3, #2
 8014d70:	f1c3 0301 	rsb	r3, r3, #1
 8014d74:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8014d78:	ee76 0a60 	vsub.f32	s1, s12, s1
 8014d7c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8014d80:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8014d84:	ee07 3a90 	vmov	s15, r3
 8014d88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014d8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014d90:	e77c      	b.n	8014c8c <__kernel_tanf+0x30>
 8014d92:	2801      	cmp	r0, #1
 8014d94:	d01f      	beq.n	8014dd6 <__kernel_tanf+0x17a>
 8014d96:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8014d9a:	eec7 5a26 	vdiv.f32	s11, s14, s13
 8014d9e:	4b20      	ldr	r3, [pc, #128]	; (8014e20 <__kernel_tanf+0x1c4>)
 8014da0:	ee16 2a90 	vmov	r2, s13
 8014da4:	401a      	ands	r2, r3
 8014da6:	ee06 2a10 	vmov	s12, r2
 8014daa:	ee15 2a90 	vmov	r2, s11
 8014dae:	4013      	ands	r3, r2
 8014db0:	ee07 3a10 	vmov	s14, r3
 8014db4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014db8:	eee6 6a07 	vfma.f32	s13, s12, s14
 8014dbc:	ee76 7a67 	vsub.f32	s15, s12, s15
 8014dc0:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8014dc4:	eef0 7a66 	vmov.f32	s15, s13
 8014dc8:	eee7 7a20 	vfma.f32	s15, s14, s1
 8014dcc:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8014dd0:	eef0 7a47 	vmov.f32	s15, s14
 8014dd4:	e75a      	b.n	8014c8c <__kernel_tanf+0x30>
 8014dd6:	eef0 7a66 	vmov.f32	s15, s13
 8014dda:	e757      	b.n	8014c8c <__kernel_tanf+0x30>
 8014ddc:	3f2ca13f 	.word	0x3f2ca13f
 8014de0:	3f490fda 	.word	0x3f490fda
 8014de4:	33222168 	.word	0x33222168
 8014de8:	00000000 	.word	0x00000000
 8014dec:	37d95384 	.word	0x37d95384
 8014df0:	3895c07a 	.word	0x3895c07a
 8014df4:	b79bae5f 	.word	0xb79bae5f
 8014df8:	398137b9 	.word	0x398137b9
 8014dfc:	3abede48 	.word	0x3abede48
 8014e00:	3c11371f 	.word	0x3c11371f
 8014e04:	3d5d0dd1 	.word	0x3d5d0dd1
 8014e08:	38a3f445 	.word	0x38a3f445
 8014e0c:	3a1a26c8 	.word	0x3a1a26c8
 8014e10:	3b6b6916 	.word	0x3b6b6916
 8014e14:	3cb327a4 	.word	0x3cb327a4
 8014e18:	3e088889 	.word	0x3e088889
 8014e1c:	3eaaaaab 	.word	0x3eaaaaab
 8014e20:	fffff000 	.word	0xfffff000

08014e24 <matherr>:
 8014e24:	2000      	movs	r0, #0
 8014e26:	4770      	bx	lr

08014e28 <nan>:
 8014e28:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014e30 <nan+0x8>
 8014e2c:	4770      	bx	lr
 8014e2e:	bf00      	nop
 8014e30:	00000000 	.word	0x00000000
 8014e34:	7ff80000 	.word	0x7ff80000

08014e38 <expm1f>:
 8014e38:	ee10 2a10 	vmov	r2, s0
 8014e3c:	4985      	ldr	r1, [pc, #532]	; (8015054 <expm1f+0x21c>)
 8014e3e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8014e42:	428b      	cmp	r3, r1
 8014e44:	d924      	bls.n	8014e90 <expm1f+0x58>
 8014e46:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014e4a:	d902      	bls.n	8014e52 <expm1f+0x1a>
 8014e4c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014e50:	4770      	bx	lr
 8014e52:	d106      	bne.n	8014e62 <expm1f+0x2a>
 8014e54:	2a00      	cmp	r2, #0
 8014e56:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8014e5a:	bfb8      	it	lt
 8014e5c:	eeb0 0a67 	vmovlt.f32	s0, s15
 8014e60:	4770      	bx	lr
 8014e62:	2a00      	cmp	r2, #0
 8014e64:	db08      	blt.n	8014e78 <expm1f+0x40>
 8014e66:	4a7c      	ldr	r2, [pc, #496]	; (8015058 <expm1f+0x220>)
 8014e68:	4293      	cmp	r3, r2
 8014e6a:	f240 80eb 	bls.w	8015044 <expm1f+0x20c>
 8014e6e:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 801505c <expm1f+0x224>
 8014e72:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014e76:	4770      	bx	lr
 8014e78:	eddf 7a79 	vldr	s15, [pc, #484]	; 8015060 <expm1f+0x228>
 8014e7c:	ee70 7a27 	vadd.f32	s15, s0, s15
 8014e80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e88:	d554      	bpl.n	8014f34 <expm1f+0xfc>
 8014e8a:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8014e8e:	4770      	bx	lr
 8014e90:	4974      	ldr	r1, [pc, #464]	; (8015064 <expm1f+0x22c>)
 8014e92:	428b      	cmp	r3, r1
 8014e94:	d96d      	bls.n	8014f72 <expm1f+0x13a>
 8014e96:	4974      	ldr	r1, [pc, #464]	; (8015068 <expm1f+0x230>)
 8014e98:	428b      	cmp	r3, r1
 8014e9a:	d84b      	bhi.n	8014f34 <expm1f+0xfc>
 8014e9c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 801506c <expm1f+0x234>
 8014ea0:	2a00      	cmp	r2, #0
 8014ea2:	bfa7      	ittee	ge
 8014ea4:	ee30 7a47 	vsubge.f32	s14, s0, s14
 8014ea8:	eddf 7a71 	vldrge	s15, [pc, #452]	; 8015070 <expm1f+0x238>
 8014eac:	eddf 7a71 	vldrlt	s15, [pc, #452]	; 8015074 <expm1f+0x23c>
 8014eb0:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 8014eb4:	bfac      	ite	ge
 8014eb6:	2301      	movge	r3, #1
 8014eb8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014ebc:	ee37 0a67 	vsub.f32	s0, s14, s15
 8014ec0:	ee37 7a40 	vsub.f32	s14, s14, s0
 8014ec4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014ec8:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8014ecc:	ee20 5a25 	vmul.f32	s10, s0, s11
 8014ed0:	eddf 6a69 	vldr	s13, [pc, #420]	; 8015078 <expm1f+0x240>
 8014ed4:	ed9f 6a69 	vldr	s12, [pc, #420]	; 801507c <expm1f+0x244>
 8014ed8:	ee20 7a05 	vmul.f32	s14, s0, s10
 8014edc:	eea7 6a26 	vfma.f32	s12, s14, s13
 8014ee0:	eddf 6a67 	vldr	s13, [pc, #412]	; 8015080 <expm1f+0x248>
 8014ee4:	eee6 6a07 	vfma.f32	s13, s12, s14
 8014ee8:	ed9f 6a66 	vldr	s12, [pc, #408]	; 8015084 <expm1f+0x24c>
 8014eec:	eea6 6a87 	vfma.f32	s12, s13, s14
 8014ef0:	eddf 6a65 	vldr	s13, [pc, #404]	; 8015088 <expm1f+0x250>
 8014ef4:	eee6 6a07 	vfma.f32	s13, s12, s14
 8014ef8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8014efc:	eef0 4a46 	vmov.f32	s9, s12
 8014f00:	eee6 4a87 	vfma.f32	s9, s13, s14
 8014f04:	eef0 6a64 	vmov.f32	s13, s9
 8014f08:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 8014f0c:	eee5 4a66 	vfms.f32	s9, s10, s13
 8014f10:	ee36 5ae4 	vsub.f32	s10, s13, s9
 8014f14:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8014f18:	eee0 6a64 	vfms.f32	s13, s0, s9
 8014f1c:	eef0 4a66 	vmov.f32	s9, s13
 8014f20:	eec5 6a24 	vdiv.f32	s13, s10, s9
 8014f24:	ee66 6a87 	vmul.f32	s13, s13, s14
 8014f28:	bb8b      	cbnz	r3, 8014f8e <expm1f+0x156>
 8014f2a:	eef0 7a47 	vmov.f32	s15, s14
 8014f2e:	eed0 7a26 	vfnms.f32	s15, s0, s13
 8014f32:	e027      	b.n	8014f84 <expm1f+0x14c>
 8014f34:	eddf 7a55 	vldr	s15, [pc, #340]	; 801508c <expm1f+0x254>
 8014f38:	2a00      	cmp	r2, #0
 8014f3a:	ee20 7a27 	vmul.f32	s14, s0, s15
 8014f3e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8014f42:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8014f46:	bfa8      	it	ge
 8014f48:	eef0 7a66 	vmovge.f32	s15, s13
 8014f4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014f50:	ed9f 7a46 	vldr	s14, [pc, #280]	; 801506c <expm1f+0x234>
 8014f54:	eddf 6a46 	vldr	s13, [pc, #280]	; 8015070 <expm1f+0x238>
 8014f58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014f5c:	ee17 3a90 	vmov	r3, s15
 8014f60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014f64:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8014f68:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014f6c:	eeb0 7a40 	vmov.f32	s14, s0
 8014f70:	e7a4      	b.n	8014ebc <expm1f+0x84>
 8014f72:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 8014f76:	d208      	bcs.n	8014f8a <expm1f+0x152>
 8014f78:	eddf 7a38 	vldr	s15, [pc, #224]	; 801505c <expm1f+0x224>
 8014f7c:	ee70 7a27 	vadd.f32	s15, s0, s15
 8014f80:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8014f84:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014f88:	4770      	bx	lr
 8014f8a:	2300      	movs	r3, #0
 8014f8c:	e79c      	b.n	8014ec8 <expm1f+0x90>
 8014f8e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8014f92:	1c5a      	adds	r2, r3, #1
 8014f94:	eed6 7a80 	vfnms.f32	s15, s13, s0
 8014f98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014f9c:	d106      	bne.n	8014fac <expm1f+0x174>
 8014f9e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8014fa2:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8014fa6:	eea7 0aa5 	vfma.f32	s0, s15, s11
 8014faa:	4770      	bx	lr
 8014fac:	2b01      	cmp	r3, #1
 8014fae:	d118      	bne.n	8014fe2 <expm1f+0x1aa>
 8014fb0:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 8014fb4:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8014fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fbc:	bf41      	itttt	mi
 8014fbe:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 8014fc2:	ee37 0ac0 	vsubmi.f32	s0, s15, s0
 8014fc6:	eef8 7a00 	vmovmi.f32	s15, #128	; 0xc0000000 -2.0
 8014fca:	ee20 0a27 	vmulmi.f32	s0, s0, s15
 8014fce:	bf5f      	itttt	pl
 8014fd0:	ee30 0a67 	vsubpl.f32	s0, s0, s15
 8014fd4:	eef0 7a00 	vmovpl.f32	s15, #0	; 0x40000000  2.0
 8014fd8:	eea0 6a27 	vfmapl.f32	s12, s0, s15
 8014fdc:	eeb0 0a46 	vmovpl.f32	s0, s12
 8014fe0:	4770      	bx	lr
 8014fe2:	1c5a      	adds	r2, r3, #1
 8014fe4:	2a39      	cmp	r2, #57	; 0x39
 8014fe6:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 8014fea:	d90b      	bls.n	8015004 <expm1f+0x1cc>
 8014fec:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8014ff0:	ee36 0a40 	vsub.f32	s0, s12, s0
 8014ff4:	ee10 3a10 	vmov	r3, s0
 8014ff8:	440b      	add	r3, r1
 8014ffa:	ee00 3a10 	vmov	s0, r3
 8014ffe:	ee30 0a46 	vsub.f32	s0, s0, s12
 8015002:	4770      	bx	lr
 8015004:	2b16      	cmp	r3, #22
 8015006:	dc11      	bgt.n	801502c <expm1f+0x1f4>
 8015008:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801500c:	fa42 f303 	asr.w	r3, r2, r3
 8015010:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 8015014:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8015018:	ee07 3a90 	vmov	s15, r3
 801501c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8015020:	ee10 3a10 	vmov	r3, s0
 8015024:	440b      	add	r3, r1
 8015026:	ee00 3a10 	vmov	s0, r3
 801502a:	4770      	bx	lr
 801502c:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8015030:	05db      	lsls	r3, r3, #23
 8015032:	ee07 3a10 	vmov	s14, r3
 8015036:	ee77 7a87 	vadd.f32	s15, s15, s14
 801503a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801503e:	ee30 0a06 	vadd.f32	s0, s0, s12
 8015042:	e7ed      	b.n	8015020 <expm1f+0x1e8>
 8015044:	eddf 7a11 	vldr	s15, [pc, #68]	; 801508c <expm1f+0x254>
 8015048:	ee20 7a27 	vmul.f32	s14, s0, s15
 801504c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8015050:	e77c      	b.n	8014f4c <expm1f+0x114>
 8015052:	bf00      	nop
 8015054:	4195b843 	.word	0x4195b843
 8015058:	42b17217 	.word	0x42b17217
 801505c:	7149f2ca 	.word	0x7149f2ca
 8015060:	0da24260 	.word	0x0da24260
 8015064:	3eb17218 	.word	0x3eb17218
 8015068:	3f851591 	.word	0x3f851591
 801506c:	3f317180 	.word	0x3f317180
 8015070:	3717f7d1 	.word	0x3717f7d1
 8015074:	b717f7d1 	.word	0xb717f7d1
 8015078:	b457edbb 	.word	0xb457edbb
 801507c:	36867e54 	.word	0x36867e54
 8015080:	b8a670cd 	.word	0xb8a670cd
 8015084:	3ad00d01 	.word	0x3ad00d01
 8015088:	bd088889 	.word	0xbd088889
 801508c:	3fb8aa3b 	.word	0x3fb8aa3b

08015090 <finitef>:
 8015090:	ee10 3a10 	vmov	r3, s0
 8015094:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8015098:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801509c:	bfac      	ite	ge
 801509e:	2000      	movge	r0, #0
 80150a0:	2001      	movlt	r0, #1
 80150a2:	4770      	bx	lr

080150a4 <nanf>:
 80150a4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80150ac <nanf+0x8>
 80150a8:	4770      	bx	lr
 80150aa:	bf00      	nop
 80150ac:	7fc00000 	.word	0x7fc00000

080150b0 <rintf>:
 80150b0:	b513      	push	{r0, r1, r4, lr}
 80150b2:	ee10 1a10 	vmov	r1, s0
 80150b6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80150ba:	0ddc      	lsrs	r4, r3, #23
 80150bc:	3c7f      	subs	r4, #127	; 0x7f
 80150be:	2c16      	cmp	r4, #22
 80150c0:	dc46      	bgt.n	8015150 <rintf+0xa0>
 80150c2:	b32b      	cbz	r3, 8015110 <rintf+0x60>
 80150c4:	2c00      	cmp	r4, #0
 80150c6:	ee10 2a10 	vmov	r2, s0
 80150ca:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 80150ce:	da21      	bge.n	8015114 <rintf+0x64>
 80150d0:	f3c1 0316 	ubfx	r3, r1, #0, #23
 80150d4:	425b      	negs	r3, r3
 80150d6:	4a21      	ldr	r2, [pc, #132]	; (801515c <rintf+0xac>)
 80150d8:	0a5b      	lsrs	r3, r3, #9
 80150da:	0d09      	lsrs	r1, r1, #20
 80150dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80150e0:	0509      	lsls	r1, r1, #20
 80150e2:	430b      	orrs	r3, r1
 80150e4:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 80150e8:	ee07 3a90 	vmov	s15, r3
 80150ec:	edd2 6a00 	vldr	s13, [r2]
 80150f0:	ee36 7aa7 	vadd.f32	s14, s13, s15
 80150f4:	ed8d 7a01 	vstr	s14, [sp, #4]
 80150f8:	eddd 7a01 	vldr	s15, [sp, #4]
 80150fc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8015100:	ee17 3a90 	vmov	r3, s15
 8015104:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015108:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 801510c:	ee00 3a10 	vmov	s0, r3
 8015110:	b002      	add	sp, #8
 8015112:	bd10      	pop	{r4, pc}
 8015114:	4b12      	ldr	r3, [pc, #72]	; (8015160 <rintf+0xb0>)
 8015116:	4123      	asrs	r3, r4
 8015118:	4219      	tst	r1, r3
 801511a:	d0f9      	beq.n	8015110 <rintf+0x60>
 801511c:	085b      	lsrs	r3, r3, #1
 801511e:	4219      	tst	r1, r3
 8015120:	d006      	beq.n	8015130 <rintf+0x80>
 8015122:	ea21 0203 	bic.w	r2, r1, r3
 8015126:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801512a:	fa43 f404 	asr.w	r4, r3, r4
 801512e:	4322      	orrs	r2, r4
 8015130:	4b0a      	ldr	r3, [pc, #40]	; (801515c <rintf+0xac>)
 8015132:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8015136:	ed90 7a00 	vldr	s14, [r0]
 801513a:	ee07 2a90 	vmov	s15, r2
 801513e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015142:	edcd 7a01 	vstr	s15, [sp, #4]
 8015146:	ed9d 0a01 	vldr	s0, [sp, #4]
 801514a:	ee30 0a47 	vsub.f32	s0, s0, s14
 801514e:	e7df      	b.n	8015110 <rintf+0x60>
 8015150:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015154:	d3dc      	bcc.n	8015110 <rintf+0x60>
 8015156:	ee30 0a00 	vadd.f32	s0, s0, s0
 801515a:	e7d9      	b.n	8015110 <rintf+0x60>
 801515c:	08018024 	.word	0x08018024
 8015160:	007fffff 	.word	0x007fffff

08015164 <scalbnf>:
 8015164:	b508      	push	{r3, lr}
 8015166:	ee10 2a10 	vmov	r2, s0
 801516a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 801516e:	ed2d 8b02 	vpush	{d8}
 8015172:	eef0 0a40 	vmov.f32	s1, s0
 8015176:	d004      	beq.n	8015182 <scalbnf+0x1e>
 8015178:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801517c:	d306      	bcc.n	801518c <scalbnf+0x28>
 801517e:	ee70 0a00 	vadd.f32	s1, s0, s0
 8015182:	ecbd 8b02 	vpop	{d8}
 8015186:	eeb0 0a60 	vmov.f32	s0, s1
 801518a:	bd08      	pop	{r3, pc}
 801518c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8015190:	d21c      	bcs.n	80151cc <scalbnf+0x68>
 8015192:	4b1f      	ldr	r3, [pc, #124]	; (8015210 <scalbnf+0xac>)
 8015194:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8015214 <scalbnf+0xb0>
 8015198:	4298      	cmp	r0, r3
 801519a:	ee60 0a27 	vmul.f32	s1, s0, s15
 801519e:	db10      	blt.n	80151c2 <scalbnf+0x5e>
 80151a0:	ee10 2a90 	vmov	r2, s1
 80151a4:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 80151a8:	3b19      	subs	r3, #25
 80151aa:	4403      	add	r3, r0
 80151ac:	2bfe      	cmp	r3, #254	; 0xfe
 80151ae:	dd0f      	ble.n	80151d0 <scalbnf+0x6c>
 80151b0:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8015218 <scalbnf+0xb4>
 80151b4:	eeb0 0a48 	vmov.f32	s0, s16
 80151b8:	f000 f834 	bl	8015224 <copysignf>
 80151bc:	ee60 0a08 	vmul.f32	s1, s0, s16
 80151c0:	e7df      	b.n	8015182 <scalbnf+0x1e>
 80151c2:	eddf 7a16 	vldr	s15, [pc, #88]	; 801521c <scalbnf+0xb8>
 80151c6:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80151ca:	e7da      	b.n	8015182 <scalbnf+0x1e>
 80151cc:	0ddb      	lsrs	r3, r3, #23
 80151ce:	e7ec      	b.n	80151aa <scalbnf+0x46>
 80151d0:	2b00      	cmp	r3, #0
 80151d2:	dd06      	ble.n	80151e2 <scalbnf+0x7e>
 80151d4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80151d8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80151dc:	ee00 3a90 	vmov	s1, r3
 80151e0:	e7cf      	b.n	8015182 <scalbnf+0x1e>
 80151e2:	f113 0f16 	cmn.w	r3, #22
 80151e6:	da06      	bge.n	80151f6 <scalbnf+0x92>
 80151e8:	f24c 3350 	movw	r3, #50000	; 0xc350
 80151ec:	4298      	cmp	r0, r3
 80151ee:	dcdf      	bgt.n	80151b0 <scalbnf+0x4c>
 80151f0:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 801521c <scalbnf+0xb8>
 80151f4:	e7de      	b.n	80151b4 <scalbnf+0x50>
 80151f6:	3319      	adds	r3, #25
 80151f8:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80151fc:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8015200:	eddf 7a07 	vldr	s15, [pc, #28]	; 8015220 <scalbnf+0xbc>
 8015204:	ee07 3a10 	vmov	s14, r3
 8015208:	ee67 0a27 	vmul.f32	s1, s14, s15
 801520c:	e7b9      	b.n	8015182 <scalbnf+0x1e>
 801520e:	bf00      	nop
 8015210:	ffff3cb0 	.word	0xffff3cb0
 8015214:	4c000000 	.word	0x4c000000
 8015218:	7149f2ca 	.word	0x7149f2ca
 801521c:	0da24260 	.word	0x0da24260
 8015220:	33000000 	.word	0x33000000

08015224 <copysignf>:
 8015224:	ee10 3a10 	vmov	r3, s0
 8015228:	ee10 2a90 	vmov	r2, s1
 801522c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015230:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8015234:	4313      	orrs	r3, r2
 8015236:	ee00 3a10 	vmov	s0, r3
 801523a:	4770      	bx	lr

0801523c <_init>:
 801523c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801523e:	bf00      	nop
 8015240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015242:	bc08      	pop	{r3}
 8015244:	469e      	mov	lr, r3
 8015246:	4770      	bx	lr

08015248 <_fini>:
 8015248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801524a:	bf00      	nop
 801524c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801524e:	bc08      	pop	{r3}
 8015250:	469e      	mov	lr, r3
 8015252:	4770      	bx	lr
